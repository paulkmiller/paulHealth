import "./chunk-6A2TAOKG.js";
import {
  writable
} from "./chunk-E6ZP6LG5.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_location,
  append_hydration_dev,
  append_styles,
  attr_dev,
  children,
  claim_element,
  claim_space,
  component_subscribe,
  createEventDispatcher,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  getContext,
  get_all_dirty_from_scope,
  get_slot_changes,
  globals,
  init,
  insert_hydration_dev,
  is_function,
  listen_dev,
  onDestroy,
  run_all,
  safe_not_equal,
  setContext,
  space,
  toggle_class,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-RVLVW3YK.js";
import "./chunk-UXIASGQL.js";

// node_modules/svelte-collapse/src/collapse.js
function collapse(node, params) {
  const defaultParams = {
    open: true,
    duration: 0.2,
    easing: "ease"
  };
  params = Object.assign(defaultParams, params);
  const noop = () => {
  };
  let transitionEndResolve = noop;
  let transitionEndReject = noop;
  const listener = node.addEventListener("transitionend", () => {
    transitionEndResolve();
    transitionEndResolve = noop;
    transitionEndReject = noop;
  });
  async function asyncTransitionEnd() {
    return new Promise((resolve, reject) => {
      transitionEndResolve = resolve;
      transitionEndReject = reject;
    });
  }
  async function nextFrame() {
    return new Promise(requestAnimationFrame);
  }
  function transition() {
    return `height ${params.duration}s ${params.easing}`;
  }
  node.style.transition = transition();
  node.style.height = params.open ? "auto" : "0px";
  if (params.open) {
    node.style.overflow = "visible";
  } else {
    node.style.overflow = "hidden";
  }
  async function enter() {
    node.style.height = node.scrollHeight + "px";
    try {
      await asyncTransitionEnd();
      node.style.height = "auto";
      node.style.overflow = "visible";
    } catch (err) {
    }
  }
  async function leave() {
    if (node.style.height === "auto") {
      node.style.transition = "none";
      await nextFrame();
      node.style.height = node.scrollHeight + "px";
      node.style.transition = transition();
      await nextFrame();
      node.style.overflow = "hidden";
      node.style.height = "0px";
    } else {
      transitionEndReject();
      node.style.overflow = "hidden";
      node.style.height = "0px";
    }
  }
  function update(newParams) {
    params = Object.assign(params, newParams);
    params.open ? enter() : leave();
  }
  function destroy() {
    node.removeEventListener("transitionend", listener);
  }
  return { update, destroy };
}

// node_modules/svelte-collapsible/src/components/CollapsibleCard.svelte
var file = "node_modules/svelte-collapsible/src/components/CollapsibleCard.svelte";
function add_css(target) {
  append_styles(target, "svelte-1qzvelt", ".card-header.svelte-1qzvelt{cursor:pointer;user-select:none}button.svelte-1qzvelt{background:transparent;border:none !important}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sbGFwc2libGVDYXJkLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUF3Q0ksMkJBQWEsQ0FDVCxNQUFNLENBQUUsT0FBTyxDQUNmLFdBQVcsQ0FBRSxJQUNqQixDQUNBLHFCQUFPLENBQ0gsVUFBVSxDQUFFLFdBQVcsQ0FDdkIsTUFBTSxDQUFFLElBQUksQ0FBQyxVQUNqQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDb2xsYXBzaWJsZUNhcmQuc3ZlbHRlIl19 */");
}
var get_body_slot_changes = (dirty) => ({});
var get_body_slot_context = (ctx) => ({});
var get_header_slot_changes = (dirty) => ({});
var get_header_slot_context = (ctx) => ({});
function create_fragment(ctx) {
  let div1;
  let button;
  let t;
  let div0;
  let collapse_action;
  let current;
  let mounted;
  let dispose;
  const header_slot_template = (
    /*#slots*/
    ctx[5].header
  );
  const header_slot = create_slot(
    header_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    get_header_slot_context
  );
  const body_slot_template = (
    /*#slots*/
    ctx[5].body
  );
  const body_slot = create_slot(
    body_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    get_body_slot_context
  );
  const block = {
    c: function create() {
      div1 = element("div");
      button = element("button");
      if (header_slot)
        header_slot.c();
      t = space();
      div0 = element("div");
      if (body_slot)
        body_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true, "aria-expanded": true });
      var div1_nodes = children(div1);
      button = claim_element(div1_nodes, "BUTTON", { type: true, class: true });
      var button_nodes = children(button);
      if (header_slot)
        header_slot.l(button_nodes);
      button_nodes.forEach(detach_dev);
      t = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      if (body_slot)
        body_slot.l(div0_nodes);
      div0_nodes.forEach(detach_dev);
      div1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(button, "type", "button");
      attr_dev(button, "class", "card-header svelte-1qzvelt");
      add_location(button, file, 29, 4, 485);
      attr_dev(div0, "class", "card-body");
      add_location(div0, file, 33, 4, 601);
      attr_dev(div1, "class", "card");
      attr_dev(
        div1,
        "aria-expanded",
        /*open*/
        ctx[0]
      );
      toggle_class(
        div1,
        "open",
        /*open*/
        ctx[0]
      );
      add_location(div1, file, 27, 0, 429);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div1, anchor);
      append_hydration_dev(div1, button);
      if (header_slot) {
        header_slot.m(button, null);
      }
      append_hydration_dev(div1, t);
      append_hydration_dev(div1, div0);
      if (body_slot) {
        body_slot.m(div0, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(
            button,
            "click",
            /*handleToggle*/
            ctx[3],
            false,
            false,
            false,
            false
          ),
          action_destroyer(collapse_action = collapse.call(null, div0, {
            open: (
              /*open*/
              ctx[0]
            ),
            duration: (
              /*duration*/
              ctx[1]
            ),
            easing: (
              /*easing*/
              ctx[2]
            )
          }))
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (header_slot) {
        if (header_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            header_slot,
            header_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              header_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              get_header_slot_changes
            ),
            get_header_slot_context
          );
        }
      }
      if (body_slot) {
        if (body_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            body_slot,
            body_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              body_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              get_body_slot_changes
            ),
            get_body_slot_context
          );
        }
      }
      if (collapse_action && is_function(collapse_action.update) && dirty & /*open, duration, easing*/
      7)
        collapse_action.update.call(null, {
          open: (
            /*open*/
            ctx2[0]
          ),
          duration: (
            /*duration*/
            ctx2[1]
          ),
          easing: (
            /*easing*/
            ctx2[2]
          )
        });
      if (!current || dirty & /*open*/
      1) {
        attr_dev(
          div1,
          "aria-expanded",
          /*open*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*open*/
      1) {
        toggle_class(
          div1,
          "open",
          /*open*/
          ctx2[0]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(header_slot, local);
      transition_in(body_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(header_slot, local);
      transition_out(body_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div1);
      if (header_slot)
        header_slot.d(detaching);
      if (body_slot)
        body_slot.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("CollapsibleCard", slots, ["header", "body"]);
  let { open = true } = $$props;
  let { duration = 0.2 } = $$props;
  let { easing = "ease" } = $$props;
  const dispatch = createEventDispatcher();
  function handleToggle() {
    $$invalidate(0, open = !open);
    if (open) {
      dispatch("open");
    } else {
      dispatch("close");
    }
  }
  const writable_props = ["open", "duration", "easing"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<CollapsibleCard> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("open" in $$props2)
      $$invalidate(0, open = $$props2.open);
    if ("duration" in $$props2)
      $$invalidate(1, duration = $$props2.duration);
    if ("easing" in $$props2)
      $$invalidate(2, easing = $$props2.easing);
    if ("$$scope" in $$props2)
      $$invalidate(4, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    createEventDispatcher,
    collapse,
    open,
    duration,
    easing,
    dispatch,
    handleToggle
  });
  $$self.$inject_state = ($$props2) => {
    if ("open" in $$props2)
      $$invalidate(0, open = $$props2.open);
    if ("duration" in $$props2)
      $$invalidate(1, duration = $$props2.duration);
    if ("easing" in $$props2)
      $$invalidate(2, easing = $$props2.easing);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [open, duration, easing, handleToggle, $$scope, slots];
}
var CollapsibleCard = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { open: 0, duration: 1, easing: 2 }, add_css);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "CollapsibleCard",
      options,
      id: create_fragment.name
    });
  }
  get open() {
    throw new Error("<CollapsibleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set open(value) {
    throw new Error("<CollapsibleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get duration() {
    throw new Error("<CollapsibleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set duration(value) {
    throw new Error("<CollapsibleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get easing() {
    throw new Error("<CollapsibleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set easing(value) {
    throw new Error("<CollapsibleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var CollapsibleCard_default = CollapsibleCard;

// node_modules/svelte-collapsible/src/components/Accordion.svelte
var { Object: Object_1 } = globals;
var file2 = "node_modules/svelte-collapsible/src/components/Accordion.svelte";
function add_css2(target) {
  append_styles(target, "svelte-da9j5z", "ul.svelte-da9j5z{list-style:none;padding-left:0}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWNjb3JkaW9uLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUF3Q0ksZ0JBQUcsQ0FDQyxVQUFVLENBQUUsSUFBSSxDQUNoQixZQUFZLENBQUUsQ0FDbEIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQWNjb3JkaW9uLnN2ZWx0ZSJdfQ== */");
}
function create_fragment2(ctx) {
  let ul;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    null
  );
  const block = {
    c: function create() {
      ul = element("ul");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      ul = claim_element(nodes, "UL", { class: true });
      var ul_nodes = children(ul);
      if (default_slot)
        default_slot.l(ul_nodes);
      ul_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(ul, "class", "accordion svelte-da9j5z");
      add_location(ul, file2, 34, 0, 829);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, ul, anchor);
      if (default_slot) {
        default_slot.m(ul, null);
      }
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(ul);
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance2($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Accordion", slots, ["default"]);
  let { duration = 0.2 } = $$props;
  let { easing = "ease" } = $$props;
  let { key = null } = $$props;
  const dispatch = createEventDispatcher();
  const store = writable({ key, duration, easing });
  const unsubscribe = store.subscribe((s) => {
    $$invalidate(0, key = s.key);
    dispatch("change", { key });
  });
  setContext("svelte-collapsible-accordion", store);
  onDestroy(unsubscribe);
  const writable_props = ["duration", "easing", "key"];
  Object_1.keys($$props).forEach((key2) => {
    if (!~writable_props.indexOf(key2) && key2.slice(0, 2) !== "$$" && key2 !== "slot")
      console.warn(`<Accordion> was created with unknown prop '${key2}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("duration" in $$props2)
      $$invalidate(1, duration = $$props2.duration);
    if ("easing" in $$props2)
      $$invalidate(2, easing = $$props2.easing);
    if ("key" in $$props2)
      $$invalidate(0, key = $$props2.key);
    if ("$$scope" in $$props2)
      $$invalidate(3, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    onDestroy,
    setContext,
    createEventDispatcher,
    writable,
    duration,
    easing,
    key,
    dispatch,
    store,
    unsubscribe
  });
  $$self.$inject_state = ($$props2) => {
    if ("duration" in $$props2)
      $$invalidate(1, duration = $$props2.duration);
    if ("easing" in $$props2)
      $$invalidate(2, easing = $$props2.easing);
    if ("key" in $$props2)
      $$invalidate(0, key = $$props2.key);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*key*/
    1) {
      $:
        store.update((s) => Object.assign(s, { key }));
    }
  };
  return [key, duration, easing, $$scope, slots];
}
var Accordion = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance2, create_fragment2, safe_not_equal, { duration: 1, easing: 2, key: 0 }, add_css2);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Accordion",
      options,
      id: create_fragment2.name
    });
  }
  get duration() {
    throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set duration(value) {
    throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get easing() {
    throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set easing(value) {
    throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get key() {
    throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set key(value) {
    throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Accordion_default = Accordion;

// node_modules/svelte-collapsible/src/components/AccordionItem.svelte
var { Object: Object_12 } = globals;
var file3 = "node_modules/svelte-collapsible/src/components/AccordionItem.svelte";
function add_css3(target) {
  append_styles(target, "svelte-c582kf", ".accordion-item-header.svelte-c582kf{user-select:none;cursor:pointer}button.svelte-c582kf{background:transparent;border:none !important}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWNjb3JkaW9uSXRlbS5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBNkNJLG9DQUF1QixDQUNuQixXQUFXLENBQUUsSUFBSSxDQUNqQixNQUFNLENBQUUsT0FDWixDQUNBLG9CQUFPLENBQ0gsVUFBVSxDQUFFLFdBQVcsQ0FDdkIsTUFBTSxDQUFFLElBQUksQ0FBQyxVQUNqQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJBY2NvcmRpb25JdGVtLnN2ZWx0ZSJdfQ== */");
}
var get_body_slot_changes2 = (dirty) => ({});
var get_body_slot_context2 = (ctx) => ({});
var get_header_slot_changes2 = (dirty) => ({});
var get_header_slot_context2 = (ctx) => ({});
function create_fragment3(ctx) {
  let li;
  let button;
  let t0;
  let div;
  let collapse_action;
  let t1;
  let li_aria_expanded_value;
  let current;
  let mounted;
  let dispose;
  const header_slot_template = (
    /*#slots*/
    ctx[6].header
  );
  const header_slot = create_slot(
    header_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    get_header_slot_context2
  );
  const body_slot_template = (
    /*#slots*/
    ctx[6].body
  );
  const body_slot = create_slot(
    body_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    get_body_slot_context2
  );
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    null
  );
  const block = {
    c: function create() {
      li = element("li");
      button = element("button");
      if (header_slot)
        header_slot.c();
      t0 = space();
      div = element("div");
      if (body_slot)
        body_slot.c();
      t1 = space();
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      li = claim_element(nodes, "LI", { class: true, "aria-expanded": true });
      var li_nodes = children(li);
      button = claim_element(li_nodes, "BUTTON", { type: true, class: true });
      var button_nodes = children(button);
      if (header_slot)
        header_slot.l(button_nodes);
      button_nodes.forEach(detach_dev);
      t0 = claim_space(li_nodes);
      div = claim_element(li_nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (body_slot)
        body_slot.l(div_nodes);
      div_nodes.forEach(detach_dev);
      t1 = claim_space(li_nodes);
      if (default_slot)
        default_slot.l(li_nodes);
      li_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(button, "type", "button");
      attr_dev(button, "class", "accordion-item-header svelte-c582kf");
      add_location(button, file3, 32, 4, 598);
      attr_dev(div, "class", "accordion-item-body");
      add_location(div, file3, 36, 4, 725);
      attr_dev(li, "class", "accordion-item");
      attr_dev(li, "aria-expanded", li_aria_expanded_value = /*params*/
      ctx[0].open);
      add_location(li, file3, 30, 0, 537);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, li, anchor);
      append_hydration_dev(li, button);
      if (header_slot) {
        header_slot.m(button, null);
      }
      append_hydration_dev(li, t0);
      append_hydration_dev(li, div);
      if (body_slot) {
        body_slot.m(div, null);
      }
      append_hydration_dev(li, t1);
      if (default_slot) {
        default_slot.m(li, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(
            button,
            "click",
            /*handleToggle*/
            ctx[2],
            false,
            false,
            false,
            false
          ),
          action_destroyer(collapse_action = collapse.call(
            null,
            div,
            /*params*/
            ctx[0]
          ))
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (header_slot) {
        if (header_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            header_slot,
            header_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              header_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              get_header_slot_changes2
            ),
            get_header_slot_context2
          );
        }
      }
      if (body_slot) {
        if (body_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            body_slot,
            body_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              body_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              get_body_slot_changes2
            ),
            get_body_slot_context2
          );
        }
      }
      if (collapse_action && is_function(collapse_action.update) && dirty & /*params*/
      1)
        collapse_action.update.call(
          null,
          /*params*/
          ctx2[0]
        );
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*params*/
      1 && li_aria_expanded_value !== (li_aria_expanded_value = /*params*/
      ctx2[0].open)) {
        attr_dev(li, "aria-expanded", li_aria_expanded_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(header_slot, local);
      transition_in(body_slot, local);
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(header_slot, local);
      transition_out(body_slot, local);
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(li);
      if (header_slot)
        header_slot.d(detaching);
      if (body_slot)
        body_slot.d(detaching);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self, $$props, $$invalidate) {
  let params;
  let $store;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("AccordionItem", slots, ["header", "body", "default"]);
  let { key } = $$props;
  const store = getContext("svelte-collapsible-accordion");
  validate_store(store, "store");
  component_subscribe($$self, store, (value) => $$invalidate(4, $store = value));
  function handleToggle() {
    if (params.open) {
      store.update((s) => Object.assign(s, { key: null }));
    } else {
      store.update((s) => Object.assign(s, { key }));
    }
  }
  $$self.$$.on_mount.push(function() {
    if (key === void 0 && !("key" in $$props || $$self.$$.bound[$$self.$$.props["key"]])) {
      console.warn("<AccordionItem> was created without expected prop 'key'");
    }
  });
  const writable_props = ["key"];
  Object_12.keys($$props).forEach((key2) => {
    if (!~writable_props.indexOf(key2) && key2.slice(0, 2) !== "$$" && key2 !== "slot")
      console.warn(`<AccordionItem> was created with unknown prop '${key2}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("key" in $$props2)
      $$invalidate(3, key = $$props2.key);
    if ("$$scope" in $$props2)
      $$invalidate(5, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    getContext,
    collapse,
    key,
    store,
    handleToggle,
    params,
    $store
  });
  $$self.$inject_state = ($$props2) => {
    if ("key" in $$props2)
      $$invalidate(3, key = $$props2.key);
    if ("params" in $$props2)
      $$invalidate(0, params = $$props2.params);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$store, key*/
    24) {
      $:
        $$invalidate(0, params = {
          open: $store.key === key,
          duration: $store.duration,
          easing: $store.easing
        });
    }
  };
  return [params, store, handleToggle, key, $store, $$scope, slots];
}
var AccordionItem = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance3, create_fragment3, safe_not_equal, { key: 3 }, add_css3);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "AccordionItem",
      options,
      id: create_fragment3.name
    });
  }
  get key() {
    throw new Error("<AccordionItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set key(value) {
    throw new Error("<AccordionItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var AccordionItem_default = AccordionItem;
export {
  Accordion_default as Accordion,
  AccordionItem_default as AccordionItem,
  CollapsibleCard_default as CollapsibleCard
};
//# sourceMappingURL=svelte-collapsible.js.map
