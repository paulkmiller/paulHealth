var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key2 of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key2) && key2 !== except)
        __defProp(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/undici/lib/core/symbols.js
var require_symbols = __commonJS({
  "node_modules/undici/lib/core/symbols.js"(exports, module2) {
    module2.exports = {
      kClose: Symbol("close"),
      kDestroy: Symbol("destroy"),
      kDispatch: Symbol("dispatch"),
      kUrl: Symbol("url"),
      kWriting: Symbol("writing"),
      kResuming: Symbol("resuming"),
      kQueue: Symbol("queue"),
      kConnect: Symbol("connect"),
      kConnecting: Symbol("connecting"),
      kHeadersList: Symbol("headers list"),
      kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
      kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
      kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
      kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
      kKeepAlive: Symbol("keep alive"),
      kHeadersTimeout: Symbol("headers timeout"),
      kBodyTimeout: Symbol("body timeout"),
      kServerName: Symbol("server name"),
      kLocalAddress: Symbol("local address"),
      kHost: Symbol("host"),
      kNoRef: Symbol("no ref"),
      kBodyUsed: Symbol("used"),
      kRunning: Symbol("running"),
      kBlocking: Symbol("blocking"),
      kPending: Symbol("pending"),
      kSize: Symbol("size"),
      kBusy: Symbol("busy"),
      kQueued: Symbol("queued"),
      kFree: Symbol("free"),
      kConnected: Symbol("connected"),
      kClosed: Symbol("closed"),
      kNeedDrain: Symbol("need drain"),
      kReset: Symbol("reset"),
      kDestroyed: Symbol.for("nodejs.stream.destroyed"),
      kMaxHeadersSize: Symbol("max headers size"),
      kRunningIdx: Symbol("running index"),
      kPendingIdx: Symbol("pending index"),
      kError: Symbol("error"),
      kClients: Symbol("clients"),
      kClient: Symbol("client"),
      kParser: Symbol("parser"),
      kOnDestroyed: Symbol("destroy callbacks"),
      kPipelining: Symbol("pipelining"),
      kSocket: Symbol("socket"),
      kHostHeader: Symbol("host header"),
      kConnector: Symbol("connector"),
      kStrictContentLength: Symbol("strict content length"),
      kMaxRedirections: Symbol("maxRedirections"),
      kMaxRequests: Symbol("maxRequestsPerClient"),
      kProxy: Symbol("proxy agent options"),
      kCounter: Symbol("socket request counter"),
      kInterceptors: Symbol("dispatch interceptors"),
      kMaxResponseSize: Symbol("max response size"),
      kHTTP2Session: Symbol("http2Session"),
      kHTTP2SessionState: Symbol("http2Session state"),
      kHTTP2BuildRequest: Symbol("http2 build request"),
      kHTTP1BuildRequest: Symbol("http1 build request"),
      kHTTP2CopyHeaders: Symbol("http2 copy headers"),
      kHTTPConnVersion: Symbol("http connection version"),
      kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
      kConstruct: Symbol("constructable")
    };
  }
});

// node_modules/undici/lib/core/errors.js
var require_errors = __commonJS({
  "node_modules/undici/lib/core/errors.js"(exports, module2) {
    "use strict";
    var UndiciError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "UndiciError";
        this.code = "UND_ERR";
      }
    };
    var ConnectTimeoutError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, ConnectTimeoutError);
        this.name = "ConnectTimeoutError";
        this.message = message || "Connect Timeout Error";
        this.code = "UND_ERR_CONNECT_TIMEOUT";
      }
    };
    var HeadersTimeoutError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, HeadersTimeoutError);
        this.name = "HeadersTimeoutError";
        this.message = message || "Headers Timeout Error";
        this.code = "UND_ERR_HEADERS_TIMEOUT";
      }
    };
    var HeadersOverflowError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, HeadersOverflowError);
        this.name = "HeadersOverflowError";
        this.message = message || "Headers Overflow Error";
        this.code = "UND_ERR_HEADERS_OVERFLOW";
      }
    };
    var BodyTimeoutError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, BodyTimeoutError);
        this.name = "BodyTimeoutError";
        this.message = message || "Body Timeout Error";
        this.code = "UND_ERR_BODY_TIMEOUT";
      }
    };
    var ResponseStatusCodeError = class extends UndiciError {
      constructor(message, statusCode, headers, body) {
        super(message);
        Error.captureStackTrace(this, ResponseStatusCodeError);
        this.name = "ResponseStatusCodeError";
        this.message = message || "Response Status Code Error";
        this.code = "UND_ERR_RESPONSE_STATUS_CODE";
        this.body = body;
        this.status = statusCode;
        this.statusCode = statusCode;
        this.headers = headers;
      }
    };
    var InvalidArgumentError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, InvalidArgumentError);
        this.name = "InvalidArgumentError";
        this.message = message || "Invalid Argument Error";
        this.code = "UND_ERR_INVALID_ARG";
      }
    };
    var InvalidReturnValueError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, InvalidReturnValueError);
        this.name = "InvalidReturnValueError";
        this.message = message || "Invalid Return Value Error";
        this.code = "UND_ERR_INVALID_RETURN_VALUE";
      }
    };
    var RequestAbortedError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, RequestAbortedError);
        this.name = "AbortError";
        this.message = message || "Request aborted";
        this.code = "UND_ERR_ABORTED";
      }
    };
    var InformationalError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, InformationalError);
        this.name = "InformationalError";
        this.message = message || "Request information";
        this.code = "UND_ERR_INFO";
      }
    };
    var RequestContentLengthMismatchError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, RequestContentLengthMismatchError);
        this.name = "RequestContentLengthMismatchError";
        this.message = message || "Request body length does not match content-length header";
        this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
      }
    };
    var ResponseContentLengthMismatchError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, ResponseContentLengthMismatchError);
        this.name = "ResponseContentLengthMismatchError";
        this.message = message || "Response body length does not match content-length header";
        this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
      }
    };
    var ClientDestroyedError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, ClientDestroyedError);
        this.name = "ClientDestroyedError";
        this.message = message || "The client is destroyed";
        this.code = "UND_ERR_DESTROYED";
      }
    };
    var ClientClosedError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, ClientClosedError);
        this.name = "ClientClosedError";
        this.message = message || "The client is closed";
        this.code = "UND_ERR_CLOSED";
      }
    };
    var SocketError = class extends UndiciError {
      constructor(message, socket) {
        super(message);
        Error.captureStackTrace(this, SocketError);
        this.name = "SocketError";
        this.message = message || "Socket error";
        this.code = "UND_ERR_SOCKET";
        this.socket = socket;
      }
    };
    var NotSupportedError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, NotSupportedError);
        this.name = "NotSupportedError";
        this.message = message || "Not supported error";
        this.code = "UND_ERR_NOT_SUPPORTED";
      }
    };
    var BalancedPoolMissingUpstreamError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, NotSupportedError);
        this.name = "MissingUpstreamError";
        this.message = message || "No upstream has been added to the BalancedPool";
        this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
      }
    };
    var HTTPParserError = class extends Error {
      constructor(message, code, data) {
        super(message);
        Error.captureStackTrace(this, HTTPParserError);
        this.name = "HTTPParserError";
        this.code = code ? `HPE_${code}` : void 0;
        this.data = data ? data.toString() : void 0;
      }
    };
    var ResponseExceededMaxSizeError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, ResponseExceededMaxSizeError);
        this.name = "ResponseExceededMaxSizeError";
        this.message = message || "Response content exceeded max size";
        this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
      }
    };
    var RequestRetryError = class extends UndiciError {
      constructor(message, code, { headers, data }) {
        super(message);
        Error.captureStackTrace(this, RequestRetryError);
        this.name = "RequestRetryError";
        this.message = message || "Request retry error";
        this.code = "UND_ERR_REQ_RETRY";
        this.statusCode = code;
        this.data = data;
        this.headers = headers;
      }
    };
    module2.exports = {
      HTTPParserError,
      UndiciError,
      HeadersTimeoutError,
      HeadersOverflowError,
      BodyTimeoutError,
      RequestContentLengthMismatchError,
      ConnectTimeoutError,
      ResponseStatusCodeError,
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError,
      ClientDestroyedError,
      ClientClosedError,
      InformationalError,
      SocketError,
      NotSupportedError,
      ResponseContentLengthMismatchError,
      BalancedPoolMissingUpstreamError,
      ResponseExceededMaxSizeError,
      RequestRetryError
    };
  }
});

// node_modules/undici/lib/core/util.js
var require_util = __commonJS({
  "node_modules/undici/lib/core/util.js"(exports, module2) {
    "use strict";
    var assert = require("assert");
    var { kDestroyed, kBodyUsed } = require_symbols();
    var { IncomingMessage } = require("http");
    var stream = require("stream");
    var net = require("net");
    var { InvalidArgumentError } = require_errors();
    var { Blob: Blob2 } = require("buffer");
    var nodeUtil = require("util");
    var { stringify: stringify2 } = require("querystring");
    var [nodeMajor, nodeMinor] = process.versions.node.split(".").map((v) => Number(v));
    function nop() {
    }
    function isStream(obj) {
      return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
    }
    function isBlobLike(object) {
      return Blob2 && object instanceof Blob2 || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
    }
    function buildURL(url, queryParams) {
      if (url.includes("?") || url.includes("#")) {
        throw new Error('Query params cannot be passed when url already contains "?" or "#".');
      }
      const stringified = stringify2(queryParams);
      if (stringified) {
        url += "?" + stringified;
      }
      return url;
    }
    function parseURL(url) {
      if (typeof url === "string") {
        url = new URL(url);
        if (!/^https?:/.test(url.origin || url.protocol)) {
          throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
        }
        return url;
      }
      if (!url || typeof url !== "object") {
        throw new InvalidArgumentError("Invalid URL: The URL argument must be a non-null object.");
      }
      if (!/^https?:/.test(url.origin || url.protocol)) {
        throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
      }
      if (!(url instanceof URL)) {
        if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) {
          throw new InvalidArgumentError("Invalid URL: port must be a valid integer or a string representation of an integer.");
        }
        if (url.path != null && typeof url.path !== "string") {
          throw new InvalidArgumentError("Invalid URL path: the path must be a string or null/undefined.");
        }
        if (url.pathname != null && typeof url.pathname !== "string") {
          throw new InvalidArgumentError("Invalid URL pathname: the pathname must be a string or null/undefined.");
        }
        if (url.hostname != null && typeof url.hostname !== "string") {
          throw new InvalidArgumentError("Invalid URL hostname: the hostname must be a string or null/undefined.");
        }
        if (url.origin != null && typeof url.origin !== "string") {
          throw new InvalidArgumentError("Invalid URL origin: the origin must be a string or null/undefined.");
        }
        const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
        let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;
        let path2 = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
        if (origin.endsWith("/")) {
          origin = origin.substring(0, origin.length - 1);
        }
        if (path2 && !path2.startsWith("/")) {
          path2 = `/${path2}`;
        }
        url = new URL(origin + path2);
      }
      return url;
    }
    function parseOrigin(url) {
      url = parseURL(url);
      if (url.pathname !== "/" || url.search || url.hash) {
        throw new InvalidArgumentError("invalid url");
      }
      return url;
    }
    function getHostname(host) {
      if (host[0] === "[") {
        const idx2 = host.indexOf("]");
        assert(idx2 !== -1);
        return host.substring(1, idx2);
      }
      const idx = host.indexOf(":");
      if (idx === -1)
        return host;
      return host.substring(0, idx);
    }
    function getServerName(host) {
      if (!host) {
        return null;
      }
      assert.strictEqual(typeof host, "string");
      const servername = getHostname(host);
      if (net.isIP(servername)) {
        return "";
      }
      return servername;
    }
    function deepClone(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    function isAsyncIterable(obj) {
      return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
    }
    function isIterable(obj) {
      return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
    }
    function bodyLength(body) {
      if (body == null) {
        return 0;
      } else if (isStream(body)) {
        const state = body._readableState;
        return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
      } else if (isBlobLike(body)) {
        return body.size != null ? body.size : null;
      } else if (isBuffer(body)) {
        return body.byteLength;
      }
      return null;
    }
    function isDestroyed(stream2) {
      return !stream2 || !!(stream2.destroyed || stream2[kDestroyed]);
    }
    function isReadableAborted(stream2) {
      const state = stream2 && stream2._readableState;
      return isDestroyed(stream2) && state && !state.endEmitted;
    }
    function destroy(stream2, err) {
      if (stream2 == null || !isStream(stream2) || isDestroyed(stream2)) {
        return;
      }
      if (typeof stream2.destroy === "function") {
        if (Object.getPrototypeOf(stream2).constructor === IncomingMessage) {
          stream2.socket = null;
        }
        stream2.destroy(err);
      } else if (err) {
        process.nextTick((stream3, err2) => {
          stream3.emit("error", err2);
        }, stream2, err);
      }
      if (stream2.destroyed !== true) {
        stream2[kDestroyed] = true;
      }
    }
    var KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
    function parseKeepAliveTimeout(val) {
      const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
      return m ? parseInt(m[1], 10) * 1e3 : null;
    }
    function parseHeaders(headers, obj = {}) {
      if (!Array.isArray(headers))
        return headers;
      for (let i = 0; i < headers.length; i += 2) {
        const key2 = headers[i].toString().toLowerCase();
        let val = obj[key2];
        if (!val) {
          if (Array.isArray(headers[i + 1])) {
            obj[key2] = headers[i + 1].map((x) => x.toString("utf8"));
          } else {
            obj[key2] = headers[i + 1].toString("utf8");
          }
        } else {
          if (!Array.isArray(val)) {
            val = [val];
            obj[key2] = val;
          }
          val.push(headers[i + 1].toString("utf8"));
        }
      }
      if ("content-length" in obj && "content-disposition" in obj) {
        obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
      }
      return obj;
    }
    function parseRawHeaders(headers) {
      const ret = [];
      let hasContentLength = false;
      let contentDispositionIdx = -1;
      for (let n = 0; n < headers.length; n += 2) {
        const key2 = headers[n + 0].toString();
        const val = headers[n + 1].toString("utf8");
        if (key2.length === 14 && (key2 === "content-length" || key2.toLowerCase() === "content-length")) {
          ret.push(key2, val);
          hasContentLength = true;
        } else if (key2.length === 19 && (key2 === "content-disposition" || key2.toLowerCase() === "content-disposition")) {
          contentDispositionIdx = ret.push(key2, val) - 1;
        } else {
          ret.push(key2, val);
        }
      }
      if (hasContentLength && contentDispositionIdx !== -1) {
        ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
      }
      return ret;
    }
    function isBuffer(buffer2) {
      return buffer2 instanceof Uint8Array || Buffer.isBuffer(buffer2);
    }
    function validateHandler(handler, method, upgrade) {
      if (!handler || typeof handler !== "object") {
        throw new InvalidArgumentError("handler must be an object");
      }
      if (typeof handler.onConnect !== "function") {
        throw new InvalidArgumentError("invalid onConnect method");
      }
      if (typeof handler.onError !== "function") {
        throw new InvalidArgumentError("invalid onError method");
      }
      if (typeof handler.onBodySent !== "function" && handler.onBodySent !== void 0) {
        throw new InvalidArgumentError("invalid onBodySent method");
      }
      if (upgrade || method === "CONNECT") {
        if (typeof handler.onUpgrade !== "function") {
          throw new InvalidArgumentError("invalid onUpgrade method");
        }
      } else {
        if (typeof handler.onHeaders !== "function") {
          throw new InvalidArgumentError("invalid onHeaders method");
        }
        if (typeof handler.onData !== "function") {
          throw new InvalidArgumentError("invalid onData method");
        }
        if (typeof handler.onComplete !== "function") {
          throw new InvalidArgumentError("invalid onComplete method");
        }
      }
    }
    function isDisturbed(body) {
      return !!(body && (stream.isDisturbed ? stream.isDisturbed(body) || body[kBodyUsed] : body[kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
    }
    function isErrored(body) {
      return !!(body && (stream.isErrored ? stream.isErrored(body) : /state: 'errored'/.test(
        nodeUtil.inspect(body)
      )));
    }
    function isReadable(body) {
      return !!(body && (stream.isReadable ? stream.isReadable(body) : /state: 'readable'/.test(
        nodeUtil.inspect(body)
      )));
    }
    function getSocketInfo(socket) {
      return {
        localAddress: socket.localAddress,
        localPort: socket.localPort,
        remoteAddress: socket.remoteAddress,
        remotePort: socket.remotePort,
        remoteFamily: socket.remoteFamily,
        timeout: socket.timeout,
        bytesWritten: socket.bytesWritten,
        bytesRead: socket.bytesRead
      };
    }
    async function* convertIterableToBuffer(iterable) {
      for await (const chunk of iterable) {
        yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
      }
    }
    var ReadableStream3;
    function ReadableStreamFrom(iterable) {
      if (!ReadableStream3) {
        ReadableStream3 = require("stream/web").ReadableStream;
      }
      if (ReadableStream3.from) {
        return ReadableStream3.from(convertIterableToBuffer(iterable));
      }
      let iterator;
      return new ReadableStream3(
        {
          async start() {
            iterator = iterable[Symbol.asyncIterator]();
          },
          async pull(controller) {
            const { done, value } = await iterator.next();
            if (done) {
              queueMicrotask(() => {
                controller.close();
              });
            } else {
              const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
              controller.enqueue(new Uint8Array(buf));
            }
            return controller.desiredSize > 0;
          },
          async cancel(reason) {
            await iterator.return();
          }
        },
        0
      );
    }
    function isFormDataLike(object) {
      return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
    }
    function throwIfAborted(signal) {
      if (!signal) {
        return;
      }
      if (typeof signal.throwIfAborted === "function") {
        signal.throwIfAborted();
      } else {
        if (signal.aborted) {
          const err = new Error("The operation was aborted");
          err.name = "AbortError";
          throw err;
        }
      }
    }
    function addAbortListener(signal, listener) {
      if ("addEventListener" in signal) {
        signal.addEventListener("abort", listener, { once: true });
        return () => signal.removeEventListener("abort", listener);
      }
      signal.addListener("abort", listener);
      return () => signal.removeListener("abort", listener);
    }
    var hasToWellFormed = !!String.prototype.toWellFormed;
    function toUSVString(val) {
      if (hasToWellFormed) {
        return `${val}`.toWellFormed();
      } else if (nodeUtil.toUSVString) {
        return nodeUtil.toUSVString(val);
      }
      return `${val}`;
    }
    function parseRangeHeader(range) {
      if (range == null || range === "")
        return { start: 0, end: null, size: null };
      const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
      return m ? {
        start: parseInt(m[1]),
        end: m[2] ? parseInt(m[2]) : null,
        size: m[3] ? parseInt(m[3]) : null
      } : null;
    }
    var kEnumerableProperty = /* @__PURE__ */ Object.create(null);
    kEnumerableProperty.enumerable = true;
    module2.exports = {
      kEnumerableProperty,
      nop,
      isDisturbed,
      isErrored,
      isReadable,
      toUSVString,
      isReadableAborted,
      isBlobLike,
      parseOrigin,
      parseURL,
      getServerName,
      isStream,
      isIterable,
      isAsyncIterable,
      isDestroyed,
      parseRawHeaders,
      parseHeaders,
      parseKeepAliveTimeout,
      destroy,
      bodyLength,
      deepClone,
      ReadableStreamFrom,
      isBuffer,
      validateHandler,
      getSocketInfo,
      isFormDataLike,
      buildURL,
      throwIfAborted,
      addAbortListener,
      parseRangeHeader,
      nodeMajor,
      nodeMinor,
      nodeHasAutoSelectFamily: nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 13,
      safeHTTPMethods: ["GET", "HEAD", "OPTIONS", "TRACE"]
    };
  }
});

// node_modules/undici/lib/timers.js
var require_timers = __commonJS({
  "node_modules/undici/lib/timers.js"(exports, module2) {
    "use strict";
    var fastNow = Date.now();
    var fastNowTimeout;
    var fastTimers = [];
    function onTimeout() {
      fastNow = Date.now();
      let len = fastTimers.length;
      let idx = 0;
      while (idx < len) {
        const timer = fastTimers[idx];
        if (timer.state === 0) {
          timer.state = fastNow + timer.delay;
        } else if (timer.state > 0 && fastNow >= timer.state) {
          timer.state = -1;
          timer.callback(timer.opaque);
        }
        if (timer.state === -1) {
          timer.state = -2;
          if (idx !== len - 1) {
            fastTimers[idx] = fastTimers.pop();
          } else {
            fastTimers.pop();
          }
          len -= 1;
        } else {
          idx += 1;
        }
      }
      if (fastTimers.length > 0) {
        refreshTimeout();
      }
    }
    function refreshTimeout() {
      if (fastNowTimeout && fastNowTimeout.refresh) {
        fastNowTimeout.refresh();
      } else {
        clearTimeout(fastNowTimeout);
        fastNowTimeout = setTimeout(onTimeout, 1e3);
        if (fastNowTimeout.unref) {
          fastNowTimeout.unref();
        }
      }
    }
    var Timeout = class {
      constructor(callback, delay, opaque) {
        this.callback = callback;
        this.delay = delay;
        this.opaque = opaque;
        this.state = -2;
        this.refresh();
      }
      refresh() {
        if (this.state === -2) {
          fastTimers.push(this);
          if (!fastNowTimeout || fastTimers.length === 1) {
            refreshTimeout();
          }
        }
        this.state = 0;
      }
      clear() {
        this.state = -1;
      }
    };
    module2.exports = {
      setTimeout(callback, delay, opaque) {
        return delay < 1e3 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque);
      },
      clearTimeout(timeout) {
        if (timeout instanceof Timeout) {
          timeout.clear();
        } else {
          clearTimeout(timeout);
        }
      }
    };
  }
});

// node_modules/@fastify/busboy/deps/streamsearch/sbmh.js
var require_sbmh = __commonJS({
  "node_modules/@fastify/busboy/deps/streamsearch/sbmh.js"(exports, module2) {
    "use strict";
    var EventEmitter = require("node:events").EventEmitter;
    var inherits = require("node:util").inherits;
    function SBMH(needle) {
      if (typeof needle === "string") {
        needle = Buffer.from(needle);
      }
      if (!Buffer.isBuffer(needle)) {
        throw new TypeError("The needle has to be a String or a Buffer.");
      }
      const needleLength = needle.length;
      if (needleLength === 0) {
        throw new Error("The needle cannot be an empty String/Buffer.");
      }
      if (needleLength > 256) {
        throw new Error("The needle cannot have a length bigger than 256.");
      }
      this.maxMatches = Infinity;
      this.matches = 0;
      this._occ = new Array(256).fill(needleLength);
      this._lookbehind_size = 0;
      this._needle = needle;
      this._bufpos = 0;
      this._lookbehind = Buffer.alloc(needleLength);
      for (var i = 0; i < needleLength - 1; ++i) {
        this._occ[needle[i]] = needleLength - 1 - i;
      }
    }
    inherits(SBMH, EventEmitter);
    SBMH.prototype.reset = function() {
      this._lookbehind_size = 0;
      this.matches = 0;
      this._bufpos = 0;
    };
    SBMH.prototype.push = function(chunk, pos) {
      if (!Buffer.isBuffer(chunk)) {
        chunk = Buffer.from(chunk, "binary");
      }
      const chlen = chunk.length;
      this._bufpos = pos || 0;
      let r;
      while (r !== chlen && this.matches < this.maxMatches) {
        r = this._sbmh_feed(chunk);
      }
      return r;
    };
    SBMH.prototype._sbmh_feed = function(data) {
      const len = data.length;
      const needle = this._needle;
      const needleLength = needle.length;
      const lastNeedleChar = needle[needleLength - 1];
      let pos = -this._lookbehind_size;
      let ch;
      if (pos < 0) {
        while (pos < 0 && pos <= len - needleLength) {
          ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
          if (ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) {
            this._lookbehind_size = 0;
            ++this.matches;
            this.emit("info", true);
            return this._bufpos = pos + needleLength;
          }
          pos += this._occ[ch];
        }
        if (pos < 0) {
          while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) {
            ++pos;
          }
        }
        if (pos >= 0) {
          this.emit("info", false, this._lookbehind, 0, this._lookbehind_size);
          this._lookbehind_size = 0;
        } else {
          const bytesToCutOff = this._lookbehind_size + pos;
          if (bytesToCutOff > 0) {
            this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
          }
          this._lookbehind.copy(
            this._lookbehind,
            0,
            bytesToCutOff,
            this._lookbehind_size - bytesToCutOff
          );
          this._lookbehind_size -= bytesToCutOff;
          data.copy(this._lookbehind, this._lookbehind_size);
          this._lookbehind_size += len;
          this._bufpos = len;
          return len;
        }
      }
      pos += (pos >= 0) * this._bufpos;
      if (data.indexOf(needle, pos) !== -1) {
        pos = data.indexOf(needle, pos);
        ++this.matches;
        if (pos > 0) {
          this.emit("info", true, data, this._bufpos, pos);
        } else {
          this.emit("info", true);
        }
        return this._bufpos = pos + needleLength;
      } else {
        pos = len - needleLength;
      }
      while (pos < len && (data[pos] !== needle[0] || Buffer.compare(
        data.subarray(pos, pos + len - pos),
        needle.subarray(0, len - pos)
      ) !== 0)) {
        ++pos;
      }
      if (pos < len) {
        data.copy(this._lookbehind, 0, pos, pos + (len - pos));
        this._lookbehind_size = len - pos;
      }
      if (pos > 0) {
        this.emit("info", false, data, this._bufpos, pos < len ? pos : len);
      }
      this._bufpos = len;
      return len;
    };
    SBMH.prototype._sbmh_lookup_char = function(data, pos) {
      return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
    };
    SBMH.prototype._sbmh_memcmp = function(data, pos, len) {
      for (var i = 0; i < len; ++i) {
        if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) {
          return false;
        }
      }
      return true;
    };
    module2.exports = SBMH;
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js
var require_PartStream = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js"(exports, module2) {
    "use strict";
    var inherits = require("node:util").inherits;
    var ReadableStream3 = require("node:stream").Readable;
    function PartStream(opts) {
      ReadableStream3.call(this, opts);
    }
    inherits(PartStream, ReadableStream3);
    PartStream.prototype._read = function(n) {
    };
    module2.exports = PartStream;
  }
});

// node_modules/@fastify/busboy/lib/utils/getLimit.js
var require_getLimit = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/getLimit.js"(exports, module2) {
    "use strict";
    module2.exports = function getLimit(limits, name, defaultLimit) {
      if (!limits || limits[name] === void 0 || limits[name] === null) {
        return defaultLimit;
      }
      if (typeof limits[name] !== "number" || isNaN(limits[name])) {
        throw new TypeError("Limit " + name + " is not a valid number");
      }
      return limits[name];
    };
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js
var require_HeaderParser = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js"(exports, module2) {
    "use strict";
    var EventEmitter = require("node:events").EventEmitter;
    var inherits = require("node:util").inherits;
    var getLimit = require_getLimit();
    var StreamSearch = require_sbmh();
    var B_DCRLF = Buffer.from("\r\n\r\n");
    var RE_CRLF = /\r\n/g;
    var RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
    function HeaderParser(cfg) {
      EventEmitter.call(this);
      cfg = cfg || {};
      const self2 = this;
      this.nread = 0;
      this.maxed = false;
      this.npairs = 0;
      this.maxHeaderPairs = getLimit(cfg, "maxHeaderPairs", 2e3);
      this.maxHeaderSize = getLimit(cfg, "maxHeaderSize", 80 * 1024);
      this.buffer = "";
      this.header = {};
      this.finished = false;
      this.ss = new StreamSearch(B_DCRLF);
      this.ss.on("info", function(isMatch, data, start, end) {
        if (data && !self2.maxed) {
          if (self2.nread + end - start >= self2.maxHeaderSize) {
            end = self2.maxHeaderSize - self2.nread + start;
            self2.nread = self2.maxHeaderSize;
            self2.maxed = true;
          } else {
            self2.nread += end - start;
          }
          self2.buffer += data.toString("binary", start, end);
        }
        if (isMatch) {
          self2._finish();
        }
      });
    }
    inherits(HeaderParser, EventEmitter);
    HeaderParser.prototype.push = function(data) {
      const r = this.ss.push(data);
      if (this.finished) {
        return r;
      }
    };
    HeaderParser.prototype.reset = function() {
      this.finished = false;
      this.buffer = "";
      this.header = {};
      this.ss.reset();
    };
    HeaderParser.prototype._finish = function() {
      if (this.buffer) {
        this._parseHeader();
      }
      this.ss.matches = this.ss.maxMatches;
      const header = this.header;
      this.header = {};
      this.buffer = "";
      this.finished = true;
      this.nread = this.npairs = 0;
      this.maxed = false;
      this.emit("header", header);
    };
    HeaderParser.prototype._parseHeader = function() {
      if (this.npairs === this.maxHeaderPairs) {
        return;
      }
      const lines = this.buffer.split(RE_CRLF);
      const len = lines.length;
      let m, h;
      for (var i = 0; i < len; ++i) {
        if (lines[i].length === 0) {
          continue;
        }
        if (lines[i][0] === "	" || lines[i][0] === " ") {
          if (h) {
            this.header[h][this.header[h].length - 1] += lines[i];
            continue;
          }
        }
        const posColon = lines[i].indexOf(":");
        if (posColon === -1 || posColon === 0) {
          return;
        }
        m = RE_HDR.exec(lines[i]);
        h = m[1].toLowerCase();
        this.header[h] = this.header[h] || [];
        this.header[h].push(m[2] || "");
        if (++this.npairs === this.maxHeaderPairs) {
          break;
        }
      }
    };
    module2.exports = HeaderParser;
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js
var require_Dicer = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js"(exports, module2) {
    "use strict";
    var WritableStream2 = require("node:stream").Writable;
    var inherits = require("node:util").inherits;
    var StreamSearch = require_sbmh();
    var PartStream = require_PartStream();
    var HeaderParser = require_HeaderParser();
    var DASH = 45;
    var B_ONEDASH = Buffer.from("-");
    var B_CRLF = Buffer.from("\r\n");
    var EMPTY_FN = function() {
    };
    function Dicer(cfg) {
      if (!(this instanceof Dicer)) {
        return new Dicer(cfg);
      }
      WritableStream2.call(this, cfg);
      if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== "string") {
        throw new TypeError("Boundary required");
      }
      if (typeof cfg.boundary === "string") {
        this.setBoundary(cfg.boundary);
      } else {
        this._bparser = void 0;
      }
      this._headerFirst = cfg.headerFirst;
      this._dashes = 0;
      this._parts = 0;
      this._finished = false;
      this._realFinish = false;
      this._isPreamble = true;
      this._justMatched = false;
      this._firstWrite = true;
      this._inHeader = true;
      this._part = void 0;
      this._cb = void 0;
      this._ignoreData = false;
      this._partOpts = { highWaterMark: cfg.partHwm };
      this._pause = false;
      const self2 = this;
      this._hparser = new HeaderParser(cfg);
      this._hparser.on("header", function(header) {
        self2._inHeader = false;
        self2._part.emit("header", header);
      });
    }
    inherits(Dicer, WritableStream2);
    Dicer.prototype.emit = function(ev) {
      if (ev === "finish" && !this._realFinish) {
        if (!this._finished) {
          const self2 = this;
          process.nextTick(function() {
            self2.emit("error", new Error("Unexpected end of multipart data"));
            if (self2._part && !self2._ignoreData) {
              const type = self2._isPreamble ? "Preamble" : "Part";
              self2._part.emit("error", new Error(type + " terminated early due to unexpected end of multipart data"));
              self2._part.push(null);
              process.nextTick(function() {
                self2._realFinish = true;
                self2.emit("finish");
                self2._realFinish = false;
              });
              return;
            }
            self2._realFinish = true;
            self2.emit("finish");
            self2._realFinish = false;
          });
        }
      } else {
        WritableStream2.prototype.emit.apply(this, arguments);
      }
    };
    Dicer.prototype._write = function(data, encoding, cb) {
      if (!this._hparser && !this._bparser) {
        return cb();
      }
      if (this._headerFirst && this._isPreamble) {
        if (!this._part) {
          this._part = new PartStream(this._partOpts);
          if (this.listenerCount("preamble") !== 0) {
            this.emit("preamble", this._part);
          } else {
            this._ignore();
          }
        }
        const r = this._hparser.push(data);
        if (!this._inHeader && r !== void 0 && r < data.length) {
          data = data.slice(r);
        } else {
          return cb();
        }
      }
      if (this._firstWrite) {
        this._bparser.push(B_CRLF);
        this._firstWrite = false;
      }
      this._bparser.push(data);
      if (this._pause) {
        this._cb = cb;
      } else {
        cb();
      }
    };
    Dicer.prototype.reset = function() {
      this._part = void 0;
      this._bparser = void 0;
      this._hparser = void 0;
    };
    Dicer.prototype.setBoundary = function(boundary) {
      const self2 = this;
      this._bparser = new StreamSearch("\r\n--" + boundary);
      this._bparser.on("info", function(isMatch, data, start, end) {
        self2._oninfo(isMatch, data, start, end);
      });
    };
    Dicer.prototype._ignore = function() {
      if (this._part && !this._ignoreData) {
        this._ignoreData = true;
        this._part.on("error", EMPTY_FN);
        this._part.resume();
      }
    };
    Dicer.prototype._oninfo = function(isMatch, data, start, end) {
      let buf;
      const self2 = this;
      let i = 0;
      let r;
      let shouldWriteMore = true;
      if (!this._part && this._justMatched && data) {
        while (this._dashes < 2 && start + i < end) {
          if (data[start + i] === DASH) {
            ++i;
            ++this._dashes;
          } else {
            if (this._dashes) {
              buf = B_ONEDASH;
            }
            this._dashes = 0;
            break;
          }
        }
        if (this._dashes === 2) {
          if (start + i < end && this.listenerCount("trailer") !== 0) {
            this.emit("trailer", data.slice(start + i, end));
          }
          this.reset();
          this._finished = true;
          if (self2._parts === 0) {
            self2._realFinish = true;
            self2.emit("finish");
            self2._realFinish = false;
          }
        }
        if (this._dashes) {
          return;
        }
      }
      if (this._justMatched) {
        this._justMatched = false;
      }
      if (!this._part) {
        this._part = new PartStream(this._partOpts);
        this._part._read = function(n) {
          self2._unpause();
        };
        if (this._isPreamble && this.listenerCount("preamble") !== 0) {
          this.emit("preamble", this._part);
        } else if (this._isPreamble !== true && this.listenerCount("part") !== 0) {
          this.emit("part", this._part);
        } else {
          this._ignore();
        }
        if (!this._isPreamble) {
          this._inHeader = true;
        }
      }
      if (data && start < end && !this._ignoreData) {
        if (this._isPreamble || !this._inHeader) {
          if (buf) {
            shouldWriteMore = this._part.push(buf);
          }
          shouldWriteMore = this._part.push(data.slice(start, end));
          if (!shouldWriteMore) {
            this._pause = true;
          }
        } else if (!this._isPreamble && this._inHeader) {
          if (buf) {
            this._hparser.push(buf);
          }
          r = this._hparser.push(data.slice(start, end));
          if (!this._inHeader && r !== void 0 && r < end) {
            this._oninfo(false, data, start + r, end);
          }
        }
      }
      if (isMatch) {
        this._hparser.reset();
        if (this._isPreamble) {
          this._isPreamble = false;
        } else {
          if (start !== end) {
            ++this._parts;
            this._part.on("end", function() {
              if (--self2._parts === 0) {
                if (self2._finished) {
                  self2._realFinish = true;
                  self2.emit("finish");
                  self2._realFinish = false;
                } else {
                  self2._unpause();
                }
              }
            });
          }
        }
        this._part.push(null);
        this._part = void 0;
        this._ignoreData = false;
        this._justMatched = true;
        this._dashes = 0;
      }
    };
    Dicer.prototype._unpause = function() {
      if (!this._pause) {
        return;
      }
      this._pause = false;
      if (this._cb) {
        const cb = this._cb;
        this._cb = void 0;
        cb();
      }
    };
    module2.exports = Dicer;
  }
});

// node_modules/@fastify/busboy/lib/utils/decodeText.js
var require_decodeText = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/decodeText.js"(exports, module2) {
    "use strict";
    var utf8Decoder = new TextDecoder("utf-8");
    var textDecoders = /* @__PURE__ */ new Map([
      ["utf-8", utf8Decoder],
      ["utf8", utf8Decoder]
    ]);
    function getDecoder(charset) {
      let lc;
      while (true) {
        switch (charset) {
          case "utf-8":
          case "utf8":
            return decoders.utf8;
          case "latin1":
          case "ascii":
          case "us-ascii":
          case "iso-8859-1":
          case "iso8859-1":
          case "iso88591":
          case "iso_8859-1":
          case "windows-1252":
          case "iso_8859-1:1987":
          case "cp1252":
          case "x-cp1252":
            return decoders.latin1;
          case "utf16le":
          case "utf-16le":
          case "ucs2":
          case "ucs-2":
            return decoders.utf16le;
          case "base64":
            return decoders.base64;
          default:
            if (lc === void 0) {
              lc = true;
              charset = charset.toLowerCase();
              continue;
            }
            return decoders.other.bind(charset);
        }
      }
    }
    var decoders = {
      utf8: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.utf8Slice(0, data.length);
      },
      latin1: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          return data;
        }
        return data.latin1Slice(0, data.length);
      },
      utf16le: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.ucs2Slice(0, data.length);
      },
      base64: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.base64Slice(0, data.length);
      },
      other: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        if (textDecoders.has(exports.toString())) {
          try {
            return textDecoders.get(exports).decode(data);
          } catch {
          }
        }
        return typeof data === "string" ? data : data.toString();
      }
    };
    function decodeText(text2, sourceEncoding, destEncoding) {
      if (text2) {
        return getDecoder(destEncoding)(text2, sourceEncoding);
      }
      return text2;
    }
    module2.exports = decodeText;
  }
});

// node_modules/@fastify/busboy/lib/utils/parseParams.js
var require_parseParams = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/parseParams.js"(exports, module2) {
    "use strict";
    var decodeText = require_decodeText();
    var RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
    var EncodedLookup = {
      "%00": "\0",
      "%01": "",
      "%02": "",
      "%03": "",
      "%04": "",
      "%05": "",
      "%06": "",
      "%07": "\x07",
      "%08": "\b",
      "%09": "	",
      "%0a": "\n",
      "%0A": "\n",
      "%0b": "\v",
      "%0B": "\v",
      "%0c": "\f",
      "%0C": "\f",
      "%0d": "\r",
      "%0D": "\r",
      "%0e": "",
      "%0E": "",
      "%0f": "",
      "%0F": "",
      "%10": "",
      "%11": "",
      "%12": "",
      "%13": "",
      "%14": "",
      "%15": "",
      "%16": "",
      "%17": "",
      "%18": "",
      "%19": "",
      "%1a": "",
      "%1A": "",
      "%1b": "\x1B",
      "%1B": "\x1B",
      "%1c": "",
      "%1C": "",
      "%1d": "",
      "%1D": "",
      "%1e": "",
      "%1E": "",
      "%1f": "",
      "%1F": "",
      "%20": " ",
      "%21": "!",
      "%22": '"',
      "%23": "#",
      "%24": "$",
      "%25": "%",
      "%26": "&",
      "%27": "'",
      "%28": "(",
      "%29": ")",
      "%2a": "*",
      "%2A": "*",
      "%2b": "+",
      "%2B": "+",
      "%2c": ",",
      "%2C": ",",
      "%2d": "-",
      "%2D": "-",
      "%2e": ".",
      "%2E": ".",
      "%2f": "/",
      "%2F": "/",
      "%30": "0",
      "%31": "1",
      "%32": "2",
      "%33": "3",
      "%34": "4",
      "%35": "5",
      "%36": "6",
      "%37": "7",
      "%38": "8",
      "%39": "9",
      "%3a": ":",
      "%3A": ":",
      "%3b": ";",
      "%3B": ";",
      "%3c": "<",
      "%3C": "<",
      "%3d": "=",
      "%3D": "=",
      "%3e": ">",
      "%3E": ">",
      "%3f": "?",
      "%3F": "?",
      "%40": "@",
      "%41": "A",
      "%42": "B",
      "%43": "C",
      "%44": "D",
      "%45": "E",
      "%46": "F",
      "%47": "G",
      "%48": "H",
      "%49": "I",
      "%4a": "J",
      "%4A": "J",
      "%4b": "K",
      "%4B": "K",
      "%4c": "L",
      "%4C": "L",
      "%4d": "M",
      "%4D": "M",
      "%4e": "N",
      "%4E": "N",
      "%4f": "O",
      "%4F": "O",
      "%50": "P",
      "%51": "Q",
      "%52": "R",
      "%53": "S",
      "%54": "T",
      "%55": "U",
      "%56": "V",
      "%57": "W",
      "%58": "X",
      "%59": "Y",
      "%5a": "Z",
      "%5A": "Z",
      "%5b": "[",
      "%5B": "[",
      "%5c": "\\",
      "%5C": "\\",
      "%5d": "]",
      "%5D": "]",
      "%5e": "^",
      "%5E": "^",
      "%5f": "_",
      "%5F": "_",
      "%60": "`",
      "%61": "a",
      "%62": "b",
      "%63": "c",
      "%64": "d",
      "%65": "e",
      "%66": "f",
      "%67": "g",
      "%68": "h",
      "%69": "i",
      "%6a": "j",
      "%6A": "j",
      "%6b": "k",
      "%6B": "k",
      "%6c": "l",
      "%6C": "l",
      "%6d": "m",
      "%6D": "m",
      "%6e": "n",
      "%6E": "n",
      "%6f": "o",
      "%6F": "o",
      "%70": "p",
      "%71": "q",
      "%72": "r",
      "%73": "s",
      "%74": "t",
      "%75": "u",
      "%76": "v",
      "%77": "w",
      "%78": "x",
      "%79": "y",
      "%7a": "z",
      "%7A": "z",
      "%7b": "{",
      "%7B": "{",
      "%7c": "|",
      "%7C": "|",
      "%7d": "}",
      "%7D": "}",
      "%7e": "~",
      "%7E": "~",
      "%7f": "\x7F",
      "%7F": "\x7F",
      "%80": "\x80",
      "%81": "\x81",
      "%82": "\x82",
      "%83": "\x83",
      "%84": "\x84",
      "%85": "\x85",
      "%86": "\x86",
      "%87": "\x87",
      "%88": "\x88",
      "%89": "\x89",
      "%8a": "\x8A",
      "%8A": "\x8A",
      "%8b": "\x8B",
      "%8B": "\x8B",
      "%8c": "\x8C",
      "%8C": "\x8C",
      "%8d": "\x8D",
      "%8D": "\x8D",
      "%8e": "\x8E",
      "%8E": "\x8E",
      "%8f": "\x8F",
      "%8F": "\x8F",
      "%90": "\x90",
      "%91": "\x91",
      "%92": "\x92",
      "%93": "\x93",
      "%94": "\x94",
      "%95": "\x95",
      "%96": "\x96",
      "%97": "\x97",
      "%98": "\x98",
      "%99": "\x99",
      "%9a": "\x9A",
      "%9A": "\x9A",
      "%9b": "\x9B",
      "%9B": "\x9B",
      "%9c": "\x9C",
      "%9C": "\x9C",
      "%9d": "\x9D",
      "%9D": "\x9D",
      "%9e": "\x9E",
      "%9E": "\x9E",
      "%9f": "\x9F",
      "%9F": "\x9F",
      "%a0": "\xA0",
      "%A0": "\xA0",
      "%a1": "\xA1",
      "%A1": "\xA1",
      "%a2": "\xA2",
      "%A2": "\xA2",
      "%a3": "\xA3",
      "%A3": "\xA3",
      "%a4": "\xA4",
      "%A4": "\xA4",
      "%a5": "\xA5",
      "%A5": "\xA5",
      "%a6": "\xA6",
      "%A6": "\xA6",
      "%a7": "\xA7",
      "%A7": "\xA7",
      "%a8": "\xA8",
      "%A8": "\xA8",
      "%a9": "\xA9",
      "%A9": "\xA9",
      "%aa": "\xAA",
      "%Aa": "\xAA",
      "%aA": "\xAA",
      "%AA": "\xAA",
      "%ab": "\xAB",
      "%Ab": "\xAB",
      "%aB": "\xAB",
      "%AB": "\xAB",
      "%ac": "\xAC",
      "%Ac": "\xAC",
      "%aC": "\xAC",
      "%AC": "\xAC",
      "%ad": "\xAD",
      "%Ad": "\xAD",
      "%aD": "\xAD",
      "%AD": "\xAD",
      "%ae": "\xAE",
      "%Ae": "\xAE",
      "%aE": "\xAE",
      "%AE": "\xAE",
      "%af": "\xAF",
      "%Af": "\xAF",
      "%aF": "\xAF",
      "%AF": "\xAF",
      "%b0": "\xB0",
      "%B0": "\xB0",
      "%b1": "\xB1",
      "%B1": "\xB1",
      "%b2": "\xB2",
      "%B2": "\xB2",
      "%b3": "\xB3",
      "%B3": "\xB3",
      "%b4": "\xB4",
      "%B4": "\xB4",
      "%b5": "\xB5",
      "%B5": "\xB5",
      "%b6": "\xB6",
      "%B6": "\xB6",
      "%b7": "\xB7",
      "%B7": "\xB7",
      "%b8": "\xB8",
      "%B8": "\xB8",
      "%b9": "\xB9",
      "%B9": "\xB9",
      "%ba": "\xBA",
      "%Ba": "\xBA",
      "%bA": "\xBA",
      "%BA": "\xBA",
      "%bb": "\xBB",
      "%Bb": "\xBB",
      "%bB": "\xBB",
      "%BB": "\xBB",
      "%bc": "\xBC",
      "%Bc": "\xBC",
      "%bC": "\xBC",
      "%BC": "\xBC",
      "%bd": "\xBD",
      "%Bd": "\xBD",
      "%bD": "\xBD",
      "%BD": "\xBD",
      "%be": "\xBE",
      "%Be": "\xBE",
      "%bE": "\xBE",
      "%BE": "\xBE",
      "%bf": "\xBF",
      "%Bf": "\xBF",
      "%bF": "\xBF",
      "%BF": "\xBF",
      "%c0": "\xC0",
      "%C0": "\xC0",
      "%c1": "\xC1",
      "%C1": "\xC1",
      "%c2": "\xC2",
      "%C2": "\xC2",
      "%c3": "\xC3",
      "%C3": "\xC3",
      "%c4": "\xC4",
      "%C4": "\xC4",
      "%c5": "\xC5",
      "%C5": "\xC5",
      "%c6": "\xC6",
      "%C6": "\xC6",
      "%c7": "\xC7",
      "%C7": "\xC7",
      "%c8": "\xC8",
      "%C8": "\xC8",
      "%c9": "\xC9",
      "%C9": "\xC9",
      "%ca": "\xCA",
      "%Ca": "\xCA",
      "%cA": "\xCA",
      "%CA": "\xCA",
      "%cb": "\xCB",
      "%Cb": "\xCB",
      "%cB": "\xCB",
      "%CB": "\xCB",
      "%cc": "\xCC",
      "%Cc": "\xCC",
      "%cC": "\xCC",
      "%CC": "\xCC",
      "%cd": "\xCD",
      "%Cd": "\xCD",
      "%cD": "\xCD",
      "%CD": "\xCD",
      "%ce": "\xCE",
      "%Ce": "\xCE",
      "%cE": "\xCE",
      "%CE": "\xCE",
      "%cf": "\xCF",
      "%Cf": "\xCF",
      "%cF": "\xCF",
      "%CF": "\xCF",
      "%d0": "\xD0",
      "%D0": "\xD0",
      "%d1": "\xD1",
      "%D1": "\xD1",
      "%d2": "\xD2",
      "%D2": "\xD2",
      "%d3": "\xD3",
      "%D3": "\xD3",
      "%d4": "\xD4",
      "%D4": "\xD4",
      "%d5": "\xD5",
      "%D5": "\xD5",
      "%d6": "\xD6",
      "%D6": "\xD6",
      "%d7": "\xD7",
      "%D7": "\xD7",
      "%d8": "\xD8",
      "%D8": "\xD8",
      "%d9": "\xD9",
      "%D9": "\xD9",
      "%da": "\xDA",
      "%Da": "\xDA",
      "%dA": "\xDA",
      "%DA": "\xDA",
      "%db": "\xDB",
      "%Db": "\xDB",
      "%dB": "\xDB",
      "%DB": "\xDB",
      "%dc": "\xDC",
      "%Dc": "\xDC",
      "%dC": "\xDC",
      "%DC": "\xDC",
      "%dd": "\xDD",
      "%Dd": "\xDD",
      "%dD": "\xDD",
      "%DD": "\xDD",
      "%de": "\xDE",
      "%De": "\xDE",
      "%dE": "\xDE",
      "%DE": "\xDE",
      "%df": "\xDF",
      "%Df": "\xDF",
      "%dF": "\xDF",
      "%DF": "\xDF",
      "%e0": "\xE0",
      "%E0": "\xE0",
      "%e1": "\xE1",
      "%E1": "\xE1",
      "%e2": "\xE2",
      "%E2": "\xE2",
      "%e3": "\xE3",
      "%E3": "\xE3",
      "%e4": "\xE4",
      "%E4": "\xE4",
      "%e5": "\xE5",
      "%E5": "\xE5",
      "%e6": "\xE6",
      "%E6": "\xE6",
      "%e7": "\xE7",
      "%E7": "\xE7",
      "%e8": "\xE8",
      "%E8": "\xE8",
      "%e9": "\xE9",
      "%E9": "\xE9",
      "%ea": "\xEA",
      "%Ea": "\xEA",
      "%eA": "\xEA",
      "%EA": "\xEA",
      "%eb": "\xEB",
      "%Eb": "\xEB",
      "%eB": "\xEB",
      "%EB": "\xEB",
      "%ec": "\xEC",
      "%Ec": "\xEC",
      "%eC": "\xEC",
      "%EC": "\xEC",
      "%ed": "\xED",
      "%Ed": "\xED",
      "%eD": "\xED",
      "%ED": "\xED",
      "%ee": "\xEE",
      "%Ee": "\xEE",
      "%eE": "\xEE",
      "%EE": "\xEE",
      "%ef": "\xEF",
      "%Ef": "\xEF",
      "%eF": "\xEF",
      "%EF": "\xEF",
      "%f0": "\xF0",
      "%F0": "\xF0",
      "%f1": "\xF1",
      "%F1": "\xF1",
      "%f2": "\xF2",
      "%F2": "\xF2",
      "%f3": "\xF3",
      "%F3": "\xF3",
      "%f4": "\xF4",
      "%F4": "\xF4",
      "%f5": "\xF5",
      "%F5": "\xF5",
      "%f6": "\xF6",
      "%F6": "\xF6",
      "%f7": "\xF7",
      "%F7": "\xF7",
      "%f8": "\xF8",
      "%F8": "\xF8",
      "%f9": "\xF9",
      "%F9": "\xF9",
      "%fa": "\xFA",
      "%Fa": "\xFA",
      "%fA": "\xFA",
      "%FA": "\xFA",
      "%fb": "\xFB",
      "%Fb": "\xFB",
      "%fB": "\xFB",
      "%FB": "\xFB",
      "%fc": "\xFC",
      "%Fc": "\xFC",
      "%fC": "\xFC",
      "%FC": "\xFC",
      "%fd": "\xFD",
      "%Fd": "\xFD",
      "%fD": "\xFD",
      "%FD": "\xFD",
      "%fe": "\xFE",
      "%Fe": "\xFE",
      "%fE": "\xFE",
      "%FE": "\xFE",
      "%ff": "\xFF",
      "%Ff": "\xFF",
      "%fF": "\xFF",
      "%FF": "\xFF"
    };
    function encodedReplacer(match) {
      return EncodedLookup[match];
    }
    var STATE_KEY = 0;
    var STATE_VALUE = 1;
    var STATE_CHARSET = 2;
    var STATE_LANG = 3;
    function parseParams(str) {
      const res = [];
      let state = STATE_KEY;
      let charset = "";
      let inquote = false;
      let escaping = false;
      let p = 0;
      let tmp = "";
      const len = str.length;
      for (var i = 0; i < len; ++i) {
        const char = str[i];
        if (char === "\\" && inquote) {
          if (escaping) {
            escaping = false;
          } else {
            escaping = true;
            continue;
          }
        } else if (char === '"') {
          if (!escaping) {
            if (inquote) {
              inquote = false;
              state = STATE_KEY;
            } else {
              inquote = true;
            }
            continue;
          } else {
            escaping = false;
          }
        } else {
          if (escaping && inquote) {
            tmp += "\\";
          }
          escaping = false;
          if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
            if (state === STATE_CHARSET) {
              state = STATE_LANG;
              charset = tmp.substring(1);
            } else {
              state = STATE_VALUE;
            }
            tmp = "";
            continue;
          } else if (state === STATE_KEY && (char === "*" || char === "=") && res.length) {
            state = char === "*" ? STATE_CHARSET : STATE_VALUE;
            res[p] = [tmp, void 0];
            tmp = "";
            continue;
          } else if (!inquote && char === ";") {
            state = STATE_KEY;
            if (charset) {
              if (tmp.length) {
                tmp = decodeText(
                  tmp.replace(RE_ENCODED, encodedReplacer),
                  "binary",
                  charset
                );
              }
              charset = "";
            } else if (tmp.length) {
              tmp = decodeText(tmp, "binary", "utf8");
            }
            if (res[p] === void 0) {
              res[p] = tmp;
            } else {
              res[p][1] = tmp;
            }
            tmp = "";
            ++p;
            continue;
          } else if (!inquote && (char === " " || char === "	")) {
            continue;
          }
        }
        tmp += char;
      }
      if (charset && tmp.length) {
        tmp = decodeText(
          tmp.replace(RE_ENCODED, encodedReplacer),
          "binary",
          charset
        );
      } else if (tmp) {
        tmp = decodeText(tmp, "binary", "utf8");
      }
      if (res[p] === void 0) {
        if (tmp) {
          res[p] = tmp;
        }
      } else {
        res[p][1] = tmp;
      }
      return res;
    }
    module2.exports = parseParams;
  }
});

// node_modules/@fastify/busboy/lib/utils/basename.js
var require_basename = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/basename.js"(exports, module2) {
    "use strict";
    module2.exports = function basename(path2) {
      if (typeof path2 !== "string") {
        return "";
      }
      for (var i = path2.length - 1; i >= 0; --i) {
        switch (path2.charCodeAt(i)) {
          case 47:
          case 92:
            path2 = path2.slice(i + 1);
            return path2 === ".." || path2 === "." ? "" : path2;
        }
      }
      return path2 === ".." || path2 === "." ? "" : path2;
    };
  }
});

// node_modules/@fastify/busboy/lib/types/multipart.js
var require_multipart = __commonJS({
  "node_modules/@fastify/busboy/lib/types/multipart.js"(exports, module2) {
    "use strict";
    var { Readable } = require("node:stream");
    var { inherits } = require("node:util");
    var Dicer = require_Dicer();
    var parseParams = require_parseParams();
    var decodeText = require_decodeText();
    var basename = require_basename();
    var getLimit = require_getLimit();
    var RE_BOUNDARY = /^boundary$/i;
    var RE_FIELD = /^form-data$/i;
    var RE_CHARSET = /^charset$/i;
    var RE_FILENAME = /^filename$/i;
    var RE_NAME = /^name$/i;
    Multipart.detect = /^multipart\/form-data/i;
    function Multipart(boy, cfg) {
      let i;
      let len;
      const self2 = this;
      let boundary;
      const limits = cfg.limits;
      const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => contentType === "application/octet-stream" || fileName !== void 0);
      const parsedConType = cfg.parsedConType || [];
      const defCharset = cfg.defCharset || "utf8";
      const preservePath = cfg.preservePath;
      const fileOpts = { highWaterMark: cfg.fileHwm };
      for (i = 0, len = parsedConType.length; i < len; ++i) {
        if (Array.isArray(parsedConType[i]) && RE_BOUNDARY.test(parsedConType[i][0])) {
          boundary = parsedConType[i][1];
          break;
        }
      }
      function checkFinished() {
        if (nends === 0 && finished && !boy._done) {
          finished = false;
          self2.end();
        }
      }
      if (typeof boundary !== "string") {
        throw new Error("Multipart: Boundary not found");
      }
      const fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
      const fileSizeLimit = getLimit(limits, "fileSize", Infinity);
      const filesLimit = getLimit(limits, "files", Infinity);
      const fieldsLimit = getLimit(limits, "fields", Infinity);
      const partsLimit = getLimit(limits, "parts", Infinity);
      const headerPairsLimit = getLimit(limits, "headerPairs", 2e3);
      const headerSizeLimit = getLimit(limits, "headerSize", 80 * 1024);
      let nfiles = 0;
      let nfields = 0;
      let nends = 0;
      let curFile;
      let curField;
      let finished = false;
      this._needDrain = false;
      this._pause = false;
      this._cb = void 0;
      this._nparts = 0;
      this._boy = boy;
      const parserCfg = {
        boundary,
        maxHeaderPairs: headerPairsLimit,
        maxHeaderSize: headerSizeLimit,
        partHwm: fileOpts.highWaterMark,
        highWaterMark: cfg.highWaterMark
      };
      this.parser = new Dicer(parserCfg);
      this.parser.on("drain", function() {
        self2._needDrain = false;
        if (self2._cb && !self2._pause) {
          const cb = self2._cb;
          self2._cb = void 0;
          cb();
        }
      }).on("part", function onPart(part) {
        if (++self2._nparts > partsLimit) {
          self2.parser.removeListener("part", onPart);
          self2.parser.on("part", skipPart);
          boy.hitPartsLimit = true;
          boy.emit("partsLimit");
          return skipPart(part);
        }
        if (curField) {
          const field = curField;
          field.emit("end");
          field.removeAllListeners("end");
        }
        part.on("header", function(header) {
          let contype;
          let fieldname;
          let parsed;
          let charset;
          let encoding;
          let filename;
          let nsize = 0;
          if (header["content-type"]) {
            parsed = parseParams(header["content-type"][0]);
            if (parsed[0]) {
              contype = parsed[0].toLowerCase();
              for (i = 0, len = parsed.length; i < len; ++i) {
                if (RE_CHARSET.test(parsed[i][0])) {
                  charset = parsed[i][1].toLowerCase();
                  break;
                }
              }
            }
          }
          if (contype === void 0) {
            contype = "text/plain";
          }
          if (charset === void 0) {
            charset = defCharset;
          }
          if (header["content-disposition"]) {
            parsed = parseParams(header["content-disposition"][0]);
            if (!RE_FIELD.test(parsed[0])) {
              return skipPart(part);
            }
            for (i = 0, len = parsed.length; i < len; ++i) {
              if (RE_NAME.test(parsed[i][0])) {
                fieldname = parsed[i][1];
              } else if (RE_FILENAME.test(parsed[i][0])) {
                filename = parsed[i][1];
                if (!preservePath) {
                  filename = basename(filename);
                }
              }
            }
          } else {
            return skipPart(part);
          }
          if (header["content-transfer-encoding"]) {
            encoding = header["content-transfer-encoding"][0].toLowerCase();
          } else {
            encoding = "7bit";
          }
          let onData, onEnd;
          if (isPartAFile(fieldname, contype, filename)) {
            if (nfiles === filesLimit) {
              if (!boy.hitFilesLimit) {
                boy.hitFilesLimit = true;
                boy.emit("filesLimit");
              }
              return skipPart(part);
            }
            ++nfiles;
            if (boy.listenerCount("file") === 0) {
              self2.parser._ignore();
              return;
            }
            ++nends;
            const file = new FileStream(fileOpts);
            curFile = file;
            file.on("end", function() {
              --nends;
              self2._pause = false;
              checkFinished();
              if (self2._cb && !self2._needDrain) {
                const cb = self2._cb;
                self2._cb = void 0;
                cb();
              }
            });
            file._read = function(n) {
              if (!self2._pause) {
                return;
              }
              self2._pause = false;
              if (self2._cb && !self2._needDrain) {
                const cb = self2._cb;
                self2._cb = void 0;
                cb();
              }
            };
            boy.emit("file", fieldname, file, filename, encoding, contype);
            onData = function(data) {
              if ((nsize += data.length) > fileSizeLimit) {
                const extralen = fileSizeLimit - nsize + data.length;
                if (extralen > 0) {
                  file.push(data.slice(0, extralen));
                }
                file.truncated = true;
                file.bytesRead = fileSizeLimit;
                part.removeAllListeners("data");
                file.emit("limit");
                return;
              } else if (!file.push(data)) {
                self2._pause = true;
              }
              file.bytesRead = nsize;
            };
            onEnd = function() {
              curFile = void 0;
              file.push(null);
            };
          } else {
            if (nfields === fieldsLimit) {
              if (!boy.hitFieldsLimit) {
                boy.hitFieldsLimit = true;
                boy.emit("fieldsLimit");
              }
              return skipPart(part);
            }
            ++nfields;
            ++nends;
            let buffer2 = "";
            let truncated = false;
            curField = part;
            onData = function(data) {
              if ((nsize += data.length) > fieldSizeLimit) {
                const extralen = fieldSizeLimit - (nsize - data.length);
                buffer2 += data.toString("binary", 0, extralen);
                truncated = true;
                part.removeAllListeners("data");
              } else {
                buffer2 += data.toString("binary");
              }
            };
            onEnd = function() {
              curField = void 0;
              if (buffer2.length) {
                buffer2 = decodeText(buffer2, "binary", charset);
              }
              boy.emit("field", fieldname, buffer2, false, truncated, encoding, contype);
              --nends;
              checkFinished();
            };
          }
          part._readableState.sync = false;
          part.on("data", onData);
          part.on("end", onEnd);
        }).on("error", function(err) {
          if (curFile) {
            curFile.emit("error", err);
          }
        });
      }).on("error", function(err) {
        boy.emit("error", err);
      }).on("finish", function() {
        finished = true;
        checkFinished();
      });
    }
    Multipart.prototype.write = function(chunk, cb) {
      const r = this.parser.write(chunk);
      if (r && !this._pause) {
        cb();
      } else {
        this._needDrain = !r;
        this._cb = cb;
      }
    };
    Multipart.prototype.end = function() {
      const self2 = this;
      if (self2.parser.writable) {
        self2.parser.end();
      } else if (!self2._boy._done) {
        process.nextTick(function() {
          self2._boy._done = true;
          self2._boy.emit("finish");
        });
      }
    };
    function skipPart(part) {
      part.resume();
    }
    function FileStream(opts) {
      Readable.call(this, opts);
      this.bytesRead = 0;
      this.truncated = false;
    }
    inherits(FileStream, Readable);
    FileStream.prototype._read = function(n) {
    };
    module2.exports = Multipart;
  }
});

// node_modules/@fastify/busboy/lib/utils/Decoder.js
var require_Decoder = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/Decoder.js"(exports, module2) {
    "use strict";
    var RE_PLUS = /\+/g;
    var HEX = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ];
    function Decoder() {
      this.buffer = void 0;
    }
    Decoder.prototype.write = function(str) {
      str = str.replace(RE_PLUS, " ");
      let res = "";
      let i = 0;
      let p = 0;
      const len = str.length;
      for (; i < len; ++i) {
        if (this.buffer !== void 0) {
          if (!HEX[str.charCodeAt(i)]) {
            res += "%" + this.buffer;
            this.buffer = void 0;
            --i;
          } else {
            this.buffer += str[i];
            ++p;
            if (this.buffer.length === 2) {
              res += String.fromCharCode(parseInt(this.buffer, 16));
              this.buffer = void 0;
            }
          }
        } else if (str[i] === "%") {
          if (i > p) {
            res += str.substring(p, i);
            p = i;
          }
          this.buffer = "";
          ++p;
        }
      }
      if (p < len && this.buffer === void 0) {
        res += str.substring(p);
      }
      return res;
    };
    Decoder.prototype.reset = function() {
      this.buffer = void 0;
    };
    module2.exports = Decoder;
  }
});

// node_modules/@fastify/busboy/lib/types/urlencoded.js
var require_urlencoded = __commonJS({
  "node_modules/@fastify/busboy/lib/types/urlencoded.js"(exports, module2) {
    "use strict";
    var Decoder = require_Decoder();
    var decodeText = require_decodeText();
    var getLimit = require_getLimit();
    var RE_CHARSET = /^charset$/i;
    UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
    function UrlEncoded(boy, cfg) {
      const limits = cfg.limits;
      const parsedConType = cfg.parsedConType;
      this.boy = boy;
      this.fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
      this.fieldNameSizeLimit = getLimit(limits, "fieldNameSize", 100);
      this.fieldsLimit = getLimit(limits, "fields", Infinity);
      let charset;
      for (var i = 0, len = parsedConType.length; i < len; ++i) {
        if (Array.isArray(parsedConType[i]) && RE_CHARSET.test(parsedConType[i][0])) {
          charset = parsedConType[i][1].toLowerCase();
          break;
        }
      }
      if (charset === void 0) {
        charset = cfg.defCharset || "utf8";
      }
      this.decoder = new Decoder();
      this.charset = charset;
      this._fields = 0;
      this._state = "key";
      this._checkingBytes = true;
      this._bytesKey = 0;
      this._bytesVal = 0;
      this._key = "";
      this._val = "";
      this._keyTrunc = false;
      this._valTrunc = false;
      this._hitLimit = false;
    }
    UrlEncoded.prototype.write = function(data, cb) {
      if (this._fields === this.fieldsLimit) {
        if (!this.boy.hitFieldsLimit) {
          this.boy.hitFieldsLimit = true;
          this.boy.emit("fieldsLimit");
        }
        return cb();
      }
      let idxeq;
      let idxamp;
      let i;
      let p = 0;
      const len = data.length;
      while (p < len) {
        if (this._state === "key") {
          idxeq = idxamp = void 0;
          for (i = p; i < len; ++i) {
            if (!this._checkingBytes) {
              ++p;
            }
            if (data[i] === 61) {
              idxeq = i;
              break;
            } else if (data[i] === 38) {
              idxamp = i;
              break;
            }
            if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
              this._hitLimit = true;
              break;
            } else if (this._checkingBytes) {
              ++this._bytesKey;
            }
          }
          if (idxeq !== void 0) {
            if (idxeq > p) {
              this._key += this.decoder.write(data.toString("binary", p, idxeq));
            }
            this._state = "val";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._val = "";
            this._bytesVal = 0;
            this._valTrunc = false;
            this.decoder.reset();
            p = idxeq + 1;
          } else if (idxamp !== void 0) {
            ++this._fields;
            let key2;
            const keyTrunc = this._keyTrunc;
            if (idxamp > p) {
              key2 = this._key += this.decoder.write(data.toString("binary", p, idxamp));
            } else {
              key2 = this._key;
            }
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            if (key2.length) {
              this.boy.emit(
                "field",
                decodeText(key2, "binary", this.charset),
                "",
                keyTrunc,
                false
              );
            }
            p = idxamp + 1;
            if (this._fields === this.fieldsLimit) {
              return cb();
            }
          } else if (this._hitLimit) {
            if (i > p) {
              this._key += this.decoder.write(data.toString("binary", p, i));
            }
            p = i;
            if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
              this._checkingBytes = false;
              this._keyTrunc = true;
            }
          } else {
            if (p < len) {
              this._key += this.decoder.write(data.toString("binary", p));
            }
            p = len;
          }
        } else {
          idxamp = void 0;
          for (i = p; i < len; ++i) {
            if (!this._checkingBytes) {
              ++p;
            }
            if (data[i] === 38) {
              idxamp = i;
              break;
            }
            if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
              this._hitLimit = true;
              break;
            } else if (this._checkingBytes) {
              ++this._bytesVal;
            }
          }
          if (idxamp !== void 0) {
            ++this._fields;
            if (idxamp > p) {
              this._val += this.decoder.write(data.toString("binary", p, idxamp));
            }
            this.boy.emit(
              "field",
              decodeText(this._key, "binary", this.charset),
              decodeText(this._val, "binary", this.charset),
              this._keyTrunc,
              this._valTrunc
            );
            this._state = "key";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            p = idxamp + 1;
            if (this._fields === this.fieldsLimit) {
              return cb();
            }
          } else if (this._hitLimit) {
            if (i > p) {
              this._val += this.decoder.write(data.toString("binary", p, i));
            }
            p = i;
            if (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
              this._checkingBytes = false;
              this._valTrunc = true;
            }
          } else {
            if (p < len) {
              this._val += this.decoder.write(data.toString("binary", p));
            }
            p = len;
          }
        }
      }
      cb();
    };
    UrlEncoded.prototype.end = function() {
      if (this.boy._done) {
        return;
      }
      if (this._state === "key" && this._key.length > 0) {
        this.boy.emit(
          "field",
          decodeText(this._key, "binary", this.charset),
          "",
          this._keyTrunc,
          false
        );
      } else if (this._state === "val") {
        this.boy.emit(
          "field",
          decodeText(this._key, "binary", this.charset),
          decodeText(this._val, "binary", this.charset),
          this._keyTrunc,
          this._valTrunc
        );
      }
      this.boy._done = true;
      this.boy.emit("finish");
    };
    module2.exports = UrlEncoded;
  }
});

// node_modules/@fastify/busboy/lib/main.js
var require_main = __commonJS({
  "node_modules/@fastify/busboy/lib/main.js"(exports, module2) {
    "use strict";
    var WritableStream2 = require("node:stream").Writable;
    var { inherits } = require("node:util");
    var Dicer = require_Dicer();
    var MultipartParser = require_multipart();
    var UrlencodedParser = require_urlencoded();
    var parseParams = require_parseParams();
    function Busboy(opts) {
      if (!(this instanceof Busboy)) {
        return new Busboy(opts);
      }
      if (typeof opts !== "object") {
        throw new TypeError("Busboy expected an options-Object.");
      }
      if (typeof opts.headers !== "object") {
        throw new TypeError("Busboy expected an options-Object with headers-attribute.");
      }
      if (typeof opts.headers["content-type"] !== "string") {
        throw new TypeError("Missing Content-Type-header.");
      }
      const {
        headers,
        ...streamOptions
      } = opts;
      this.opts = {
        autoDestroy: false,
        ...streamOptions
      };
      WritableStream2.call(this, this.opts);
      this._done = false;
      this._parser = this.getParserByHeaders(headers);
      this._finished = false;
    }
    inherits(Busboy, WritableStream2);
    Busboy.prototype.emit = function(ev) {
      var _a;
      if (ev === "finish") {
        if (!this._done) {
          (_a = this._parser) == null ? void 0 : _a.end();
          return;
        } else if (this._finished) {
          return;
        }
        this._finished = true;
      }
      WritableStream2.prototype.emit.apply(this, arguments);
    };
    Busboy.prototype.getParserByHeaders = function(headers) {
      const parsed = parseParams(headers["content-type"]);
      const cfg = {
        defCharset: this.opts.defCharset,
        fileHwm: this.opts.fileHwm,
        headers,
        highWaterMark: this.opts.highWaterMark,
        isPartAFile: this.opts.isPartAFile,
        limits: this.opts.limits,
        parsedConType: parsed,
        preservePath: this.opts.preservePath
      };
      if (MultipartParser.detect.test(parsed[0])) {
        return new MultipartParser(this, cfg);
      }
      if (UrlencodedParser.detect.test(parsed[0])) {
        return new UrlencodedParser(this, cfg);
      }
      throw new Error("Unsupported Content-Type.");
    };
    Busboy.prototype._write = function(chunk, encoding, cb) {
      this._parser.write(chunk, cb);
    };
    module2.exports = Busboy;
    module2.exports.default = Busboy;
    module2.exports.Busboy = Busboy;
    module2.exports.Dicer = Dicer;
  }
});

// node_modules/undici/lib/fetch/constants.js
var require_constants = __commonJS({
  "node_modules/undici/lib/fetch/constants.js"(exports, module2) {
    "use strict";
    var { MessageChannel, receiveMessageOnPort } = require("worker_threads");
    var corsSafeListedMethods = ["GET", "HEAD", "POST"];
    var corsSafeListedMethodsSet = new Set(corsSafeListedMethods);
    var nullBodyStatus = [101, 204, 205, 304];
    var redirectStatus = [301, 302, 303, 307, 308];
    var redirectStatusSet = new Set(redirectStatus);
    var badPorts = [
      "1",
      "7",
      "9",
      "11",
      "13",
      "15",
      "17",
      "19",
      "20",
      "21",
      "22",
      "23",
      "25",
      "37",
      "42",
      "43",
      "53",
      "69",
      "77",
      "79",
      "87",
      "95",
      "101",
      "102",
      "103",
      "104",
      "109",
      "110",
      "111",
      "113",
      "115",
      "117",
      "119",
      "123",
      "135",
      "137",
      "139",
      "143",
      "161",
      "179",
      "389",
      "427",
      "465",
      "512",
      "513",
      "514",
      "515",
      "526",
      "530",
      "531",
      "532",
      "540",
      "548",
      "554",
      "556",
      "563",
      "587",
      "601",
      "636",
      "989",
      "990",
      "993",
      "995",
      "1719",
      "1720",
      "1723",
      "2049",
      "3659",
      "4045",
      "5060",
      "5061",
      "6000",
      "6566",
      "6665",
      "6666",
      "6667",
      "6668",
      "6669",
      "6697",
      "10080"
    ];
    var badPortsSet = new Set(badPorts);
    var referrerPolicy = [
      "",
      "no-referrer",
      "no-referrer-when-downgrade",
      "same-origin",
      "origin",
      "strict-origin",
      "origin-when-cross-origin",
      "strict-origin-when-cross-origin",
      "unsafe-url"
    ];
    var referrerPolicySet = new Set(referrerPolicy);
    var requestRedirect = ["follow", "manual", "error"];
    var safeMethods = ["GET", "HEAD", "OPTIONS", "TRACE"];
    var safeMethodsSet = new Set(safeMethods);
    var requestMode = ["navigate", "same-origin", "no-cors", "cors"];
    var requestCredentials = ["omit", "same-origin", "include"];
    var requestCache = [
      "default",
      "no-store",
      "reload",
      "no-cache",
      "force-cache",
      "only-if-cached"
    ];
    var requestBodyHeader = [
      "content-encoding",
      "content-language",
      "content-location",
      "content-type",
      // See https://github.com/nodejs/undici/issues/2021
      // 'Content-Length' is a forbidden header name, which is typically
      // removed in the Headers implementation. However, undici doesn't
      // filter out headers, so we add it here.
      "content-length"
    ];
    var requestDuplex = [
      "half"
    ];
    var forbiddenMethods = ["CONNECT", "TRACE", "TRACK"];
    var forbiddenMethodsSet = new Set(forbiddenMethods);
    var subresource = [
      "audio",
      "audioworklet",
      "font",
      "image",
      "manifest",
      "paintworklet",
      "script",
      "style",
      "track",
      "video",
      "xslt",
      ""
    ];
    var subresourceSet = new Set(subresource);
    var DOMException2 = globalThis.DOMException ?? (() => {
      try {
        atob("~");
      } catch (err) {
        return Object.getPrototypeOf(err).constructor;
      }
    })();
    var channel;
    var structuredClone = globalThis.structuredClone ?? // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
    // structuredClone was added in v17.0.0, but fetch supports v16.8
    function structuredClone2(value, options2 = void 0) {
      if (arguments.length === 0) {
        throw new TypeError("missing argument");
      }
      if (!channel) {
        channel = new MessageChannel();
      }
      channel.port1.unref();
      channel.port2.unref();
      channel.port1.postMessage(value, options2 == null ? void 0 : options2.transfer);
      return receiveMessageOnPort(channel.port2).message;
    };
    module2.exports = {
      DOMException: DOMException2,
      structuredClone,
      subresource,
      forbiddenMethods,
      requestBodyHeader,
      referrerPolicy,
      requestRedirect,
      requestMode,
      requestCredentials,
      requestCache,
      redirectStatus,
      corsSafeListedMethods,
      nullBodyStatus,
      safeMethods,
      badPorts,
      requestDuplex,
      subresourceSet,
      badPortsSet,
      redirectStatusSet,
      corsSafeListedMethodsSet,
      safeMethodsSet,
      forbiddenMethodsSet,
      referrerPolicySet
    };
  }
});

// node_modules/undici/lib/fetch/global.js
var require_global = __commonJS({
  "node_modules/undici/lib/fetch/global.js"(exports, module2) {
    "use strict";
    var globalOrigin = Symbol.for("undici.globalOrigin.1");
    function getGlobalOrigin() {
      return globalThis[globalOrigin];
    }
    function setGlobalOrigin(newOrigin) {
      if (newOrigin === void 0) {
        Object.defineProperty(globalThis, globalOrigin, {
          value: void 0,
          writable: true,
          enumerable: false,
          configurable: false
        });
        return;
      }
      const parsedURL = new URL(newOrigin);
      if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") {
        throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
      }
      Object.defineProperty(globalThis, globalOrigin, {
        value: parsedURL,
        writable: true,
        enumerable: false,
        configurable: false
      });
    }
    module2.exports = {
      getGlobalOrigin,
      setGlobalOrigin
    };
  }
});

// node_modules/undici/lib/fetch/util.js
var require_util2 = __commonJS({
  "node_modules/undici/lib/fetch/util.js"(exports, module2) {
    "use strict";
    var { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require_constants();
    var { getGlobalOrigin } = require_global();
    var { performance: performance2 } = require("perf_hooks");
    var { isBlobLike, toUSVString, ReadableStreamFrom } = require_util();
    var assert = require("assert");
    var { isUint8Array } = require("util/types");
    var crypto3;
    try {
      crypto3 = require("crypto");
    } catch {
    }
    function responseURL(response) {
      const urlList = response.urlList;
      const length = urlList.length;
      return length === 0 ? null : urlList[length - 1].toString();
    }
    function responseLocationURL(response, requestFragment) {
      if (!redirectStatusSet.has(response.status)) {
        return null;
      }
      let location = response.headersList.get("location");
      if (location !== null && isValidHeaderValue(location)) {
        location = new URL(location, responseURL(response));
      }
      if (location && !location.hash) {
        location.hash = requestFragment;
      }
      return location;
    }
    function requestCurrentURL(request) {
      return request.urlList[request.urlList.length - 1];
    }
    function requestBadPort(request) {
      const url = requestCurrentURL(request);
      if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
        return "blocked";
      }
      return "allowed";
    }
    function isErrorLike(object) {
      var _a, _b;
      return object instanceof Error || (((_a = object == null ? void 0 : object.constructor) == null ? void 0 : _a.name) === "Error" || ((_b = object == null ? void 0 : object.constructor) == null ? void 0 : _b.name) === "DOMException");
    }
    function isValidReasonPhrase(statusText) {
      for (let i = 0; i < statusText.length; ++i) {
        const c = statusText.charCodeAt(i);
        if (!(c === 9 || // HTAB
        c >= 32 && c <= 126 || // SP / VCHAR
        c >= 128 && c <= 255)) {
          return false;
        }
      }
      return true;
    }
    function isTokenCharCode(c) {
      switch (c) {
        case 34:
        case 40:
        case 41:
        case 44:
        case 47:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 91:
        case 92:
        case 93:
        case 123:
        case 125:
          return false;
        default:
          return c >= 33 && c <= 126;
      }
    }
    function isValidHTTPToken(characters) {
      if (characters.length === 0) {
        return false;
      }
      for (let i = 0; i < characters.length; ++i) {
        if (!isTokenCharCode(characters.charCodeAt(i))) {
          return false;
        }
      }
      return true;
    }
    function isValidHeaderName(potentialValue) {
      return isValidHTTPToken(potentialValue);
    }
    function isValidHeaderValue(potentialValue) {
      if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) {
        return false;
      }
      if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) {
        return false;
      }
      return true;
    }
    function setRequestReferrerPolicyOnRedirect(request, actualResponse) {
      const { headersList } = actualResponse;
      const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
      let policy = "";
      if (policyHeader.length > 0) {
        for (let i = policyHeader.length; i !== 0; i--) {
          const token = policyHeader[i - 1].trim();
          if (referrerPolicyTokens.has(token)) {
            policy = token;
            break;
          }
        }
      }
      if (policy !== "") {
        request.referrerPolicy = policy;
      }
    }
    function crossOriginResourcePolicyCheck() {
      return "allowed";
    }
    function corsCheck() {
      return "success";
    }
    function TAOCheck() {
      return "success";
    }
    function appendFetchMetadata(httpRequest) {
      let header = null;
      header = httpRequest.mode;
      httpRequest.headersList.set("sec-fetch-mode", header);
    }
    function appendRequestOriginHeader(request) {
      let serializedOrigin = request.origin;
      if (request.responseTainting === "cors" || request.mode === "websocket") {
        if (serializedOrigin) {
          request.headersList.append("origin", serializedOrigin);
        }
      } else if (request.method !== "GET" && request.method !== "HEAD") {
        switch (request.referrerPolicy) {
          case "no-referrer":
            serializedOrigin = null;
            break;
          case "no-referrer-when-downgrade":
          case "strict-origin":
          case "strict-origin-when-cross-origin":
            if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {
              serializedOrigin = null;
            }
            break;
          case "same-origin":
            if (!sameOrigin(request, requestCurrentURL(request))) {
              serializedOrigin = null;
            }
            break;
          default:
        }
        if (serializedOrigin) {
          request.headersList.append("origin", serializedOrigin);
        }
      }
    }
    function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
      return performance2.now();
    }
    function createOpaqueTimingInfo(timingInfo) {
      return {
        startTime: timingInfo.startTime ?? 0,
        redirectStartTime: 0,
        redirectEndTime: 0,
        postRedirectStartTime: timingInfo.startTime ?? 0,
        finalServiceWorkerStartTime: 0,
        finalNetworkResponseStartTime: 0,
        finalNetworkRequestStartTime: 0,
        endTime: 0,
        encodedBodySize: 0,
        decodedBodySize: 0,
        finalConnectionTimingInfo: null
      };
    }
    function makePolicyContainer() {
      return {
        referrerPolicy: "strict-origin-when-cross-origin"
      };
    }
    function clonePolicyContainer(policyContainer) {
      return {
        referrerPolicy: policyContainer.referrerPolicy
      };
    }
    function determineRequestsReferrer(request) {
      const policy = request.referrerPolicy;
      assert(policy);
      let referrerSource = null;
      if (request.referrer === "client") {
        const globalOrigin = getGlobalOrigin();
        if (!globalOrigin || globalOrigin.origin === "null") {
          return "no-referrer";
        }
        referrerSource = new URL(globalOrigin);
      } else if (request.referrer instanceof URL) {
        referrerSource = request.referrer;
      }
      let referrerURL = stripURLForReferrer(referrerSource);
      const referrerOrigin = stripURLForReferrer(referrerSource, true);
      if (referrerURL.toString().length > 4096) {
        referrerURL = referrerOrigin;
      }
      const areSameOrigin = sameOrigin(request, referrerURL);
      const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request.url);
      switch (policy) {
        case "origin":
          return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);
        case "unsafe-url":
          return referrerURL;
        case "same-origin":
          return areSameOrigin ? referrerOrigin : "no-referrer";
        case "origin-when-cross-origin":
          return areSameOrigin ? referrerURL : referrerOrigin;
        case "strict-origin-when-cross-origin": {
          const currentURL = requestCurrentURL(request);
          if (sameOrigin(referrerURL, currentURL)) {
            return referrerURL;
          }
          if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
            return "no-referrer";
          }
          return referrerOrigin;
        }
        case "strict-origin":
        case "no-referrer-when-downgrade":
        default:
          return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
      }
    }
    function stripURLForReferrer(url, originOnly) {
      assert(url instanceof URL);
      if (url.protocol === "file:" || url.protocol === "about:" || url.protocol === "blank:") {
        return "no-referrer";
      }
      url.username = "";
      url.password = "";
      url.hash = "";
      if (originOnly) {
        url.pathname = "";
        url.search = "";
      }
      return url;
    }
    function isURLPotentiallyTrustworthy(url) {
      if (!(url instanceof URL)) {
        return false;
      }
      if (url.href === "about:blank" || url.href === "about:srcdoc") {
        return true;
      }
      if (url.protocol === "data:")
        return true;
      if (url.protocol === "file:")
        return true;
      return isOriginPotentiallyTrustworthy(url.origin);
      function isOriginPotentiallyTrustworthy(origin) {
        if (origin == null || origin === "null")
          return false;
        const originAsURL = new URL(origin);
        if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") {
          return true;
        }
        if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || (originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.")) || originAsURL.hostname.endsWith(".localhost")) {
          return true;
        }
        return false;
      }
    }
    function bytesMatch(bytes, metadataList) {
      if (crypto3 === void 0) {
        return true;
      }
      const parsedMetadata = parseMetadata(metadataList);
      if (parsedMetadata === "no metadata") {
        return true;
      }
      if (parsedMetadata.length === 0) {
        return true;
      }
      const list = parsedMetadata.sort((c, d) => d.algo.localeCompare(c.algo));
      const strongest = list[0].algo;
      const metadata = list.filter((item) => item.algo === strongest);
      for (const item of metadata) {
        const algorithm = item.algo;
        let expectedValue = item.hash;
        if (expectedValue.endsWith("==")) {
          expectedValue = expectedValue.slice(0, -2);
        }
        let actualValue = crypto3.createHash(algorithm).update(bytes).digest("base64");
        if (actualValue.endsWith("==")) {
          actualValue = actualValue.slice(0, -2);
        }
        if (actualValue === expectedValue) {
          return true;
        }
        let actualBase64URL = crypto3.createHash(algorithm).update(bytes).digest("base64url");
        if (actualBase64URL.endsWith("==")) {
          actualBase64URL = actualBase64URL.slice(0, -2);
        }
        if (actualBase64URL === expectedValue) {
          return true;
        }
      }
      return false;
    }
    var parseHashWithOptions = /((?<algo>sha256|sha384|sha512)-(?<hash>[A-z0-9+/]{1}.*={0,2}))( +[\x21-\x7e]?)?/i;
    function parseMetadata(metadata) {
      const result = [];
      let empty = true;
      const supportedHashes = crypto3.getHashes();
      for (const token of metadata.split(" ")) {
        empty = false;
        const parsedToken = parseHashWithOptions.exec(token);
        if (parsedToken === null || parsedToken.groups === void 0) {
          continue;
        }
        const algorithm = parsedToken.groups.algo;
        if (supportedHashes.includes(algorithm.toLowerCase())) {
          result.push(parsedToken.groups);
        }
      }
      if (empty === true) {
        return "no metadata";
      }
      return result;
    }
    function tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {
    }
    function sameOrigin(A, B) {
      if (A.origin === B.origin && A.origin === "null") {
        return true;
      }
      if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
        return true;
      }
      return false;
    }
    function createDeferredPromise() {
      let res;
      let rej;
      const promise = new Promise((resolve2, reject) => {
        res = resolve2;
        rej = reject;
      });
      return { promise, resolve: res, reject: rej };
    }
    function isAborted(fetchParams) {
      return fetchParams.controller.state === "aborted";
    }
    function isCancelled(fetchParams) {
      return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
    }
    var normalizeMethodRecord = {
      delete: "DELETE",
      DELETE: "DELETE",
      get: "GET",
      GET: "GET",
      head: "HEAD",
      HEAD: "HEAD",
      options: "OPTIONS",
      OPTIONS: "OPTIONS",
      post: "POST",
      POST: "POST",
      put: "PUT",
      PUT: "PUT"
    };
    Object.setPrototypeOf(normalizeMethodRecord, null);
    function normalizeMethod(method) {
      return normalizeMethodRecord[method.toLowerCase()] ?? method;
    }
    function serializeJavascriptValueToJSONString(value) {
      const result = JSON.stringify(value);
      if (result === void 0) {
        throw new TypeError("Value is not JSON serializable");
      }
      assert(typeof result === "string");
      return result;
    }
    var esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
    function makeIterator(iterator, name, kind) {
      const object = {
        index: 0,
        kind,
        target: iterator
      };
      const i = {
        next() {
          if (Object.getPrototypeOf(this) !== i) {
            throw new TypeError(
              `'next' called on an object that does not implement interface ${name} Iterator.`
            );
          }
          const { index: index13, kind: kind2, target } = object;
          const values = target();
          const len = values.length;
          if (index13 >= len) {
            return { value: void 0, done: true };
          }
          const pair = values[index13];
          object.index = index13 + 1;
          return iteratorResult(pair, kind2);
        },
        // The class string of an iterator prototype object for a given interface is the
        // result of concatenating the identifier of the interface and the string " Iterator".
        [Symbol.toStringTag]: `${name} Iterator`
      };
      Object.setPrototypeOf(i, esIteratorPrototype);
      return Object.setPrototypeOf({}, i);
    }
    function iteratorResult(pair, kind) {
      let result;
      switch (kind) {
        case "key": {
          result = pair[0];
          break;
        }
        case "value": {
          result = pair[1];
          break;
        }
        case "key+value": {
          result = pair;
          break;
        }
      }
      return { value: result, done: false };
    }
    async function fullyReadBody(body, processBody, processBodyError) {
      const successSteps = processBody;
      const errorSteps = processBodyError;
      let reader;
      try {
        reader = body.stream.getReader();
      } catch (e) {
        errorSteps(e);
        return;
      }
      try {
        const result = await readAllBytes(reader);
        successSteps(result);
      } catch (e) {
        errorSteps(e);
      }
    }
    var ReadableStream3 = globalThis.ReadableStream;
    function isReadableStreamLike(stream) {
      if (!ReadableStream3) {
        ReadableStream3 = require("stream/web").ReadableStream;
      }
      return stream instanceof ReadableStream3 || stream[Symbol.toStringTag] === "ReadableStream" && typeof stream.tee === "function";
    }
    var MAXIMUM_ARGUMENT_LENGTH = 65535;
    function isomorphicDecode(input) {
      if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
        return String.fromCharCode(...input);
      }
      return input.reduce((previous, current) => previous + String.fromCharCode(current), "");
    }
    function readableStreamClose(controller) {
      try {
        controller.close();
      } catch (err) {
        if (!err.message.includes("Controller is already closed")) {
          throw err;
        }
      }
    }
    function isomorphicEncode(input) {
      for (let i = 0; i < input.length; i++) {
        assert(input.charCodeAt(i) <= 255);
      }
      return input;
    }
    async function readAllBytes(reader) {
      const bytes = [];
      let byteLength = 0;
      while (true) {
        const { done, value: chunk } = await reader.read();
        if (done) {
          return Buffer.concat(bytes, byteLength);
        }
        if (!isUint8Array(chunk)) {
          throw new TypeError("Received non-Uint8Array chunk");
        }
        bytes.push(chunk);
        byteLength += chunk.length;
      }
    }
    function urlIsLocal(url) {
      assert("protocol" in url);
      const protocol = url.protocol;
      return protocol === "about:" || protocol === "blob:" || protocol === "data:";
    }
    function urlHasHttpsScheme(url) {
      if (typeof url === "string") {
        return url.startsWith("https:");
      }
      return url.protocol === "https:";
    }
    function urlIsHttpHttpsScheme(url) {
      assert("protocol" in url);
      const protocol = url.protocol;
      return protocol === "http:" || protocol === "https:";
    }
    var hasOwn = Object.hasOwn || ((dict, key2) => Object.prototype.hasOwnProperty.call(dict, key2));
    module2.exports = {
      isAborted,
      isCancelled,
      createDeferredPromise,
      ReadableStreamFrom,
      toUSVString,
      tryUpgradeRequestToAPotentiallyTrustworthyURL,
      coarsenedSharedCurrentTime,
      determineRequestsReferrer,
      makePolicyContainer,
      clonePolicyContainer,
      appendFetchMetadata,
      appendRequestOriginHeader,
      TAOCheck,
      corsCheck,
      crossOriginResourcePolicyCheck,
      createOpaqueTimingInfo,
      setRequestReferrerPolicyOnRedirect,
      isValidHTTPToken,
      requestBadPort,
      requestCurrentURL,
      responseURL,
      responseLocationURL,
      isBlobLike,
      isURLPotentiallyTrustworthy,
      isValidReasonPhrase,
      sameOrigin,
      normalizeMethod,
      serializeJavascriptValueToJSONString,
      makeIterator,
      isValidHeaderName,
      isValidHeaderValue,
      hasOwn,
      isErrorLike,
      fullyReadBody,
      bytesMatch,
      isReadableStreamLike,
      readableStreamClose,
      isomorphicEncode,
      isomorphicDecode,
      urlIsLocal,
      urlHasHttpsScheme,
      urlIsHttpHttpsScheme,
      readAllBytes,
      normalizeMethodRecord
    };
  }
});

// node_modules/undici/lib/fetch/symbols.js
var require_symbols2 = __commonJS({
  "node_modules/undici/lib/fetch/symbols.js"(exports, module2) {
    "use strict";
    module2.exports = {
      kUrl: Symbol("url"),
      kHeaders: Symbol("headers"),
      kSignal: Symbol("signal"),
      kState: Symbol("state"),
      kGuard: Symbol("guard"),
      kRealm: Symbol("realm")
    };
  }
});

// node_modules/undici/lib/fetch/webidl.js
var require_webidl = __commonJS({
  "node_modules/undici/lib/fetch/webidl.js"(exports, module2) {
    "use strict";
    var { types } = require("util");
    var { hasOwn, toUSVString } = require_util2();
    var webidl = {};
    webidl.converters = {};
    webidl.util = {};
    webidl.errors = {};
    webidl.errors.exception = function(message) {
      return new TypeError(`${message.header}: ${message.message}`);
    };
    webidl.errors.conversionFailed = function(context) {
      const plural = context.types.length === 1 ? "" : " one of";
      const message = `${context.argument} could not be converted to${plural}: ${context.types.join(", ")}.`;
      return webidl.errors.exception({
        header: context.prefix,
        message
      });
    };
    webidl.errors.invalidArgument = function(context) {
      return webidl.errors.exception({
        header: context.prefix,
        message: `"${context.value}" is an invalid ${context.type}.`
      });
    };
    webidl.brandCheck = function(V, I, opts = void 0) {
      if ((opts == null ? void 0 : opts.strict) !== false && !(V instanceof I)) {
        throw new TypeError("Illegal invocation");
      } else {
        return (V == null ? void 0 : V[Symbol.toStringTag]) === I.prototype[Symbol.toStringTag];
      }
    };
    webidl.argumentLengthCheck = function({ length }, min, ctx) {
      if (length < min) {
        throw webidl.errors.exception({
          message: `${min} argument${min !== 1 ? "s" : ""} required, but${length ? " only" : ""} ${length} found.`,
          ...ctx
        });
      }
    };
    webidl.illegalConstructor = function() {
      throw webidl.errors.exception({
        header: "TypeError",
        message: "Illegal constructor"
      });
    };
    webidl.util.Type = function(V) {
      switch (typeof V) {
        case "undefined":
          return "Undefined";
        case "boolean":
          return "Boolean";
        case "string":
          return "String";
        case "symbol":
          return "Symbol";
        case "number":
          return "Number";
        case "bigint":
          return "BigInt";
        case "function":
        case "object": {
          if (V === null) {
            return "Null";
          }
          return "Object";
        }
      }
    };
    webidl.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
      let upperBound;
      let lowerBound;
      if (bitLength === 64) {
        upperBound = Math.pow(2, 53) - 1;
        if (signedness === "unsigned") {
          lowerBound = 0;
        } else {
          lowerBound = Math.pow(-2, 53) + 1;
        }
      } else if (signedness === "unsigned") {
        lowerBound = 0;
        upperBound = Math.pow(2, bitLength) - 1;
      } else {
        lowerBound = Math.pow(-2, bitLength) - 1;
        upperBound = Math.pow(2, bitLength - 1) - 1;
      }
      let x = Number(V);
      if (x === 0) {
        x = 0;
      }
      if (opts.enforceRange === true) {
        if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
          throw webidl.errors.exception({
            header: "Integer conversion",
            message: `Could not convert ${V} to an integer.`
          });
        }
        x = webidl.util.IntegerPart(x);
        if (x < lowerBound || x > upperBound) {
          throw webidl.errors.exception({
            header: "Integer conversion",
            message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
          });
        }
        return x;
      }
      if (!Number.isNaN(x) && opts.clamp === true) {
        x = Math.min(Math.max(x, lowerBound), upperBound);
        if (Math.floor(x) % 2 === 0) {
          x = Math.floor(x);
        } else {
          x = Math.ceil(x);
        }
        return x;
      }
      if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
        return 0;
      }
      x = webidl.util.IntegerPart(x);
      x = x % Math.pow(2, bitLength);
      if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) {
        return x - Math.pow(2, bitLength);
      }
      return x;
    };
    webidl.util.IntegerPart = function(n) {
      const r = Math.floor(Math.abs(n));
      if (n < 0) {
        return -1 * r;
      }
      return r;
    };
    webidl.sequenceConverter = function(converter) {
      return (V) => {
        var _a;
        if (webidl.util.Type(V) !== "Object") {
          throw webidl.errors.exception({
            header: "Sequence",
            message: `Value of type ${webidl.util.Type(V)} is not an Object.`
          });
        }
        const method = (_a = V == null ? void 0 : V[Symbol.iterator]) == null ? void 0 : _a.call(V);
        const seq = [];
        if (method === void 0 || typeof method.next !== "function") {
          throw webidl.errors.exception({
            header: "Sequence",
            message: "Object is not an iterator."
          });
        }
        while (true) {
          const { done, value } = method.next();
          if (done) {
            break;
          }
          seq.push(converter(value));
        }
        return seq;
      };
    };
    webidl.recordConverter = function(keyConverter, valueConverter) {
      return (O) => {
        if (webidl.util.Type(O) !== "Object") {
          throw webidl.errors.exception({
            header: "Record",
            message: `Value of type ${webidl.util.Type(O)} is not an Object.`
          });
        }
        const result = {};
        if (!types.isProxy(O)) {
          const keys2 = Object.keys(O);
          for (const key2 of keys2) {
            const typedKey = keyConverter(key2);
            const typedValue = valueConverter(O[key2]);
            result[typedKey] = typedValue;
          }
          return result;
        }
        const keys = Reflect.ownKeys(O);
        for (const key2 of keys) {
          const desc = Reflect.getOwnPropertyDescriptor(O, key2);
          if (desc == null ? void 0 : desc.enumerable) {
            const typedKey = keyConverter(key2);
            const typedValue = valueConverter(O[key2]);
            result[typedKey] = typedValue;
          }
        }
        return result;
      };
    };
    webidl.interfaceConverter = function(i) {
      return (V, opts = {}) => {
        if (opts.strict !== false && !(V instanceof i)) {
          throw webidl.errors.exception({
            header: i.name,
            message: `Expected ${V} to be an instance of ${i.name}.`
          });
        }
        return V;
      };
    };
    webidl.dictionaryConverter = function(converters) {
      return (dictionary) => {
        const type = webidl.util.Type(dictionary);
        const dict = {};
        if (type === "Null" || type === "Undefined") {
          return dict;
        } else if (type !== "Object") {
          throw webidl.errors.exception({
            header: "Dictionary",
            message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
          });
        }
        for (const options2 of converters) {
          const { key: key2, defaultValue, required, converter } = options2;
          if (required === true) {
            if (!hasOwn(dictionary, key2)) {
              throw webidl.errors.exception({
                header: "Dictionary",
                message: `Missing required key "${key2}".`
              });
            }
          }
          let value = dictionary[key2];
          const hasDefault = hasOwn(options2, "defaultValue");
          if (hasDefault && value !== null) {
            value = value ?? defaultValue;
          }
          if (required || hasDefault || value !== void 0) {
            value = converter(value);
            if (options2.allowedValues && !options2.allowedValues.includes(value)) {
              throw webidl.errors.exception({
                header: "Dictionary",
                message: `${value} is not an accepted type. Expected one of ${options2.allowedValues.join(", ")}.`
              });
            }
            dict[key2] = value;
          }
        }
        return dict;
      };
    };
    webidl.nullableConverter = function(converter) {
      return (V) => {
        if (V === null) {
          return V;
        }
        return converter(V);
      };
    };
    webidl.converters.DOMString = function(V, opts = {}) {
      if (V === null && opts.legacyNullToEmptyString) {
        return "";
      }
      if (typeof V === "symbol") {
        throw new TypeError("Could not convert argument of type symbol to string.");
      }
      return String(V);
    };
    webidl.converters.ByteString = function(V) {
      const x = webidl.converters.DOMString(V);
      for (let index13 = 0; index13 < x.length; index13++) {
        if (x.charCodeAt(index13) > 255) {
          throw new TypeError(
            `Cannot convert argument to a ByteString because the character at index ${index13} has a value of ${x.charCodeAt(index13)} which is greater than 255.`
          );
        }
      }
      return x;
    };
    webidl.converters.USVString = toUSVString;
    webidl.converters.boolean = function(V) {
      const x = Boolean(V);
      return x;
    };
    webidl.converters.any = function(V) {
      return V;
    };
    webidl.converters["long long"] = function(V) {
      const x = webidl.util.ConvertToInt(V, 64, "signed");
      return x;
    };
    webidl.converters["unsigned long long"] = function(V) {
      const x = webidl.util.ConvertToInt(V, 64, "unsigned");
      return x;
    };
    webidl.converters["unsigned long"] = function(V) {
      const x = webidl.util.ConvertToInt(V, 32, "unsigned");
      return x;
    };
    webidl.converters["unsigned short"] = function(V, opts) {
      const x = webidl.util.ConvertToInt(V, 16, "unsigned", opts);
      return x;
    };
    webidl.converters.ArrayBuffer = function(V, opts = {}) {
      if (webidl.util.Type(V) !== "Object" || !types.isAnyArrayBuffer(V)) {
        throw webidl.errors.conversionFailed({
          prefix: `${V}`,
          argument: `${V}`,
          types: ["ArrayBuffer"]
        });
      }
      if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V;
    };
    webidl.converters.TypedArray = function(V, T, opts = {}) {
      if (webidl.util.Type(V) !== "Object" || !types.isTypedArray(V) || V.constructor.name !== T.name) {
        throw webidl.errors.conversionFailed({
          prefix: `${T.name}`,
          argument: `${V}`,
          types: [T.name]
        });
      }
      if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V;
    };
    webidl.converters.DataView = function(V, opts = {}) {
      if (webidl.util.Type(V) !== "Object" || !types.isDataView(V)) {
        throw webidl.errors.exception({
          header: "DataView",
          message: "Object is not a DataView."
        });
      }
      if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V;
    };
    webidl.converters.BufferSource = function(V, opts = {}) {
      if (types.isAnyArrayBuffer(V)) {
        return webidl.converters.ArrayBuffer(V, opts);
      }
      if (types.isTypedArray(V)) {
        return webidl.converters.TypedArray(V, V.constructor);
      }
      if (types.isDataView(V)) {
        return webidl.converters.DataView(V, opts);
      }
      throw new TypeError(`Could not convert ${V} to a BufferSource.`);
    };
    webidl.converters["sequence<ByteString>"] = webidl.sequenceConverter(
      webidl.converters.ByteString
    );
    webidl.converters["sequence<sequence<ByteString>>"] = webidl.sequenceConverter(
      webidl.converters["sequence<ByteString>"]
    );
    webidl.converters["record<ByteString, ByteString>"] = webidl.recordConverter(
      webidl.converters.ByteString,
      webidl.converters.ByteString
    );
    module2.exports = {
      webidl
    };
  }
});

// node_modules/undici/lib/fetch/dataURL.js
var require_dataURL = __commonJS({
  "node_modules/undici/lib/fetch/dataURL.js"(exports, module2) {
    var assert = require("assert");
    var { atob: atob2 } = require("buffer");
    var { isomorphicDecode } = require_util2();
    var encoder4 = new TextEncoder();
    var HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
    var HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/;
    var HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
    function dataURLProcessor(dataURL) {
      assert(dataURL.protocol === "data:");
      let input = URLSerializer(dataURL, true);
      input = input.slice(5);
      const position = { position: 0 };
      let mimeType = collectASequenceOfCodePointsFast(
        ",",
        input,
        position
      );
      const mimeTypeLength = mimeType.length;
      mimeType = removeASCIIWhitespace(mimeType, true, true);
      if (position.position >= input.length) {
        return "failure";
      }
      position.position++;
      const encodedBody = input.slice(mimeTypeLength + 1);
      let body = stringPercentDecode(encodedBody);
      if (/;(\u0020){0,}base64$/i.test(mimeType)) {
        const stringBody = isomorphicDecode(body);
        body = forgivingBase64(stringBody);
        if (body === "failure") {
          return "failure";
        }
        mimeType = mimeType.slice(0, -6);
        mimeType = mimeType.replace(/(\u0020)+$/, "");
        mimeType = mimeType.slice(0, -1);
      }
      if (mimeType.startsWith(";")) {
        mimeType = "text/plain" + mimeType;
      }
      let mimeTypeRecord = parseMIMEType(mimeType);
      if (mimeTypeRecord === "failure") {
        mimeTypeRecord = parseMIMEType("text/plain;charset=US-ASCII");
      }
      return { mimeType: mimeTypeRecord, body };
    }
    function URLSerializer(url, excludeFragment = false) {
      if (!excludeFragment) {
        return url.href;
      }
      const href = url.href;
      const hashLength = url.hash.length;
      return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
    }
    function collectASequenceOfCodePoints(condition, input, position) {
      let result = "";
      while (position.position < input.length && condition(input[position.position])) {
        result += input[position.position];
        position.position++;
      }
      return result;
    }
    function collectASequenceOfCodePointsFast(char, input, position) {
      const idx = input.indexOf(char, position.position);
      const start = position.position;
      if (idx === -1) {
        position.position = input.length;
        return input.slice(start);
      }
      position.position = idx;
      return input.slice(start, position.position);
    }
    function stringPercentDecode(input) {
      const bytes = encoder4.encode(input);
      return percentDecode(bytes);
    }
    function percentDecode(input) {
      const output = [];
      for (let i = 0; i < input.length; i++) {
        const byte = input[i];
        if (byte !== 37) {
          output.push(byte);
        } else if (byte === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) {
          output.push(37);
        } else {
          const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);
          const bytePoint = Number.parseInt(nextTwoBytes, 16);
          output.push(bytePoint);
          i += 2;
        }
      }
      return Uint8Array.from(output);
    }
    function parseMIMEType(input) {
      input = removeHTTPWhitespace(input, true, true);
      const position = { position: 0 };
      const type = collectASequenceOfCodePointsFast(
        "/",
        input,
        position
      );
      if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
        return "failure";
      }
      if (position.position > input.length) {
        return "failure";
      }
      position.position++;
      let subtype = collectASequenceOfCodePointsFast(
        ";",
        input,
        position
      );
      subtype = removeHTTPWhitespace(subtype, false, true);
      if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
        return "failure";
      }
      const typeLowercase = type.toLowerCase();
      const subtypeLowercase = subtype.toLowerCase();
      const mimeType = {
        type: typeLowercase,
        subtype: subtypeLowercase,
        /** @type {Map<string, string>} */
        parameters: /* @__PURE__ */ new Map(),
        // https://mimesniff.spec.whatwg.org/#mime-type-essence
        essence: `${typeLowercase}/${subtypeLowercase}`
      };
      while (position.position < input.length) {
        position.position++;
        collectASequenceOfCodePoints(
          // https://fetch.spec.whatwg.org/#http-whitespace
          (char) => HTTP_WHITESPACE_REGEX.test(char),
          input,
          position
        );
        let parameterName = collectASequenceOfCodePoints(
          (char) => char !== ";" && char !== "=",
          input,
          position
        );
        parameterName = parameterName.toLowerCase();
        if (position.position < input.length) {
          if (input[position.position] === ";") {
            continue;
          }
          position.position++;
        }
        if (position.position > input.length) {
          break;
        }
        let parameterValue = null;
        if (input[position.position] === '"') {
          parameterValue = collectAnHTTPQuotedString(input, position, true);
          collectASequenceOfCodePointsFast(
            ";",
            input,
            position
          );
        } else {
          parameterValue = collectASequenceOfCodePointsFast(
            ";",
            input,
            position
          );
          parameterValue = removeHTTPWhitespace(parameterValue, false, true);
          if (parameterValue.length === 0) {
            continue;
          }
        }
        if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {
          mimeType.parameters.set(parameterName, parameterValue);
        }
      }
      return mimeType;
    }
    function forgivingBase64(data) {
      data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
      if (data.length % 4 === 0) {
        data = data.replace(/=?=$/, "");
      }
      if (data.length % 4 === 1) {
        return "failure";
      }
      if (/[^+/0-9A-Za-z]/.test(data)) {
        return "failure";
      }
      const binary = atob2(data);
      const bytes = new Uint8Array(binary.length);
      for (let byte = 0; byte < binary.length; byte++) {
        bytes[byte] = binary.charCodeAt(byte);
      }
      return bytes;
    }
    function collectAnHTTPQuotedString(input, position, extractValue) {
      const positionStart = position.position;
      let value = "";
      assert(input[position.position] === '"');
      position.position++;
      while (true) {
        value += collectASequenceOfCodePoints(
          (char) => char !== '"' && char !== "\\",
          input,
          position
        );
        if (position.position >= input.length) {
          break;
        }
        const quoteOrBackslash = input[position.position];
        position.position++;
        if (quoteOrBackslash === "\\") {
          if (position.position >= input.length) {
            value += "\\";
            break;
          }
          value += input[position.position];
          position.position++;
        } else {
          assert(quoteOrBackslash === '"');
          break;
        }
      }
      if (extractValue) {
        return value;
      }
      return input.slice(positionStart, position.position);
    }
    function serializeAMimeType(mimeType) {
      assert(mimeType !== "failure");
      const { parameters, essence } = mimeType;
      let serialization = essence;
      for (let [name, value] of parameters.entries()) {
        serialization += ";";
        serialization += name;
        serialization += "=";
        if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
          value = value.replace(/(\\|")/g, "\\$1");
          value = '"' + value;
          value += '"';
        }
        serialization += value;
      }
      return serialization;
    }
    function isHTTPWhiteSpace(char) {
      return char === "\r" || char === "\n" || char === "	" || char === " ";
    }
    function removeHTTPWhitespace(str, leading = true, trailing = true) {
      let lead = 0;
      let trail = str.length - 1;
      if (leading) {
        for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++)
          ;
      }
      if (trailing) {
        for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--)
          ;
      }
      return str.slice(lead, trail + 1);
    }
    function isASCIIWhitespace(char) {
      return char === "\r" || char === "\n" || char === "	" || char === "\f" || char === " ";
    }
    function removeASCIIWhitespace(str, leading = true, trailing = true) {
      let lead = 0;
      let trail = str.length - 1;
      if (leading) {
        for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++)
          ;
      }
      if (trailing) {
        for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--)
          ;
      }
      return str.slice(lead, trail + 1);
    }
    module2.exports = {
      dataURLProcessor,
      URLSerializer,
      collectASequenceOfCodePoints,
      collectASequenceOfCodePointsFast,
      stringPercentDecode,
      parseMIMEType,
      collectAnHTTPQuotedString,
      serializeAMimeType
    };
  }
});

// node_modules/undici/lib/fetch/file.js
var require_file = __commonJS({
  "node_modules/undici/lib/fetch/file.js"(exports, module2) {
    "use strict";
    var { Blob: Blob2, File: NativeFile } = require("buffer");
    var { types } = require("util");
    var { kState } = require_symbols2();
    var { isBlobLike } = require_util2();
    var { webidl } = require_webidl();
    var { parseMIMEType, serializeAMimeType } = require_dataURL();
    var { kEnumerableProperty } = require_util();
    var encoder4 = new TextEncoder();
    var File2 = class extends Blob2 {
      constructor(fileBits, fileName, options2 = {}) {
        webidl.argumentLengthCheck(arguments, 2, { header: "File constructor" });
        fileBits = webidl.converters["sequence<BlobPart>"](fileBits);
        fileName = webidl.converters.USVString(fileName);
        options2 = webidl.converters.FilePropertyBag(options2);
        const n = fileName;
        let t = options2.type;
        let d;
        substep: {
          if (t) {
            t = parseMIMEType(t);
            if (t === "failure") {
              t = "";
              break substep;
            }
            t = serializeAMimeType(t).toLowerCase();
          }
          d = options2.lastModified;
        }
        super(processBlobParts(fileBits, options2), { type: t });
        this[kState] = {
          name: n,
          lastModified: d,
          type: t
        };
      }
      get name() {
        webidl.brandCheck(this, File2);
        return this[kState].name;
      }
      get lastModified() {
        webidl.brandCheck(this, File2);
        return this[kState].lastModified;
      }
      get type() {
        webidl.brandCheck(this, File2);
        return this[kState].type;
      }
    };
    var FileLike = class {
      constructor(blobLike, fileName, options2 = {}) {
        const n = fileName;
        const t = options2.type;
        const d = options2.lastModified ?? Date.now();
        this[kState] = {
          blobLike,
          name: n,
          type: t,
          lastModified: d
        };
      }
      stream(...args) {
        webidl.brandCheck(this, FileLike);
        return this[kState].blobLike.stream(...args);
      }
      arrayBuffer(...args) {
        webidl.brandCheck(this, FileLike);
        return this[kState].blobLike.arrayBuffer(...args);
      }
      slice(...args) {
        webidl.brandCheck(this, FileLike);
        return this[kState].blobLike.slice(...args);
      }
      text(...args) {
        webidl.brandCheck(this, FileLike);
        return this[kState].blobLike.text(...args);
      }
      get size() {
        webidl.brandCheck(this, FileLike);
        return this[kState].blobLike.size;
      }
      get type() {
        webidl.brandCheck(this, FileLike);
        return this[kState].blobLike.type;
      }
      get name() {
        webidl.brandCheck(this, FileLike);
        return this[kState].name;
      }
      get lastModified() {
        webidl.brandCheck(this, FileLike);
        return this[kState].lastModified;
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
    };
    Object.defineProperties(File2.prototype, {
      [Symbol.toStringTag]: {
        value: "File",
        configurable: true
      },
      name: kEnumerableProperty,
      lastModified: kEnumerableProperty
    });
    webidl.converters.Blob = webidl.interfaceConverter(Blob2);
    webidl.converters.BlobPart = function(V, opts) {
      if (webidl.util.Type(V) === "Object") {
        if (isBlobLike(V)) {
          return webidl.converters.Blob(V, { strict: false });
        }
        if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
          return webidl.converters.BufferSource(V, opts);
        }
      }
      return webidl.converters.USVString(V, opts);
    };
    webidl.converters["sequence<BlobPart>"] = webidl.sequenceConverter(
      webidl.converters.BlobPart
    );
    webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
      {
        key: "lastModified",
        converter: webidl.converters["long long"],
        get defaultValue() {
          return Date.now();
        }
      },
      {
        key: "type",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "endings",
        converter: (value) => {
          value = webidl.converters.DOMString(value);
          value = value.toLowerCase();
          if (value !== "native") {
            value = "transparent";
          }
          return value;
        },
        defaultValue: "transparent"
      }
    ]);
    function processBlobParts(parts, options2) {
      const bytes = [];
      for (const element of parts) {
        if (typeof element === "string") {
          let s2 = element;
          if (options2.endings === "native") {
            s2 = convertLineEndingsNative(s2);
          }
          bytes.push(encoder4.encode(s2));
        } else if (types.isAnyArrayBuffer(element) || types.isTypedArray(element)) {
          if (!element.buffer) {
            bytes.push(new Uint8Array(element));
          } else {
            bytes.push(
              new Uint8Array(element.buffer, element.byteOffset, element.byteLength)
            );
          }
        } else if (isBlobLike(element)) {
          bytes.push(element);
        }
      }
      return bytes;
    }
    function convertLineEndingsNative(s2) {
      let nativeLineEnding = "\n";
      if (process.platform === "win32") {
        nativeLineEnding = "\r\n";
      }
      return s2.replace(/\r?\n/g, nativeLineEnding);
    }
    function isFileLike(object) {
      return NativeFile && object instanceof NativeFile || object instanceof File2 || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && object[Symbol.toStringTag] === "File";
    }
    module2.exports = { File: File2, FileLike, isFileLike };
  }
});

// node_modules/undici/lib/fetch/formdata.js
var require_formdata = __commonJS({
  "node_modules/undici/lib/fetch/formdata.js"(exports, module2) {
    "use strict";
    var { isBlobLike, toUSVString, makeIterator } = require_util2();
    var { kState } = require_symbols2();
    var { File: UndiciFile2, FileLike, isFileLike } = require_file();
    var { webidl } = require_webidl();
    var { Blob: Blob2, File: NativeFile } = require("buffer");
    var File2 = NativeFile ?? UndiciFile2;
    var FormData3 = class {
      constructor(form) {
        if (form !== void 0) {
          throw webidl.errors.conversionFailed({
            prefix: "FormData constructor",
            argument: "Argument 1",
            types: ["undefined"]
          });
        }
        this[kState] = [];
      }
      append(name, value, filename = void 0) {
        webidl.brandCheck(this, FormData3);
        webidl.argumentLengthCheck(arguments, 2, { header: "FormData.append" });
        if (arguments.length === 3 && !isBlobLike(value)) {
          throw new TypeError(
            "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
          );
        }
        name = webidl.converters.USVString(name);
        value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
        filename = arguments.length === 3 ? webidl.converters.USVString(filename) : void 0;
        const entry = makeEntry(name, value, filename);
        this[kState].push(entry);
      }
      delete(name) {
        webidl.brandCheck(this, FormData3);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.delete" });
        name = webidl.converters.USVString(name);
        this[kState] = this[kState].filter((entry) => entry.name !== name);
      }
      get(name) {
        webidl.brandCheck(this, FormData3);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.get" });
        name = webidl.converters.USVString(name);
        const idx = this[kState].findIndex((entry) => entry.name === name);
        if (idx === -1) {
          return null;
        }
        return this[kState][idx].value;
      }
      getAll(name) {
        webidl.brandCheck(this, FormData3);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.getAll" });
        name = webidl.converters.USVString(name);
        return this[kState].filter((entry) => entry.name === name).map((entry) => entry.value);
      }
      has(name) {
        webidl.brandCheck(this, FormData3);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.has" });
        name = webidl.converters.USVString(name);
        return this[kState].findIndex((entry) => entry.name === name) !== -1;
      }
      set(name, value, filename = void 0) {
        webidl.brandCheck(this, FormData3);
        webidl.argumentLengthCheck(arguments, 2, { header: "FormData.set" });
        if (arguments.length === 3 && !isBlobLike(value)) {
          throw new TypeError(
            "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
          );
        }
        name = webidl.converters.USVString(name);
        value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
        filename = arguments.length === 3 ? toUSVString(filename) : void 0;
        const entry = makeEntry(name, value, filename);
        const idx = this[kState].findIndex((entry2) => entry2.name === name);
        if (idx !== -1) {
          this[kState] = [
            ...this[kState].slice(0, idx),
            entry,
            ...this[kState].slice(idx + 1).filter((entry2) => entry2.name !== name)
          ];
        } else {
          this[kState].push(entry);
        }
      }
      entries() {
        webidl.brandCheck(this, FormData3);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "key+value"
        );
      }
      keys() {
        webidl.brandCheck(this, FormData3);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "key"
        );
      }
      values() {
        webidl.brandCheck(this, FormData3);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "value"
        );
      }
      /**
       * @param {(value: string, key: string, self: FormData) => void} callbackFn
       * @param {unknown} thisArg
       */
      forEach(callbackFn, thisArg = globalThis) {
        webidl.brandCheck(this, FormData3);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.forEach" });
        if (typeof callbackFn !== "function") {
          throw new TypeError(
            "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'."
          );
        }
        for (const [key2, value] of this) {
          callbackFn.apply(thisArg, [value, key2, this]);
        }
      }
    };
    FormData3.prototype[Symbol.iterator] = FormData3.prototype.entries;
    Object.defineProperties(FormData3.prototype, {
      [Symbol.toStringTag]: {
        value: "FormData",
        configurable: true
      }
    });
    function makeEntry(name, value, filename) {
      name = Buffer.from(name).toString("utf8");
      if (typeof value === "string") {
        value = Buffer.from(value).toString("utf8");
      } else {
        if (!isFileLike(value)) {
          value = value instanceof Blob2 ? new File2([value], "blob", { type: value.type }) : new FileLike(value, "blob", { type: value.type });
        }
        if (filename !== void 0) {
          const options2 = {
            type: value.type,
            lastModified: value.lastModified
          };
          value = NativeFile && value instanceof NativeFile || value instanceof UndiciFile2 ? new File2([value], filename, options2) : new FileLike(value, filename, options2);
        }
      }
      return { name, value };
    }
    module2.exports = { FormData: FormData3 };
  }
});

// node_modules/undici/lib/fetch/body.js
var require_body = __commonJS({
  "node_modules/undici/lib/fetch/body.js"(exports, module2) {
    "use strict";
    var Busboy = require_main();
    var util = require_util();
    var {
      ReadableStreamFrom,
      isBlobLike,
      isReadableStreamLike,
      readableStreamClose,
      createDeferredPromise,
      fullyReadBody
    } = require_util2();
    var { FormData: FormData3 } = require_formdata();
    var { kState } = require_symbols2();
    var { webidl } = require_webidl();
    var { DOMException: DOMException2, structuredClone } = require_constants();
    var { Blob: Blob2, File: NativeFile } = require("buffer");
    var { kBodyUsed } = require_symbols();
    var assert = require("assert");
    var { isErrored } = require_util();
    var { isUint8Array, isArrayBuffer } = require("util/types");
    var { File: UndiciFile2 } = require_file();
    var { parseMIMEType, serializeAMimeType } = require_dataURL();
    var ReadableStream3 = globalThis.ReadableStream;
    var File2 = NativeFile ?? UndiciFile2;
    var textEncoder = new TextEncoder();
    var textDecoder = new TextDecoder();
    function extractBody(object, keepalive = false) {
      if (!ReadableStream3) {
        ReadableStream3 = require("stream/web").ReadableStream;
      }
      let stream = null;
      if (object instanceof ReadableStream3) {
        stream = object;
      } else if (isBlobLike(object)) {
        stream = object.stream();
      } else {
        stream = new ReadableStream3({
          async pull(controller) {
            controller.enqueue(
              typeof source === "string" ? textEncoder.encode(source) : source
            );
            queueMicrotask(() => readableStreamClose(controller));
          },
          start() {
          },
          type: void 0
        });
      }
      assert(isReadableStreamLike(stream));
      let action = null;
      let source = null;
      let length = null;
      let type = null;
      if (typeof object === "string") {
        source = object;
        type = "text/plain;charset=UTF-8";
      } else if (object instanceof URLSearchParams) {
        source = object.toString();
        type = "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isArrayBuffer(object)) {
        source = new Uint8Array(object.slice());
      } else if (ArrayBuffer.isView(object)) {
        source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
      } else if (util.isFormDataLike(object)) {
        const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, "0")}`;
        const prefix = `--${boundary}\r
Content-Disposition: form-data`;
        const escape2 = (str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
        const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, "\r\n");
        const blobParts = [];
        const rn = new Uint8Array([13, 10]);
        length = 0;
        let hasUnknownSizeValue = false;
        for (const [name, value] of object) {
          if (typeof value === "string") {
            const chunk2 = textEncoder.encode(prefix + `; name="${escape2(normalizeLinefeeds(name))}"\r
\r
${normalizeLinefeeds(value)}\r
`);
            blobParts.push(chunk2);
            length += chunk2.byteLength;
          } else {
            const chunk2 = textEncoder.encode(`${prefix}; name="${escape2(normalizeLinefeeds(name))}"` + (value.name ? `; filename="${escape2(value.name)}"` : "") + `\r
Content-Type: ${value.type || "application/octet-stream"}\r
\r
`);
            blobParts.push(chunk2, value, rn);
            if (typeof value.size === "number") {
              length += chunk2.byteLength + value.size + rn.byteLength;
            } else {
              hasUnknownSizeValue = true;
            }
          }
        }
        const chunk = textEncoder.encode(`--${boundary}--`);
        blobParts.push(chunk);
        length += chunk.byteLength;
        if (hasUnknownSizeValue) {
          length = null;
        }
        source = object;
        action = async function* () {
          for (const part of blobParts) {
            if (part.stream) {
              yield* part.stream();
            } else {
              yield part;
            }
          }
        };
        type = "multipart/form-data; boundary=" + boundary;
      } else if (isBlobLike(object)) {
        source = object;
        length = object.size;
        if (object.type) {
          type = object.type;
        }
      } else if (typeof object[Symbol.asyncIterator] === "function") {
        if (keepalive) {
          throw new TypeError("keepalive");
        }
        if (util.isDisturbed(object) || object.locked) {
          throw new TypeError(
            "Response body object should not be disturbed or locked"
          );
        }
        stream = object instanceof ReadableStream3 ? object : ReadableStreamFrom(object);
      }
      if (typeof source === "string" || util.isBuffer(source)) {
        length = Buffer.byteLength(source);
      }
      if (action != null) {
        let iterator;
        stream = new ReadableStream3({
          async start() {
            iterator = action(object)[Symbol.asyncIterator]();
          },
          async pull(controller) {
            const { value, done } = await iterator.next();
            if (done) {
              queueMicrotask(() => {
                controller.close();
              });
            } else {
              if (!isErrored(stream)) {
                controller.enqueue(new Uint8Array(value));
              }
            }
            return controller.desiredSize > 0;
          },
          async cancel(reason) {
            await iterator.return();
          },
          type: void 0
        });
      }
      const body = { stream, source, length };
      return [body, type];
    }
    function safelyExtractBody(object, keepalive = false) {
      if (!ReadableStream3) {
        ReadableStream3 = require("stream/web").ReadableStream;
      }
      if (object instanceof ReadableStream3) {
        assert(!util.isDisturbed(object), "The body has already been consumed.");
        assert(!object.locked, "The stream is locked.");
      }
      return extractBody(object, keepalive);
    }
    function cloneBody(body) {
      const [out1, out2] = body.stream.tee();
      const out2Clone = structuredClone(out2, { transfer: [out2] });
      const [, finalClone] = out2Clone.tee();
      body.stream = out1;
      return {
        stream: finalClone,
        length: body.length,
        source: body.source
      };
    }
    async function* consumeBody(body) {
      if (body) {
        if (isUint8Array(body)) {
          yield body;
        } else {
          const stream = body.stream;
          if (util.isDisturbed(stream)) {
            throw new TypeError("The body has already been consumed.");
          }
          if (stream.locked) {
            throw new TypeError("The stream is locked.");
          }
          stream[kBodyUsed] = true;
          yield* stream;
        }
      }
    }
    function throwIfAborted(state) {
      if (state.aborted) {
        throw new DOMException2("The operation was aborted.", "AbortError");
      }
    }
    function bodyMixinMethods(instance) {
      const methods = {
        blob() {
          return specConsumeBody(this, (bytes) => {
            let mimeType = bodyMimeType(this);
            if (mimeType === "failure") {
              mimeType = "";
            } else if (mimeType) {
              mimeType = serializeAMimeType(mimeType);
            }
            return new Blob2([bytes], { type: mimeType });
          }, instance);
        },
        arrayBuffer() {
          return specConsumeBody(this, (bytes) => {
            return new Uint8Array(bytes).buffer;
          }, instance);
        },
        text() {
          return specConsumeBody(this, utf8DecodeBytes, instance);
        },
        json() {
          return specConsumeBody(this, parseJSONFromBytes, instance);
        },
        async formData() {
          webidl.brandCheck(this, instance);
          throwIfAborted(this[kState]);
          const contentType = this.headers.get("Content-Type");
          if (/multipart\/form-data/.test(contentType)) {
            const headers = {};
            for (const [key2, value] of this.headers)
              headers[key2.toLowerCase()] = value;
            const responseFormData = new FormData3();
            let busboy;
            try {
              busboy = new Busboy({
                headers,
                preservePath: true
              });
            } catch (err) {
              throw new DOMException2(`${err}`, "AbortError");
            }
            busboy.on("field", (name, value) => {
              responseFormData.append(name, value);
            });
            busboy.on("file", (name, value, filename, encoding, mimeType) => {
              const chunks = [];
              if (encoding === "base64" || encoding.toLowerCase() === "base64") {
                let base64chunk = "";
                value.on("data", (chunk) => {
                  base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
                  const end = base64chunk.length - base64chunk.length % 4;
                  chunks.push(Buffer.from(base64chunk.slice(0, end), "base64"));
                  base64chunk = base64chunk.slice(end);
                });
                value.on("end", () => {
                  chunks.push(Buffer.from(base64chunk, "base64"));
                  responseFormData.append(name, new File2(chunks, filename, { type: mimeType }));
                });
              } else {
                value.on("data", (chunk) => {
                  chunks.push(chunk);
                });
                value.on("end", () => {
                  responseFormData.append(name, new File2(chunks, filename, { type: mimeType }));
                });
              }
            });
            const busboyResolve = new Promise((resolve2, reject) => {
              busboy.on("finish", resolve2);
              busboy.on("error", (err) => reject(new TypeError(err)));
            });
            if (this.body !== null)
              for await (const chunk of consumeBody(this[kState].body))
                busboy.write(chunk);
            busboy.end();
            await busboyResolve;
            return responseFormData;
          } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
            let entries;
            try {
              let text2 = "";
              const streamingDecoder = new TextDecoder("utf-8", { ignoreBOM: true });
              for await (const chunk of consumeBody(this[kState].body)) {
                if (!isUint8Array(chunk)) {
                  throw new TypeError("Expected Uint8Array chunk");
                }
                text2 += streamingDecoder.decode(chunk, { stream: true });
              }
              text2 += streamingDecoder.decode();
              entries = new URLSearchParams(text2);
            } catch (err) {
              throw Object.assign(new TypeError(), { cause: err });
            }
            const formData = new FormData3();
            for (const [name, value] of entries) {
              formData.append(name, value);
            }
            return formData;
          } else {
            await Promise.resolve();
            throwIfAborted(this[kState]);
            throw webidl.errors.exception({
              header: `${instance.name}.formData`,
              message: "Could not parse content as FormData."
            });
          }
        }
      };
      return methods;
    }
    function mixinBody(prototype) {
      Object.assign(prototype.prototype, bodyMixinMethods(prototype));
    }
    async function specConsumeBody(object, convertBytesToJSValue, instance) {
      webidl.brandCheck(object, instance);
      throwIfAborted(object[kState]);
      if (bodyUnusable(object[kState].body)) {
        throw new TypeError("Body is unusable");
      }
      const promise = createDeferredPromise();
      const errorSteps = (error3) => promise.reject(error3);
      const successSteps = (data) => {
        try {
          promise.resolve(convertBytesToJSValue(data));
        } catch (e) {
          errorSteps(e);
        }
      };
      if (object[kState].body == null) {
        successSteps(new Uint8Array());
        return promise.promise;
      }
      await fullyReadBody(object[kState].body, successSteps, errorSteps);
      return promise.promise;
    }
    function bodyUnusable(body) {
      return body != null && (body.stream.locked || util.isDisturbed(body.stream));
    }
    function utf8DecodeBytes(buffer2) {
      if (buffer2.length === 0) {
        return "";
      }
      if (buffer2[0] === 239 && buffer2[1] === 187 && buffer2[2] === 191) {
        buffer2 = buffer2.subarray(3);
      }
      const output = textDecoder.decode(buffer2);
      return output;
    }
    function parseJSONFromBytes(bytes) {
      return JSON.parse(utf8DecodeBytes(bytes));
    }
    function bodyMimeType(object) {
      const { headersList } = object[kState];
      const contentType = headersList.get("content-type");
      if (contentType === null) {
        return "failure";
      }
      return parseMIMEType(contentType);
    }
    module2.exports = {
      extractBody,
      safelyExtractBody,
      cloneBody,
      mixinBody
    };
  }
});

// node_modules/undici/lib/core/request.js
var require_request = __commonJS({
  "node_modules/undici/lib/core/request.js"(exports, module2) {
    "use strict";
    var {
      InvalidArgumentError,
      NotSupportedError
    } = require_errors();
    var assert = require("assert");
    var { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require_symbols();
    var util = require_util();
    var tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
    var headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    var invalidPathRegex = /[^\u0021-\u00ff]/;
    var kHandler = Symbol("handler");
    var channels = {};
    var extractBody;
    try {
      const diagnosticsChannel = require("diagnostics_channel");
      channels.create = diagnosticsChannel.channel("undici:request:create");
      channels.bodySent = diagnosticsChannel.channel("undici:request:bodySent");
      channels.headers = diagnosticsChannel.channel("undici:request:headers");
      channels.trailers = diagnosticsChannel.channel("undici:request:trailers");
      channels.error = diagnosticsChannel.channel("undici:request:error");
    } catch {
      channels.create = { hasSubscribers: false };
      channels.bodySent = { hasSubscribers: false };
      channels.headers = { hasSubscribers: false };
      channels.trailers = { hasSubscribers: false };
      channels.error = { hasSubscribers: false };
    }
    var Request3 = class {
      constructor(origin, {
        path: path2,
        method,
        body,
        headers,
        query: query5,
        idempotent,
        blocking,
        upgrade,
        headersTimeout,
        bodyTimeout,
        reset: reset2,
        throwOnError,
        expectContinue
      }, handler) {
        if (typeof path2 !== "string") {
          throw new InvalidArgumentError("path must be a string");
        } else if (path2[0] !== "/" && !(path2.startsWith("http://") || path2.startsWith("https://")) && method !== "CONNECT") {
          throw new InvalidArgumentError("path must be an absolute URL or start with a slash");
        } else if (invalidPathRegex.exec(path2) !== null) {
          throw new InvalidArgumentError("invalid request path");
        }
        if (typeof method !== "string") {
          throw new InvalidArgumentError("method must be a string");
        } else if (tokenRegExp.exec(method) === null) {
          throw new InvalidArgumentError("invalid request method");
        }
        if (upgrade && typeof upgrade !== "string") {
          throw new InvalidArgumentError("upgrade must be a string");
        }
        if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
          throw new InvalidArgumentError("invalid headersTimeout");
        }
        if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
          throw new InvalidArgumentError("invalid bodyTimeout");
        }
        if (reset2 != null && typeof reset2 !== "boolean") {
          throw new InvalidArgumentError("invalid reset");
        }
        if (expectContinue != null && typeof expectContinue !== "boolean") {
          throw new InvalidArgumentError("invalid expectContinue");
        }
        this.headersTimeout = headersTimeout;
        this.bodyTimeout = bodyTimeout;
        this.throwOnError = throwOnError === true;
        this.method = method;
        this.abort = null;
        if (body == null) {
          this.body = null;
        } else if (util.isStream(body)) {
          this.body = body;
          const rState = this.body._readableState;
          if (!rState || !rState.autoDestroy) {
            this.endHandler = function autoDestroy() {
              util.destroy(this);
            };
            this.body.on("end", this.endHandler);
          }
          this.errorHandler = (err) => {
            if (this.abort) {
              this.abort(err);
            } else {
              this.error = err;
            }
          };
          this.body.on("error", this.errorHandler);
        } else if (util.isBuffer(body)) {
          this.body = body.byteLength ? body : null;
        } else if (ArrayBuffer.isView(body)) {
          this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
        } else if (body instanceof ArrayBuffer) {
          this.body = body.byteLength ? Buffer.from(body) : null;
        } else if (typeof body === "string") {
          this.body = body.length ? Buffer.from(body) : null;
        } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {
          this.body = body;
        } else {
          throw new InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
        }
        this.completed = false;
        this.aborted = false;
        this.upgrade = upgrade || null;
        this.path = query5 ? util.buildURL(path2, query5) : path2;
        this.origin = origin;
        this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
        this.blocking = blocking == null ? false : blocking;
        this.reset = reset2 == null ? null : reset2;
        this.host = null;
        this.contentLength = null;
        this.contentType = null;
        this.headers = "";
        this.expectContinue = expectContinue != null ? expectContinue : false;
        if (Array.isArray(headers)) {
          if (headers.length % 2 !== 0) {
            throw new InvalidArgumentError("headers array must be even");
          }
          for (let i = 0; i < headers.length; i += 2) {
            processHeader(this, headers[i], headers[i + 1]);
          }
        } else if (headers && typeof headers === "object") {
          const keys = Object.keys(headers);
          for (let i = 0; i < keys.length; i++) {
            const key2 = keys[i];
            processHeader(this, key2, headers[key2]);
          }
        } else if (headers != null) {
          throw new InvalidArgumentError("headers must be an object or an array");
        }
        if (util.isFormDataLike(this.body)) {
          if (util.nodeMajor < 16 || util.nodeMajor === 16 && util.nodeMinor < 8) {
            throw new InvalidArgumentError("Form-Data bodies are only supported in node v16.8 and newer.");
          }
          if (!extractBody) {
            extractBody = require_body().extractBody;
          }
          const [bodyStream, contentType] = extractBody(body);
          if (this.contentType == null) {
            this.contentType = contentType;
            this.headers += `content-type: ${contentType}\r
`;
          }
          this.body = bodyStream.stream;
          this.contentLength = bodyStream.length;
        } else if (util.isBlobLike(body) && this.contentType == null && body.type) {
          this.contentType = body.type;
          this.headers += `content-type: ${body.type}\r
`;
        }
        util.validateHandler(handler, method, upgrade);
        this.servername = util.getServerName(this.host);
        this[kHandler] = handler;
        if (channels.create.hasSubscribers) {
          channels.create.publish({ request: this });
        }
      }
      onBodySent(chunk) {
        if (this[kHandler].onBodySent) {
          try {
            return this[kHandler].onBodySent(chunk);
          } catch (err) {
            this.abort(err);
          }
        }
      }
      onRequestSent() {
        if (channels.bodySent.hasSubscribers) {
          channels.bodySent.publish({ request: this });
        }
        if (this[kHandler].onRequestSent) {
          try {
            return this[kHandler].onRequestSent();
          } catch (err) {
            this.abort(err);
          }
        }
      }
      onConnect(abort) {
        assert(!this.aborted);
        assert(!this.completed);
        if (this.error) {
          abort(this.error);
        } else {
          this.abort = abort;
          return this[kHandler].onConnect(abort);
        }
      }
      onHeaders(statusCode, headers, resume, statusText) {
        assert(!this.aborted);
        assert(!this.completed);
        if (channels.headers.hasSubscribers) {
          channels.headers.publish({ request: this, response: { statusCode, headers, statusText } });
        }
        try {
          return this[kHandler].onHeaders(statusCode, headers, resume, statusText);
        } catch (err) {
          this.abort(err);
        }
      }
      onData(chunk) {
        assert(!this.aborted);
        assert(!this.completed);
        try {
          return this[kHandler].onData(chunk);
        } catch (err) {
          this.abort(err);
          return false;
        }
      }
      onUpgrade(statusCode, headers, socket) {
        assert(!this.aborted);
        assert(!this.completed);
        return this[kHandler].onUpgrade(statusCode, headers, socket);
      }
      onComplete(trailers) {
        this.onFinally();
        assert(!this.aborted);
        this.completed = true;
        if (channels.trailers.hasSubscribers) {
          channels.trailers.publish({ request: this, trailers });
        }
        try {
          return this[kHandler].onComplete(trailers);
        } catch (err) {
          this.onError(err);
        }
      }
      onError(error3) {
        this.onFinally();
        if (channels.error.hasSubscribers) {
          channels.error.publish({ request: this, error: error3 });
        }
        if (this.aborted) {
          return;
        }
        this.aborted = true;
        return this[kHandler].onError(error3);
      }
      onFinally() {
        if (this.errorHandler) {
          this.body.off("error", this.errorHandler);
          this.errorHandler = null;
        }
        if (this.endHandler) {
          this.body.off("end", this.endHandler);
          this.endHandler = null;
        }
      }
      // TODO: adjust to support H2
      addHeader(key2, value) {
        processHeader(this, key2, value);
        return this;
      }
      static [kHTTP1BuildRequest](origin, opts, handler) {
        return new Request3(origin, opts, handler);
      }
      static [kHTTP2BuildRequest](origin, opts, handler) {
        const headers = opts.headers;
        opts = { ...opts, headers: null };
        const request = new Request3(origin, opts, handler);
        request.headers = {};
        if (Array.isArray(headers)) {
          if (headers.length % 2 !== 0) {
            throw new InvalidArgumentError("headers array must be even");
          }
          for (let i = 0; i < headers.length; i += 2) {
            processHeader(request, headers[i], headers[i + 1], true);
          }
        } else if (headers && typeof headers === "object") {
          const keys = Object.keys(headers);
          for (let i = 0; i < keys.length; i++) {
            const key2 = keys[i];
            processHeader(request, key2, headers[key2], true);
          }
        } else if (headers != null) {
          throw new InvalidArgumentError("headers must be an object or an array");
        }
        return request;
      }
      static [kHTTP2CopyHeaders](raw) {
        const rawHeaders = raw.split("\r\n");
        const headers = {};
        for (const header of rawHeaders) {
          const [key2, value] = header.split(": ");
          if (value == null || value.length === 0)
            continue;
          if (headers[key2])
            headers[key2] += `,${value}`;
          else
            headers[key2] = value;
        }
        return headers;
      }
    };
    function processHeaderValue(key2, val, skipAppend) {
      if (val && typeof val === "object") {
        throw new InvalidArgumentError(`invalid ${key2} header`);
      }
      val = val != null ? `${val}` : "";
      if (headerCharRegex.exec(val) !== null) {
        throw new InvalidArgumentError(`invalid ${key2} header`);
      }
      return skipAppend ? val : `${key2}: ${val}\r
`;
    }
    function processHeader(request, key2, val, skipAppend = false) {
      if (val && (typeof val === "object" && !Array.isArray(val))) {
        throw new InvalidArgumentError(`invalid ${key2} header`);
      } else if (val === void 0) {
        return;
      }
      if (request.host === null && key2.length === 4 && key2.toLowerCase() === "host") {
        if (headerCharRegex.exec(val) !== null) {
          throw new InvalidArgumentError(`invalid ${key2} header`);
        }
        request.host = val;
      } else if (request.contentLength === null && key2.length === 14 && key2.toLowerCase() === "content-length") {
        request.contentLength = parseInt(val, 10);
        if (!Number.isFinite(request.contentLength)) {
          throw new InvalidArgumentError("invalid content-length header");
        }
      } else if (request.contentType === null && key2.length === 12 && key2.toLowerCase() === "content-type") {
        request.contentType = val;
        if (skipAppend)
          request.headers[key2] = processHeaderValue(key2, val, skipAppend);
        else
          request.headers += processHeaderValue(key2, val);
      } else if (key2.length === 17 && key2.toLowerCase() === "transfer-encoding") {
        throw new InvalidArgumentError("invalid transfer-encoding header");
      } else if (key2.length === 10 && key2.toLowerCase() === "connection") {
        const value = typeof val === "string" ? val.toLowerCase() : null;
        if (value !== "close" && value !== "keep-alive") {
          throw new InvalidArgumentError("invalid connection header");
        } else if (value === "close") {
          request.reset = true;
        }
      } else if (key2.length === 10 && key2.toLowerCase() === "keep-alive") {
        throw new InvalidArgumentError("invalid keep-alive header");
      } else if (key2.length === 7 && key2.toLowerCase() === "upgrade") {
        throw new InvalidArgumentError("invalid upgrade header");
      } else if (key2.length === 6 && key2.toLowerCase() === "expect") {
        throw new NotSupportedError("expect header not supported");
      } else if (tokenRegExp.exec(key2) === null) {
        throw new InvalidArgumentError("invalid header key");
      } else {
        if (Array.isArray(val)) {
          for (let i = 0; i < val.length; i++) {
            if (skipAppend) {
              if (request.headers[key2])
                request.headers[key2] += `,${processHeaderValue(key2, val[i], skipAppend)}`;
              else
                request.headers[key2] = processHeaderValue(key2, val[i], skipAppend);
            } else {
              request.headers += processHeaderValue(key2, val[i]);
            }
          }
        } else {
          if (skipAppend)
            request.headers[key2] = processHeaderValue(key2, val, skipAppend);
          else
            request.headers += processHeaderValue(key2, val);
        }
      }
    }
    module2.exports = Request3;
  }
});

// node_modules/undici/lib/dispatcher.js
var require_dispatcher = __commonJS({
  "node_modules/undici/lib/dispatcher.js"(exports, module2) {
    "use strict";
    var EventEmitter = require("events");
    var Dispatcher = class extends EventEmitter {
      dispatch() {
        throw new Error("not implemented");
      }
      close() {
        throw new Error("not implemented");
      }
      destroy() {
        throw new Error("not implemented");
      }
    };
    module2.exports = Dispatcher;
  }
});

// node_modules/undici/lib/dispatcher-base.js
var require_dispatcher_base = __commonJS({
  "node_modules/undici/lib/dispatcher-base.js"(exports, module2) {
    "use strict";
    var Dispatcher = require_dispatcher();
    var {
      ClientDestroyedError,
      ClientClosedError,
      InvalidArgumentError
    } = require_errors();
    var { kDestroy, kClose, kDispatch, kInterceptors } = require_symbols();
    var kDestroyed = Symbol("destroyed");
    var kClosed = Symbol("closed");
    var kOnDestroyed = Symbol("onDestroyed");
    var kOnClosed = Symbol("onClosed");
    var kInterceptedDispatch = Symbol("Intercepted Dispatch");
    var DispatcherBase = class extends Dispatcher {
      constructor() {
        super();
        this[kDestroyed] = false;
        this[kOnDestroyed] = null;
        this[kClosed] = false;
        this[kOnClosed] = [];
      }
      get destroyed() {
        return this[kDestroyed];
      }
      get closed() {
        return this[kClosed];
      }
      get interceptors() {
        return this[kInterceptors];
      }
      set interceptors(newInterceptors) {
        if (newInterceptors) {
          for (let i = newInterceptors.length - 1; i >= 0; i--) {
            const interceptor = this[kInterceptors][i];
            if (typeof interceptor !== "function") {
              throw new InvalidArgumentError("interceptor must be an function");
            }
          }
        }
        this[kInterceptors] = newInterceptors;
      }
      close(callback) {
        if (callback === void 0) {
          return new Promise((resolve2, reject) => {
            this.close((err, data) => {
              return err ? reject(err) : resolve2(data);
            });
          });
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (this[kDestroyed]) {
          queueMicrotask(() => callback(new ClientDestroyedError(), null));
          return;
        }
        if (this[kClosed]) {
          if (this[kOnClosed]) {
            this[kOnClosed].push(callback);
          } else {
            queueMicrotask(() => callback(null, null));
          }
          return;
        }
        this[kClosed] = true;
        this[kOnClosed].push(callback);
        const onClosed = () => {
          const callbacks = this[kOnClosed];
          this[kOnClosed] = null;
          for (let i = 0; i < callbacks.length; i++) {
            callbacks[i](null, null);
          }
        };
        this[kClose]().then(() => this.destroy()).then(() => {
          queueMicrotask(onClosed);
        });
      }
      destroy(err, callback) {
        if (typeof err === "function") {
          callback = err;
          err = null;
        }
        if (callback === void 0) {
          return new Promise((resolve2, reject) => {
            this.destroy(err, (err2, data) => {
              return err2 ? (
                /* istanbul ignore next: should never error */
                reject(err2)
              ) : resolve2(data);
            });
          });
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (this[kDestroyed]) {
          if (this[kOnDestroyed]) {
            this[kOnDestroyed].push(callback);
          } else {
            queueMicrotask(() => callback(null, null));
          }
          return;
        }
        if (!err) {
          err = new ClientDestroyedError();
        }
        this[kDestroyed] = true;
        this[kOnDestroyed] = this[kOnDestroyed] || [];
        this[kOnDestroyed].push(callback);
        const onDestroyed = () => {
          const callbacks = this[kOnDestroyed];
          this[kOnDestroyed] = null;
          for (let i = 0; i < callbacks.length; i++) {
            callbacks[i](null, null);
          }
        };
        this[kDestroy](err).then(() => {
          queueMicrotask(onDestroyed);
        });
      }
      [kInterceptedDispatch](opts, handler) {
        if (!this[kInterceptors] || this[kInterceptors].length === 0) {
          this[kInterceptedDispatch] = this[kDispatch];
          return this[kDispatch](opts, handler);
        }
        let dispatch = this[kDispatch].bind(this);
        for (let i = this[kInterceptors].length - 1; i >= 0; i--) {
          dispatch = this[kInterceptors][i](dispatch);
        }
        this[kInterceptedDispatch] = dispatch;
        return dispatch(opts, handler);
      }
      dispatch(opts, handler) {
        if (!handler || typeof handler !== "object") {
          throw new InvalidArgumentError("handler must be an object");
        }
        try {
          if (!opts || typeof opts !== "object") {
            throw new InvalidArgumentError("opts must be an object.");
          }
          if (this[kDestroyed] || this[kOnDestroyed]) {
            throw new ClientDestroyedError();
          }
          if (this[kClosed]) {
            throw new ClientClosedError();
          }
          return this[kInterceptedDispatch](opts, handler);
        } catch (err) {
          if (typeof handler.onError !== "function") {
            throw new InvalidArgumentError("invalid onError method");
          }
          handler.onError(err);
          return false;
        }
      }
    };
    module2.exports = DispatcherBase;
  }
});

// node_modules/undici/lib/core/connect.js
var require_connect = __commonJS({
  "node_modules/undici/lib/core/connect.js"(exports, module2) {
    "use strict";
    var net = require("net");
    var assert = require("assert");
    var util = require_util();
    var { InvalidArgumentError, ConnectTimeoutError } = require_errors();
    var tls;
    var SessionCache;
    if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
      SessionCache = class WeakSessionCache {
        constructor(maxCachedSessions) {
          this._maxCachedSessions = maxCachedSessions;
          this._sessionCache = /* @__PURE__ */ new Map();
          this._sessionRegistry = new global.FinalizationRegistry((key2) => {
            if (this._sessionCache.size < this._maxCachedSessions) {
              return;
            }
            const ref = this._sessionCache.get(key2);
            if (ref !== void 0 && ref.deref() === void 0) {
              this._sessionCache.delete(key2);
            }
          });
        }
        get(sessionKey) {
          const ref = this._sessionCache.get(sessionKey);
          return ref ? ref.deref() : null;
        }
        set(sessionKey, session) {
          if (this._maxCachedSessions === 0) {
            return;
          }
          this._sessionCache.set(sessionKey, new WeakRef(session));
          this._sessionRegistry.register(session, sessionKey);
        }
      };
    } else {
      SessionCache = class SimpleSessionCache {
        constructor(maxCachedSessions) {
          this._maxCachedSessions = maxCachedSessions;
          this._sessionCache = /* @__PURE__ */ new Map();
        }
        get(sessionKey) {
          return this._sessionCache.get(sessionKey);
        }
        set(sessionKey, session) {
          if (this._maxCachedSessions === 0) {
            return;
          }
          if (this._sessionCache.size >= this._maxCachedSessions) {
            const { value: oldestKey } = this._sessionCache.keys().next();
            this._sessionCache.delete(oldestKey);
          }
          this._sessionCache.set(sessionKey, session);
        }
      };
    }
    function buildConnector({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {
      if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
        throw new InvalidArgumentError("maxCachedSessions must be a positive integer or zero");
      }
      const options2 = { path: socketPath, ...opts };
      const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
      timeout = timeout == null ? 1e4 : timeout;
      allowH2 = allowH2 != null ? allowH2 : false;
      return function connect({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
        let socket;
        if (protocol === "https:") {
          if (!tls) {
            tls = require("tls");
          }
          servername = servername || options2.servername || util.getServerName(host) || null;
          const sessionKey = servername || hostname;
          const session = sessionCache.get(sessionKey) || null;
          assert(sessionKey);
          socket = tls.connect({
            highWaterMark: 16384,
            // TLS in node can't have bigger HWM anyway...
            ...options2,
            servername,
            session,
            localAddress,
            // TODO(HTTP/2): Add support for h2c
            ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
            socket: httpSocket,
            // upgrade socket connection
            port: port || 443,
            host: hostname
          });
          socket.on("session", function(session2) {
            sessionCache.set(sessionKey, session2);
          });
        } else {
          assert(!httpSocket, "httpSocket can only be sent on TLS update");
          socket = net.connect({
            highWaterMark: 64 * 1024,
            // Same as nodejs fs streams.
            ...options2,
            localAddress,
            port: port || 80,
            host: hostname
          });
        }
        if (options2.keepAlive == null || options2.keepAlive) {
          const keepAliveInitialDelay = options2.keepAliveInitialDelay === void 0 ? 6e4 : options2.keepAliveInitialDelay;
          socket.setKeepAlive(true, keepAliveInitialDelay);
        }
        const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout);
        socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
          cancelTimeout();
          if (callback) {
            const cb = callback;
            callback = null;
            cb(null, this);
          }
        }).on("error", function(err) {
          cancelTimeout();
          if (callback) {
            const cb = callback;
            callback = null;
            cb(err);
          }
        });
        return socket;
      };
    }
    function setupTimeout(onConnectTimeout2, timeout) {
      if (!timeout) {
        return () => {
        };
      }
      let s1 = null;
      let s2 = null;
      const timeoutId = setTimeout(() => {
        s1 = setImmediate(() => {
          if (process.platform === "win32") {
            s2 = setImmediate(() => onConnectTimeout2());
          } else {
            onConnectTimeout2();
          }
        });
      }, timeout);
      return () => {
        clearTimeout(timeoutId);
        clearImmediate(s1);
        clearImmediate(s2);
      };
    }
    function onConnectTimeout(socket) {
      util.destroy(socket, new ConnectTimeoutError());
    }
    module2.exports = buildConnector;
  }
});

// node_modules/undici/lib/llhttp/utils.js
var require_utils = __commonJS({
  "node_modules/undici/lib/llhttp/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.enumToMap = void 0;
    function enumToMap(obj) {
      const res = {};
      Object.keys(obj).forEach((key2) => {
        const value = obj[key2];
        if (typeof value === "number") {
          res[key2] = value;
        }
      });
      return res;
    }
    exports.enumToMap = enumToMap;
  }
});

// node_modules/undici/lib/llhttp/constants.js
var require_constants2 = __commonJS({
  "node_modules/undici/lib/llhttp/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
    var utils_1 = require_utils();
    var ERROR;
    (function(ERROR2) {
      ERROR2[ERROR2["OK"] = 0] = "OK";
      ERROR2[ERROR2["INTERNAL"] = 1] = "INTERNAL";
      ERROR2[ERROR2["STRICT"] = 2] = "STRICT";
      ERROR2[ERROR2["LF_EXPECTED"] = 3] = "LF_EXPECTED";
      ERROR2[ERROR2["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
      ERROR2[ERROR2["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
      ERROR2[ERROR2["INVALID_METHOD"] = 6] = "INVALID_METHOD";
      ERROR2[ERROR2["INVALID_URL"] = 7] = "INVALID_URL";
      ERROR2[ERROR2["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
      ERROR2[ERROR2["INVALID_VERSION"] = 9] = "INVALID_VERSION";
      ERROR2[ERROR2["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
      ERROR2[ERROR2["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
      ERROR2[ERROR2["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
      ERROR2[ERROR2["INVALID_STATUS"] = 13] = "INVALID_STATUS";
      ERROR2[ERROR2["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
      ERROR2[ERROR2["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
      ERROR2[ERROR2["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
      ERROR2[ERROR2["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
      ERROR2[ERROR2["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
      ERROR2[ERROR2["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
      ERROR2[ERROR2["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
      ERROR2[ERROR2["PAUSED"] = 21] = "PAUSED";
      ERROR2[ERROR2["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
      ERROR2[ERROR2["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
      ERROR2[ERROR2["USER"] = 24] = "USER";
    })(ERROR = exports.ERROR || (exports.ERROR = {}));
    var TYPE;
    (function(TYPE2) {
      TYPE2[TYPE2["BOTH"] = 0] = "BOTH";
      TYPE2[TYPE2["REQUEST"] = 1] = "REQUEST";
      TYPE2[TYPE2["RESPONSE"] = 2] = "RESPONSE";
    })(TYPE = exports.TYPE || (exports.TYPE = {}));
    var FLAGS;
    (function(FLAGS2) {
      FLAGS2[FLAGS2["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
      FLAGS2[FLAGS2["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
      FLAGS2[FLAGS2["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
      FLAGS2[FLAGS2["CHUNKED"] = 8] = "CHUNKED";
      FLAGS2[FLAGS2["UPGRADE"] = 16] = "UPGRADE";
      FLAGS2[FLAGS2["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
      FLAGS2[FLAGS2["SKIPBODY"] = 64] = "SKIPBODY";
      FLAGS2[FLAGS2["TRAILING"] = 128] = "TRAILING";
      FLAGS2[FLAGS2["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
    })(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
    var LENIENT_FLAGS;
    (function(LENIENT_FLAGS2) {
      LENIENT_FLAGS2[LENIENT_FLAGS2["HEADERS"] = 1] = "HEADERS";
      LENIENT_FLAGS2[LENIENT_FLAGS2["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
      LENIENT_FLAGS2[LENIENT_FLAGS2["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
    })(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
    var METHODS;
    (function(METHODS2) {
      METHODS2[METHODS2["DELETE"] = 0] = "DELETE";
      METHODS2[METHODS2["GET"] = 1] = "GET";
      METHODS2[METHODS2["HEAD"] = 2] = "HEAD";
      METHODS2[METHODS2["POST"] = 3] = "POST";
      METHODS2[METHODS2["PUT"] = 4] = "PUT";
      METHODS2[METHODS2["CONNECT"] = 5] = "CONNECT";
      METHODS2[METHODS2["OPTIONS"] = 6] = "OPTIONS";
      METHODS2[METHODS2["TRACE"] = 7] = "TRACE";
      METHODS2[METHODS2["COPY"] = 8] = "COPY";
      METHODS2[METHODS2["LOCK"] = 9] = "LOCK";
      METHODS2[METHODS2["MKCOL"] = 10] = "MKCOL";
      METHODS2[METHODS2["MOVE"] = 11] = "MOVE";
      METHODS2[METHODS2["PROPFIND"] = 12] = "PROPFIND";
      METHODS2[METHODS2["PROPPATCH"] = 13] = "PROPPATCH";
      METHODS2[METHODS2["SEARCH"] = 14] = "SEARCH";
      METHODS2[METHODS2["UNLOCK"] = 15] = "UNLOCK";
      METHODS2[METHODS2["BIND"] = 16] = "BIND";
      METHODS2[METHODS2["REBIND"] = 17] = "REBIND";
      METHODS2[METHODS2["UNBIND"] = 18] = "UNBIND";
      METHODS2[METHODS2["ACL"] = 19] = "ACL";
      METHODS2[METHODS2["REPORT"] = 20] = "REPORT";
      METHODS2[METHODS2["MKACTIVITY"] = 21] = "MKACTIVITY";
      METHODS2[METHODS2["CHECKOUT"] = 22] = "CHECKOUT";
      METHODS2[METHODS2["MERGE"] = 23] = "MERGE";
      METHODS2[METHODS2["M-SEARCH"] = 24] = "M-SEARCH";
      METHODS2[METHODS2["NOTIFY"] = 25] = "NOTIFY";
      METHODS2[METHODS2["SUBSCRIBE"] = 26] = "SUBSCRIBE";
      METHODS2[METHODS2["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
      METHODS2[METHODS2["PATCH"] = 28] = "PATCH";
      METHODS2[METHODS2["PURGE"] = 29] = "PURGE";
      METHODS2[METHODS2["MKCALENDAR"] = 30] = "MKCALENDAR";
      METHODS2[METHODS2["LINK"] = 31] = "LINK";
      METHODS2[METHODS2["UNLINK"] = 32] = "UNLINK";
      METHODS2[METHODS2["SOURCE"] = 33] = "SOURCE";
      METHODS2[METHODS2["PRI"] = 34] = "PRI";
      METHODS2[METHODS2["DESCRIBE"] = 35] = "DESCRIBE";
      METHODS2[METHODS2["ANNOUNCE"] = 36] = "ANNOUNCE";
      METHODS2[METHODS2["SETUP"] = 37] = "SETUP";
      METHODS2[METHODS2["PLAY"] = 38] = "PLAY";
      METHODS2[METHODS2["PAUSE"] = 39] = "PAUSE";
      METHODS2[METHODS2["TEARDOWN"] = 40] = "TEARDOWN";
      METHODS2[METHODS2["GET_PARAMETER"] = 41] = "GET_PARAMETER";
      METHODS2[METHODS2["SET_PARAMETER"] = 42] = "SET_PARAMETER";
      METHODS2[METHODS2["REDIRECT"] = 43] = "REDIRECT";
      METHODS2[METHODS2["RECORD"] = 44] = "RECORD";
      METHODS2[METHODS2["FLUSH"] = 45] = "FLUSH";
    })(METHODS = exports.METHODS || (exports.METHODS = {}));
    exports.METHODS_HTTP = [
      METHODS.DELETE,
      METHODS.GET,
      METHODS.HEAD,
      METHODS.POST,
      METHODS.PUT,
      METHODS.CONNECT,
      METHODS.OPTIONS,
      METHODS.TRACE,
      METHODS.COPY,
      METHODS.LOCK,
      METHODS.MKCOL,
      METHODS.MOVE,
      METHODS.PROPFIND,
      METHODS.PROPPATCH,
      METHODS.SEARCH,
      METHODS.UNLOCK,
      METHODS.BIND,
      METHODS.REBIND,
      METHODS.UNBIND,
      METHODS.ACL,
      METHODS.REPORT,
      METHODS.MKACTIVITY,
      METHODS.CHECKOUT,
      METHODS.MERGE,
      METHODS["M-SEARCH"],
      METHODS.NOTIFY,
      METHODS.SUBSCRIBE,
      METHODS.UNSUBSCRIBE,
      METHODS.PATCH,
      METHODS.PURGE,
      METHODS.MKCALENDAR,
      METHODS.LINK,
      METHODS.UNLINK,
      METHODS.PRI,
      // TODO(indutny): should we allow it with HTTP?
      METHODS.SOURCE
    ];
    exports.METHODS_ICE = [
      METHODS.SOURCE
    ];
    exports.METHODS_RTSP = [
      METHODS.OPTIONS,
      METHODS.DESCRIBE,
      METHODS.ANNOUNCE,
      METHODS.SETUP,
      METHODS.PLAY,
      METHODS.PAUSE,
      METHODS.TEARDOWN,
      METHODS.GET_PARAMETER,
      METHODS.SET_PARAMETER,
      METHODS.REDIRECT,
      METHODS.RECORD,
      METHODS.FLUSH,
      // For AirPlay
      METHODS.GET,
      METHODS.POST
    ];
    exports.METHOD_MAP = utils_1.enumToMap(METHODS);
    exports.H_METHOD_MAP = {};
    Object.keys(exports.METHOD_MAP).forEach((key2) => {
      if (/^H/.test(key2)) {
        exports.H_METHOD_MAP[key2] = exports.METHOD_MAP[key2];
      }
    });
    var FINISH;
    (function(FINISH2) {
      FINISH2[FINISH2["SAFE"] = 0] = "SAFE";
      FINISH2[FINISH2["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
      FINISH2[FINISH2["UNSAFE"] = 2] = "UNSAFE";
    })(FINISH = exports.FINISH || (exports.FINISH = {}));
    exports.ALPHA = [];
    for (let i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++) {
      exports.ALPHA.push(String.fromCharCode(i));
      exports.ALPHA.push(String.fromCharCode(i + 32));
    }
    exports.NUM_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9
    };
    exports.HEX_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      A: 10,
      B: 11,
      C: 12,
      D: 13,
      E: 14,
      F: 15,
      a: 10,
      b: 11,
      c: 12,
      d: 13,
      e: 14,
      f: 15
    };
    exports.NUM = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9"
    ];
    exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
    exports.MARK = ["-", "_", ".", "!", "~", "*", "'", "(", ")"];
    exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat(["%", ";", ":", "&", "=", "+", "$", ","]);
    exports.STRICT_URL_CHAR = [
      "!",
      '"',
      "$",
      "%",
      "&",
      "'",
      "(",
      ")",
      "*",
      "+",
      ",",
      "-",
      ".",
      "/",
      ":",
      ";",
      "<",
      "=",
      ">",
      "@",
      "[",
      "\\",
      "]",
      "^",
      "_",
      "`",
      "{",
      "|",
      "}",
      "~"
    ].concat(exports.ALPHANUM);
    exports.URL_CHAR = exports.STRICT_URL_CHAR.concat(["	", "\f"]);
    for (let i = 128; i <= 255; i++) {
      exports.URL_CHAR.push(i);
    }
    exports.HEX = exports.NUM.concat(["a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"]);
    exports.STRICT_TOKEN = [
      "!",
      "#",
      "$",
      "%",
      "&",
      "'",
      "*",
      "+",
      "-",
      ".",
      "^",
      "_",
      "`",
      "|",
      "~"
    ].concat(exports.ALPHANUM);
    exports.TOKEN = exports.STRICT_TOKEN.concat([" "]);
    exports.HEADER_CHARS = ["	"];
    for (let i = 32; i <= 255; i++) {
      if (i !== 127) {
        exports.HEADER_CHARS.push(i);
      }
    }
    exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);
    exports.MAJOR = exports.NUM_MAP;
    exports.MINOR = exports.MAJOR;
    var HEADER_STATE;
    (function(HEADER_STATE2) {
      HEADER_STATE2[HEADER_STATE2["GENERAL"] = 0] = "GENERAL";
      HEADER_STATE2[HEADER_STATE2["CONNECTION"] = 1] = "CONNECTION";
      HEADER_STATE2[HEADER_STATE2["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
      HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
      HEADER_STATE2[HEADER_STATE2["UPGRADE"] = 4] = "UPGRADE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
      HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
    })(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
    exports.SPECIAL_HEADERS = {
      "connection": HEADER_STATE.CONNECTION,
      "content-length": HEADER_STATE.CONTENT_LENGTH,
      "proxy-connection": HEADER_STATE.CONNECTION,
      "transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
      "upgrade": HEADER_STATE.UPGRADE
    };
  }
});

// node_modules/undici/lib/handler/RedirectHandler.js
var require_RedirectHandler = __commonJS({
  "node_modules/undici/lib/handler/RedirectHandler.js"(exports, module2) {
    "use strict";
    var util = require_util();
    var { kBodyUsed } = require_symbols();
    var assert = require("assert");
    var { InvalidArgumentError } = require_errors();
    var EE = require("events");
    var redirectableStatusCodes = [300, 301, 302, 303, 307, 308];
    var kBody = Symbol("body");
    var BodyAsyncIterable = class {
      constructor(body) {
        this[kBody] = body;
        this[kBodyUsed] = false;
      }
      async *[Symbol.asyncIterator]() {
        assert(!this[kBodyUsed], "disturbed");
        this[kBodyUsed] = true;
        yield* this[kBody];
      }
    };
    var RedirectHandler = class {
      constructor(dispatch, maxRedirections, opts, handler) {
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        util.validateHandler(handler, opts.method, opts.upgrade);
        this.dispatch = dispatch;
        this.location = null;
        this.abort = null;
        this.opts = { ...opts, maxRedirections: 0 };
        this.maxRedirections = maxRedirections;
        this.handler = handler;
        this.history = [];
        if (util.isStream(this.opts.body)) {
          if (util.bodyLength(this.opts.body) === 0) {
            this.opts.body.on("data", function() {
              assert(false);
            });
          }
          if (typeof this.opts.body.readableDidRead !== "boolean") {
            this.opts.body[kBodyUsed] = false;
            EE.prototype.on.call(this.opts.body, "data", function() {
              this[kBodyUsed] = true;
            });
          }
        } else if (this.opts.body && typeof this.opts.body.pipeTo === "function") {
          this.opts.body = new BodyAsyncIterable(this.opts.body);
        } else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) {
          this.opts.body = new BodyAsyncIterable(this.opts.body);
        }
      }
      onConnect(abort) {
        this.abort = abort;
        this.handler.onConnect(abort, { history: this.history });
      }
      onUpgrade(statusCode, headers, socket) {
        this.handler.onUpgrade(statusCode, headers, socket);
      }
      onError(error3) {
        this.handler.onError(error3);
      }
      onHeaders(statusCode, headers, resume, statusText) {
        this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
        if (this.opts.origin) {
          this.history.push(new URL(this.opts.path, this.opts.origin));
        }
        if (!this.location) {
          return this.handler.onHeaders(statusCode, headers, resume, statusText);
        }
        const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
        const path2 = search ? `${pathname}${search}` : pathname;
        this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
        this.opts.path = path2;
        this.opts.origin = origin;
        this.opts.maxRedirections = 0;
        this.opts.query = null;
        if (statusCode === 303 && this.opts.method !== "HEAD") {
          this.opts.method = "GET";
          this.opts.body = null;
        }
      }
      onData(chunk) {
        if (this.location) {
        } else {
          return this.handler.onData(chunk);
        }
      }
      onComplete(trailers) {
        if (this.location) {
          this.location = null;
          this.abort = null;
          this.dispatch(this.opts, this);
        } else {
          this.handler.onComplete(trailers);
        }
      }
      onBodySent(chunk) {
        if (this.handler.onBodySent) {
          this.handler.onBodySent(chunk);
        }
      }
    };
    function parseLocation(statusCode, headers) {
      if (redirectableStatusCodes.indexOf(statusCode) === -1) {
        return null;
      }
      for (let i = 0; i < headers.length; i += 2) {
        if (headers[i].toString().toLowerCase() === "location") {
          return headers[i + 1];
        }
      }
    }
    function shouldRemoveHeader(header, removeContent, unknownOrigin) {
      return header.length === 4 && header.toString().toLowerCase() === "host" || removeContent && header.toString().toLowerCase().indexOf("content-") === 0 || unknownOrigin && header.length === 13 && header.toString().toLowerCase() === "authorization" || unknownOrigin && header.length === 6 && header.toString().toLowerCase() === "cookie";
    }
    function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
      const ret = [];
      if (Array.isArray(headers)) {
        for (let i = 0; i < headers.length; i += 2) {
          if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
            ret.push(headers[i], headers[i + 1]);
          }
        }
      } else if (headers && typeof headers === "object") {
        for (const key2 of Object.keys(headers)) {
          if (!shouldRemoveHeader(key2, removeContent, unknownOrigin)) {
            ret.push(key2, headers[key2]);
          }
        }
      } else {
        assert(headers == null, "headers must be an object or an array");
      }
      return ret;
    }
    module2.exports = RedirectHandler;
  }
});

// node_modules/undici/lib/interceptor/redirectInterceptor.js
var require_redirectInterceptor = __commonJS({
  "node_modules/undici/lib/interceptor/redirectInterceptor.js"(exports, module2) {
    "use strict";
    var RedirectHandler = require_RedirectHandler();
    function createRedirectInterceptor({ maxRedirections: defaultMaxRedirections }) {
      return (dispatch) => {
        return function Intercept(opts, handler) {
          const { maxRedirections = defaultMaxRedirections } = opts;
          if (!maxRedirections) {
            return dispatch(opts, handler);
          }
          const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);
          opts = { ...opts, maxRedirections: 0 };
          return dispatch(opts, redirectHandler);
        };
      };
    }
    module2.exports = createRedirectInterceptor;
  }
});

// node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm = __commonJS({
  "node_modules/undici/lib/llhttp/llhttp-wasm.js"(exports, module2) {
    module2.exports = "";
  }
});

// node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm = __commonJS({
  "node_modules/undici/lib/llhttp/llhttp_simd-wasm.js"(exports, module2) {
    module2.exports = "";
  }
});

// node_modules/undici/lib/client.js
var require_client = __commonJS({
  "node_modules/undici/lib/client.js"(exports, module2) {
    "use strict";
    var assert = require("assert");
    var net = require("net");
    var http2 = require("http");
    var { pipeline } = require("stream");
    var util = require_util();
    var timers = require_timers();
    var Request3 = require_request();
    var DispatcherBase = require_dispatcher_base();
    var {
      RequestContentLengthMismatchError,
      ResponseContentLengthMismatchError,
      InvalidArgumentError,
      RequestAbortedError,
      HeadersTimeoutError,
      HeadersOverflowError,
      SocketError,
      InformationalError,
      BodyTimeoutError,
      HTTPParserError,
      ResponseExceededMaxSizeError,
      ClientDestroyedError
    } = require_errors();
    var buildConnector = require_connect();
    var {
      kUrl,
      kReset,
      kServerName,
      kClient,
      kBusy,
      kParser,
      kConnect,
      kBlocking,
      kResuming,
      kRunning,
      kPending,
      kSize,
      kWriting,
      kQueue,
      kConnected,
      kConnecting,
      kNeedDrain,
      kNoRef,
      kKeepAliveDefaultTimeout,
      kHostHeader,
      kPendingIdx,
      kRunningIdx,
      kError,
      kPipelining,
      kSocket,
      kKeepAliveTimeoutValue,
      kMaxHeadersSize,
      kKeepAliveMaxTimeout,
      kKeepAliveTimeoutThreshold,
      kHeadersTimeout,
      kBodyTimeout,
      kStrictContentLength,
      kConnector,
      kMaxRedirections,
      kMaxRequests,
      kCounter,
      kClose,
      kDestroy,
      kDispatch,
      kInterceptors,
      kLocalAddress,
      kMaxResponseSize,
      kHTTPConnVersion,
      // HTTP2
      kHost,
      kHTTP2Session,
      kHTTP2SessionState,
      kHTTP2BuildRequest,
      kHTTP2CopyHeaders,
      kHTTP1BuildRequest
    } = require_symbols();
    var http22;
    try {
      http22 = require("http2");
    } catch {
      http22 = { constants: {} };
    }
    var {
      constants: {
        HTTP2_HEADER_AUTHORITY,
        HTTP2_HEADER_METHOD,
        HTTP2_HEADER_PATH,
        HTTP2_HEADER_SCHEME,
        HTTP2_HEADER_CONTENT_LENGTH,
        HTTP2_HEADER_EXPECT,
        HTTP2_HEADER_STATUS
      }
    } = http22;
    var h2ExperimentalWarned = false;
    var FastBuffer = Buffer[Symbol.species];
    var kClosedResolve = Symbol("kClosedResolve");
    var channels = {};
    try {
      const diagnosticsChannel = require("diagnostics_channel");
      channels.sendHeaders = diagnosticsChannel.channel("undici:client:sendHeaders");
      channels.beforeConnect = diagnosticsChannel.channel("undici:client:beforeConnect");
      channels.connectError = diagnosticsChannel.channel("undici:client:connectError");
      channels.connected = diagnosticsChannel.channel("undici:client:connected");
    } catch {
      channels.sendHeaders = { hasSubscribers: false };
      channels.beforeConnect = { hasSubscribers: false };
      channels.connectError = { hasSubscribers: false };
      channels.connected = { hasSubscribers: false };
    }
    var Client = class extends DispatcherBase {
      /**
       *
       * @param {string|URL} url
       * @param {import('../types/client').Client.Options} options
       */
      constructor(url, {
        interceptors,
        maxHeaderSize,
        headersTimeout,
        socketTimeout,
        requestTimeout,
        connectTimeout,
        bodyTimeout,
        idleTimeout,
        keepAlive,
        keepAliveTimeout,
        maxKeepAliveTimeout,
        keepAliveMaxTimeout,
        keepAliveTimeoutThreshold,
        socketPath,
        pipelining,
        tls,
        strictContentLength,
        maxCachedSessions,
        maxRedirections,
        connect: connect2,
        maxRequestsPerClient,
        localAddress,
        maxResponseSize,
        autoSelectFamily,
        autoSelectFamilyAttemptTimeout,
        // h2
        allowH2,
        maxConcurrentStreams
      } = {}) {
        super();
        if (keepAlive !== void 0) {
          throw new InvalidArgumentError("unsupported keepAlive, use pipelining=0 instead");
        }
        if (socketTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
        }
        if (requestTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
        }
        if (idleTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported idleTimeout, use keepAliveTimeout instead");
        }
        if (maxKeepAliveTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
        }
        if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
          throw new InvalidArgumentError("invalid maxHeaderSize");
        }
        if (socketPath != null && typeof socketPath !== "string") {
          throw new InvalidArgumentError("invalid socketPath");
        }
        if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
          throw new InvalidArgumentError("invalid connectTimeout");
        }
        if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
          throw new InvalidArgumentError("invalid keepAliveTimeout");
        }
        if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
          throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
        }
        if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
          throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
        }
        if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
          throw new InvalidArgumentError("headersTimeout must be a positive integer or zero");
        }
        if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
          throw new InvalidArgumentError("bodyTimeout must be a positive integer or zero");
        }
        if (connect2 != null && typeof connect2 !== "function" && typeof connect2 !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
          throw new InvalidArgumentError("maxRequestsPerClient must be a positive number");
        }
        if (localAddress != null && (typeof localAddress !== "string" || net.isIP(localAddress) === 0)) {
          throw new InvalidArgumentError("localAddress must be valid string IP address");
        }
        if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
          throw new InvalidArgumentError("maxResponseSize must be a positive number");
        }
        if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {
          throw new InvalidArgumentError("autoSelectFamilyAttemptTimeout must be a positive number");
        }
        if (allowH2 != null && typeof allowH2 !== "boolean") {
          throw new InvalidArgumentError("allowH2 must be a valid boolean value");
        }
        if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) {
          throw new InvalidArgumentError("maxConcurrentStreams must be a possitive integer, greater than 0");
        }
        if (typeof connect2 !== "function") {
          connect2 = buildConnector({
            ...tls,
            maxCachedSessions,
            allowH2,
            socketPath,
            timeout: connectTimeout,
            ...util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : void 0,
            ...connect2
          });
        }
        this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [createRedirectInterceptor({ maxRedirections })];
        this[kUrl] = util.parseOrigin(url);
        this[kConnector] = connect2;
        this[kSocket] = null;
        this[kPipelining] = pipelining != null ? pipelining : 1;
        this[kMaxHeadersSize] = maxHeaderSize || http2.maxHeaderSize;
        this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
        this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
        this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
        this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
        this[kServerName] = null;
        this[kLocalAddress] = localAddress != null ? localAddress : null;
        this[kResuming] = 0;
        this[kNeedDrain] = 0;
        this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}\r
`;
        this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 3e5;
        this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 3e5;
        this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
        this[kMaxRedirections] = maxRedirections;
        this[kMaxRequests] = maxRequestsPerClient;
        this[kClosedResolve] = null;
        this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
        this[kHTTPConnVersion] = "h1";
        this[kHTTP2Session] = null;
        this[kHTTP2SessionState] = !allowH2 ? null : {
          // streams: null, // Fixed queue of streams - For future support of `push`
          openStreams: 0,
          // Keep track of them to decide wether or not unref the session
          maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100
          // Max peerConcurrentStreams for a Node h2 server
        };
        this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}`;
        this[kQueue] = [];
        this[kRunningIdx] = 0;
        this[kPendingIdx] = 0;
      }
      get pipelining() {
        return this[kPipelining];
      }
      set pipelining(value) {
        this[kPipelining] = value;
        resume(this, true);
      }
      get [kPending]() {
        return this[kQueue].length - this[kPendingIdx];
      }
      get [kRunning]() {
        return this[kPendingIdx] - this[kRunningIdx];
      }
      get [kSize]() {
        return this[kQueue].length - this[kRunningIdx];
      }
      get [kConnected]() {
        return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
      }
      get [kBusy]() {
        const socket = this[kSocket];
        return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize] >= (this[kPipelining] || 1) || this[kPending] > 0;
      }
      /* istanbul ignore: only used for test */
      [kConnect](cb) {
        connect(this);
        this.once("connect", cb);
      }
      [kDispatch](opts, handler) {
        const origin = opts.origin || this[kUrl].origin;
        const request = this[kHTTPConnVersion] === "h2" ? Request3[kHTTP2BuildRequest](origin, opts, handler) : Request3[kHTTP1BuildRequest](origin, opts, handler);
        this[kQueue].push(request);
        if (this[kResuming]) {
        } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {
          this[kResuming] = 1;
          process.nextTick(resume, this);
        } else {
          resume(this, true);
        }
        if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
          this[kNeedDrain] = 2;
        }
        return this[kNeedDrain] < 2;
      }
      async [kClose]() {
        return new Promise((resolve2) => {
          if (!this[kSize]) {
            resolve2(null);
          } else {
            this[kClosedResolve] = resolve2;
          }
        });
      }
      async [kDestroy](err) {
        return new Promise((resolve2) => {
          const requests = this[kQueue].splice(this[kPendingIdx]);
          for (let i = 0; i < requests.length; i++) {
            const request = requests[i];
            errorRequest(this, request, err);
          }
          const callback = () => {
            if (this[kClosedResolve]) {
              this[kClosedResolve]();
              this[kClosedResolve] = null;
            }
            resolve2();
          };
          if (this[kHTTP2Session] != null) {
            util.destroy(this[kHTTP2Session], err);
            this[kHTTP2Session] = null;
            this[kHTTP2SessionState] = null;
          }
          if (!this[kSocket]) {
            queueMicrotask(callback);
          } else {
            util.destroy(this[kSocket].on("close", callback), err);
          }
          resume(this);
        });
      }
    };
    function onHttp2SessionError(err) {
      assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
      this[kSocket][kError] = err;
      onError2(this[kClient], err);
    }
    function onHttp2FrameError(type, code, id) {
      const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
      if (id === 0) {
        this[kSocket][kError] = err;
        onError2(this[kClient], err);
      }
    }
    function onHttp2SessionEnd() {
      util.destroy(this, new SocketError("other side closed"));
      util.destroy(this[kSocket], new SocketError("other side closed"));
    }
    function onHTTP2GoAway(code) {
      const client2 = this[kClient];
      const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
      client2[kSocket] = null;
      client2[kHTTP2Session] = null;
      if (client2.destroyed) {
        assert(this[kPending] === 0);
        const requests = client2[kQueue].splice(client2[kRunningIdx]);
        for (let i = 0; i < requests.length; i++) {
          const request = requests[i];
          errorRequest(this, request, err);
        }
      } else if (client2[kRunning] > 0) {
        const request = client2[kQueue][client2[kRunningIdx]];
        client2[kQueue][client2[kRunningIdx]++] = null;
        errorRequest(client2, request, err);
      }
      client2[kPendingIdx] = client2[kRunningIdx];
      assert(client2[kRunning] === 0);
      client2.emit(
        "disconnect",
        client2[kUrl],
        [client2],
        err
      );
      resume(client2);
    }
    var constants = require_constants2();
    var createRedirectInterceptor = require_redirectInterceptor();
    var EMPTY_BUF = Buffer.alloc(0);
    async function lazyllhttp() {
      const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : void 0;
      let mod;
      try {
        mod = await WebAssembly.compile(Buffer.from(require_llhttp_simd_wasm(), "base64"));
      } catch (e) {
        mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require_llhttp_wasm(), "base64"));
      }
      return await WebAssembly.instantiate(mod, {
        env: {
          /* eslint-disable camelcase */
          wasm_on_url: (p, at, len) => {
            return 0;
          },
          wasm_on_status: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          },
          wasm_on_message_begin: (p) => {
            assert.strictEqual(currentParser.ptr, p);
            return currentParser.onMessageBegin() || 0;
          },
          wasm_on_header_field: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          },
          wasm_on_header_value: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          },
          wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
            assert.strictEqual(currentParser.ptr, p);
            return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;
          },
          wasm_on_body: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          },
          wasm_on_message_complete: (p) => {
            assert.strictEqual(currentParser.ptr, p);
            return currentParser.onMessageComplete() || 0;
          }
          /* eslint-enable camelcase */
        }
      });
    }
    var llhttpInstance = null;
    var llhttpPromise = lazyllhttp();
    llhttpPromise.catch();
    var currentParser = null;
    var currentBufferRef = null;
    var currentBufferSize = 0;
    var currentBufferPtr = null;
    var TIMEOUT_HEADERS = 1;
    var TIMEOUT_BODY = 2;
    var TIMEOUT_IDLE = 3;
    var Parser = class {
      constructor(client2, socket, { exports: exports2 }) {
        assert(Number.isFinite(client2[kMaxHeadersSize]) && client2[kMaxHeadersSize] > 0);
        this.llhttp = exports2;
        this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);
        this.client = client2;
        this.socket = socket;
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.statusCode = null;
        this.statusText = "";
        this.upgrade = false;
        this.headers = [];
        this.headersSize = 0;
        this.headersMaxSize = client2[kMaxHeadersSize];
        this.shouldKeepAlive = false;
        this.paused = false;
        this.resume = this.resume.bind(this);
        this.bytesRead = 0;
        this.keepAlive = "";
        this.contentLength = "";
        this.connection = "";
        this.maxResponseSize = client2[kMaxResponseSize];
      }
      setTimeout(value, type) {
        this.timeoutType = type;
        if (value !== this.timeoutValue) {
          timers.clearTimeout(this.timeout);
          if (value) {
            this.timeout = timers.setTimeout(onParserTimeout, value, this);
            if (this.timeout.unref) {
              this.timeout.unref();
            }
          } else {
            this.timeout = null;
          }
          this.timeoutValue = value;
        } else if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
      }
      resume() {
        if (this.socket.destroyed || !this.paused) {
          return;
        }
        assert(this.ptr != null);
        assert(currentParser == null);
        this.llhttp.llhttp_resume(this.ptr);
        assert(this.timeoutType === TIMEOUT_BODY);
        if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        this.paused = false;
        this.execute(this.socket.read() || EMPTY_BUF);
        this.readMore();
      }
      readMore() {
        while (!this.paused && this.ptr) {
          const chunk = this.socket.read();
          if (chunk === null) {
            break;
          }
          this.execute(chunk);
        }
      }
      execute(data) {
        assert(this.ptr != null);
        assert(currentParser == null);
        assert(!this.paused);
        const { socket, llhttp } = this;
        if (data.length > currentBufferSize) {
          if (currentBufferPtr) {
            llhttp.free(currentBufferPtr);
          }
          currentBufferSize = Math.ceil(data.length / 4096) * 4096;
          currentBufferPtr = llhttp.malloc(currentBufferSize);
        }
        new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);
        try {
          let ret;
          try {
            currentBufferRef = data;
            currentParser = this;
            ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
          } catch (err) {
            throw err;
          } finally {
            currentParser = null;
            currentBufferRef = null;
          }
          const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
          if (ret === constants.ERROR.PAUSED_UPGRADE) {
            this.onUpgrade(data.slice(offset));
          } else if (ret === constants.ERROR.PAUSED) {
            this.paused = true;
            socket.unshift(data.slice(offset));
          } else if (ret !== constants.ERROR.OK) {
            const ptr = llhttp.llhttp_get_error_reason(this.ptr);
            let message = "";
            if (ptr) {
              const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
              message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
            }
            throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));
          }
        } catch (err) {
          util.destroy(socket, err);
        }
      }
      destroy() {
        assert(this.ptr != null);
        assert(currentParser == null);
        this.llhttp.llhttp_free(this.ptr);
        this.ptr = null;
        timers.clearTimeout(this.timeout);
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.paused = false;
      }
      onStatus(buf) {
        this.statusText = buf.toString();
      }
      onMessageBegin() {
        const { socket, client: client2 } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request = client2[kQueue][client2[kRunningIdx]];
        if (!request) {
          return -1;
        }
      }
      onHeaderField(buf) {
        const len = this.headers.length;
        if ((len & 1) === 0) {
          this.headers.push(buf);
        } else {
          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
        }
        this.trackHeader(buf.length);
      }
      onHeaderValue(buf) {
        let len = this.headers.length;
        if ((len & 1) === 1) {
          this.headers.push(buf);
          len += 1;
        } else {
          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
        }
        const key2 = this.headers[len - 2];
        if (key2.length === 10 && key2.toString().toLowerCase() === "keep-alive") {
          this.keepAlive += buf.toString();
        } else if (key2.length === 10 && key2.toString().toLowerCase() === "connection") {
          this.connection += buf.toString();
        } else if (key2.length === 14 && key2.toString().toLowerCase() === "content-length") {
          this.contentLength += buf.toString();
        }
        this.trackHeader(buf.length);
      }
      trackHeader(len) {
        this.headersSize += len;
        if (this.headersSize >= this.headersMaxSize) {
          util.destroy(this.socket, new HeadersOverflowError());
        }
      }
      onUpgrade(head) {
        const { upgrade, client: client2, socket, headers, statusCode } = this;
        assert(upgrade);
        const request = client2[kQueue][client2[kRunningIdx]];
        assert(request);
        assert(!socket.destroyed);
        assert(socket === client2[kSocket]);
        assert(!this.paused);
        assert(request.upgrade || request.method === "CONNECT");
        this.statusCode = null;
        this.statusText = "";
        this.shouldKeepAlive = null;
        assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        socket.unshift(head);
        socket[kParser].destroy();
        socket[kParser] = null;
        socket[kClient] = null;
        socket[kError] = null;
        socket.removeListener("error", onSocketError).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose);
        client2[kSocket] = null;
        client2[kQueue][client2[kRunningIdx]++] = null;
        client2.emit("disconnect", client2[kUrl], [client2], new InformationalError("upgrade"));
        try {
          request.onUpgrade(statusCode, headers, socket);
        } catch (err) {
          util.destroy(socket, err);
        }
        resume(client2);
      }
      onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
        const { client: client2, socket, headers, statusText } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request = client2[kQueue][client2[kRunningIdx]];
        if (!request) {
          return -1;
        }
        assert(!this.upgrade);
        assert(this.statusCode < 200);
        if (statusCode === 100) {
          util.destroy(socket, new SocketError("bad response", util.getSocketInfo(socket)));
          return -1;
        }
        if (upgrade && !request.upgrade) {
          util.destroy(socket, new SocketError("bad upgrade", util.getSocketInfo(socket)));
          return -1;
        }
        assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
        this.statusCode = statusCode;
        this.shouldKeepAlive = shouldKeepAlive || // Override llhttp value which does not allow keepAlive for HEAD.
        request.method === "HEAD" && !socket[kReset] && this.connection.toLowerCase() === "keep-alive";
        if (this.statusCode >= 200) {
          const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client2[kBodyTimeout];
          this.setTimeout(bodyTimeout, TIMEOUT_BODY);
        } else if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        if (request.method === "CONNECT") {
          assert(client2[kRunning] === 1);
          this.upgrade = true;
          return 2;
        }
        if (upgrade) {
          assert(client2[kRunning] === 1);
          this.upgrade = true;
          return 2;
        }
        assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (this.shouldKeepAlive && client2[kPipelining]) {
          const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;
          if (keepAliveTimeout != null) {
            const timeout = Math.min(
              keepAliveTimeout - client2[kKeepAliveTimeoutThreshold],
              client2[kKeepAliveMaxTimeout]
            );
            if (timeout <= 0) {
              socket[kReset] = true;
            } else {
              client2[kKeepAliveTimeoutValue] = timeout;
            }
          } else {
            client2[kKeepAliveTimeoutValue] = client2[kKeepAliveDefaultTimeout];
          }
        } else {
          socket[kReset] = true;
        }
        const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;
        if (request.aborted) {
          return -1;
        }
        if (request.method === "HEAD") {
          return 1;
        }
        if (statusCode < 200) {
          return 1;
        }
        if (socket[kBlocking]) {
          socket[kBlocking] = false;
          resume(client2);
        }
        return pause ? constants.ERROR.PAUSED : 0;
      }
      onBody(buf) {
        const { client: client2, socket, statusCode, maxResponseSize } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request = client2[kQueue][client2[kRunningIdx]];
        assert(request);
        assert.strictEqual(this.timeoutType, TIMEOUT_BODY);
        if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        assert(statusCode >= 200);
        if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
          util.destroy(socket, new ResponseExceededMaxSizeError());
          return -1;
        }
        this.bytesRead += buf.length;
        if (request.onData(buf) === false) {
          return constants.ERROR.PAUSED;
        }
      }
      onMessageComplete() {
        const { client: client2, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this;
        if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
          return -1;
        }
        if (upgrade) {
          return;
        }
        const request = client2[kQueue][client2[kRunningIdx]];
        assert(request);
        assert(statusCode >= 100);
        this.statusCode = null;
        this.statusText = "";
        this.bytesRead = 0;
        this.contentLength = "";
        this.keepAlive = "";
        this.connection = "";
        assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (statusCode < 200) {
          return;
        }
        if (request.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
          util.destroy(socket, new ResponseContentLengthMismatchError());
          return -1;
        }
        request.onComplete(headers);
        client2[kQueue][client2[kRunningIdx]++] = null;
        if (socket[kWriting]) {
          assert.strictEqual(client2[kRunning], 0);
          util.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (!shouldKeepAlive) {
          util.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (socket[kReset] && client2[kRunning] === 0) {
          util.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (client2[kPipelining] === 1) {
          setImmediate(resume, client2);
        } else {
          resume(client2);
        }
      }
    };
    function onParserTimeout(parser) {
      const { socket, timeoutType, client: client2 } = parser;
      if (timeoutType === TIMEOUT_HEADERS) {
        if (!socket[kWriting] || socket.writableNeedDrain || client2[kRunning] > 1) {
          assert(!parser.paused, "cannot be paused while waiting for headers");
          util.destroy(socket, new HeadersTimeoutError());
        }
      } else if (timeoutType === TIMEOUT_BODY) {
        if (!parser.paused) {
          util.destroy(socket, new BodyTimeoutError());
        }
      } else if (timeoutType === TIMEOUT_IDLE) {
        assert(client2[kRunning] === 0 && client2[kKeepAliveTimeoutValue]);
        util.destroy(socket, new InformationalError("socket idle timeout"));
      }
    }
    function onSocketReadable() {
      const { [kParser]: parser } = this;
      if (parser) {
        parser.readMore();
      }
    }
    function onSocketError(err) {
      const { [kClient]: client2, [kParser]: parser } = this;
      assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
      if (client2[kHTTPConnVersion] !== "h2") {
        if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
          return;
        }
      }
      this[kError] = err;
      onError2(this[kClient], err);
    }
    function onError2(client2, err) {
      if (client2[kRunning] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
        assert(client2[kPendingIdx] === client2[kRunningIdx]);
        const requests = client2[kQueue].splice(client2[kRunningIdx]);
        for (let i = 0; i < requests.length; i++) {
          const request = requests[i];
          errorRequest(client2, request, err);
        }
        assert(client2[kSize] === 0);
      }
    }
    function onSocketEnd() {
      const { [kParser]: parser, [kClient]: client2 } = this;
      if (client2[kHTTPConnVersion] !== "h2") {
        if (parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
          return;
        }
      }
      util.destroy(this, new SocketError("other side closed", util.getSocketInfo(this)));
    }
    function onSocketClose() {
      const { [kClient]: client2, [kParser]: parser } = this;
      if (client2[kHTTPConnVersion] === "h1" && parser) {
        if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
        }
        this[kParser].destroy();
        this[kParser] = null;
      }
      const err = this[kError] || new SocketError("closed", util.getSocketInfo(this));
      client2[kSocket] = null;
      if (client2.destroyed) {
        assert(client2[kPending] === 0);
        const requests = client2[kQueue].splice(client2[kRunningIdx]);
        for (let i = 0; i < requests.length; i++) {
          const request = requests[i];
          errorRequest(client2, request, err);
        }
      } else if (client2[kRunning] > 0 && err.code !== "UND_ERR_INFO") {
        const request = client2[kQueue][client2[kRunningIdx]];
        client2[kQueue][client2[kRunningIdx]++] = null;
        errorRequest(client2, request, err);
      }
      client2[kPendingIdx] = client2[kRunningIdx];
      assert(client2[kRunning] === 0);
      client2.emit("disconnect", client2[kUrl], [client2], err);
      resume(client2);
    }
    async function connect(client2) {
      assert(!client2[kConnecting]);
      assert(!client2[kSocket]);
      let { host, hostname, protocol, port } = client2[kUrl];
      if (hostname[0] === "[") {
        const idx = hostname.indexOf("]");
        assert(idx !== -1);
        const ip = hostname.substring(1, idx);
        assert(net.isIP(ip));
        hostname = ip;
      }
      client2[kConnecting] = true;
      if (channels.beforeConnect.hasSubscribers) {
        channels.beforeConnect.publish({
          connectParams: {
            host,
            hostname,
            protocol,
            port,
            servername: client2[kServerName],
            localAddress: client2[kLocalAddress]
          },
          connector: client2[kConnector]
        });
      }
      try {
        const socket = await new Promise((resolve2, reject) => {
          client2[kConnector]({
            host,
            hostname,
            protocol,
            port,
            servername: client2[kServerName],
            localAddress: client2[kLocalAddress]
          }, (err, socket2) => {
            if (err) {
              reject(err);
            } else {
              resolve2(socket2);
            }
          });
        });
        if (client2.destroyed) {
          util.destroy(socket.on("error", () => {
          }), new ClientDestroyedError());
          return;
        }
        client2[kConnecting] = false;
        assert(socket);
        const isH2 = socket.alpnProtocol === "h2";
        if (isH2) {
          if (!h2ExperimentalWarned) {
            h2ExperimentalWarned = true;
            process.emitWarning("H2 support is experimental, expect them to change at any time.", {
              code: "UNDICI-H2"
            });
          }
          const session = http22.connect(client2[kUrl], {
            createConnection: () => socket,
            peerMaxConcurrentStreams: client2[kHTTP2SessionState].maxConcurrentStreams
          });
          client2[kHTTPConnVersion] = "h2";
          session[kClient] = client2;
          session[kSocket] = socket;
          session.on("error", onHttp2SessionError);
          session.on("frameError", onHttp2FrameError);
          session.on("end", onHttp2SessionEnd);
          session.on("goaway", onHTTP2GoAway);
          session.on("close", onSocketClose);
          session.unref();
          client2[kHTTP2Session] = session;
          socket[kHTTP2Session] = session;
        } else {
          if (!llhttpInstance) {
            llhttpInstance = await llhttpPromise;
            llhttpPromise = null;
          }
          socket[kNoRef] = false;
          socket[kWriting] = false;
          socket[kReset] = false;
          socket[kBlocking] = false;
          socket[kParser] = new Parser(client2, socket, llhttpInstance);
        }
        socket[kCounter] = 0;
        socket[kMaxRequests] = client2[kMaxRequests];
        socket[kClient] = client2;
        socket[kError] = null;
        socket.on("error", onSocketError).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose);
        client2[kSocket] = socket;
        if (channels.connected.hasSubscribers) {
          channels.connected.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client2[kServerName],
              localAddress: client2[kLocalAddress]
            },
            connector: client2[kConnector],
            socket
          });
        }
        client2.emit("connect", client2[kUrl], [client2]);
      } catch (err) {
        if (client2.destroyed) {
          return;
        }
        client2[kConnecting] = false;
        if (channels.connectError.hasSubscribers) {
          channels.connectError.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client2[kServerName],
              localAddress: client2[kLocalAddress]
            },
            connector: client2[kConnector],
            error: err
          });
        }
        if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
          assert(client2[kRunning] === 0);
          while (client2[kPending] > 0 && client2[kQueue][client2[kPendingIdx]].servername === client2[kServerName]) {
            const request = client2[kQueue][client2[kPendingIdx]++];
            errorRequest(client2, request, err);
          }
        } else {
          onError2(client2, err);
        }
        client2.emit("connectionError", client2[kUrl], [client2], err);
      }
      resume(client2);
    }
    function emitDrain(client2) {
      client2[kNeedDrain] = 0;
      client2.emit("drain", client2[kUrl], [client2]);
    }
    function resume(client2, sync) {
      if (client2[kResuming] === 2) {
        return;
      }
      client2[kResuming] = 2;
      _resume(client2, sync);
      client2[kResuming] = 0;
      if (client2[kRunningIdx] > 256) {
        client2[kQueue].splice(0, client2[kRunningIdx]);
        client2[kPendingIdx] -= client2[kRunningIdx];
        client2[kRunningIdx] = 0;
      }
    }
    function _resume(client2, sync) {
      while (true) {
        if (client2.destroyed) {
          assert(client2[kPending] === 0);
          return;
        }
        if (client2[kClosedResolve] && !client2[kSize]) {
          client2[kClosedResolve]();
          client2[kClosedResolve] = null;
          return;
        }
        const socket = client2[kSocket];
        if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
          if (client2[kSize] === 0) {
            if (!socket[kNoRef] && socket.unref) {
              socket.unref();
              socket[kNoRef] = true;
            }
          } else if (socket[kNoRef] && socket.ref) {
            socket.ref();
            socket[kNoRef] = false;
          }
          if (client2[kSize] === 0) {
            if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
              socket[kParser].setTimeout(client2[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
            }
          } else if (client2[kRunning] > 0 && socket[kParser].statusCode < 200) {
            if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
              const request2 = client2[kQueue][client2[kRunningIdx]];
              const headersTimeout = request2.headersTimeout != null ? request2.headersTimeout : client2[kHeadersTimeout];
              socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
            }
          }
        }
        if (client2[kBusy]) {
          client2[kNeedDrain] = 2;
        } else if (client2[kNeedDrain] === 2) {
          if (sync) {
            client2[kNeedDrain] = 1;
            process.nextTick(emitDrain, client2);
          } else {
            emitDrain(client2);
          }
          continue;
        }
        if (client2[kPending] === 0) {
          return;
        }
        if (client2[kRunning] >= (client2[kPipelining] || 1)) {
          return;
        }
        const request = client2[kQueue][client2[kPendingIdx]];
        if (client2[kUrl].protocol === "https:" && client2[kServerName] !== request.servername) {
          if (client2[kRunning] > 0) {
            return;
          }
          client2[kServerName] = request.servername;
          if (socket && socket.servername !== request.servername) {
            util.destroy(socket, new InformationalError("servername changed"));
            return;
          }
        }
        if (client2[kConnecting]) {
          return;
        }
        if (!socket && !client2[kHTTP2Session]) {
          connect(client2);
          return;
        }
        if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
          return;
        }
        if (client2[kRunning] > 0 && !request.idempotent) {
          return;
        }
        if (client2[kRunning] > 0 && (request.upgrade || request.method === "CONNECT")) {
          return;
        }
        if (client2[kRunning] > 0 && util.bodyLength(request.body) !== 0 && (util.isStream(request.body) || util.isAsyncIterable(request.body))) {
          return;
        }
        if (!request.aborted && write(client2, request)) {
          client2[kPendingIdx]++;
        } else {
          client2[kQueue].splice(client2[kPendingIdx], 1);
        }
      }
    }
    function shouldSendContentLength(method) {
      return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
    }
    function write(client2, request) {
      if (client2[kHTTPConnVersion] === "h2") {
        writeH2(client2, client2[kHTTP2Session], request);
        return;
      }
      const { body, method, path: path2, host, upgrade, headers, blocking, reset: reset2 } = request;
      const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
      if (body && typeof body.read === "function") {
        body.read(0);
      }
      const bodyLength = util.bodyLength(body);
      let contentLength = bodyLength;
      if (contentLength === null) {
        contentLength = request.contentLength;
      }
      if (contentLength === 0 && !expectsPayload) {
        contentLength = null;
      }
      if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
        if (client2[kStrictContentLength]) {
          errorRequest(client2, request, new RequestContentLengthMismatchError());
          return false;
        }
        process.emitWarning(new RequestContentLengthMismatchError());
      }
      const socket = client2[kSocket];
      try {
        request.onConnect((err) => {
          if (request.aborted || request.completed) {
            return;
          }
          errorRequest(client2, request, err || new RequestAbortedError());
          util.destroy(socket, new InformationalError("aborted"));
        });
      } catch (err) {
        errorRequest(client2, request, err);
      }
      if (request.aborted) {
        return false;
      }
      if (method === "HEAD") {
        socket[kReset] = true;
      }
      if (upgrade || method === "CONNECT") {
        socket[kReset] = true;
      }
      if (reset2 != null) {
        socket[kReset] = reset2;
      }
      if (client2[kMaxRequests] && socket[kCounter]++ >= client2[kMaxRequests]) {
        socket[kReset] = true;
      }
      if (blocking) {
        socket[kBlocking] = true;
      }
      let header = `${method} ${path2} HTTP/1.1\r
`;
      if (typeof host === "string") {
        header += `host: ${host}\r
`;
      } else {
        header += client2[kHostHeader];
      }
      if (upgrade) {
        header += `connection: upgrade\r
upgrade: ${upgrade}\r
`;
      } else if (client2[kPipelining] && !socket[kReset]) {
        header += "connection: keep-alive\r\n";
      } else {
        header += "connection: close\r\n";
      }
      if (headers) {
        header += headers;
      }
      if (channels.sendHeaders.hasSubscribers) {
        channels.sendHeaders.publish({ request, headers: header, socket });
      }
      if (!body || bodyLength === 0) {
        if (contentLength === 0) {
          socket.write(`${header}content-length: 0\r
\r
`, "latin1");
        } else {
          assert(contentLength === null, "no body must not have content length");
          socket.write(`${header}\r
`, "latin1");
        }
        request.onRequestSent();
      } else if (util.isBuffer(body)) {
        assert(contentLength === body.byteLength, "buffer body must have content length");
        socket.cork();
        socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
        socket.write(body);
        socket.uncork();
        request.onBodySent(body);
        request.onRequestSent();
        if (!expectsPayload) {
          socket[kReset] = true;
        }
      } else if (util.isBlobLike(body)) {
        if (typeof body.stream === "function") {
          writeIterable({ body: body.stream(), client: client2, request, socket, contentLength, header, expectsPayload });
        } else {
          writeBlob({ body, client: client2, request, socket, contentLength, header, expectsPayload });
        }
      } else if (util.isStream(body)) {
        writeStream({ body, client: client2, request, socket, contentLength, header, expectsPayload });
      } else if (util.isIterable(body)) {
        writeIterable({ body, client: client2, request, socket, contentLength, header, expectsPayload });
      } else {
        assert(false);
      }
      return true;
    }
    function writeH2(client2, session, request) {
      const { body, method, path: path2, host, upgrade, expectContinue, signal, headers: reqHeaders } = request;
      let headers;
      if (typeof reqHeaders === "string")
        headers = Request3[kHTTP2CopyHeaders](reqHeaders.trim());
      else
        headers = reqHeaders;
      if (upgrade) {
        errorRequest(client2, request, new Error("Upgrade not supported for H2"));
        return false;
      }
      try {
        request.onConnect((err) => {
          if (request.aborted || request.completed) {
            return;
          }
          errorRequest(client2, request, err || new RequestAbortedError());
        });
      } catch (err) {
        errorRequest(client2, request, err);
      }
      if (request.aborted) {
        return false;
      }
      let stream;
      const h2State = client2[kHTTP2SessionState];
      headers[HTTP2_HEADER_AUTHORITY] = host || client2[kHost];
      headers[HTTP2_HEADER_METHOD] = method;
      if (method === "CONNECT") {
        session.ref();
        stream = session.request(headers, { endStream: false, signal });
        if (stream.id && !stream.pending) {
          request.onUpgrade(null, null, stream);
          ++h2State.openStreams;
        } else {
          stream.once("ready", () => {
            request.onUpgrade(null, null, stream);
            ++h2State.openStreams;
          });
        }
        stream.once("close", () => {
          h2State.openStreams -= 1;
          if (h2State.openStreams === 0)
            session.unref();
        });
        return true;
      }
      headers[HTTP2_HEADER_PATH] = path2;
      headers[HTTP2_HEADER_SCHEME] = "https";
      const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
      if (body && typeof body.read === "function") {
        body.read(0);
      }
      let contentLength = util.bodyLength(body);
      if (contentLength == null) {
        contentLength = request.contentLength;
      }
      if (contentLength === 0 || !expectsPayload) {
        contentLength = null;
      }
      if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
        if (client2[kStrictContentLength]) {
          errorRequest(client2, request, new RequestContentLengthMismatchError());
          return false;
        }
        process.emitWarning(new RequestContentLengthMismatchError());
      }
      if (contentLength != null) {
        assert(body, "no body must not have content length");
        headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
      }
      session.ref();
      const shouldEndStream = method === "GET" || method === "HEAD";
      if (expectContinue) {
        headers[HTTP2_HEADER_EXPECT] = "100-continue";
        stream = session.request(headers, { endStream: shouldEndStream, signal });
        stream.once("continue", writeBodyH2);
      } else {
        stream = session.request(headers, {
          endStream: shouldEndStream,
          signal
        });
        writeBodyH2();
      }
      ++h2State.openStreams;
      stream.once("response", (headers2) => {
        const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers2;
        if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), "") === false) {
          stream.pause();
        }
      });
      stream.once("end", () => {
        request.onComplete([]);
      });
      stream.on("data", (chunk) => {
        if (request.onData(chunk) === false) {
          stream.pause();
        }
      });
      stream.once("close", () => {
        h2State.openStreams -= 1;
        if (h2State.openStreams === 0) {
          session.unref();
        }
      });
      stream.once("error", function(err) {
        if (client2[kHTTP2Session] && !client2[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
          h2State.streams -= 1;
          util.destroy(stream, err);
        }
      });
      stream.once("frameError", (type, code) => {
        const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
        errorRequest(client2, request, err);
        if (client2[kHTTP2Session] && !client2[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
          h2State.streams -= 1;
          util.destroy(stream, err);
        }
      });
      return true;
      function writeBodyH2() {
        if (!body) {
          request.onRequestSent();
        } else if (util.isBuffer(body)) {
          assert(contentLength === body.byteLength, "buffer body must have content length");
          stream.cork();
          stream.write(body);
          stream.uncork();
          stream.end();
          request.onBodySent(body);
          request.onRequestSent();
        } else if (util.isBlobLike(body)) {
          if (typeof body.stream === "function") {
            writeIterable({
              client: client2,
              request,
              contentLength,
              h2stream: stream,
              expectsPayload,
              body: body.stream(),
              socket: client2[kSocket],
              header: ""
            });
          } else {
            writeBlob({
              body,
              client: client2,
              request,
              contentLength,
              expectsPayload,
              h2stream: stream,
              header: "",
              socket: client2[kSocket]
            });
          }
        } else if (util.isStream(body)) {
          writeStream({
            body,
            client: client2,
            request,
            contentLength,
            expectsPayload,
            socket: client2[kSocket],
            h2stream: stream,
            header: ""
          });
        } else if (util.isIterable(body)) {
          writeIterable({
            body,
            client: client2,
            request,
            contentLength,
            expectsPayload,
            header: "",
            h2stream: stream,
            socket: client2[kSocket]
          });
        } else {
          assert(false);
        }
      }
    }
    function writeStream({ h2stream, body, client: client2, request, socket, contentLength, header, expectsPayload }) {
      assert(contentLength !== 0 || client2[kRunning] === 0, "stream body cannot be pipelined");
      if (client2[kHTTPConnVersion] === "h2") {
        let onPipeData = function(chunk) {
          request.onBodySent(chunk);
        };
        const pipe = pipeline(
          body,
          h2stream,
          (err) => {
            if (err) {
              util.destroy(body, err);
              util.destroy(h2stream, err);
            } else {
              request.onRequestSent();
            }
          }
        );
        pipe.on("data", onPipeData);
        pipe.once("end", () => {
          pipe.removeListener("data", onPipeData);
          util.destroy(pipe);
        });
        return;
      }
      let finished = false;
      const writer = new AsyncWriter({ socket, request, contentLength, client: client2, expectsPayload, header });
      const onData = function(chunk) {
        if (finished) {
          return;
        }
        try {
          if (!writer.write(chunk) && this.pause) {
            this.pause();
          }
        } catch (err) {
          util.destroy(this, err);
        }
      };
      const onDrain = function() {
        if (finished) {
          return;
        }
        if (body.resume) {
          body.resume();
        }
      };
      const onAbort = function() {
        if (finished) {
          return;
        }
        const err = new RequestAbortedError();
        queueMicrotask(() => onFinished(err));
      };
      const onFinished = function(err) {
        if (finished) {
          return;
        }
        finished = true;
        assert(socket.destroyed || socket[kWriting] && client2[kRunning] <= 1);
        socket.off("drain", onDrain).off("error", onFinished);
        body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
        if (!err) {
          try {
            writer.end();
          } catch (er) {
            err = er;
          }
        }
        writer.destroy(err);
        if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) {
          util.destroy(body, err);
        } else {
          util.destroy(body);
        }
      };
      body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
      if (body.resume) {
        body.resume();
      }
      socket.on("drain", onDrain).on("error", onFinished);
    }
    async function writeBlob({ h2stream, body, client: client2, request, socket, contentLength, header, expectsPayload }) {
      assert(contentLength === body.size, "blob body must have content length");
      const isH2 = client2[kHTTPConnVersion] === "h2";
      try {
        if (contentLength != null && contentLength !== body.size) {
          throw new RequestContentLengthMismatchError();
        }
        const buffer2 = Buffer.from(await body.arrayBuffer());
        if (isH2) {
          h2stream.cork();
          h2stream.write(buffer2);
          h2stream.uncork();
        } else {
          socket.cork();
          socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
          socket.write(buffer2);
          socket.uncork();
        }
        request.onBodySent(buffer2);
        request.onRequestSent();
        if (!expectsPayload) {
          socket[kReset] = true;
        }
        resume(client2);
      } catch (err) {
        util.destroy(isH2 ? h2stream : socket, err);
      }
    }
    async function writeIterable({ h2stream, body, client: client2, request, socket, contentLength, header, expectsPayload }) {
      assert(contentLength !== 0 || client2[kRunning] === 0, "iterator body cannot be pipelined");
      let callback = null;
      function onDrain() {
        if (callback) {
          const cb = callback;
          callback = null;
          cb();
        }
      }
      const waitForDrain = () => new Promise((resolve2, reject) => {
        assert(callback === null);
        if (socket[kError]) {
          reject(socket[kError]);
        } else {
          callback = resolve2;
        }
      });
      if (client2[kHTTPConnVersion] === "h2") {
        h2stream.on("close", onDrain).on("drain", onDrain);
        try {
          for await (const chunk of body) {
            if (socket[kError]) {
              throw socket[kError];
            }
            const res = h2stream.write(chunk);
            request.onBodySent(chunk);
            if (!res) {
              await waitForDrain();
            }
          }
        } catch (err) {
          h2stream.destroy(err);
        } finally {
          request.onRequestSent();
          h2stream.end();
          h2stream.off("close", onDrain).off("drain", onDrain);
        }
        return;
      }
      socket.on("close", onDrain).on("drain", onDrain);
      const writer = new AsyncWriter({ socket, request, contentLength, client: client2, expectsPayload, header });
      try {
        for await (const chunk of body) {
          if (socket[kError]) {
            throw socket[kError];
          }
          if (!writer.write(chunk)) {
            await waitForDrain();
          }
        }
        writer.end();
      } catch (err) {
        writer.destroy(err);
      } finally {
        socket.off("close", onDrain).off("drain", onDrain);
      }
    }
    var AsyncWriter = class {
      constructor({ socket, request, contentLength, client: client2, expectsPayload, header }) {
        this.socket = socket;
        this.request = request;
        this.contentLength = contentLength;
        this.client = client2;
        this.bytesWritten = 0;
        this.expectsPayload = expectsPayload;
        this.header = header;
        socket[kWriting] = true;
      }
      write(chunk) {
        const { socket, request, contentLength, client: client2, bytesWritten, expectsPayload, header } = this;
        if (socket[kError]) {
          throw socket[kError];
        }
        if (socket.destroyed) {
          return false;
        }
        const len = Buffer.byteLength(chunk);
        if (!len) {
          return true;
        }
        if (contentLength !== null && bytesWritten + len > contentLength) {
          if (client2[kStrictContentLength]) {
            throw new RequestContentLengthMismatchError();
          }
          process.emitWarning(new RequestContentLengthMismatchError());
        }
        socket.cork();
        if (bytesWritten === 0) {
          if (!expectsPayload) {
            socket[kReset] = true;
          }
          if (contentLength === null) {
            socket.write(`${header}transfer-encoding: chunked\r
`, "latin1");
          } else {
            socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
          }
        }
        if (contentLength === null) {
          socket.write(`\r
${len.toString(16)}\r
`, "latin1");
        }
        this.bytesWritten += len;
        const ret = socket.write(chunk);
        socket.uncork();
        request.onBodySent(chunk);
        if (!ret) {
          if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
            if (socket[kParser].timeout.refresh) {
              socket[kParser].timeout.refresh();
            }
          }
        }
        return ret;
      }
      end() {
        const { socket, contentLength, client: client2, bytesWritten, expectsPayload, header, request } = this;
        request.onRequestSent();
        socket[kWriting] = false;
        if (socket[kError]) {
          throw socket[kError];
        }
        if (socket.destroyed) {
          return;
        }
        if (bytesWritten === 0) {
          if (expectsPayload) {
            socket.write(`${header}content-length: 0\r
\r
`, "latin1");
          } else {
            socket.write(`${header}\r
`, "latin1");
          }
        } else if (contentLength === null) {
          socket.write("\r\n0\r\n\r\n", "latin1");
        }
        if (contentLength !== null && bytesWritten !== contentLength) {
          if (client2[kStrictContentLength]) {
            throw new RequestContentLengthMismatchError();
          } else {
            process.emitWarning(new RequestContentLengthMismatchError());
          }
        }
        if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
          if (socket[kParser].timeout.refresh) {
            socket[kParser].timeout.refresh();
          }
        }
        resume(client2);
      }
      destroy(err) {
        const { socket, client: client2 } = this;
        socket[kWriting] = false;
        if (err) {
          assert(client2[kRunning] <= 1, "pipeline should only contain this request");
          util.destroy(socket, err);
        }
      }
    };
    function errorRequest(client2, request, err) {
      try {
        request.onError(err);
        assert(request.aborted);
      } catch (err2) {
        client2.emit("error", err2);
      }
    }
    module2.exports = Client;
  }
});

// node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue = __commonJS({
  "node_modules/undici/lib/node/fixed-queue.js"(exports, module2) {
    "use strict";
    var kSize = 2048;
    var kMask = kSize - 1;
    var FixedCircularBuffer = class {
      constructor() {
        this.bottom = 0;
        this.top = 0;
        this.list = new Array(kSize);
        this.next = null;
      }
      isEmpty() {
        return this.top === this.bottom;
      }
      isFull() {
        return (this.top + 1 & kMask) === this.bottom;
      }
      push(data) {
        this.list[this.top] = data;
        this.top = this.top + 1 & kMask;
      }
      shift() {
        const nextItem = this.list[this.bottom];
        if (nextItem === void 0)
          return null;
        this.list[this.bottom] = void 0;
        this.bottom = this.bottom + 1 & kMask;
        return nextItem;
      }
    };
    module2.exports = class FixedQueue {
      constructor() {
        this.head = this.tail = new FixedCircularBuffer();
      }
      isEmpty() {
        return this.head.isEmpty();
      }
      push(data) {
        if (this.head.isFull()) {
          this.head = this.head.next = new FixedCircularBuffer();
        }
        this.head.push(data);
      }
      shift() {
        const tail = this.tail;
        const next = tail.shift();
        if (tail.isEmpty() && tail.next !== null) {
          this.tail = tail.next;
        }
        return next;
      }
    };
  }
});

// node_modules/undici/lib/pool-stats.js
var require_pool_stats = __commonJS({
  "node_modules/undici/lib/pool-stats.js"(exports, module2) {
    var { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require_symbols();
    var kPool = Symbol("pool");
    var PoolStats = class {
      constructor(pool) {
        this[kPool] = pool;
      }
      get connected() {
        return this[kPool][kConnected];
      }
      get free() {
        return this[kPool][kFree];
      }
      get pending() {
        return this[kPool][kPending];
      }
      get queued() {
        return this[kPool][kQueued];
      }
      get running() {
        return this[kPool][kRunning];
      }
      get size() {
        return this[kPool][kSize];
      }
    };
    module2.exports = PoolStats;
  }
});

// node_modules/undici/lib/pool-base.js
var require_pool_base = __commonJS({
  "node_modules/undici/lib/pool-base.js"(exports, module2) {
    "use strict";
    var DispatcherBase = require_dispatcher_base();
    var FixedQueue = require_fixed_queue();
    var { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require_symbols();
    var PoolStats = require_pool_stats();
    var kClients = Symbol("clients");
    var kNeedDrain = Symbol("needDrain");
    var kQueue = Symbol("queue");
    var kClosedResolve = Symbol("closed resolve");
    var kOnDrain = Symbol("onDrain");
    var kOnConnect = Symbol("onConnect");
    var kOnDisconnect = Symbol("onDisconnect");
    var kOnConnectionError = Symbol("onConnectionError");
    var kGetDispatcher = Symbol("get dispatcher");
    var kAddClient = Symbol("add client");
    var kRemoveClient = Symbol("remove client");
    var kStats = Symbol("stats");
    var PoolBase = class extends DispatcherBase {
      constructor() {
        super();
        this[kQueue] = new FixedQueue();
        this[kClients] = [];
        this[kQueued] = 0;
        const pool = this;
        this[kOnDrain] = function onDrain(origin, targets) {
          const queue = pool[kQueue];
          let needDrain = false;
          while (!needDrain) {
            const item = queue.shift();
            if (!item) {
              break;
            }
            pool[kQueued]--;
            needDrain = !this.dispatch(item.opts, item.handler);
          }
          this[kNeedDrain] = needDrain;
          if (!this[kNeedDrain] && pool[kNeedDrain]) {
            pool[kNeedDrain] = false;
            pool.emit("drain", origin, [pool, ...targets]);
          }
          if (pool[kClosedResolve] && queue.isEmpty()) {
            Promise.all(pool[kClients].map((c) => c.close())).then(pool[kClosedResolve]);
          }
        };
        this[kOnConnect] = (origin, targets) => {
          pool.emit("connect", origin, [pool, ...targets]);
        };
        this[kOnDisconnect] = (origin, targets, err) => {
          pool.emit("disconnect", origin, [pool, ...targets], err);
        };
        this[kOnConnectionError] = (origin, targets, err) => {
          pool.emit("connectionError", origin, [pool, ...targets], err);
        };
        this[kStats] = new PoolStats(this);
      }
      get [kBusy]() {
        return this[kNeedDrain];
      }
      get [kConnected]() {
        return this[kClients].filter((client2) => client2[kConnected]).length;
      }
      get [kFree]() {
        return this[kClients].filter((client2) => client2[kConnected] && !client2[kNeedDrain]).length;
      }
      get [kPending]() {
        let ret = this[kQueued];
        for (const { [kPending]: pending } of this[kClients]) {
          ret += pending;
        }
        return ret;
      }
      get [kRunning]() {
        let ret = 0;
        for (const { [kRunning]: running } of this[kClients]) {
          ret += running;
        }
        return ret;
      }
      get [kSize]() {
        let ret = this[kQueued];
        for (const { [kSize]: size } of this[kClients]) {
          ret += size;
        }
        return ret;
      }
      get stats() {
        return this[kStats];
      }
      async [kClose]() {
        if (this[kQueue].isEmpty()) {
          return Promise.all(this[kClients].map((c) => c.close()));
        } else {
          return new Promise((resolve2) => {
            this[kClosedResolve] = resolve2;
          });
        }
      }
      async [kDestroy](err) {
        while (true) {
          const item = this[kQueue].shift();
          if (!item) {
            break;
          }
          item.handler.onError(err);
        }
        return Promise.all(this[kClients].map((c) => c.destroy(err)));
      }
      [kDispatch](opts, handler) {
        const dispatcher = this[kGetDispatcher]();
        if (!dispatcher) {
          this[kNeedDrain] = true;
          this[kQueue].push({ opts, handler });
          this[kQueued]++;
        } else if (!dispatcher.dispatch(opts, handler)) {
          dispatcher[kNeedDrain] = true;
          this[kNeedDrain] = !this[kGetDispatcher]();
        }
        return !this[kNeedDrain];
      }
      [kAddClient](client2) {
        client2.on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
        this[kClients].push(client2);
        if (this[kNeedDrain]) {
          process.nextTick(() => {
            if (this[kNeedDrain]) {
              this[kOnDrain](client2[kUrl], [this, client2]);
            }
          });
        }
        return this;
      }
      [kRemoveClient](client2) {
        client2.close(() => {
          const idx = this[kClients].indexOf(client2);
          if (idx !== -1) {
            this[kClients].splice(idx, 1);
          }
        });
        this[kNeedDrain] = this[kClients].some((dispatcher) => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
      }
    };
    module2.exports = {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kRemoveClient,
      kGetDispatcher
    };
  }
});

// node_modules/undici/lib/pool.js
var require_pool = __commonJS({
  "node_modules/undici/lib/pool.js"(exports, module2) {
    "use strict";
    var {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kGetDispatcher
    } = require_pool_base();
    var Client = require_client();
    var {
      InvalidArgumentError
    } = require_errors();
    var util = require_util();
    var { kUrl, kInterceptors } = require_symbols();
    var buildConnector = require_connect();
    var kOptions = Symbol("options");
    var kConnections = Symbol("connections");
    var kFactory = Symbol("factory");
    function defaultFactory(origin, opts) {
      return new Client(origin, opts);
    }
    var Pool = class extends PoolBase {
      constructor(origin, {
        connections,
        factory = defaultFactory,
        connect,
        connectTimeout,
        tls,
        maxCachedSessions,
        socketPath,
        autoSelectFamily,
        autoSelectFamilyAttemptTimeout,
        allowH2,
        ...options2
      } = {}) {
        super();
        if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
          throw new InvalidArgumentError("invalid connections");
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (typeof connect !== "function") {
          connect = buildConnector({
            ...tls,
            maxCachedSessions,
            allowH2,
            socketPath,
            timeout: connectTimeout,
            ...util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : void 0,
            ...connect
          });
        }
        this[kInterceptors] = options2.interceptors && options2.interceptors.Pool && Array.isArray(options2.interceptors.Pool) ? options2.interceptors.Pool : [];
        this[kConnections] = connections || null;
        this[kUrl] = util.parseOrigin(origin);
        this[kOptions] = { ...util.deepClone(options2), connect, allowH2 };
        this[kOptions].interceptors = options2.interceptors ? { ...options2.interceptors } : void 0;
        this[kFactory] = factory;
      }
      [kGetDispatcher]() {
        let dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain]);
        if (dispatcher) {
          return dispatcher;
        }
        if (!this[kConnections] || this[kClients].length < this[kConnections]) {
          dispatcher = this[kFactory](this[kUrl], this[kOptions]);
          this[kAddClient](dispatcher);
        }
        return dispatcher;
      }
    };
    module2.exports = Pool;
  }
});

// node_modules/undici/lib/balanced-pool.js
var require_balanced_pool = __commonJS({
  "node_modules/undici/lib/balanced-pool.js"(exports, module2) {
    "use strict";
    var {
      BalancedPoolMissingUpstreamError,
      InvalidArgumentError
    } = require_errors();
    var {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kRemoveClient,
      kGetDispatcher
    } = require_pool_base();
    var Pool = require_pool();
    var { kUrl, kInterceptors } = require_symbols();
    var { parseOrigin } = require_util();
    var kFactory = Symbol("factory");
    var kOptions = Symbol("options");
    var kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
    var kCurrentWeight = Symbol("kCurrentWeight");
    var kIndex = Symbol("kIndex");
    var kWeight = Symbol("kWeight");
    var kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
    var kErrorPenalty = Symbol("kErrorPenalty");
    function getGreatestCommonDivisor(a, b) {
      if (b === 0)
        return a;
      return getGreatestCommonDivisor(b, a % b);
    }
    function defaultFactory(origin, opts) {
      return new Pool(origin, opts);
    }
    var BalancedPool = class extends PoolBase {
      constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}) {
        super();
        this[kOptions] = opts;
        this[kIndex] = -1;
        this[kCurrentWeight] = 0;
        this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;
        this[kErrorPenalty] = this[kOptions].errorPenalty || 15;
        if (!Array.isArray(upstreams)) {
          upstreams = [upstreams];
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
        this[kFactory] = factory;
        for (const upstream of upstreams) {
          this.addUpstream(upstream);
        }
        this._updateBalancedPoolStats();
      }
      addUpstream(upstream) {
        const upstreamOrigin = parseOrigin(upstream).origin;
        if (this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true)) {
          return this;
        }
        const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));
        this[kAddClient](pool);
        pool.on("connect", () => {
          pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
        });
        pool.on("connectionError", () => {
          pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
          this._updateBalancedPoolStats();
        });
        pool.on("disconnect", (...args) => {
          const err = args[2];
          if (err && err.code === "UND_ERR_SOCKET") {
            pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
            this._updateBalancedPoolStats();
          }
        });
        for (const client2 of this[kClients]) {
          client2[kWeight] = this[kMaxWeightPerServer];
        }
        this._updateBalancedPoolStats();
        return this;
      }
      _updateBalancedPoolStats() {
        this[kGreatestCommonDivisor] = this[kClients].map((p) => p[kWeight]).reduce(getGreatestCommonDivisor, 0);
      }
      removeUpstream(upstream) {
        const upstreamOrigin = parseOrigin(upstream).origin;
        const pool = this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true);
        if (pool) {
          this[kRemoveClient](pool);
        }
        return this;
      }
      get upstreams() {
        return this[kClients].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl].origin);
      }
      [kGetDispatcher]() {
        if (this[kClients].length === 0) {
          throw new BalancedPoolMissingUpstreamError();
        }
        const dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain] && dispatcher2.closed !== true && dispatcher2.destroyed !== true);
        if (!dispatcher) {
          return;
        }
        const allClientsBusy = this[kClients].map((pool) => pool[kNeedDrain]).reduce((a, b) => a && b, true);
        if (allClientsBusy) {
          return;
        }
        let counter = 0;
        let maxWeightIndex = this[kClients].findIndex((pool) => !pool[kNeedDrain]);
        while (counter++ < this[kClients].length) {
          this[kIndex] = (this[kIndex] + 1) % this[kClients].length;
          const pool = this[kClients][this[kIndex]];
          if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
            maxWeightIndex = this[kIndex];
          }
          if (this[kIndex] === 0) {
            this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
            if (this[kCurrentWeight] <= 0) {
              this[kCurrentWeight] = this[kMaxWeightPerServer];
            }
          }
          if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {
            return pool;
          }
        }
        this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];
        this[kIndex] = maxWeightIndex;
        return this[kClients][maxWeightIndex];
      }
    };
    module2.exports = BalancedPool;
  }
});

// node_modules/undici/lib/compat/dispatcher-weakref.js
var require_dispatcher_weakref = __commonJS({
  "node_modules/undici/lib/compat/dispatcher-weakref.js"(exports, module2) {
    "use strict";
    var { kConnected, kSize } = require_symbols();
    var CompatWeakRef = class {
      constructor(value) {
        this.value = value;
      }
      deref() {
        return this.value[kConnected] === 0 && this.value[kSize] === 0 ? void 0 : this.value;
      }
    };
    var CompatFinalizer = class {
      constructor(finalizer) {
        this.finalizer = finalizer;
      }
      register(dispatcher, key2) {
        if (dispatcher.on) {
          dispatcher.on("disconnect", () => {
            if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
              this.finalizer(key2);
            }
          });
        }
      }
    };
    module2.exports = function() {
      if (process.env.NODE_V8_COVERAGE) {
        return {
          WeakRef: CompatWeakRef,
          FinalizationRegistry: CompatFinalizer
        };
      }
      return {
        WeakRef: global.WeakRef || CompatWeakRef,
        FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
      };
    };
  }
});

// node_modules/undici/lib/agent.js
var require_agent = __commonJS({
  "node_modules/undici/lib/agent.js"(exports, module2) {
    "use strict";
    var { InvalidArgumentError } = require_errors();
    var { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = require_symbols();
    var DispatcherBase = require_dispatcher_base();
    var Pool = require_pool();
    var Client = require_client();
    var util = require_util();
    var createRedirectInterceptor = require_redirectInterceptor();
    var { WeakRef: WeakRef2, FinalizationRegistry } = require_dispatcher_weakref()();
    var kOnConnect = Symbol("onConnect");
    var kOnDisconnect = Symbol("onDisconnect");
    var kOnConnectionError = Symbol("onConnectionError");
    var kMaxRedirections = Symbol("maxRedirections");
    var kOnDrain = Symbol("onDrain");
    var kFactory = Symbol("factory");
    var kFinalizer = Symbol("finalizer");
    var kOptions = Symbol("options");
    function defaultFactory(origin, opts) {
      return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);
    }
    var Agent = class extends DispatcherBase {
      constructor({ factory = defaultFactory, maxRedirections = 0, connect, ...options2 } = {}) {
        super();
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        if (connect && typeof connect !== "function") {
          connect = { ...connect };
        }
        this[kInterceptors] = options2.interceptors && options2.interceptors.Agent && Array.isArray(options2.interceptors.Agent) ? options2.interceptors.Agent : [createRedirectInterceptor({ maxRedirections })];
        this[kOptions] = { ...util.deepClone(options2), connect };
        this[kOptions].interceptors = options2.interceptors ? { ...options2.interceptors } : void 0;
        this[kMaxRedirections] = maxRedirections;
        this[kFactory] = factory;
        this[kClients] = /* @__PURE__ */ new Map();
        this[kFinalizer] = new FinalizationRegistry(
          /* istanbul ignore next: gc is undeterministic */
          (key2) => {
            const ref = this[kClients].get(key2);
            if (ref !== void 0 && ref.deref() === void 0) {
              this[kClients].delete(key2);
            }
          }
        );
        const agent = this;
        this[kOnDrain] = (origin, targets) => {
          agent.emit("drain", origin, [agent, ...targets]);
        };
        this[kOnConnect] = (origin, targets) => {
          agent.emit("connect", origin, [agent, ...targets]);
        };
        this[kOnDisconnect] = (origin, targets, err) => {
          agent.emit("disconnect", origin, [agent, ...targets], err);
        };
        this[kOnConnectionError] = (origin, targets, err) => {
          agent.emit("connectionError", origin, [agent, ...targets], err);
        };
      }
      get [kRunning]() {
        let ret = 0;
        for (const ref of this[kClients].values()) {
          const client2 = ref.deref();
          if (client2) {
            ret += client2[kRunning];
          }
        }
        return ret;
      }
      [kDispatch](opts, handler) {
        let key2;
        if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) {
          key2 = String(opts.origin);
        } else {
          throw new InvalidArgumentError("opts.origin must be a non-empty string or URL.");
        }
        const ref = this[kClients].get(key2);
        let dispatcher = ref ? ref.deref() : null;
        if (!dispatcher) {
          dispatcher = this[kFactory](opts.origin, this[kOptions]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
          this[kClients].set(key2, new WeakRef2(dispatcher));
          this[kFinalizer].register(dispatcher, key2);
        }
        return dispatcher.dispatch(opts, handler);
      }
      async [kClose]() {
        const closePromises = [];
        for (const ref of this[kClients].values()) {
          const client2 = ref.deref();
          if (client2) {
            closePromises.push(client2.close());
          }
        }
        await Promise.all(closePromises);
      }
      async [kDestroy](err) {
        const destroyPromises = [];
        for (const ref of this[kClients].values()) {
          const client2 = ref.deref();
          if (client2) {
            destroyPromises.push(client2.destroy(err));
          }
        }
        await Promise.all(destroyPromises);
      }
    };
    module2.exports = Agent;
  }
});

// node_modules/undici/lib/api/readable.js
var require_readable = __commonJS({
  "node_modules/undici/lib/api/readable.js"(exports, module2) {
    "use strict";
    var assert = require("assert");
    var { Readable } = require("stream");
    var { RequestAbortedError, NotSupportedError, InvalidArgumentError } = require_errors();
    var util = require_util();
    var { ReadableStreamFrom, toUSVString } = require_util();
    var Blob2;
    var kConsume = Symbol("kConsume");
    var kReading = Symbol("kReading");
    var kBody = Symbol("kBody");
    var kAbort = Symbol("abort");
    var kContentType = Symbol("kContentType");
    var noop2 = () => {
    };
    module2.exports = class BodyReadable extends Readable {
      constructor({
        resume,
        abort,
        contentType = "",
        highWaterMark = 64 * 1024
        // Same as nodejs fs streams.
      }) {
        super({
          autoDestroy: true,
          read: resume,
          highWaterMark
        });
        this._readableState.dataEmitted = false;
        this[kAbort] = abort;
        this[kConsume] = null;
        this[kBody] = null;
        this[kContentType] = contentType;
        this[kReading] = false;
      }
      destroy(err) {
        if (this.destroyed) {
          return this;
        }
        if (!err && !this._readableState.endEmitted) {
          err = new RequestAbortedError();
        }
        if (err) {
          this[kAbort]();
        }
        return super.destroy(err);
      }
      emit(ev, ...args) {
        if (ev === "data") {
          this._readableState.dataEmitted = true;
        } else if (ev === "error") {
          this._readableState.errorEmitted = true;
        }
        return super.emit(ev, ...args);
      }
      on(ev, ...args) {
        if (ev === "data" || ev === "readable") {
          this[kReading] = true;
        }
        return super.on(ev, ...args);
      }
      addListener(ev, ...args) {
        return this.on(ev, ...args);
      }
      off(ev, ...args) {
        const ret = super.off(ev, ...args);
        if (ev === "data" || ev === "readable") {
          this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
        }
        return ret;
      }
      removeListener(ev, ...args) {
        return this.off(ev, ...args);
      }
      push(chunk) {
        if (this[kConsume] && chunk !== null && this.readableLength === 0) {
          consumePush(this[kConsume], chunk);
          return this[kReading] ? super.push(chunk) : true;
        }
        return super.push(chunk);
      }
      // https://fetch.spec.whatwg.org/#dom-body-text
      async text() {
        return consume(this, "text");
      }
      // https://fetch.spec.whatwg.org/#dom-body-json
      async json() {
        return consume(this, "json");
      }
      // https://fetch.spec.whatwg.org/#dom-body-blob
      async blob() {
        return consume(this, "blob");
      }
      // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
      async arrayBuffer() {
        return consume(this, "arrayBuffer");
      }
      // https://fetch.spec.whatwg.org/#dom-body-formdata
      async formData() {
        throw new NotSupportedError();
      }
      // https://fetch.spec.whatwg.org/#dom-body-bodyused
      get bodyUsed() {
        return util.isDisturbed(this);
      }
      // https://fetch.spec.whatwg.org/#dom-body-body
      get body() {
        if (!this[kBody]) {
          this[kBody] = ReadableStreamFrom(this);
          if (this[kConsume]) {
            this[kBody].getReader();
            assert(this[kBody].locked);
          }
        }
        return this[kBody];
      }
      dump(opts) {
        let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
        const signal = opts && opts.signal;
        if (signal) {
          try {
            if (typeof signal !== "object" || !("aborted" in signal)) {
              throw new InvalidArgumentError("signal must be an AbortSignal");
            }
            util.throwIfAborted(signal);
          } catch (err) {
            return Promise.reject(err);
          }
        }
        if (this.closed) {
          return Promise.resolve(null);
        }
        return new Promise((resolve2, reject) => {
          const signalListenerCleanup = signal ? util.addAbortListener(signal, () => {
            this.destroy();
          }) : noop2;
          this.on("close", function() {
            signalListenerCleanup();
            if (signal && signal.aborted) {
              reject(signal.reason || Object.assign(new Error("The operation was aborted"), { name: "AbortError" }));
            } else {
              resolve2(null);
            }
          }).on("error", noop2).on("data", function(chunk) {
            limit -= chunk.length;
            if (limit <= 0) {
              this.destroy();
            }
          }).resume();
        });
      }
    };
    function isLocked(self2) {
      return self2[kBody] && self2[kBody].locked === true || self2[kConsume];
    }
    function isUnusable(self2) {
      return util.isDisturbed(self2) || isLocked(self2);
    }
    async function consume(stream, type) {
      if (isUnusable(stream)) {
        throw new TypeError("unusable");
      }
      assert(!stream[kConsume]);
      return new Promise((resolve2, reject) => {
        stream[kConsume] = {
          type,
          stream,
          resolve: resolve2,
          reject,
          length: 0,
          body: []
        };
        stream.on("error", function(err) {
          consumeFinish(this[kConsume], err);
        }).on("close", function() {
          if (this[kConsume].body !== null) {
            consumeFinish(this[kConsume], new RequestAbortedError());
          }
        });
        process.nextTick(consumeStart, stream[kConsume]);
      });
    }
    function consumeStart(consume2) {
      if (consume2.body === null) {
        return;
      }
      const { _readableState: state } = consume2.stream;
      for (const chunk of state.buffer) {
        consumePush(consume2, chunk);
      }
      if (state.endEmitted) {
        consumeEnd(this[kConsume]);
      } else {
        consume2.stream.on("end", function() {
          consumeEnd(this[kConsume]);
        });
      }
      consume2.stream.resume();
      while (consume2.stream.read() != null) {
      }
    }
    function consumeEnd(consume2) {
      const { type, body, resolve: resolve2, stream, length } = consume2;
      try {
        if (type === "text") {
          resolve2(toUSVString(Buffer.concat(body)));
        } else if (type === "json") {
          resolve2(JSON.parse(Buffer.concat(body)));
        } else if (type === "arrayBuffer") {
          const dst = new Uint8Array(length);
          let pos = 0;
          for (const buf of body) {
            dst.set(buf, pos);
            pos += buf.byteLength;
          }
          resolve2(dst.buffer);
        } else if (type === "blob") {
          if (!Blob2) {
            Blob2 = require("buffer").Blob;
          }
          resolve2(new Blob2(body, { type: stream[kContentType] }));
        }
        consumeFinish(consume2);
      } catch (err) {
        stream.destroy(err);
      }
    }
    function consumePush(consume2, chunk) {
      consume2.length += chunk.length;
      consume2.body.push(chunk);
    }
    function consumeFinish(consume2, err) {
      if (consume2.body === null) {
        return;
      }
      if (err) {
        consume2.reject(err);
      } else {
        consume2.resolve();
      }
      consume2.type = null;
      consume2.stream = null;
      consume2.resolve = null;
      consume2.reject = null;
      consume2.length = 0;
      consume2.body = null;
    }
  }
});

// node_modules/undici/lib/api/util.js
var require_util3 = __commonJS({
  "node_modules/undici/lib/api/util.js"(exports, module2) {
    var assert = require("assert");
    var {
      ResponseStatusCodeError
    } = require_errors();
    var { toUSVString } = require_util();
    async function getResolveErrorBodyCallback({ callback, body, contentType, statusCode, statusMessage, headers }) {
      assert(body);
      let chunks = [];
      let limit = 0;
      for await (const chunk of body) {
        chunks.push(chunk);
        limit += chunk.length;
        if (limit > 128 * 1024) {
          chunks = null;
          break;
        }
      }
      if (statusCode === 204 || !contentType || !chunks) {
        process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
        return;
      }
      try {
        if (contentType.startsWith("application/json")) {
          const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
          process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
          return;
        }
        if (contentType.startsWith("text/")) {
          const payload = toUSVString(Buffer.concat(chunks));
          process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
          return;
        }
      } catch (err) {
      }
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
    }
    module2.exports = { getResolveErrorBodyCallback };
  }
});

// node_modules/undici/lib/api/abort-signal.js
var require_abort_signal = __commonJS({
  "node_modules/undici/lib/api/abort-signal.js"(exports, module2) {
    var { addAbortListener } = require_util();
    var { RequestAbortedError } = require_errors();
    var kListener = Symbol("kListener");
    var kSignal = Symbol("kSignal");
    function abort(self2) {
      if (self2.abort) {
        self2.abort();
      } else {
        self2.onError(new RequestAbortedError());
      }
    }
    function addSignal(self2, signal) {
      self2[kSignal] = null;
      self2[kListener] = null;
      if (!signal) {
        return;
      }
      if (signal.aborted) {
        abort(self2);
        return;
      }
      self2[kSignal] = signal;
      self2[kListener] = () => {
        abort(self2);
      };
      addAbortListener(self2[kSignal], self2[kListener]);
    }
    function removeSignal(self2) {
      if (!self2[kSignal]) {
        return;
      }
      if ("removeEventListener" in self2[kSignal]) {
        self2[kSignal].removeEventListener("abort", self2[kListener]);
      } else {
        self2[kSignal].removeListener("abort", self2[kListener]);
      }
      self2[kSignal] = null;
      self2[kListener] = null;
    }
    module2.exports = {
      addSignal,
      removeSignal
    };
  }
});

// node_modules/undici/lib/api/api-request.js
var require_api_request = __commonJS({
  "node_modules/undici/lib/api/api-request.js"(exports, module2) {
    "use strict";
    var Readable = require_readable();
    var {
      InvalidArgumentError,
      RequestAbortedError
    } = require_errors();
    var util = require_util();
    var { getResolveErrorBodyCallback } = require_util3();
    var { AsyncResource } = require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var RequestHandler = class extends AsyncResource {
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;
        try {
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) {
            throw new InvalidArgumentError("invalid highWaterMark");
          }
          if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
            throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
          }
          if (method === "CONNECT") {
            throw new InvalidArgumentError("invalid method");
          }
          if (onInfo && typeof onInfo !== "function") {
            throw new InvalidArgumentError("invalid onInfo callback");
          }
          super("UNDICI_REQUEST");
        } catch (err) {
          if (util.isStream(body)) {
            util.destroy(body.on("error", util.nop), err);
          }
          throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.body = body;
        this.trailers = {};
        this.context = null;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError;
        this.highWaterMark = highWaterMark;
        if (util.isStream(body)) {
          body.on("error", (err) => {
            this.onError(err);
          });
        }
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context;
      }
      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this;
        const headers = responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        if (statusCode < 200) {
          if (this.onInfo) {
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        const parsedHeaders = responseHeaders === "raw" ? util.parseHeaders(rawHeaders) : headers;
        const contentType = parsedHeaders["content-type"];
        const body = new Readable({ resume, abort, contentType, highWaterMark });
        this.callback = null;
        this.res = body;
        if (callback !== null) {
          if (this.throwOnError && statusCode >= 400) {
            this.runInAsyncScope(
              getResolveErrorBodyCallback,
              null,
              { callback, body, contentType, statusCode, statusMessage, headers }
            );
          } else {
            this.runInAsyncScope(callback, null, null, {
              statusCode,
              headers,
              trailers: this.trailers,
              opaque,
              body,
              context
            });
          }
        }
      }
      onData(chunk) {
        const { res } = this;
        return res.push(chunk);
      }
      onComplete(trailers) {
        const { res } = this;
        removeSignal(this);
        util.parseHeaders(trailers, this.trailers);
        res.push(null);
      }
      onError(err) {
        const { res, callback, body, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
        if (res) {
          this.res = null;
          queueMicrotask(() => {
            util.destroy(res, err);
          });
        }
        if (body) {
          this.body = null;
          util.destroy(body, err);
        }
      }
    };
    function request(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve2, reject) => {
          request.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve2(data);
          });
        });
      }
      try {
        this.dispatch(opts, new RequestHandler(opts, callback));
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    module2.exports = request;
    module2.exports.RequestHandler = RequestHandler;
  }
});

// node_modules/undici/lib/api/api-stream.js
var require_api_stream = __commonJS({
  "node_modules/undici/lib/api/api-stream.js"(exports, module2) {
    "use strict";
    var { finished, PassThrough } = require("stream");
    var {
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError
    } = require_errors();
    var util = require_util();
    var { getResolveErrorBodyCallback } = require_util3();
    var { AsyncResource } = require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var StreamHandler = class extends AsyncResource {
      constructor(opts, factory, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;
        try {
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          if (typeof factory !== "function") {
            throw new InvalidArgumentError("invalid factory");
          }
          if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
            throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
          }
          if (method === "CONNECT") {
            throw new InvalidArgumentError("invalid method");
          }
          if (onInfo && typeof onInfo !== "function") {
            throw new InvalidArgumentError("invalid onInfo callback");
          }
          super("UNDICI_STREAM");
        } catch (err) {
          if (util.isStream(body)) {
            util.destroy(body.on("error", util.nop), err);
          }
          throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.factory = factory;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.context = null;
        this.trailers = null;
        this.body = body;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError || false;
        if (util.isStream(body)) {
          body.on("error", (err) => {
            this.onError(err);
          });
        }
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context;
      }
      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { factory, opaque, context, callback, responseHeaders } = this;
        const headers = responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        if (statusCode < 200) {
          if (this.onInfo) {
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        this.factory = null;
        let res;
        if (this.throwOnError && statusCode >= 400) {
          const parsedHeaders = responseHeaders === "raw" ? util.parseHeaders(rawHeaders) : headers;
          const contentType = parsedHeaders["content-type"];
          res = new PassThrough();
          this.callback = null;
          this.runInAsyncScope(
            getResolveErrorBodyCallback,
            null,
            { callback, body: res, contentType, statusCode, statusMessage, headers }
          );
        } else {
          if (factory === null) {
            return;
          }
          res = this.runInAsyncScope(factory, null, {
            statusCode,
            headers,
            opaque,
            context
          });
          if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") {
            throw new InvalidReturnValueError("expected Writable");
          }
          finished(res, { readable: false }, (err) => {
            const { callback: callback2, res: res2, opaque: opaque2, trailers, abort } = this;
            this.res = null;
            if (err || !res2.readable) {
              util.destroy(res2, err);
            }
            this.callback = null;
            this.runInAsyncScope(callback2, null, err || null, { opaque: opaque2, trailers });
            if (err) {
              abort();
            }
          });
        }
        res.on("drain", resume);
        this.res = res;
        const needDrain = res.writableNeedDrain !== void 0 ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
        return needDrain !== true;
      }
      onData(chunk) {
        const { res } = this;
        return res ? res.write(chunk) : true;
      }
      onComplete(trailers) {
        const { res } = this;
        removeSignal(this);
        if (!res) {
          return;
        }
        this.trailers = util.parseHeaders(trailers);
        res.end();
      }
      onError(err) {
        const { res, callback, opaque, body } = this;
        removeSignal(this);
        this.factory = null;
        if (res) {
          this.res = null;
          util.destroy(res, err);
        } else if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
        if (body) {
          this.body = null;
          util.destroy(body, err);
        }
      }
    };
    function stream(opts, factory, callback) {
      if (callback === void 0) {
        return new Promise((resolve2, reject) => {
          stream.call(this, opts, factory, (err, data) => {
            return err ? reject(err) : resolve2(data);
          });
        });
      }
      try {
        this.dispatch(opts, new StreamHandler(opts, factory, callback));
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    module2.exports = stream;
  }
});

// node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline = __commonJS({
  "node_modules/undici/lib/api/api-pipeline.js"(exports, module2) {
    "use strict";
    var {
      Readable,
      Duplex: Duplex2,
      PassThrough
    } = require("stream");
    var {
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError
    } = require_errors();
    var util = require_util();
    var { AsyncResource } = require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var assert = require("assert");
    var kResume = Symbol("resume");
    var PipelineRequest = class extends Readable {
      constructor() {
        super({ autoDestroy: true });
        this[kResume] = null;
      }
      _read() {
        const { [kResume]: resume } = this;
        if (resume) {
          this[kResume] = null;
          resume();
        }
      }
      _destroy(err, callback) {
        this._read();
        callback(err);
      }
    };
    var PipelineResponse = class extends Readable {
      constructor(resume) {
        super({ autoDestroy: true });
        this[kResume] = resume;
      }
      _read() {
        this[kResume]();
      }
      _destroy(err, callback) {
        if (!err && !this._readableState.endEmitted) {
          err = new RequestAbortedError();
        }
        callback(err);
      }
    };
    var PipelineHandler = class extends AsyncResource {
      constructor(opts, handler) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof handler !== "function") {
          throw new InvalidArgumentError("invalid handler");
        }
        const { signal, method, opaque, onInfo, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        if (onInfo && typeof onInfo !== "function") {
          throw new InvalidArgumentError("invalid onInfo callback");
        }
        super("UNDICI_PIPELINE");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.handler = handler;
        this.abort = null;
        this.context = null;
        this.onInfo = onInfo || null;
        this.req = new PipelineRequest().on("error", util.nop);
        this.ret = new Duplex2({
          readableObjectMode: opts.objectMode,
          autoDestroy: true,
          read: () => {
            const { body } = this;
            if (body && body.resume) {
              body.resume();
            }
          },
          write: (chunk, encoding, callback) => {
            const { req } = this;
            if (req.push(chunk, encoding) || req._readableState.destroyed) {
              callback();
            } else {
              req[kResume] = callback;
            }
          },
          destroy: (err, callback) => {
            const { body, req, res, ret, abort } = this;
            if (!err && !ret._readableState.endEmitted) {
              err = new RequestAbortedError();
            }
            if (abort && err) {
              abort();
            }
            util.destroy(body, err);
            util.destroy(req, err);
            util.destroy(res, err);
            removeSignal(this);
            callback(err);
          }
        }).on("prefinish", () => {
          const { req } = this;
          req.push(null);
        });
        this.res = null;
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        const { ret, res } = this;
        assert(!res, "pipeline cannot be retried");
        if (ret.destroyed) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context;
      }
      onHeaders(statusCode, rawHeaders, resume) {
        const { opaque, handler, context } = this;
        if (statusCode < 200) {
          if (this.onInfo) {
            const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        this.res = new PipelineResponse(resume);
        let body;
        try {
          this.handler = null;
          const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
          body = this.runInAsyncScope(handler, null, {
            statusCode,
            headers,
            opaque,
            body: this.res,
            context
          });
        } catch (err) {
          this.res.on("error", util.nop);
          throw err;
        }
        if (!body || typeof body.on !== "function") {
          throw new InvalidReturnValueError("expected Readable");
        }
        body.on("data", (chunk) => {
          const { ret, body: body2 } = this;
          if (!ret.push(chunk) && body2.pause) {
            body2.pause();
          }
        }).on("error", (err) => {
          const { ret } = this;
          util.destroy(ret, err);
        }).on("end", () => {
          const { ret } = this;
          ret.push(null);
        }).on("close", () => {
          const { ret } = this;
          if (!ret._readableState.ended) {
            util.destroy(ret, new RequestAbortedError());
          }
        });
        this.body = body;
      }
      onData(chunk) {
        const { res } = this;
        return res.push(chunk);
      }
      onComplete(trailers) {
        const { res } = this;
        res.push(null);
      }
      onError(err) {
        const { ret } = this;
        this.handler = null;
        util.destroy(ret, err);
      }
    };
    function pipeline(opts, handler) {
      try {
        const pipelineHandler = new PipelineHandler(opts, handler);
        this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler);
        return pipelineHandler.ret;
      } catch (err) {
        return new PassThrough().destroy(err);
      }
    }
    module2.exports = pipeline;
  }
});

// node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade = __commonJS({
  "node_modules/undici/lib/api/api-upgrade.js"(exports, module2) {
    "use strict";
    var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
    var { AsyncResource } = require("async_hooks");
    var util = require_util();
    var { addSignal, removeSignal } = require_abort_signal();
    var assert = require("assert");
    var UpgradeHandler = class extends AsyncResource {
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        const { signal, opaque, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        super("UNDICI_UPGRADE");
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.abort = null;
        this.context = null;
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = null;
      }
      onHeaders() {
        throw new SocketError("bad upgrade", null);
      }
      onUpgrade(statusCode, rawHeaders, socket) {
        const { callback, opaque, context } = this;
        assert.strictEqual(statusCode, 101);
        removeSignal(this);
        this.callback = null;
        const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        this.runInAsyncScope(callback, null, null, {
          headers,
          socket,
          opaque,
          context
        });
      }
      onError(err) {
        const { callback, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
      }
    };
    function upgrade(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve2, reject) => {
          upgrade.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve2(data);
          });
        });
      }
      try {
        const upgradeHandler = new UpgradeHandler(opts, callback);
        this.dispatch({
          ...opts,
          method: opts.method || "GET",
          upgrade: opts.protocol || "Websocket"
        }, upgradeHandler);
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    module2.exports = upgrade;
  }
});

// node_modules/undici/lib/api/api-connect.js
var require_api_connect = __commonJS({
  "node_modules/undici/lib/api/api-connect.js"(exports, module2) {
    "use strict";
    var { AsyncResource } = require("async_hooks");
    var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
    var util = require_util();
    var { addSignal, removeSignal } = require_abort_signal();
    var ConnectHandler = class extends AsyncResource {
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        const { signal, opaque, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        super("UNDICI_CONNECT");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.callback = callback;
        this.abort = null;
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context;
      }
      onHeaders() {
        throw new SocketError("bad connect", null);
      }
      onUpgrade(statusCode, rawHeaders, socket) {
        const { callback, opaque, context } = this;
        removeSignal(this);
        this.callback = null;
        let headers = rawHeaders;
        if (headers != null) {
          headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        }
        this.runInAsyncScope(callback, null, null, {
          statusCode,
          headers,
          socket,
          opaque,
          context
        });
      }
      onError(err) {
        const { callback, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
      }
    };
    function connect(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve2, reject) => {
          connect.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve2(data);
          });
        });
      }
      try {
        const connectHandler = new ConnectHandler(opts, callback);
        this.dispatch({ ...opts, method: "CONNECT" }, connectHandler);
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    module2.exports = connect;
  }
});

// node_modules/undici/lib/api/index.js
var require_api = __commonJS({
  "node_modules/undici/lib/api/index.js"(exports, module2) {
    "use strict";
    module2.exports.request = require_api_request();
    module2.exports.stream = require_api_stream();
    module2.exports.pipeline = require_api_pipeline();
    module2.exports.upgrade = require_api_upgrade();
    module2.exports.connect = require_api_connect();
  }
});

// node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors = __commonJS({
  "node_modules/undici/lib/mock/mock-errors.js"(exports, module2) {
    "use strict";
    var { UndiciError } = require_errors();
    var MockNotMatchedError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, MockNotMatchedError);
        this.name = "MockNotMatchedError";
        this.message = message || "The request does not match any registered mock dispatches";
        this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
      }
    };
    module2.exports = {
      MockNotMatchedError
    };
  }
});

// node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols = __commonJS({
  "node_modules/undici/lib/mock/mock-symbols.js"(exports, module2) {
    "use strict";
    module2.exports = {
      kAgent: Symbol("agent"),
      kOptions: Symbol("options"),
      kFactory: Symbol("factory"),
      kDispatches: Symbol("dispatches"),
      kDispatchKey: Symbol("dispatch key"),
      kDefaultHeaders: Symbol("default headers"),
      kDefaultTrailers: Symbol("default trailers"),
      kContentLength: Symbol("content length"),
      kMockAgent: Symbol("mock agent"),
      kMockAgentSet: Symbol("mock agent set"),
      kMockAgentGet: Symbol("mock agent get"),
      kMockDispatch: Symbol("mock dispatch"),
      kClose: Symbol("close"),
      kOriginalClose: Symbol("original agent close"),
      kOrigin: Symbol("origin"),
      kIsMockActive: Symbol("is mock active"),
      kNetConnect: Symbol("net connect"),
      kGetNetConnect: Symbol("get net connect"),
      kConnected: Symbol("connected")
    };
  }
});

// node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils = __commonJS({
  "node_modules/undici/lib/mock/mock-utils.js"(exports, module2) {
    "use strict";
    var { MockNotMatchedError } = require_mock_errors();
    var {
      kDispatches,
      kMockAgent,
      kOriginalDispatch,
      kOrigin,
      kGetNetConnect
    } = require_mock_symbols();
    var { buildURL, nop } = require_util();
    var { STATUS_CODES } = require("http");
    var {
      types: {
        isPromise
      }
    } = require("util");
    function matchValue(match, value) {
      if (typeof match === "string") {
        return match === value;
      }
      if (match instanceof RegExp) {
        return match.test(value);
      }
      if (typeof match === "function") {
        return match(value) === true;
      }
      return false;
    }
    function lowerCaseEntries(headers) {
      return Object.fromEntries(
        Object.entries(headers).map(([headerName, headerValue]) => {
          return [headerName.toLocaleLowerCase(), headerValue];
        })
      );
    }
    function getHeaderByName(headers, key2) {
      if (Array.isArray(headers)) {
        for (let i = 0; i < headers.length; i += 2) {
          if (headers[i].toLocaleLowerCase() === key2.toLocaleLowerCase()) {
            return headers[i + 1];
          }
        }
        return void 0;
      } else if (typeof headers.get === "function") {
        return headers.get(key2);
      } else {
        return lowerCaseEntries(headers)[key2.toLocaleLowerCase()];
      }
    }
    function buildHeadersFromArray(headers) {
      const clone = headers.slice();
      const entries = [];
      for (let index13 = 0; index13 < clone.length; index13 += 2) {
        entries.push([clone[index13], clone[index13 + 1]]);
      }
      return Object.fromEntries(entries);
    }
    function matchHeaders(mockDispatch2, headers) {
      if (typeof mockDispatch2.headers === "function") {
        if (Array.isArray(headers)) {
          headers = buildHeadersFromArray(headers);
        }
        return mockDispatch2.headers(headers ? lowerCaseEntries(headers) : {});
      }
      if (typeof mockDispatch2.headers === "undefined") {
        return true;
      }
      if (typeof headers !== "object" || typeof mockDispatch2.headers !== "object") {
        return false;
      }
      for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch2.headers)) {
        const headerValue = getHeaderByName(headers, matchHeaderName);
        if (!matchValue(matchHeaderValue, headerValue)) {
          return false;
        }
      }
      return true;
    }
    function safeUrl(path2) {
      if (typeof path2 !== "string") {
        return path2;
      }
      const pathSegments = path2.split("?");
      if (pathSegments.length !== 2) {
        return path2;
      }
      const qp = new URLSearchParams(pathSegments.pop());
      qp.sort();
      return [...pathSegments, qp.toString()].join("?");
    }
    function matchKey(mockDispatch2, { path: path2, method, body, headers }) {
      const pathMatch = matchValue(mockDispatch2.path, path2);
      const methodMatch = matchValue(mockDispatch2.method, method);
      const bodyMatch = typeof mockDispatch2.body !== "undefined" ? matchValue(mockDispatch2.body, body) : true;
      const headersMatch = matchHeaders(mockDispatch2, headers);
      return pathMatch && methodMatch && bodyMatch && headersMatch;
    }
    function getResponseData(data) {
      if (Buffer.isBuffer(data)) {
        return data;
      } else if (typeof data === "object") {
        return JSON.stringify(data);
      } else {
        return data.toString();
      }
    }
    function getMockDispatch(mockDispatches, key2) {
      const basePath = key2.query ? buildURL(key2.path, key2.query) : key2.path;
      const resolvedPath = typeof basePath === "string" ? safeUrl(basePath) : basePath;
      let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path: path2 }) => matchValue(safeUrl(path2), resolvedPath));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key2.method));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for method '${key2.method}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue(body, key2.body) : true);
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for body '${key2.body}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter((mockDispatch2) => matchHeaders(mockDispatch2, key2.headers));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key2.headers === "object" ? JSON.stringify(key2.headers) : key2.headers}'`);
      }
      return matchedMockDispatches[0];
    }
    function addMockDispatch(mockDispatches, key2, data) {
      const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false };
      const replyData = typeof data === "function" ? { callback: data } : { ...data };
      const newMockDispatch = { ...baseData, ...key2, pending: true, data: { error: null, ...replyData } };
      mockDispatches.push(newMockDispatch);
      return newMockDispatch;
    }
    function deleteMockDispatch(mockDispatches, key2) {
      const index13 = mockDispatches.findIndex((dispatch) => {
        if (!dispatch.consumed) {
          return false;
        }
        return matchKey(dispatch, key2);
      });
      if (index13 !== -1) {
        mockDispatches.splice(index13, 1);
      }
    }
    function buildKey(opts) {
      const { path: path2, method, body, headers, query: query5 } = opts;
      return {
        path: path2,
        method,
        body,
        headers,
        query: query5
      };
    }
    function generateKeyValues(data) {
      return Object.entries(data).reduce((keyValuePairs, [key2, value]) => [
        ...keyValuePairs,
        Buffer.from(`${key2}`),
        Array.isArray(value) ? value.map((x) => Buffer.from(`${x}`)) : Buffer.from(`${value}`)
      ], []);
    }
    function getStatusText(statusCode) {
      return STATUS_CODES[statusCode] || "unknown";
    }
    async function getResponse(body) {
      const buffers = [];
      for await (const data of body) {
        buffers.push(data);
      }
      return Buffer.concat(buffers).toString("utf8");
    }
    function mockDispatch(opts, handler) {
      const key2 = buildKey(opts);
      const mockDispatch2 = getMockDispatch(this[kDispatches], key2);
      mockDispatch2.timesInvoked++;
      if (mockDispatch2.data.callback) {
        mockDispatch2.data = { ...mockDispatch2.data, ...mockDispatch2.data.callback(opts) };
      }
      const { data: { statusCode, data, headers, trailers, error: error3 }, delay, persist } = mockDispatch2;
      const { timesInvoked, times } = mockDispatch2;
      mockDispatch2.consumed = !persist && timesInvoked >= times;
      mockDispatch2.pending = timesInvoked < times;
      if (error3 !== null) {
        deleteMockDispatch(this[kDispatches], key2);
        handler.onError(error3);
        return true;
      }
      if (typeof delay === "number" && delay > 0) {
        setTimeout(() => {
          handleReply(this[kDispatches]);
        }, delay);
      } else {
        handleReply(this[kDispatches]);
      }
      function handleReply(mockDispatches, _data = data) {
        const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
        const body = typeof _data === "function" ? _data({ ...opts, headers: optsHeaders }) : _data;
        if (isPromise(body)) {
          body.then((newData) => handleReply(mockDispatches, newData));
          return;
        }
        const responseData = getResponseData(body);
        const responseHeaders = generateKeyValues(headers);
        const responseTrailers = generateKeyValues(trailers);
        handler.abort = nop;
        handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode));
        handler.onData(Buffer.from(responseData));
        handler.onComplete(responseTrailers);
        deleteMockDispatch(mockDispatches, key2);
      }
      function resume() {
      }
      return true;
    }
    function buildMockDispatch() {
      const agent = this[kMockAgent];
      const origin = this[kOrigin];
      const originalDispatch = this[kOriginalDispatch];
      return function dispatch(opts, handler) {
        if (agent.isMockActive) {
          try {
            mockDispatch.call(this, opts, handler);
          } catch (error3) {
            if (error3 instanceof MockNotMatchedError) {
              const netConnect = agent[kGetNetConnect]();
              if (netConnect === false) {
                throw new MockNotMatchedError(`${error3.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
              }
              if (checkNetConnect(netConnect, origin)) {
                originalDispatch.call(this, opts, handler);
              } else {
                throw new MockNotMatchedError(`${error3.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
              }
            } else {
              throw error3;
            }
          }
        } else {
          originalDispatch.call(this, opts, handler);
        }
      };
    }
    function checkNetConnect(netConnect, origin) {
      const url = new URL(origin);
      if (netConnect === true) {
        return true;
      } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {
        return true;
      }
      return false;
    }
    function buildMockOptions(opts) {
      if (opts) {
        const { agent, ...mockOptions } = opts;
        return mockOptions;
      }
    }
    module2.exports = {
      getResponseData,
      getMockDispatch,
      addMockDispatch,
      deleteMockDispatch,
      buildKey,
      generateKeyValues,
      matchValue,
      getResponse,
      getStatusText,
      mockDispatch,
      buildMockDispatch,
      checkNetConnect,
      buildMockOptions,
      getHeaderByName
    };
  }
});

// node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor = __commonJS({
  "node_modules/undici/lib/mock/mock-interceptor.js"(exports, module2) {
    "use strict";
    var { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kDispatchKey,
      kDefaultHeaders,
      kDefaultTrailers,
      kContentLength,
      kMockDispatch
    } = require_mock_symbols();
    var { InvalidArgumentError } = require_errors();
    var { buildURL } = require_util();
    var MockScope = class {
      constructor(mockDispatch) {
        this[kMockDispatch] = mockDispatch;
      }
      /**
       * Delay a reply by a set amount in ms.
       */
      delay(waitInMs) {
        if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) {
          throw new InvalidArgumentError("waitInMs must be a valid integer > 0");
        }
        this[kMockDispatch].delay = waitInMs;
        return this;
      }
      /**
       * For a defined reply, never mark as consumed.
       */
      persist() {
        this[kMockDispatch].persist = true;
        return this;
      }
      /**
       * Allow one to define a reply for a set amount of matching requests.
       */
      times(repeatTimes) {
        if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
          throw new InvalidArgumentError("repeatTimes must be a valid integer > 0");
        }
        this[kMockDispatch].times = repeatTimes;
        return this;
      }
    };
    var MockInterceptor = class {
      constructor(opts, mockDispatches) {
        if (typeof opts !== "object") {
          throw new InvalidArgumentError("opts must be an object");
        }
        if (typeof opts.path === "undefined") {
          throw new InvalidArgumentError("opts.path must be defined");
        }
        if (typeof opts.method === "undefined") {
          opts.method = "GET";
        }
        if (typeof opts.path === "string") {
          if (opts.query) {
            opts.path = buildURL(opts.path, opts.query);
          } else {
            const parsedURL = new URL(opts.path, "data://");
            opts.path = parsedURL.pathname + parsedURL.search;
          }
        }
        if (typeof opts.method === "string") {
          opts.method = opts.method.toUpperCase();
        }
        this[kDispatchKey] = buildKey(opts);
        this[kDispatches] = mockDispatches;
        this[kDefaultHeaders] = {};
        this[kDefaultTrailers] = {};
        this[kContentLength] = false;
      }
      createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
        const responseData = getResponseData(data);
        const contentLength = this[kContentLength] ? { "content-length": responseData.length } : {};
        const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers };
        const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers };
        return { statusCode, data, headers, trailers };
      }
      validateReplyParameters(statusCode, data, responseOptions) {
        if (typeof statusCode === "undefined") {
          throw new InvalidArgumentError("statusCode must be defined");
        }
        if (typeof data === "undefined") {
          throw new InvalidArgumentError("data must be defined");
        }
        if (typeof responseOptions !== "object") {
          throw new InvalidArgumentError("responseOptions must be an object");
        }
      }
      /**
       * Mock an undici request with a defined reply.
       */
      reply(replyData) {
        if (typeof replyData === "function") {
          const wrappedDefaultsCallback = (opts) => {
            const resolvedData = replyData(opts);
            if (typeof resolvedData !== "object") {
              throw new InvalidArgumentError("reply options callback must return an object");
            }
            const { statusCode: statusCode2, data: data2 = "", responseOptions: responseOptions2 = {} } = resolvedData;
            this.validateReplyParameters(statusCode2, data2, responseOptions2);
            return {
              ...this.createMockScopeDispatchData(statusCode2, data2, responseOptions2)
            };
          };
          const newMockDispatch2 = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);
          return new MockScope(newMockDispatch2);
        }
        const [statusCode, data = "", responseOptions = {}] = [...arguments];
        this.validateReplyParameters(statusCode, data, responseOptions);
        const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);
        return new MockScope(newMockDispatch);
      }
      /**
       * Mock an undici request with a defined error.
       */
      replyWithError(error3) {
        if (typeof error3 === "undefined") {
          throw new InvalidArgumentError("error must be defined");
        }
        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error: error3 });
        return new MockScope(newMockDispatch);
      }
      /**
       * Set default reply headers on the interceptor for subsequent replies
       */
      defaultReplyHeaders(headers) {
        if (typeof headers === "undefined") {
          throw new InvalidArgumentError("headers must be defined");
        }
        this[kDefaultHeaders] = headers;
        return this;
      }
      /**
       * Set default reply trailers on the interceptor for subsequent replies
       */
      defaultReplyTrailers(trailers) {
        if (typeof trailers === "undefined") {
          throw new InvalidArgumentError("trailers must be defined");
        }
        this[kDefaultTrailers] = trailers;
        return this;
      }
      /**
       * Set reply content length header for replies on the interceptor
       */
      replyContentLength() {
        this[kContentLength] = true;
        return this;
      }
    };
    module2.exports.MockInterceptor = MockInterceptor;
    module2.exports.MockScope = MockScope;
  }
});

// node_modules/undici/lib/mock/mock-client.js
var require_mock_client = __commonJS({
  "node_modules/undici/lib/mock/mock-client.js"(exports, module2) {
    "use strict";
    var { promisify } = require("util");
    var Client = require_client();
    var { buildMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kMockAgent,
      kClose,
      kOriginalClose,
      kOrigin,
      kOriginalDispatch,
      kConnected
    } = require_mock_symbols();
    var { MockInterceptor } = require_mock_interceptor();
    var Symbols = require_symbols();
    var { InvalidArgumentError } = require_errors();
    var MockClient = class extends Client {
      constructor(origin, opts) {
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        this[kMockAgent] = opts.agent;
        this[kOrigin] = origin;
        this[kDispatches] = [];
        this[kConnected] = 1;
        this[kOriginalDispatch] = this.dispatch;
        this[kOriginalClose] = this.close.bind(this);
        this.dispatch = buildMockDispatch.call(this);
        this.close = this[kClose];
      }
      get [Symbols.kConnected]() {
        return this[kConnected];
      }
      /**
       * Sets up the base interceptor for mocking replies from undici.
       */
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches]);
      }
      async [kClose]() {
        await promisify(this[kOriginalClose])();
        this[kConnected] = 0;
        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
      }
    };
    module2.exports = MockClient;
  }
});

// node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool = __commonJS({
  "node_modules/undici/lib/mock/mock-pool.js"(exports, module2) {
    "use strict";
    var { promisify } = require("util");
    var Pool = require_pool();
    var { buildMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kMockAgent,
      kClose,
      kOriginalClose,
      kOrigin,
      kOriginalDispatch,
      kConnected
    } = require_mock_symbols();
    var { MockInterceptor } = require_mock_interceptor();
    var Symbols = require_symbols();
    var { InvalidArgumentError } = require_errors();
    var MockPool = class extends Pool {
      constructor(origin, opts) {
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        this[kMockAgent] = opts.agent;
        this[kOrigin] = origin;
        this[kDispatches] = [];
        this[kConnected] = 1;
        this[kOriginalDispatch] = this.dispatch;
        this[kOriginalClose] = this.close.bind(this);
        this.dispatch = buildMockDispatch.call(this);
        this.close = this[kClose];
      }
      get [Symbols.kConnected]() {
        return this[kConnected];
      }
      /**
       * Sets up the base interceptor for mocking replies from undici.
       */
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches]);
      }
      async [kClose]() {
        await promisify(this[kOriginalClose])();
        this[kConnected] = 0;
        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
      }
    };
    module2.exports = MockPool;
  }
});

// node_modules/undici/lib/mock/pluralizer.js
var require_pluralizer = __commonJS({
  "node_modules/undici/lib/mock/pluralizer.js"(exports, module2) {
    "use strict";
    var singulars = {
      pronoun: "it",
      is: "is",
      was: "was",
      this: "this"
    };
    var plurals = {
      pronoun: "they",
      is: "are",
      was: "were",
      this: "these"
    };
    module2.exports = class Pluralizer {
      constructor(singular, plural) {
        this.singular = singular;
        this.plural = plural;
      }
      pluralize(count) {
        const one = count === 1;
        const keys = one ? singulars : plurals;
        const noun = one ? this.singular : this.plural;
        return { ...keys, count, noun };
      }
    };
  }
});

// node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter = __commonJS({
  "node_modules/undici/lib/mock/pending-interceptors-formatter.js"(exports, module2) {
    "use strict";
    var { Transform } = require("stream");
    var { Console } = require("console");
    module2.exports = class PendingInterceptorsFormatter {
      constructor({ disableColors } = {}) {
        this.transform = new Transform({
          transform(chunk, _enc, cb) {
            cb(null, chunk);
          }
        });
        this.logger = new Console({
          stdout: this.transform,
          inspectOptions: {
            colors: !disableColors && !process.env.CI
          }
        });
      }
      format(pendingInterceptors) {
        const withPrettyHeaders = pendingInterceptors.map(
          ({ method, path: path2, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
            Method: method,
            Origin: origin,
            Path: path2,
            "Status code": statusCode,
            Persistent: persist ? "\u2705" : "\u274C",
            Invocations: timesInvoked,
            Remaining: persist ? Infinity : times - timesInvoked
          })
        );
        this.logger.table(withPrettyHeaders);
        return this.transform.read().toString();
      }
    };
  }
});

// node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent = __commonJS({
  "node_modules/undici/lib/mock/mock-agent.js"(exports, module2) {
    "use strict";
    var { kClients } = require_symbols();
    var Agent = require_agent();
    var {
      kAgent,
      kMockAgentSet,
      kMockAgentGet,
      kDispatches,
      kIsMockActive,
      kNetConnect,
      kGetNetConnect,
      kOptions,
      kFactory
    } = require_mock_symbols();
    var MockClient = require_mock_client();
    var MockPool = require_mock_pool();
    var { matchValue, buildMockOptions } = require_mock_utils();
    var { InvalidArgumentError, UndiciError } = require_errors();
    var Dispatcher = require_dispatcher();
    var Pluralizer = require_pluralizer();
    var PendingInterceptorsFormatter = require_pending_interceptors_formatter();
    var FakeWeakRef = class {
      constructor(value) {
        this.value = value;
      }
      deref() {
        return this.value;
      }
    };
    var MockAgent = class extends Dispatcher {
      constructor(opts) {
        super(opts);
        this[kNetConnect] = true;
        this[kIsMockActive] = true;
        if (opts && opts.agent && typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        const agent = opts && opts.agent ? opts.agent : new Agent(opts);
        this[kAgent] = agent;
        this[kClients] = agent[kClients];
        this[kOptions] = buildMockOptions(opts);
      }
      get(origin) {
        let dispatcher = this[kMockAgentGet](origin);
        if (!dispatcher) {
          dispatcher = this[kFactory](origin);
          this[kMockAgentSet](origin, dispatcher);
        }
        return dispatcher;
      }
      dispatch(opts, handler) {
        this.get(opts.origin);
        return this[kAgent].dispatch(opts, handler);
      }
      async close() {
        await this[kAgent].close();
        this[kClients].clear();
      }
      deactivate() {
        this[kIsMockActive] = false;
      }
      activate() {
        this[kIsMockActive] = true;
      }
      enableNetConnect(matcher) {
        if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) {
          if (Array.isArray(this[kNetConnect])) {
            this[kNetConnect].push(matcher);
          } else {
            this[kNetConnect] = [matcher];
          }
        } else if (typeof matcher === "undefined") {
          this[kNetConnect] = true;
        } else {
          throw new InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");
        }
      }
      disableNetConnect() {
        this[kNetConnect] = false;
      }
      // This is required to bypass issues caused by using global symbols - see:
      // https://github.com/nodejs/undici/issues/1447
      get isMockActive() {
        return this[kIsMockActive];
      }
      [kMockAgentSet](origin, dispatcher) {
        this[kClients].set(origin, new FakeWeakRef(dispatcher));
      }
      [kFactory](origin) {
        const mockOptions = Object.assign({ agent: this }, this[kOptions]);
        return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);
      }
      [kMockAgentGet](origin) {
        const ref = this[kClients].get(origin);
        if (ref) {
          return ref.deref();
        }
        if (typeof origin !== "string") {
          const dispatcher = this[kFactory]("http://localhost:9999");
          this[kMockAgentSet](origin, dispatcher);
          return dispatcher;
        }
        for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
          const nonExplicitDispatcher = nonExplicitRef.deref();
          if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin)) {
            const dispatcher = this[kFactory](origin);
            this[kMockAgentSet](origin, dispatcher);
            dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
            return dispatcher;
          }
        }
      }
      [kGetNetConnect]() {
        return this[kNetConnect];
      }
      pendingInterceptors() {
        const mockAgentClients = this[kClients];
        return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope.deref()[kDispatches].map((dispatch) => ({ ...dispatch, origin }))).filter(({ pending }) => pending);
      }
      assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
        const pending = this.pendingInterceptors();
        if (pending.length === 0) {
          return;
        }
        const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending.length);
        throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
      }
    };
    module2.exports = MockAgent;
  }
});

// node_modules/undici/lib/proxy-agent.js
var require_proxy_agent = __commonJS({
  "node_modules/undici/lib/proxy-agent.js"(exports, module2) {
    "use strict";
    var { kProxy, kClose, kDestroy, kInterceptors } = require_symbols();
    var { URL: URL2 } = require("url");
    var Agent = require_agent();
    var Pool = require_pool();
    var DispatcherBase = require_dispatcher_base();
    var { InvalidArgumentError, RequestAbortedError } = require_errors();
    var buildConnector = require_connect();
    var kAgent = Symbol("proxy agent");
    var kClient = Symbol("proxy client");
    var kProxyHeaders = Symbol("proxy headers");
    var kRequestTls = Symbol("request tls settings");
    var kProxyTls = Symbol("proxy tls settings");
    var kConnectEndpoint = Symbol("connect endpoint function");
    function defaultProtocolPort(protocol) {
      return protocol === "https:" ? 443 : 80;
    }
    function buildProxyOptions(opts) {
      if (typeof opts === "string") {
        opts = { uri: opts };
      }
      if (!opts || !opts.uri) {
        throw new InvalidArgumentError("Proxy opts.uri is mandatory");
      }
      return {
        uri: opts.uri,
        protocol: opts.protocol || "https"
      };
    }
    function defaultFactory(origin, opts) {
      return new Pool(origin, opts);
    }
    var ProxyAgent = class extends DispatcherBase {
      constructor(opts) {
        super(opts);
        this[kProxy] = buildProxyOptions(opts);
        this[kAgent] = new Agent(opts);
        this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
        if (typeof opts === "string") {
          opts = { uri: opts };
        }
        if (!opts || !opts.uri) {
          throw new InvalidArgumentError("Proxy opts.uri is mandatory");
        }
        const { clientFactory = defaultFactory } = opts;
        if (typeof clientFactory !== "function") {
          throw new InvalidArgumentError("Proxy opts.clientFactory must be a function.");
        }
        this[kRequestTls] = opts.requestTls;
        this[kProxyTls] = opts.proxyTls;
        this[kProxyHeaders] = opts.headers || {};
        const resolvedUrl = new URL2(opts.uri);
        const { origin, port, host, username, password } = resolvedUrl;
        if (opts.auth && opts.token) {
          throw new InvalidArgumentError("opts.auth cannot be used in combination with opts.token");
        } else if (opts.auth) {
          this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
        } else if (opts.token) {
          this[kProxyHeaders]["proxy-authorization"] = opts.token;
        } else if (username && password) {
          this[kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
        }
        const connect = buildConnector({ ...opts.proxyTls });
        this[kConnectEndpoint] = buildConnector({ ...opts.requestTls });
        this[kClient] = clientFactory(resolvedUrl, { connect });
        this[kAgent] = new Agent({
          ...opts,
          connect: async (opts2, callback) => {
            let requestedHost = opts2.host;
            if (!opts2.port) {
              requestedHost += `:${defaultProtocolPort(opts2.protocol)}`;
            }
            try {
              const { socket, statusCode } = await this[kClient].connect({
                origin,
                port,
                path: requestedHost,
                signal: opts2.signal,
                headers: {
                  ...this[kProxyHeaders],
                  host
                }
              });
              if (statusCode !== 200) {
                socket.on("error", () => {
                }).destroy();
                callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
              }
              if (opts2.protocol !== "https:") {
                callback(null, socket);
                return;
              }
              let servername;
              if (this[kRequestTls]) {
                servername = this[kRequestTls].servername;
              } else {
                servername = opts2.servername;
              }
              this[kConnectEndpoint]({ ...opts2, servername, httpSocket: socket }, callback);
            } catch (err) {
              callback(err);
            }
          }
        });
      }
      dispatch(opts, handler) {
        const { host } = new URL2(opts.origin);
        const headers = buildHeaders(opts.headers);
        throwIfProxyAuthIsSent(headers);
        return this[kAgent].dispatch(
          {
            ...opts,
            headers: {
              ...headers,
              host
            }
          },
          handler
        );
      }
      async [kClose]() {
        await this[kAgent].close();
        await this[kClient].close();
      }
      async [kDestroy]() {
        await this[kAgent].destroy();
        await this[kClient].destroy();
      }
    };
    function buildHeaders(headers) {
      if (Array.isArray(headers)) {
        const headersPair = {};
        for (let i = 0; i < headers.length; i += 2) {
          headersPair[headers[i]] = headers[i + 1];
        }
        return headersPair;
      }
      return headers;
    }
    function throwIfProxyAuthIsSent(headers) {
      const existProxyAuth = headers && Object.keys(headers).find((key2) => key2.toLowerCase() === "proxy-authorization");
      if (existProxyAuth) {
        throw new InvalidArgumentError("Proxy-Authorization should be sent in ProxyAgent constructor");
      }
    }
    module2.exports = ProxyAgent;
  }
});

// node_modules/undici/lib/handler/RetryHandler.js
var require_RetryHandler = __commonJS({
  "node_modules/undici/lib/handler/RetryHandler.js"(exports, module2) {
    var assert = require("assert");
    var { kRetryHandlerDefaultRetry } = require_symbols();
    var { RequestRetryError } = require_errors();
    var { isDisturbed, parseHeaders, parseRangeHeader } = require_util();
    function calculateRetryAfterHeader(retryAfter) {
      const current = Date.now();
      const diff = new Date(retryAfter).getTime() - current;
      return diff;
    }
    var RetryHandler = class {
      constructor(opts, handlers) {
        const { retryOptions, ...dispatchOpts } = opts;
        const {
          // Retry scoped
          retry: retryFn,
          maxRetries,
          maxTimeout,
          minTimeout,
          timeoutFactor,
          // Response scoped
          methods,
          errorCodes,
          retryAfter,
          statusCodes
        } = retryOptions ?? {};
        this.dispatch = handlers.dispatch;
        this.handler = handlers.handler;
        this.opts = dispatchOpts;
        this.abort = null;
        this.aborted = false;
        this.retryOpts = {
          retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],
          retryAfter: retryAfter ?? true,
          maxTimeout: maxTimeout ?? 30 * 1e3,
          // 30s,
          timeout: minTimeout ?? 500,
          // .5s
          timeoutFactor: timeoutFactor ?? 2,
          maxRetries: maxRetries ?? 5,
          // What errors we should retry
          methods: methods ?? ["GET", "HEAD", "OPTIONS", "PUT", "DELETE", "TRACE"],
          // Indicates which errors to retry
          statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
          // List of errors to retry
          errorCodes: errorCodes ?? [
            "ECONNRESET",
            "ECONNREFUSED",
            "ENOTFOUND",
            "ENETDOWN",
            "ENETUNREACH",
            "EHOSTDOWN",
            "EHOSTUNREACH",
            "EPIPE"
          ]
        };
        this.retryCount = 0;
        this.start = 0;
        this.end = null;
        this.etag = null;
        this.resume = null;
        this.handler.onConnect((reason) => {
          this.aborted = true;
          if (this.abort) {
            this.abort(reason);
          } else {
            this.reason = reason;
          }
        });
      }
      onRequestSent() {
        if (this.handler.onRequestSent) {
          this.handler.onRequestSent();
        }
      }
      onUpgrade(statusCode, headers, socket) {
        if (this.handler.onUpgrade) {
          this.handler.onUpgrade(statusCode, headers, socket);
        }
      }
      onConnect(abort) {
        if (this.aborted) {
          abort(this.reason);
        } else {
          this.abort = abort;
        }
      }
      onBodySent(chunk) {
        if (this.handler.onBodySent)
          return this.handler.onBodySent(chunk);
      }
      static [kRetryHandlerDefaultRetry](err, { state, opts }, cb) {
        const { statusCode, code, headers } = err;
        const { method, retryOptions } = opts;
        const {
          maxRetries,
          timeout,
          maxTimeout,
          timeoutFactor,
          statusCodes,
          errorCodes,
          methods
        } = retryOptions;
        let { counter, currentTimeout } = state;
        currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout;
        if (code && code !== "UND_ERR_REQ_RETRY" && code !== "UND_ERR_SOCKET" && !errorCodes.includes(code)) {
          cb(err);
          return;
        }
        if (Array.isArray(methods) && !methods.includes(method)) {
          cb(err);
          return;
        }
        if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
          cb(err);
          return;
        }
        if (counter > maxRetries) {
          cb(err);
          return;
        }
        let retryAfterHeader = headers != null && headers["retry-after"];
        if (retryAfterHeader) {
          retryAfterHeader = Number(retryAfterHeader);
          retryAfterHeader = isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3;
        }
        const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
        state.currentTimeout = retryTimeout;
        setTimeout(() => cb(null), retryTimeout);
      }
      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const headers = parseHeaders(rawHeaders);
        this.retryCount += 1;
        if (statusCode >= 300) {
          this.abort(
            new RequestRetryError("Request failed", statusCode, {
              headers,
              count: this.retryCount
            })
          );
          return false;
        }
        if (this.resume != null) {
          this.resume = null;
          if (statusCode !== 206) {
            return true;
          }
          const contentRange = parseRangeHeader(headers["content-range"]);
          if (!contentRange) {
            this.abort(
              new RequestRetryError("Content-Range mismatch", statusCode, {
                headers,
                count: this.retryCount
              })
            );
            return false;
          }
          if (this.etag != null && this.etag !== headers.etag) {
            this.abort(
              new RequestRetryError("ETag mismatch", statusCode, {
                headers,
                count: this.retryCount
              })
            );
            return false;
          }
          const { start, size, end = size } = contentRange;
          assert(this.start === start, "content-range mismatch");
          assert(this.end == null || this.end === end, "content-range mismatch");
          this.resume = resume;
          return true;
        }
        if (this.end == null) {
          if (statusCode === 206) {
            const range = parseRangeHeader(headers["content-range"]);
            if (range == null) {
              return this.handler.onHeaders(
                statusCode,
                rawHeaders,
                resume,
                statusMessage
              );
            }
            const { start, size, end = size } = range;
            assert(
              start != null && Number.isFinite(start) && this.start !== start,
              "content-range mismatch"
            );
            assert(Number.isFinite(start));
            assert(
              end != null && Number.isFinite(end) && this.end !== end,
              "invalid content-length"
            );
            this.start = start;
            this.end = end;
          }
          if (this.end == null) {
            const contentLength = headers["content-length"];
            this.end = contentLength != null ? Number(contentLength) : null;
          }
          assert(Number.isFinite(this.start));
          assert(
            this.end == null || Number.isFinite(this.end),
            "invalid content-length"
          );
          this.resume = resume;
          this.etag = headers.etag != null ? headers.etag : null;
          return this.handler.onHeaders(
            statusCode,
            rawHeaders,
            resume,
            statusMessage
          );
        }
        const err = new RequestRetryError("Request failed", statusCode, {
          headers,
          count: this.retryCount
        });
        this.abort(err);
        return false;
      }
      onData(chunk) {
        this.start += chunk.length;
        return this.handler.onData(chunk);
      }
      onComplete(rawTrailers) {
        this.retryCount = 0;
        return this.handler.onComplete(rawTrailers);
      }
      onError(err) {
        if (this.aborted || isDisturbed(this.opts.body)) {
          return this.handler.onError(err);
        }
        this.retryOpts.retry(
          err,
          {
            state: { counter: this.retryCount++, currentTimeout: this.retryAfter },
            opts: { retryOptions: this.retryOpts, ...this.opts }
          },
          onRetry.bind(this)
        );
        function onRetry(err2) {
          if (err2 != null || this.aborted || isDisturbed(this.opts.body)) {
            return this.handler.onError(err2);
          }
          if (this.start !== 0) {
            this.opts = {
              ...this.opts,
              headers: {
                ...this.opts.headers,
                range: `bytes=${this.start}-${this.end ?? ""}`
              }
            };
          }
          try {
            this.dispatch(this.opts, this);
          } catch (err3) {
            this.handler.onError(err3);
          }
        }
      }
    };
    module2.exports = RetryHandler;
  }
});

// node_modules/undici/lib/global.js
var require_global2 = __commonJS({
  "node_modules/undici/lib/global.js"(exports, module2) {
    "use strict";
    var globalDispatcher = Symbol.for("undici.globalDispatcher.1");
    var { InvalidArgumentError } = require_errors();
    var Agent = require_agent();
    if (getGlobalDispatcher() === void 0) {
      setGlobalDispatcher(new Agent());
    }
    function setGlobalDispatcher(agent) {
      if (!agent || typeof agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument agent must implement Agent");
      }
      Object.defineProperty(globalThis, globalDispatcher, {
        value: agent,
        writable: true,
        enumerable: false,
        configurable: false
      });
    }
    function getGlobalDispatcher() {
      return globalThis[globalDispatcher];
    }
    module2.exports = {
      setGlobalDispatcher,
      getGlobalDispatcher
    };
  }
});

// node_modules/undici/lib/handler/DecoratorHandler.js
var require_DecoratorHandler = __commonJS({
  "node_modules/undici/lib/handler/DecoratorHandler.js"(exports, module2) {
    "use strict";
    module2.exports = class DecoratorHandler {
      constructor(handler) {
        this.handler = handler;
      }
      onConnect(...args) {
        return this.handler.onConnect(...args);
      }
      onError(...args) {
        return this.handler.onError(...args);
      }
      onUpgrade(...args) {
        return this.handler.onUpgrade(...args);
      }
      onHeaders(...args) {
        return this.handler.onHeaders(...args);
      }
      onData(...args) {
        return this.handler.onData(...args);
      }
      onComplete(...args) {
        return this.handler.onComplete(...args);
      }
      onBodySent(...args) {
        return this.handler.onBodySent(...args);
      }
    };
  }
});

// node_modules/undici/lib/fetch/headers.js
var require_headers = __commonJS({
  "node_modules/undici/lib/fetch/headers.js"(exports, module2) {
    "use strict";
    var { kHeadersList, kConstruct } = require_symbols();
    var { kGuard } = require_symbols2();
    var { kEnumerableProperty } = require_util();
    var {
      makeIterator,
      isValidHeaderName,
      isValidHeaderValue
    } = require_util2();
    var { webidl } = require_webidl();
    var assert = require("assert");
    var kHeadersMap = Symbol("headers map");
    var kHeadersSortedMap = Symbol("headers map sorted");
    function isHTTPWhiteSpaceCharCode(code) {
      return code === 10 || code === 13 || code === 9 || code === 32;
    }
    function headerValueNormalize(potentialValue) {
      let i = 0;
      let j = potentialValue.length;
      while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1)))
        --j;
      while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i)))
        ++i;
      return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);
    }
    function fill(headers, object) {
      if (Array.isArray(object)) {
        for (let i = 0; i < object.length; ++i) {
          const header = object[i];
          if (header.length !== 2) {
            throw webidl.errors.exception({
              header: "Headers constructor",
              message: `expected name/value pair to be length 2, found ${header.length}.`
            });
          }
          appendHeader(headers, header[0], header[1]);
        }
      } else if (typeof object === "object" && object !== null) {
        const keys = Object.keys(object);
        for (let i = 0; i < keys.length; ++i) {
          appendHeader(headers, keys[i], object[keys[i]]);
        }
      } else {
        throw webidl.errors.conversionFailed({
          prefix: "Headers constructor",
          argument: "Argument 1",
          types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
        });
      }
    }
    function appendHeader(headers, name, value) {
      value = headerValueNormalize(value);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.append",
          value: name,
          type: "header name"
        });
      } else if (!isValidHeaderValue(value)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.append",
          value,
          type: "header value"
        });
      }
      if (headers[kGuard] === "immutable") {
        throw new TypeError("immutable");
      } else if (headers[kGuard] === "request-no-cors") {
      }
      return headers[kHeadersList].append(name, value);
    }
    var HeadersList = class {
      /** @type {[string, string][]|null} */
      cookies = null;
      constructor(init2) {
        if (init2 instanceof HeadersList) {
          this[kHeadersMap] = new Map(init2[kHeadersMap]);
          this[kHeadersSortedMap] = init2[kHeadersSortedMap];
          this.cookies = init2.cookies === null ? null : [...init2.cookies];
        } else {
          this[kHeadersMap] = new Map(init2);
          this[kHeadersSortedMap] = null;
        }
      }
      // https://fetch.spec.whatwg.org/#header-list-contains
      contains(name) {
        name = name.toLowerCase();
        return this[kHeadersMap].has(name);
      }
      clear() {
        this[kHeadersMap].clear();
        this[kHeadersSortedMap] = null;
        this.cookies = null;
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-append
      append(name, value) {
        this[kHeadersSortedMap] = null;
        const lowercaseName = name.toLowerCase();
        const exists = this[kHeadersMap].get(lowercaseName);
        if (exists) {
          const delimiter = lowercaseName === "cookie" ? "; " : ", ";
          this[kHeadersMap].set(lowercaseName, {
            name: exists.name,
            value: `${exists.value}${delimiter}${value}`
          });
        } else {
          this[kHeadersMap].set(lowercaseName, { name, value });
        }
        if (lowercaseName === "set-cookie") {
          this.cookies ??= [];
          this.cookies.push(value);
        }
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-set
      set(name, value) {
        this[kHeadersSortedMap] = null;
        const lowercaseName = name.toLowerCase();
        if (lowercaseName === "set-cookie") {
          this.cookies = [value];
        }
        this[kHeadersMap].set(lowercaseName, { name, value });
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-delete
      delete(name) {
        this[kHeadersSortedMap] = null;
        name = name.toLowerCase();
        if (name === "set-cookie") {
          this.cookies = null;
        }
        this[kHeadersMap].delete(name);
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-get
      get(name) {
        const value = this[kHeadersMap].get(name.toLowerCase());
        return value === void 0 ? null : value.value;
      }
      *[Symbol.iterator]() {
        for (const [name, { value }] of this[kHeadersMap]) {
          yield [name, value];
        }
      }
      get entries() {
        const headers = {};
        if (this[kHeadersMap].size) {
          for (const { name, value } of this[kHeadersMap].values()) {
            headers[name] = value;
          }
        }
        return headers;
      }
    };
    var Headers3 = class {
      constructor(init2 = void 0) {
        if (init2 === kConstruct) {
          return;
        }
        this[kHeadersList] = new HeadersList();
        this[kGuard] = "none";
        if (init2 !== void 0) {
          init2 = webidl.converters.HeadersInit(init2);
          fill(this, init2);
        }
      }
      // https://fetch.spec.whatwg.org/#dom-headers-append
      append(name, value) {
        webidl.brandCheck(this, Headers3);
        webidl.argumentLengthCheck(arguments, 2, { header: "Headers.append" });
        name = webidl.converters.ByteString(name);
        value = webidl.converters.ByteString(value);
        return appendHeader(this, name, value);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-delete
      delete(name) {
        webidl.brandCheck(this, Headers3);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.delete" });
        name = webidl.converters.ByteString(name);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.delete",
            value: name,
            type: "header name"
          });
        }
        if (this[kGuard] === "immutable") {
          throw new TypeError("immutable");
        } else if (this[kGuard] === "request-no-cors") {
        }
        if (!this[kHeadersList].contains(name)) {
          return;
        }
        this[kHeadersList].delete(name);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-get
      get(name) {
        webidl.brandCheck(this, Headers3);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.get" });
        name = webidl.converters.ByteString(name);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.get",
            value: name,
            type: "header name"
          });
        }
        return this[kHeadersList].get(name);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-has
      has(name) {
        webidl.brandCheck(this, Headers3);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.has" });
        name = webidl.converters.ByteString(name);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.has",
            value: name,
            type: "header name"
          });
        }
        return this[kHeadersList].contains(name);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-set
      set(name, value) {
        webidl.brandCheck(this, Headers3);
        webidl.argumentLengthCheck(arguments, 2, { header: "Headers.set" });
        name = webidl.converters.ByteString(name);
        value = webidl.converters.ByteString(value);
        value = headerValueNormalize(value);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value: name,
            type: "header name"
          });
        } else if (!isValidHeaderValue(value)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value,
            type: "header value"
          });
        }
        if (this[kGuard] === "immutable") {
          throw new TypeError("immutable");
        } else if (this[kGuard] === "request-no-cors") {
        }
        this[kHeadersList].set(name, value);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
      getSetCookie() {
        webidl.brandCheck(this, Headers3);
        const list = this[kHeadersList].cookies;
        if (list) {
          return [...list];
        }
        return [];
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
      get [kHeadersSortedMap]() {
        if (this[kHeadersList][kHeadersSortedMap]) {
          return this[kHeadersList][kHeadersSortedMap];
        }
        const headers = [];
        const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1);
        const cookies = this[kHeadersList].cookies;
        for (let i = 0; i < names.length; ++i) {
          const [name, value] = names[i];
          if (name === "set-cookie") {
            for (let j = 0; j < cookies.length; ++j) {
              headers.push([name, cookies[j]]);
            }
          } else {
            assert(value !== null);
            headers.push([name, value]);
          }
        }
        this[kHeadersList][kHeadersSortedMap] = headers;
        return headers;
      }
      keys() {
        webidl.brandCheck(this, Headers3);
        if (this[kGuard] === "immutable") {
          const value = this[kHeadersSortedMap];
          return makeIterator(
            () => value,
            "Headers",
            "key"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "key"
        );
      }
      values() {
        webidl.brandCheck(this, Headers3);
        if (this[kGuard] === "immutable") {
          const value = this[kHeadersSortedMap];
          return makeIterator(
            () => value,
            "Headers",
            "value"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "value"
        );
      }
      entries() {
        webidl.brandCheck(this, Headers3);
        if (this[kGuard] === "immutable") {
          const value = this[kHeadersSortedMap];
          return makeIterator(
            () => value,
            "Headers",
            "key+value"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "key+value"
        );
      }
      /**
       * @param {(value: string, key: string, self: Headers) => void} callbackFn
       * @param {unknown} thisArg
       */
      forEach(callbackFn, thisArg = globalThis) {
        webidl.brandCheck(this, Headers3);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.forEach" });
        if (typeof callbackFn !== "function") {
          throw new TypeError(
            "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'."
          );
        }
        for (const [key2, value] of this) {
          callbackFn.apply(thisArg, [value, key2, this]);
        }
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        webidl.brandCheck(this, Headers3);
        return this[kHeadersList];
      }
    };
    Headers3.prototype[Symbol.iterator] = Headers3.prototype.entries;
    Object.defineProperties(Headers3.prototype, {
      append: kEnumerableProperty,
      delete: kEnumerableProperty,
      get: kEnumerableProperty,
      has: kEnumerableProperty,
      set: kEnumerableProperty,
      getSetCookie: kEnumerableProperty,
      keys: kEnumerableProperty,
      values: kEnumerableProperty,
      entries: kEnumerableProperty,
      forEach: kEnumerableProperty,
      [Symbol.iterator]: { enumerable: false },
      [Symbol.toStringTag]: {
        value: "Headers",
        configurable: true
      }
    });
    webidl.converters.HeadersInit = function(V) {
      if (webidl.util.Type(V) === "Object") {
        if (V[Symbol.iterator]) {
          return webidl.converters["sequence<sequence<ByteString>>"](V);
        }
        return webidl.converters["record<ByteString, ByteString>"](V);
      }
      throw webidl.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
      });
    };
    module2.exports = {
      fill,
      Headers: Headers3,
      HeadersList
    };
  }
});

// node_modules/undici/lib/fetch/response.js
var require_response = __commonJS({
  "node_modules/undici/lib/fetch/response.js"(exports, module2) {
    "use strict";
    var { Headers: Headers3, HeadersList, fill } = require_headers();
    var { extractBody, cloneBody, mixinBody } = require_body();
    var util = require_util();
    var { kEnumerableProperty } = util;
    var {
      isValidReasonPhrase,
      isCancelled,
      isAborted,
      isBlobLike,
      serializeJavascriptValueToJSONString,
      isErrorLike,
      isomorphicEncode
    } = require_util2();
    var {
      redirectStatusSet,
      nullBodyStatus,
      DOMException: DOMException2
    } = require_constants();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var { webidl } = require_webidl();
    var { FormData: FormData3 } = require_formdata();
    var { getGlobalOrigin } = require_global();
    var { URLSerializer } = require_dataURL();
    var { kHeadersList, kConstruct } = require_symbols();
    var assert = require("assert");
    var { types } = require("util");
    var ReadableStream3 = globalThis.ReadableStream || require("stream/web").ReadableStream;
    var textEncoder = new TextEncoder("utf-8");
    var Response3 = class {
      // Creates network error Response.
      static error() {
        const relevantRealm = { settingsObject: {} };
        const responseObject = new Response3();
        responseObject[kState] = makeNetworkError();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        return responseObject;
      }
      // https://fetch.spec.whatwg.org/#dom-response-json
      static json(data, init2 = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "Response.json" });
        if (init2 !== null) {
          init2 = webidl.converters.ResponseInit(init2);
        }
        const bytes = textEncoder.encode(
          serializeJavascriptValueToJSONString(data)
        );
        const body = extractBody(bytes);
        const relevantRealm = { settingsObject: {} };
        const responseObject = new Response3();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kGuard] = "response";
        responseObject[kHeaders][kRealm] = relevantRealm;
        initializeResponse(responseObject, init2, { body: body[0], type: "application/json" });
        return responseObject;
      }
      // Creates a redirect Response that redirects to url with status status.
      static redirect(url, status = 302) {
        const relevantRealm = { settingsObject: {} };
        webidl.argumentLengthCheck(arguments, 1, { header: "Response.redirect" });
        url = webidl.converters.USVString(url);
        status = webidl.converters["unsigned short"](status);
        let parsedURL;
        try {
          parsedURL = new URL(url, getGlobalOrigin());
        } catch (err) {
          throw Object.assign(new TypeError("Failed to parse URL from " + url), {
            cause: err
          });
        }
        if (!redirectStatusSet.has(status)) {
          throw new RangeError("Invalid status code " + status);
        }
        const responseObject = new Response3();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        responseObject[kState].status = status;
        const value = isomorphicEncode(URLSerializer(parsedURL));
        responseObject[kState].headersList.append("location", value);
        return responseObject;
      }
      // https://fetch.spec.whatwg.org/#dom-response
      constructor(body = null, init2 = {}) {
        if (body !== null) {
          body = webidl.converters.BodyInit(body);
        }
        init2 = webidl.converters.ResponseInit(init2);
        this[kRealm] = { settingsObject: {} };
        this[kState] = makeResponse({});
        this[kHeaders] = new Headers3(kConstruct);
        this[kHeaders][kGuard] = "response";
        this[kHeaders][kHeadersList] = this[kState].headersList;
        this[kHeaders][kRealm] = this[kRealm];
        let bodyWithType = null;
        if (body != null) {
          const [extractedBody, type] = extractBody(body);
          bodyWithType = { body: extractedBody, type };
        }
        initializeResponse(this, init2, bodyWithType);
      }
      // Returns response’s type, e.g., "cors".
      get type() {
        webidl.brandCheck(this, Response3);
        return this[kState].type;
      }
      // Returns response’s URL, if it has one; otherwise the empty string.
      get url() {
        webidl.brandCheck(this, Response3);
        const urlList = this[kState].urlList;
        const url = urlList[urlList.length - 1] ?? null;
        if (url === null) {
          return "";
        }
        return URLSerializer(url, true);
      }
      // Returns whether response was obtained through a redirect.
      get redirected() {
        webidl.brandCheck(this, Response3);
        return this[kState].urlList.length > 1;
      }
      // Returns response’s status.
      get status() {
        webidl.brandCheck(this, Response3);
        return this[kState].status;
      }
      // Returns whether response’s status is an ok status.
      get ok() {
        webidl.brandCheck(this, Response3);
        return this[kState].status >= 200 && this[kState].status <= 299;
      }
      // Returns response’s status message.
      get statusText() {
        webidl.brandCheck(this, Response3);
        return this[kState].statusText;
      }
      // Returns response’s headers as Headers.
      get headers() {
        webidl.brandCheck(this, Response3);
        return this[kHeaders];
      }
      get body() {
        webidl.brandCheck(this, Response3);
        return this[kState].body ? this[kState].body.stream : null;
      }
      get bodyUsed() {
        webidl.brandCheck(this, Response3);
        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
      }
      // Returns a clone of response.
      clone() {
        webidl.brandCheck(this, Response3);
        if (this.bodyUsed || this.body && this.body.locked) {
          throw webidl.errors.exception({
            header: "Response.clone",
            message: "Body has already been consumed."
          });
        }
        const clonedResponse = cloneResponse(this[kState]);
        const clonedResponseObject = new Response3();
        clonedResponseObject[kState] = clonedResponse;
        clonedResponseObject[kRealm] = this[kRealm];
        clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList;
        clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard];
        clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm];
        return clonedResponseObject;
      }
    };
    mixinBody(Response3);
    Object.defineProperties(Response3.prototype, {
      type: kEnumerableProperty,
      url: kEnumerableProperty,
      status: kEnumerableProperty,
      ok: kEnumerableProperty,
      redirected: kEnumerableProperty,
      statusText: kEnumerableProperty,
      headers: kEnumerableProperty,
      clone: kEnumerableProperty,
      body: kEnumerableProperty,
      bodyUsed: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "Response",
        configurable: true
      }
    });
    Object.defineProperties(Response3, {
      json: kEnumerableProperty,
      redirect: kEnumerableProperty,
      error: kEnumerableProperty
    });
    function cloneResponse(response) {
      if (response.internalResponse) {
        return filterResponse(
          cloneResponse(response.internalResponse),
          response.type
        );
      }
      const newResponse = makeResponse({ ...response, body: null });
      if (response.body != null) {
        newResponse.body = cloneBody(response.body);
      }
      return newResponse;
    }
    function makeResponse(init2) {
      return {
        aborted: false,
        rangeRequested: false,
        timingAllowPassed: false,
        requestIncludesCredentials: false,
        type: "default",
        status: 200,
        timingInfo: null,
        cacheState: "",
        statusText: "",
        ...init2,
        headersList: init2.headersList ? new HeadersList(init2.headersList) : new HeadersList(),
        urlList: init2.urlList ? [...init2.urlList] : []
      };
    }
    function makeNetworkError(reason) {
      const isError = isErrorLike(reason);
      return makeResponse({
        type: "error",
        status: 0,
        error: isError ? reason : new Error(reason ? String(reason) : reason),
        aborted: reason && reason.name === "AbortError"
      });
    }
    function makeFilteredResponse(response, state) {
      state = {
        internalResponse: response,
        ...state
      };
      return new Proxy(response, {
        get(target, p) {
          return p in state ? state[p] : target[p];
        },
        set(target, p, value) {
          assert(!(p in state));
          target[p] = value;
          return true;
        }
      });
    }
    function filterResponse(response, type) {
      if (type === "basic") {
        return makeFilteredResponse(response, {
          type: "basic",
          headersList: response.headersList
        });
      } else if (type === "cors") {
        return makeFilteredResponse(response, {
          type: "cors",
          headersList: response.headersList
        });
      } else if (type === "opaque") {
        return makeFilteredResponse(response, {
          type: "opaque",
          urlList: Object.freeze([]),
          status: 0,
          statusText: "",
          body: null
        });
      } else if (type === "opaqueredirect") {
        return makeFilteredResponse(response, {
          type: "opaqueredirect",
          status: 0,
          statusText: "",
          headersList: [],
          body: null
        });
      } else {
        assert(false);
      }
    }
    function makeAppropriateNetworkError(fetchParams, err = null) {
      assert(isCancelled(fetchParams));
      return isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException2("The operation was aborted.", "AbortError"), { cause: err })) : makeNetworkError(Object.assign(new DOMException2("Request was cancelled."), { cause: err }));
    }
    function initializeResponse(response, init2, body) {
      if (init2.status !== null && (init2.status < 200 || init2.status > 599)) {
        throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
      }
      if ("statusText" in init2 && init2.statusText != null) {
        if (!isValidReasonPhrase(String(init2.statusText))) {
          throw new TypeError("Invalid statusText");
        }
      }
      if ("status" in init2 && init2.status != null) {
        response[kState].status = init2.status;
      }
      if ("statusText" in init2 && init2.statusText != null) {
        response[kState].statusText = init2.statusText;
      }
      if ("headers" in init2 && init2.headers != null) {
        fill(response[kHeaders], init2.headers);
      }
      if (body) {
        if (nullBodyStatus.includes(response.status)) {
          throw webidl.errors.exception({
            header: "Response constructor",
            message: "Invalid response status code " + response.status
          });
        }
        response[kState].body = body.body;
        if (body.type != null && !response[kState].headersList.contains("Content-Type")) {
          response[kState].headersList.append("content-type", body.type);
        }
      }
    }
    webidl.converters.ReadableStream = webidl.interfaceConverter(
      ReadableStream3
    );
    webidl.converters.FormData = webidl.interfaceConverter(
      FormData3
    );
    webidl.converters.URLSearchParams = webidl.interfaceConverter(
      URLSearchParams
    );
    webidl.converters.XMLHttpRequestBodyInit = function(V) {
      if (typeof V === "string") {
        return webidl.converters.USVString(V);
      }
      if (isBlobLike(V)) {
        return webidl.converters.Blob(V, { strict: false });
      }
      if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {
        return webidl.converters.BufferSource(V);
      }
      if (util.isFormDataLike(V)) {
        return webidl.converters.FormData(V, { strict: false });
      }
      if (V instanceof URLSearchParams) {
        return webidl.converters.URLSearchParams(V);
      }
      return webidl.converters.DOMString(V);
    };
    webidl.converters.BodyInit = function(V) {
      if (V instanceof ReadableStream3) {
        return webidl.converters.ReadableStream(V);
      }
      if (V == null ? void 0 : V[Symbol.asyncIterator]) {
        return V;
      }
      return webidl.converters.XMLHttpRequestBodyInit(V);
    };
    webidl.converters.ResponseInit = webidl.dictionaryConverter([
      {
        key: "status",
        converter: webidl.converters["unsigned short"],
        defaultValue: 200
      },
      {
        key: "statusText",
        converter: webidl.converters.ByteString,
        defaultValue: ""
      },
      {
        key: "headers",
        converter: webidl.converters.HeadersInit
      }
    ]);
    module2.exports = {
      makeNetworkError,
      makeResponse,
      makeAppropriateNetworkError,
      filterResponse,
      Response: Response3,
      cloneResponse
    };
  }
});

// node_modules/undici/lib/fetch/request.js
var require_request2 = __commonJS({
  "node_modules/undici/lib/fetch/request.js"(exports, module2) {
    "use strict";
    var { extractBody, mixinBody, cloneBody } = require_body();
    var { Headers: Headers3, fill: fillHeaders, HeadersList } = require_headers();
    var { FinalizationRegistry } = require_dispatcher_weakref()();
    var util = require_util();
    var {
      isValidHTTPToken,
      sameOrigin,
      normalizeMethod,
      makePolicyContainer,
      normalizeMethodRecord
    } = require_util2();
    var {
      forbiddenMethodsSet,
      corsSafeListedMethodsSet,
      referrerPolicy,
      requestRedirect,
      requestMode,
      requestCredentials,
      requestCache,
      requestDuplex
    } = require_constants();
    var { kEnumerableProperty } = util;
    var { kHeaders, kSignal, kState, kGuard, kRealm } = require_symbols2();
    var { webidl } = require_webidl();
    var { getGlobalOrigin } = require_global();
    var { URLSerializer } = require_dataURL();
    var { kHeadersList, kConstruct } = require_symbols();
    var assert = require("assert");
    var { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = require("events");
    var TransformStream2 = globalThis.TransformStream;
    var kAbortController = Symbol("abortController");
    var requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
      signal.removeEventListener("abort", abort);
    });
    var Request3 = class {
      // https://fetch.spec.whatwg.org/#dom-request
      constructor(input, init2 = {}) {
        var _a, _b;
        if (input === kConstruct) {
          return;
        }
        webidl.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
        input = webidl.converters.RequestInfo(input);
        init2 = webidl.converters.RequestInit(init2);
        this[kRealm] = {
          settingsObject: {
            baseUrl: getGlobalOrigin(),
            get origin() {
              var _a2;
              return (_a2 = this.baseUrl) == null ? void 0 : _a2.origin;
            },
            policyContainer: makePolicyContainer()
          }
        };
        let request = null;
        let fallbackMode = null;
        const baseUrl = this[kRealm].settingsObject.baseUrl;
        let signal = null;
        if (typeof input === "string") {
          let parsedURL;
          try {
            parsedURL = new URL(input, baseUrl);
          } catch (err) {
            throw new TypeError("Failed to parse URL from " + input, { cause: err });
          }
          if (parsedURL.username || parsedURL.password) {
            throw new TypeError(
              "Request cannot be constructed from a URL that includes credentials: " + input
            );
          }
          request = makeRequest({ urlList: [parsedURL] });
          fallbackMode = "cors";
        } else {
          assert(input instanceof Request3);
          request = input[kState];
          signal = input[kSignal];
        }
        const origin = this[kRealm].settingsObject.origin;
        let window2 = "client";
        if (((_b = (_a = request.window) == null ? void 0 : _a.constructor) == null ? void 0 : _b.name) === "EnvironmentSettingsObject" && sameOrigin(request.window, origin)) {
          window2 = request.window;
        }
        if (init2.window != null) {
          throw new TypeError(`'window' option '${window2}' must be null`);
        }
        if ("window" in init2) {
          window2 = "no-window";
        }
        request = makeRequest({
          // URL request’s URL.
          // undici implementation note: this is set as the first item in request's urlList in makeRequest
          // method request’s method.
          method: request.method,
          // header list A copy of request’s header list.
          // undici implementation note: headersList is cloned in makeRequest
          headersList: request.headersList,
          // unsafe-request flag Set.
          unsafeRequest: request.unsafeRequest,
          // client This’s relevant settings object.
          client: this[kRealm].settingsObject,
          // window window.
          window: window2,
          // priority request’s priority.
          priority: request.priority,
          // origin request’s origin. The propagation of the origin is only significant for navigation requests
          // being handled by a service worker. In this scenario a request can have an origin that is different
          // from the current client.
          origin: request.origin,
          // referrer request’s referrer.
          referrer: request.referrer,
          // referrer policy request’s referrer policy.
          referrerPolicy: request.referrerPolicy,
          // mode request’s mode.
          mode: request.mode,
          // credentials mode request’s credentials mode.
          credentials: request.credentials,
          // cache mode request’s cache mode.
          cache: request.cache,
          // redirect mode request’s redirect mode.
          redirect: request.redirect,
          // integrity metadata request’s integrity metadata.
          integrity: request.integrity,
          // keepalive request’s keepalive.
          keepalive: request.keepalive,
          // reload-navigation flag request’s reload-navigation flag.
          reloadNavigation: request.reloadNavigation,
          // history-navigation flag request’s history-navigation flag.
          historyNavigation: request.historyNavigation,
          // URL list A clone of request’s URL list.
          urlList: [...request.urlList]
        });
        const initHasKey = Object.keys(init2).length !== 0;
        if (initHasKey) {
          if (request.mode === "navigate") {
            request.mode = "same-origin";
          }
          request.reloadNavigation = false;
          request.historyNavigation = false;
          request.origin = "client";
          request.referrer = "client";
          request.referrerPolicy = "";
          request.url = request.urlList[request.urlList.length - 1];
          request.urlList = [request.url];
        }
        if (init2.referrer !== void 0) {
          const referrer = init2.referrer;
          if (referrer === "") {
            request.referrer = "no-referrer";
          } else {
            let parsedReferrer;
            try {
              parsedReferrer = new URL(referrer, baseUrl);
            } catch (err) {
              throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
            }
            if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl)) {
              request.referrer = "client";
            } else {
              request.referrer = parsedReferrer;
            }
          }
        }
        if (init2.referrerPolicy !== void 0) {
          request.referrerPolicy = init2.referrerPolicy;
        }
        let mode;
        if (init2.mode !== void 0) {
          mode = init2.mode;
        } else {
          mode = fallbackMode;
        }
        if (mode === "navigate") {
          throw webidl.errors.exception({
            header: "Request constructor",
            message: "invalid request mode navigate."
          });
        }
        if (mode != null) {
          request.mode = mode;
        }
        if (init2.credentials !== void 0) {
          request.credentials = init2.credentials;
        }
        if (init2.cache !== void 0) {
          request.cache = init2.cache;
        }
        if (request.cache === "only-if-cached" && request.mode !== "same-origin") {
          throw new TypeError(
            "'only-if-cached' can be set only with 'same-origin' mode"
          );
        }
        if (init2.redirect !== void 0) {
          request.redirect = init2.redirect;
        }
        if (init2.integrity != null) {
          request.integrity = String(init2.integrity);
        }
        if (init2.keepalive !== void 0) {
          request.keepalive = Boolean(init2.keepalive);
        }
        if (init2.method !== void 0) {
          let method = init2.method;
          if (!isValidHTTPToken(method)) {
            throw new TypeError(`'${method}' is not a valid HTTP method.`);
          }
          if (forbiddenMethodsSet.has(method.toUpperCase())) {
            throw new TypeError(`'${method}' HTTP method is unsupported.`);
          }
          method = normalizeMethodRecord[method] ?? normalizeMethod(method);
          request.method = method;
        }
        if (init2.signal !== void 0) {
          signal = init2.signal;
        }
        this[kState] = request;
        const ac = new AbortController();
        this[kSignal] = ac.signal;
        this[kSignal][kRealm] = this[kRealm];
        if (signal != null) {
          if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") {
            throw new TypeError(
              "Failed to construct 'Request': member signal is not of type AbortSignal."
            );
          }
          if (signal.aborted) {
            ac.abort(signal.reason);
          } else {
            this[kAbortController] = ac;
            const acRef = new WeakRef(ac);
            const abort = function() {
              const ac2 = acRef.deref();
              if (ac2 !== void 0) {
                ac2.abort(this.reason);
              }
            };
            try {
              if (typeof getMaxListeners === "function" && getMaxListeners(signal) === defaultMaxListeners) {
                setMaxListeners(100, signal);
              } else if (getEventListeners(signal, "abort").length >= defaultMaxListeners) {
                setMaxListeners(100, signal);
              }
            } catch {
            }
            util.addAbortListener(signal, abort);
            requestFinalizer.register(ac, { signal, abort });
          }
        }
        this[kHeaders] = new Headers3(kConstruct);
        this[kHeaders][kHeadersList] = request.headersList;
        this[kHeaders][kGuard] = "request";
        this[kHeaders][kRealm] = this[kRealm];
        if (mode === "no-cors") {
          if (!corsSafeListedMethodsSet.has(request.method)) {
            throw new TypeError(
              `'${request.method} is unsupported in no-cors mode.`
            );
          }
          this[kHeaders][kGuard] = "request-no-cors";
        }
        if (initHasKey) {
          const headersList = this[kHeaders][kHeadersList];
          const headers = init2.headers !== void 0 ? init2.headers : new HeadersList(headersList);
          headersList.clear();
          if (headers instanceof HeadersList) {
            for (const [key2, val] of headers) {
              headersList.append(key2, val);
            }
            headersList.cookies = headers.cookies;
          } else {
            fillHeaders(this[kHeaders], headers);
          }
        }
        const inputBody = input instanceof Request3 ? input[kState].body : null;
        if ((init2.body != null || inputBody != null) && (request.method === "GET" || request.method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body.");
        }
        let initBody = null;
        if (init2.body != null) {
          const [extractedBody, contentType] = extractBody(
            init2.body,
            request.keepalive
          );
          initBody = extractedBody;
          if (contentType && !this[kHeaders][kHeadersList].contains("content-type")) {
            this[kHeaders].append("content-type", contentType);
          }
        }
        const inputOrInitBody = initBody ?? inputBody;
        if (inputOrInitBody != null && inputOrInitBody.source == null) {
          if (initBody != null && init2.duplex == null) {
            throw new TypeError("RequestInit: duplex option is required when sending a body.");
          }
          if (request.mode !== "same-origin" && request.mode !== "cors") {
            throw new TypeError(
              'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
            );
          }
          request.useCORSPreflightFlag = true;
        }
        let finalBody = inputOrInitBody;
        if (initBody == null && inputBody != null) {
          if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
            throw new TypeError(
              "Cannot construct a Request with a Request object that has already been used."
            );
          }
          if (!TransformStream2) {
            TransformStream2 = require("stream/web").TransformStream;
          }
          const identityTransform = new TransformStream2();
          inputBody.stream.pipeThrough(identityTransform);
          finalBody = {
            source: inputBody.source,
            length: inputBody.length,
            stream: identityTransform.readable
          };
        }
        this[kState].body = finalBody;
      }
      // Returns request’s HTTP method, which is "GET" by default.
      get method() {
        webidl.brandCheck(this, Request3);
        return this[kState].method;
      }
      // Returns the URL of request as a string.
      get url() {
        webidl.brandCheck(this, Request3);
        return URLSerializer(this[kState].url);
      }
      // Returns a Headers object consisting of the headers associated with request.
      // Note that headers added in the network layer by the user agent will not
      // be accounted for in this object, e.g., the "Host" header.
      get headers() {
        webidl.brandCheck(this, Request3);
        return this[kHeaders];
      }
      // Returns the kind of resource requested by request, e.g., "document"
      // or "script".
      get destination() {
        webidl.brandCheck(this, Request3);
        return this[kState].destination;
      }
      // Returns the referrer of request. Its value can be a same-origin URL if
      // explicitly set in init, the empty string to indicate no referrer, and
      // "about:client" when defaulting to the global’s default. This is used
      // during fetching to determine the value of the `Referer` header of the
      // request being made.
      get referrer() {
        webidl.brandCheck(this, Request3);
        if (this[kState].referrer === "no-referrer") {
          return "";
        }
        if (this[kState].referrer === "client") {
          return "about:client";
        }
        return this[kState].referrer.toString();
      }
      // Returns the referrer policy associated with request.
      // This is used during fetching to compute the value of the request’s
      // referrer.
      get referrerPolicy() {
        webidl.brandCheck(this, Request3);
        return this[kState].referrerPolicy;
      }
      // Returns the mode associated with request, which is a string indicating
      // whether the request will use CORS, or will be restricted to same-origin
      // URLs.
      get mode() {
        webidl.brandCheck(this, Request3);
        return this[kState].mode;
      }
      // Returns the credentials mode associated with request,
      // which is a string indicating whether credentials will be sent with the
      // request always, never, or only when sent to a same-origin URL.
      get credentials() {
        return this[kState].credentials;
      }
      // Returns the cache mode associated with request,
      // which is a string indicating how the request will
      // interact with the browser’s cache when fetching.
      get cache() {
        webidl.brandCheck(this, Request3);
        return this[kState].cache;
      }
      // Returns the redirect mode associated with request,
      // which is a string indicating how redirects for the
      // request will be handled during fetching. A request
      // will follow redirects by default.
      get redirect() {
        webidl.brandCheck(this, Request3);
        return this[kState].redirect;
      }
      // Returns request’s subresource integrity metadata, which is a
      // cryptographic hash of the resource being fetched. Its value
      // consists of multiple hashes separated by whitespace. [SRI]
      get integrity() {
        webidl.brandCheck(this, Request3);
        return this[kState].integrity;
      }
      // Returns a boolean indicating whether or not request can outlive the
      // global in which it was created.
      get keepalive() {
        webidl.brandCheck(this, Request3);
        return this[kState].keepalive;
      }
      // Returns a boolean indicating whether or not request is for a reload
      // navigation.
      get isReloadNavigation() {
        webidl.brandCheck(this, Request3);
        return this[kState].reloadNavigation;
      }
      // Returns a boolean indicating whether or not request is for a history
      // navigation (a.k.a. back-foward navigation).
      get isHistoryNavigation() {
        webidl.brandCheck(this, Request3);
        return this[kState].historyNavigation;
      }
      // Returns the signal associated with request, which is an AbortSignal
      // object indicating whether or not request has been aborted, and its
      // abort event handler.
      get signal() {
        webidl.brandCheck(this, Request3);
        return this[kSignal];
      }
      get body() {
        webidl.brandCheck(this, Request3);
        return this[kState].body ? this[kState].body.stream : null;
      }
      get bodyUsed() {
        webidl.brandCheck(this, Request3);
        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
      }
      get duplex() {
        webidl.brandCheck(this, Request3);
        return "half";
      }
      // Returns a clone of request.
      clone() {
        var _a;
        webidl.brandCheck(this, Request3);
        if (this.bodyUsed || ((_a = this.body) == null ? void 0 : _a.locked)) {
          throw new TypeError("unusable");
        }
        const clonedRequest = cloneRequest(this[kState]);
        const clonedRequestObject = new Request3(kConstruct);
        clonedRequestObject[kState] = clonedRequest;
        clonedRequestObject[kRealm] = this[kRealm];
        clonedRequestObject[kHeaders] = new Headers3(kConstruct);
        clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;
        clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];
        clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];
        const ac = new AbortController();
        if (this.signal.aborted) {
          ac.abort(this.signal.reason);
        } else {
          util.addAbortListener(
            this.signal,
            () => {
              ac.abort(this.signal.reason);
            }
          );
        }
        clonedRequestObject[kSignal] = ac.signal;
        return clonedRequestObject;
      }
    };
    mixinBody(Request3);
    function makeRequest(init2) {
      const request = {
        method: "GET",
        localURLsOnly: false,
        unsafeRequest: false,
        body: null,
        client: null,
        reservedClient: null,
        replacesClientId: "",
        window: "client",
        keepalive: false,
        serviceWorkers: "all",
        initiator: "",
        destination: "",
        priority: null,
        origin: "client",
        policyContainer: "client",
        referrer: "client",
        referrerPolicy: "",
        mode: "no-cors",
        useCORSPreflightFlag: false,
        credentials: "same-origin",
        useCredentials: false,
        cache: "default",
        redirect: "follow",
        integrity: "",
        cryptoGraphicsNonceMetadata: "",
        parserMetadata: "",
        reloadNavigation: false,
        historyNavigation: false,
        userActivation: false,
        taintedOrigin: false,
        redirectCount: 0,
        responseTainting: "basic",
        preventNoCacheCacheControlHeaderModification: false,
        done: false,
        timingAllowFailed: false,
        ...init2,
        headersList: init2.headersList ? new HeadersList(init2.headersList) : new HeadersList()
      };
      request.url = request.urlList[0];
      return request;
    }
    function cloneRequest(request) {
      const newRequest = makeRequest({ ...request, body: null });
      if (request.body != null) {
        newRequest.body = cloneBody(request.body);
      }
      return newRequest;
    }
    Object.defineProperties(Request3.prototype, {
      method: kEnumerableProperty,
      url: kEnumerableProperty,
      headers: kEnumerableProperty,
      redirect: kEnumerableProperty,
      clone: kEnumerableProperty,
      signal: kEnumerableProperty,
      duplex: kEnumerableProperty,
      destination: kEnumerableProperty,
      body: kEnumerableProperty,
      bodyUsed: kEnumerableProperty,
      isHistoryNavigation: kEnumerableProperty,
      isReloadNavigation: kEnumerableProperty,
      keepalive: kEnumerableProperty,
      integrity: kEnumerableProperty,
      cache: kEnumerableProperty,
      credentials: kEnumerableProperty,
      attribute: kEnumerableProperty,
      referrerPolicy: kEnumerableProperty,
      referrer: kEnumerableProperty,
      mode: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "Request",
        configurable: true
      }
    });
    webidl.converters.Request = webidl.interfaceConverter(
      Request3
    );
    webidl.converters.RequestInfo = function(V) {
      if (typeof V === "string") {
        return webidl.converters.USVString(V);
      }
      if (V instanceof Request3) {
        return webidl.converters.Request(V);
      }
      return webidl.converters.USVString(V);
    };
    webidl.converters.AbortSignal = webidl.interfaceConverter(
      AbortSignal
    );
    webidl.converters.RequestInit = webidl.dictionaryConverter([
      {
        key: "method",
        converter: webidl.converters.ByteString
      },
      {
        key: "headers",
        converter: webidl.converters.HeadersInit
      },
      {
        key: "body",
        converter: webidl.nullableConverter(
          webidl.converters.BodyInit
        )
      },
      {
        key: "referrer",
        converter: webidl.converters.USVString
      },
      {
        key: "referrerPolicy",
        converter: webidl.converters.DOMString,
        // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
        allowedValues: referrerPolicy
      },
      {
        key: "mode",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#concept-request-mode
        allowedValues: requestMode
      },
      {
        key: "credentials",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcredentials
        allowedValues: requestCredentials
      },
      {
        key: "cache",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcache
        allowedValues: requestCache
      },
      {
        key: "redirect",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestredirect
        allowedValues: requestRedirect
      },
      {
        key: "integrity",
        converter: webidl.converters.DOMString
      },
      {
        key: "keepalive",
        converter: webidl.converters.boolean
      },
      {
        key: "signal",
        converter: webidl.nullableConverter(
          (signal) => webidl.converters.AbortSignal(
            signal,
            { strict: false }
          )
        )
      },
      {
        key: "window",
        converter: webidl.converters.any
      },
      {
        key: "duplex",
        converter: webidl.converters.DOMString,
        allowedValues: requestDuplex
      }
    ]);
    module2.exports = { Request: Request3, makeRequest };
  }
});

// node_modules/undici/lib/fetch/index.js
var require_fetch = __commonJS({
  "node_modules/undici/lib/fetch/index.js"(exports, module2) {
    "use strict";
    var {
      Response: Response3,
      makeNetworkError,
      makeAppropriateNetworkError,
      filterResponse,
      makeResponse
    } = require_response();
    var { Headers: Headers3 } = require_headers();
    var { Request: Request3, makeRequest } = require_request2();
    var zlib = require("zlib");
    var {
      bytesMatch,
      makePolicyContainer,
      clonePolicyContainer,
      requestBadPort,
      TAOCheck,
      appendRequestOriginHeader,
      responseLocationURL,
      requestCurrentURL,
      setRequestReferrerPolicyOnRedirect,
      tryUpgradeRequestToAPotentiallyTrustworthyURL,
      createOpaqueTimingInfo,
      appendFetchMetadata,
      corsCheck,
      crossOriginResourcePolicyCheck,
      determineRequestsReferrer,
      coarsenedSharedCurrentTime,
      createDeferredPromise,
      isBlobLike,
      sameOrigin,
      isCancelled,
      isAborted,
      isErrorLike,
      fullyReadBody,
      readableStreamClose,
      isomorphicEncode,
      urlIsLocal,
      urlIsHttpHttpsScheme,
      urlHasHttpsScheme
    } = require_util2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var assert = require("assert");
    var { safelyExtractBody } = require_body();
    var {
      redirectStatusSet,
      nullBodyStatus,
      safeMethodsSet,
      requestBodyHeader,
      subresourceSet,
      DOMException: DOMException2
    } = require_constants();
    var { kHeadersList } = require_symbols();
    var EE = require("events");
    var { Readable, pipeline } = require("stream");
    var { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require_util();
    var { dataURLProcessor, serializeAMimeType } = require_dataURL();
    var { TransformStream: TransformStream2 } = require("stream/web");
    var { getGlobalDispatcher } = require_global2();
    var { webidl } = require_webidl();
    var { STATUS_CODES } = require("http");
    var GET_OR_HEAD = ["GET", "HEAD"];
    var resolveObjectURL;
    var ReadableStream3 = globalThis.ReadableStream;
    var Fetch = class extends EE {
      constructor(dispatcher) {
        super();
        this.dispatcher = dispatcher;
        this.connection = null;
        this.dump = false;
        this.state = "ongoing";
        this.setMaxListeners(21);
      }
      terminate(reason) {
        var _a;
        if (this.state !== "ongoing") {
          return;
        }
        this.state = "terminated";
        (_a = this.connection) == null ? void 0 : _a.destroy(reason);
        this.emit("terminated", reason);
      }
      // https://fetch.spec.whatwg.org/#fetch-controller-abort
      abort(error3) {
        var _a;
        if (this.state !== "ongoing") {
          return;
        }
        this.state = "aborted";
        if (!error3) {
          error3 = new DOMException2("The operation was aborted.", "AbortError");
        }
        this.serializedAbortReason = error3;
        (_a = this.connection) == null ? void 0 : _a.destroy(error3);
        this.emit("terminated", error3);
      }
    };
    function fetch3(input, init2 = {}) {
      var _a;
      webidl.argumentLengthCheck(arguments, 1, { header: "globalThis.fetch" });
      const p = createDeferredPromise();
      let requestObject;
      try {
        requestObject = new Request3(input, init2);
      } catch (e) {
        p.reject(e);
        return p.promise;
      }
      const request = requestObject[kState];
      if (requestObject.signal.aborted) {
        abortFetch(p, request, null, requestObject.signal.reason);
        return p.promise;
      }
      const globalObject = request.client.globalObject;
      if (((_a = globalObject == null ? void 0 : globalObject.constructor) == null ? void 0 : _a.name) === "ServiceWorkerGlobalScope") {
        request.serviceWorkers = "none";
      }
      let responseObject = null;
      const relevantRealm = null;
      let locallyAborted = false;
      let controller = null;
      addAbortListener(
        requestObject.signal,
        () => {
          locallyAborted = true;
          assert(controller != null);
          controller.abort(requestObject.signal.reason);
          abortFetch(p, request, responseObject, requestObject.signal.reason);
        }
      );
      const handleFetchDone = (response) => finalizeAndReportTiming(response, "fetch");
      const processResponse = (response) => {
        if (locallyAborted) {
          return Promise.resolve();
        }
        if (response.aborted) {
          abortFetch(p, request, responseObject, controller.serializedAbortReason);
          return Promise.resolve();
        }
        if (response.type === "error") {
          p.reject(
            Object.assign(new TypeError("fetch failed"), { cause: response.error })
          );
          return Promise.resolve();
        }
        responseObject = new Response3();
        responseObject[kState] = response;
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kHeadersList] = response.headersList;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        p.resolve(responseObject);
      };
      controller = fetching({
        request,
        processResponseEndOfBody: handleFetchDone,
        processResponse,
        dispatcher: init2.dispatcher ?? getGlobalDispatcher()
        // undici
      });
      return p.promise;
    }
    function finalizeAndReportTiming(response, initiatorType = "other") {
      var _a;
      if (response.type === "error" && response.aborted) {
        return;
      }
      if (!((_a = response.urlList) == null ? void 0 : _a.length)) {
        return;
      }
      const originalURL = response.urlList[0];
      let timingInfo = response.timingInfo;
      let cacheState = response.cacheState;
      if (!urlIsHttpHttpsScheme(originalURL)) {
        return;
      }
      if (timingInfo === null) {
        return;
      }
      if (!response.timingAllowPassed) {
        timingInfo = createOpaqueTimingInfo({
          startTime: timingInfo.startTime
        });
        cacheState = "";
      }
      timingInfo.endTime = coarsenedSharedCurrentTime();
      response.timingInfo = timingInfo;
      markResourceTiming(
        timingInfo,
        originalURL,
        initiatorType,
        globalThis,
        cacheState
      );
    }
    function markResourceTiming(timingInfo, originalURL, initiatorType, globalThis2, cacheState) {
      if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) {
        performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis2, cacheState);
      }
    }
    function abortFetch(p, request, responseObject, error3) {
      var _a, _b;
      if (!error3) {
        error3 = new DOMException2("The operation was aborted.", "AbortError");
      }
      p.reject(error3);
      if (request.body != null && isReadable((_a = request.body) == null ? void 0 : _a.stream)) {
        request.body.stream.cancel(error3).catch((err) => {
          if (err.code === "ERR_INVALID_STATE") {
            return;
          }
          throw err;
        });
      }
      if (responseObject == null) {
        return;
      }
      const response = responseObject[kState];
      if (response.body != null && isReadable((_b = response.body) == null ? void 0 : _b.stream)) {
        response.body.stream.cancel(error3).catch((err) => {
          if (err.code === "ERR_INVALID_STATE") {
            return;
          }
          throw err;
        });
      }
    }
    function fetching({
      request,
      processRequestBodyChunkLength,
      processRequestEndOfBody,
      processResponse,
      processResponseEndOfBody,
      processResponseConsumeBody,
      useParallelQueue = false,
      dispatcher
      // undici
    }) {
      var _a, _b, _c, _d;
      let taskDestination = null;
      let crossOriginIsolatedCapability = false;
      if (request.client != null) {
        taskDestination = request.client.globalObject;
        crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;
      }
      const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
      const timingInfo = createOpaqueTimingInfo({
        startTime: currenTime
      });
      const fetchParams = {
        controller: new Fetch(dispatcher),
        request,
        timingInfo,
        processRequestBodyChunkLength,
        processRequestEndOfBody,
        processResponse,
        processResponseConsumeBody,
        processResponseEndOfBody,
        taskDestination,
        crossOriginIsolatedCapability
      };
      assert(!request.body || request.body.stream);
      if (request.window === "client") {
        request.window = ((_c = (_b = (_a = request.client) == null ? void 0 : _a.globalObject) == null ? void 0 : _b.constructor) == null ? void 0 : _c.name) === "Window" ? request.client : "no-window";
      }
      if (request.origin === "client") {
        request.origin = (_d = request.client) == null ? void 0 : _d.origin;
      }
      if (request.policyContainer === "client") {
        if (request.client != null) {
          request.policyContainer = clonePolicyContainer(
            request.client.policyContainer
          );
        } else {
          request.policyContainer = makePolicyContainer();
        }
      }
      if (!request.headersList.contains("accept")) {
        const value = "*/*";
        request.headersList.append("accept", value);
      }
      if (!request.headersList.contains("accept-language")) {
        request.headersList.append("accept-language", "*");
      }
      if (request.priority === null) {
      }
      if (subresourceSet.has(request.destination)) {
      }
      mainFetch(fetchParams).catch((err) => {
        fetchParams.controller.terminate(err);
      });
      return fetchParams.controller;
    }
    async function mainFetch(fetchParams, recursive = false) {
      const request = fetchParams.request;
      let response = null;
      if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
        response = makeNetworkError("local URLs only");
      }
      tryUpgradeRequestToAPotentiallyTrustworthyURL(request);
      if (requestBadPort(request) === "blocked") {
        response = makeNetworkError("bad port");
      }
      if (request.referrerPolicy === "") {
        request.referrerPolicy = request.policyContainer.referrerPolicy;
      }
      if (request.referrer !== "no-referrer") {
        request.referrer = determineRequestsReferrer(request);
      }
      if (response === null) {
        response = await (async () => {
          const currentURL = requestCurrentURL(request);
          if (
            // - request’s current URL’s origin is same origin with request’s origin,
            //   and request’s response tainting is "basic"
            sameOrigin(currentURL, request.url) && request.responseTainting === "basic" || // request’s current URL’s scheme is "data"
            currentURL.protocol === "data:" || // - request’s mode is "navigate" or "websocket"
            (request.mode === "navigate" || request.mode === "websocket")
          ) {
            request.responseTainting = "basic";
            return await schemeFetch(fetchParams);
          }
          if (request.mode === "same-origin") {
            return makeNetworkError('request mode cannot be "same-origin"');
          }
          if (request.mode === "no-cors") {
            if (request.redirect !== "follow") {
              return makeNetworkError(
                'redirect mode cannot be "follow" for "no-cors" request'
              );
            }
            request.responseTainting = "opaque";
            return await schemeFetch(fetchParams);
          }
          if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
            return makeNetworkError("URL scheme must be a HTTP(S) scheme");
          }
          request.responseTainting = "cors";
          return await httpFetch(fetchParams);
        })();
      }
      if (recursive) {
        return response;
      }
      if (response.status !== 0 && !response.internalResponse) {
        if (request.responseTainting === "cors") {
        }
        if (request.responseTainting === "basic") {
          response = filterResponse(response, "basic");
        } else if (request.responseTainting === "cors") {
          response = filterResponse(response, "cors");
        } else if (request.responseTainting === "opaque") {
          response = filterResponse(response, "opaque");
        } else {
          assert(false);
        }
      }
      let internalResponse = response.status === 0 ? response : response.internalResponse;
      if (internalResponse.urlList.length === 0) {
        internalResponse.urlList.push(...request.urlList);
      }
      if (!request.timingAllowFailed) {
        response.timingAllowPassed = true;
      }
      if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains("range")) {
        response = internalResponse = makeNetworkError();
      }
      if (response.status !== 0 && (request.method === "HEAD" || request.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
        internalResponse.body = null;
        fetchParams.controller.dump = true;
      }
      if (request.integrity) {
        const processBodyError = (reason) => fetchFinale(fetchParams, makeNetworkError(reason));
        if (request.responseTainting === "opaque" || response.body == null) {
          processBodyError(response.error);
          return;
        }
        const processBody = (bytes) => {
          if (!bytesMatch(bytes, request.integrity)) {
            processBodyError("integrity mismatch");
            return;
          }
          response.body = safelyExtractBody(bytes)[0];
          fetchFinale(fetchParams, response);
        };
        await fullyReadBody(response.body, processBody, processBodyError);
      } else {
        fetchFinale(fetchParams, response);
      }
    }
    function schemeFetch(fetchParams) {
      if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
        return Promise.resolve(makeAppropriateNetworkError(fetchParams));
      }
      const { request } = fetchParams;
      const { protocol: scheme } = requestCurrentURL(request);
      switch (scheme) {
        case "about:": {
          return Promise.resolve(makeNetworkError("about scheme is not supported"));
        }
        case "blob:": {
          if (!resolveObjectURL) {
            resolveObjectURL = require("buffer").resolveObjectURL;
          }
          const blobURLEntry = requestCurrentURL(request);
          if (blobURLEntry.search.length !== 0) {
            return Promise.resolve(makeNetworkError("NetworkError when attempting to fetch resource."));
          }
          const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());
          if (request.method !== "GET" || !isBlobLike(blobURLEntryObject)) {
            return Promise.resolve(makeNetworkError("invalid method"));
          }
          const bodyWithType = safelyExtractBody(blobURLEntryObject);
          const body = bodyWithType[0];
          const length = isomorphicEncode(`${body.length}`);
          const type = bodyWithType[1] ?? "";
          const response = makeResponse({
            statusText: "OK",
            headersList: [
              ["content-length", { name: "Content-Length", value: length }],
              ["content-type", { name: "Content-Type", value: type }]
            ]
          });
          response.body = body;
          return Promise.resolve(response);
        }
        case "data:": {
          const currentURL = requestCurrentURL(request);
          const dataURLStruct = dataURLProcessor(currentURL);
          if (dataURLStruct === "failure") {
            return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
          }
          const mimeType = serializeAMimeType(dataURLStruct.mimeType);
          return Promise.resolve(makeResponse({
            statusText: "OK",
            headersList: [
              ["content-type", { name: "Content-Type", value: mimeType }]
            ],
            body: safelyExtractBody(dataURLStruct.body)[0]
          }));
        }
        case "file:": {
          return Promise.resolve(makeNetworkError("not implemented... yet..."));
        }
        case "http:":
        case "https:": {
          return httpFetch(fetchParams).catch((err) => makeNetworkError(err));
        }
        default: {
          return Promise.resolve(makeNetworkError("unknown scheme"));
        }
      }
    }
    function finalizeResponse(fetchParams, response) {
      fetchParams.request.done = true;
      if (fetchParams.processResponseDone != null) {
        queueMicrotask(() => fetchParams.processResponseDone(response));
      }
    }
    function fetchFinale(fetchParams, response) {
      if (response.type === "error") {
        response.urlList = [fetchParams.request.urlList[0]];
        response.timingInfo = createOpaqueTimingInfo({
          startTime: fetchParams.timingInfo.startTime
        });
      }
      const processResponseEndOfBody = () => {
        fetchParams.request.done = true;
        if (fetchParams.processResponseEndOfBody != null) {
          queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
        }
      };
      if (fetchParams.processResponse != null) {
        queueMicrotask(() => fetchParams.processResponse(response));
      }
      if (response.body == null) {
        processResponseEndOfBody();
      } else {
        const identityTransformAlgorithm = (chunk, controller) => {
          controller.enqueue(chunk);
        };
        const transformStream = new TransformStream2({
          start() {
          },
          transform: identityTransformAlgorithm,
          flush: processResponseEndOfBody
        }, {
          size() {
            return 1;
          }
        }, {
          size() {
            return 1;
          }
        });
        response.body = { stream: response.body.stream.pipeThrough(transformStream) };
      }
      if (fetchParams.processResponseConsumeBody != null) {
        const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes);
        const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure);
        if (response.body == null) {
          queueMicrotask(() => processBody(null));
        } else {
          return fullyReadBody(response.body, processBody, processBodyError);
        }
        return Promise.resolve();
      }
    }
    async function httpFetch(fetchParams) {
      const request = fetchParams.request;
      let response = null;
      let actualResponse = null;
      const timingInfo = fetchParams.timingInfo;
      if (request.serviceWorkers === "all") {
      }
      if (response === null) {
        if (request.redirect === "follow") {
          request.serviceWorkers = "none";
        }
        actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
        if (request.responseTainting === "cors" && corsCheck(request, response) === "failure") {
          return makeNetworkError("cors failure");
        }
        if (TAOCheck(request, response) === "failure") {
          request.timingAllowFailed = true;
        }
      }
      if ((request.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(
        request.origin,
        request.client,
        request.destination,
        actualResponse
      ) === "blocked") {
        return makeNetworkError("blocked");
      }
      if (redirectStatusSet.has(actualResponse.status)) {
        if (request.redirect !== "manual") {
          fetchParams.controller.connection.destroy();
        }
        if (request.redirect === "error") {
          response = makeNetworkError("unexpected redirect");
        } else if (request.redirect === "manual") {
          response = actualResponse;
        } else if (request.redirect === "follow") {
          response = await httpRedirectFetch(fetchParams, response);
        } else {
          assert(false);
        }
      }
      response.timingInfo = timingInfo;
      return response;
    }
    function httpRedirectFetch(fetchParams, response) {
      const request = fetchParams.request;
      const actualResponse = response.internalResponse ? response.internalResponse : response;
      let locationURL;
      try {
        locationURL = responseLocationURL(
          actualResponse,
          requestCurrentURL(request).hash
        );
        if (locationURL == null) {
          return response;
        }
      } catch (err) {
        return Promise.resolve(makeNetworkError(err));
      }
      if (!urlIsHttpHttpsScheme(locationURL)) {
        return Promise.resolve(makeNetworkError("URL scheme must be a HTTP(S) scheme"));
      }
      if (request.redirectCount === 20) {
        return Promise.resolve(makeNetworkError("redirect count exceeded"));
      }
      request.redirectCount += 1;
      if (request.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) {
        return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'));
      }
      if (request.responseTainting === "cors" && (locationURL.username || locationURL.password)) {
        return Promise.resolve(makeNetworkError(
          'URL cannot contain credentials for request mode "cors"'
        ));
      }
      if (actualResponse.status !== 303 && request.body != null && request.body.source == null) {
        return Promise.resolve(makeNetworkError());
      }
      if ([301, 302].includes(actualResponse.status) && request.method === "POST" || actualResponse.status === 303 && !GET_OR_HEAD.includes(request.method)) {
        request.method = "GET";
        request.body = null;
        for (const headerName of requestBodyHeader) {
          request.headersList.delete(headerName);
        }
      }
      if (!sameOrigin(requestCurrentURL(request), locationURL)) {
        request.headersList.delete("authorization");
        request.headersList.delete("proxy-authorization", true);
        request.headersList.delete("cookie");
        request.headersList.delete("host");
      }
      if (request.body != null) {
        assert(request.body.source != null);
        request.body = safelyExtractBody(request.body.source)[0];
      }
      const timingInfo = fetchParams.timingInfo;
      timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
      if (timingInfo.redirectStartTime === 0) {
        timingInfo.redirectStartTime = timingInfo.startTime;
      }
      request.urlList.push(locationURL);
      setRequestReferrerPolicyOnRedirect(request, actualResponse);
      return mainFetch(fetchParams, true);
    }
    async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
      const request = fetchParams.request;
      let httpFetchParams = null;
      let httpRequest = null;
      let response = null;
      const httpCache = null;
      const revalidatingFlag = false;
      if (request.window === "no-window" && request.redirect === "error") {
        httpFetchParams = fetchParams;
        httpRequest = request;
      } else {
        httpRequest = makeRequest(request);
        httpFetchParams = { ...fetchParams };
        httpFetchParams.request = httpRequest;
      }
      const includeCredentials = request.credentials === "include" || request.credentials === "same-origin" && request.responseTainting === "basic";
      const contentLength = httpRequest.body ? httpRequest.body.length : null;
      let contentLengthHeaderValue = null;
      if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) {
        contentLengthHeaderValue = "0";
      }
      if (contentLength != null) {
        contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
      }
      if (contentLengthHeaderValue != null) {
        httpRequest.headersList.append("content-length", contentLengthHeaderValue);
      }
      if (contentLength != null && httpRequest.keepalive) {
      }
      if (httpRequest.referrer instanceof URL) {
        httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href));
      }
      appendRequestOriginHeader(httpRequest);
      appendFetchMetadata(httpRequest);
      if (!httpRequest.headersList.contains("user-agent")) {
        httpRequest.headersList.append("user-agent", typeof esbuildDetection === "undefined" ? "undici" : "node");
      }
      if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) {
        httpRequest.cache = "no-store";
      }
      if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) {
        httpRequest.headersList.append("cache-control", "max-age=0");
      }
      if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
        if (!httpRequest.headersList.contains("pragma")) {
          httpRequest.headersList.append("pragma", "no-cache");
        }
        if (!httpRequest.headersList.contains("cache-control")) {
          httpRequest.headersList.append("cache-control", "no-cache");
        }
      }
      if (httpRequest.headersList.contains("range")) {
        httpRequest.headersList.append("accept-encoding", "identity");
      }
      if (!httpRequest.headersList.contains("accept-encoding")) {
        if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
          httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
        } else {
          httpRequest.headersList.append("accept-encoding", "gzip, deflate");
        }
      }
      httpRequest.headersList.delete("host");
      if (includeCredentials) {
      }
      if (httpCache == null) {
        httpRequest.cache = "no-store";
      }
      if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {
      }
      if (response == null) {
        if (httpRequest.mode === "only-if-cached") {
          return makeNetworkError("only if cached");
        }
        const forwardResponse = await httpNetworkFetch(
          httpFetchParams,
          includeCredentials,
          isNewConnectionFetch
        );
        if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {
        }
        if (revalidatingFlag && forwardResponse.status === 304) {
        }
        if (response == null) {
          response = forwardResponse;
        }
      }
      response.urlList = [...httpRequest.urlList];
      if (httpRequest.headersList.contains("range")) {
        response.rangeRequested = true;
      }
      response.requestIncludesCredentials = includeCredentials;
      if (response.status === 407) {
        if (request.window === "no-window") {
          return makeNetworkError();
        }
        if (isCancelled(fetchParams)) {
          return makeAppropriateNetworkError(fetchParams);
        }
        return makeNetworkError("proxy authentication required");
      }
      if (
        // response’s status is 421
        response.status === 421 && // isNewConnectionFetch is false
        !isNewConnectionFetch && // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
        (request.body == null || request.body.source != null)
      ) {
        if (isCancelled(fetchParams)) {
          return makeAppropriateNetworkError(fetchParams);
        }
        fetchParams.controller.connection.destroy();
        response = await httpNetworkOrCacheFetch(
          fetchParams,
          isAuthenticationFetch,
          true
        );
      }
      if (isAuthenticationFetch) {
      }
      return response;
    }
    async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
      assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
      fetchParams.controller.connection = {
        abort: null,
        destroyed: false,
        destroy(err) {
          var _a;
          if (!this.destroyed) {
            this.destroyed = true;
            (_a = this.abort) == null ? void 0 : _a.call(this, err ?? new DOMException2("The operation was aborted.", "AbortError"));
          }
        }
      };
      const request = fetchParams.request;
      let response = null;
      const timingInfo = fetchParams.timingInfo;
      const httpCache = null;
      if (httpCache == null) {
        request.cache = "no-store";
      }
      const newConnection = forceNewConnection ? "yes" : "no";
      if (request.mode === "websocket") {
      } else {
      }
      let requestBody = null;
      if (request.body == null && fetchParams.processRequestEndOfBody) {
        queueMicrotask(() => fetchParams.processRequestEndOfBody());
      } else if (request.body != null) {
        const processBodyChunk = async function* (bytes) {
          var _a;
          if (isCancelled(fetchParams)) {
            return;
          }
          yield bytes;
          (_a = fetchParams.processRequestBodyChunkLength) == null ? void 0 : _a.call(fetchParams, bytes.byteLength);
        };
        const processEndOfBody = () => {
          if (isCancelled(fetchParams)) {
            return;
          }
          if (fetchParams.processRequestEndOfBody) {
            fetchParams.processRequestEndOfBody();
          }
        };
        const processBodyError = (e) => {
          if (isCancelled(fetchParams)) {
            return;
          }
          if (e.name === "AbortError") {
            fetchParams.controller.abort();
          } else {
            fetchParams.controller.terminate(e);
          }
        };
        requestBody = async function* () {
          try {
            for await (const bytes of request.body.stream) {
              yield* processBodyChunk(bytes);
            }
            processEndOfBody();
          } catch (err) {
            processBodyError(err);
          }
        }();
      }
      try {
        const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
        if (socket) {
          response = makeResponse({ status, statusText, headersList, socket });
        } else {
          const iterator = body[Symbol.asyncIterator]();
          fetchParams.controller.next = () => iterator.next();
          response = makeResponse({ status, statusText, headersList });
        }
      } catch (err) {
        if (err.name === "AbortError") {
          fetchParams.controller.connection.destroy();
          return makeAppropriateNetworkError(fetchParams, err);
        }
        return makeNetworkError(err);
      }
      const pullAlgorithm = () => {
        fetchParams.controller.resume();
      };
      const cancelAlgorithm = (reason) => {
        fetchParams.controller.abort(reason);
      };
      if (!ReadableStream3) {
        ReadableStream3 = require("stream/web").ReadableStream;
      }
      const stream = new ReadableStream3(
        {
          async start(controller) {
            fetchParams.controller.controller = controller;
          },
          async pull(controller) {
            await pullAlgorithm(controller);
          },
          async cancel(reason) {
            await cancelAlgorithm(reason);
          }
        },
        {
          highWaterMark: 0,
          size() {
            return 1;
          }
        }
      );
      response.body = { stream };
      fetchParams.controller.on("terminated", onAborted);
      fetchParams.controller.resume = async () => {
        while (true) {
          let bytes;
          let isFailure;
          try {
            const { done, value } = await fetchParams.controller.next();
            if (isAborted(fetchParams)) {
              break;
            }
            bytes = done ? void 0 : value;
          } catch (err) {
            if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
              bytes = void 0;
            } else {
              bytes = err;
              isFailure = true;
            }
          }
          if (bytes === void 0) {
            readableStreamClose(fetchParams.controller.controller);
            finalizeResponse(fetchParams, response);
            return;
          }
          timingInfo.decodedBodySize += (bytes == null ? void 0 : bytes.byteLength) ?? 0;
          if (isFailure) {
            fetchParams.controller.terminate(bytes);
            return;
          }
          fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
          if (isErrored(stream)) {
            fetchParams.controller.terminate();
            return;
          }
          if (!fetchParams.controller.controller.desiredSize) {
            return;
          }
        }
      };
      function onAborted(reason) {
        if (isAborted(fetchParams)) {
          response.aborted = true;
          if (isReadable(stream)) {
            fetchParams.controller.controller.error(
              fetchParams.controller.serializedAbortReason
            );
          }
        } else {
          if (isReadable(stream)) {
            fetchParams.controller.controller.error(new TypeError("terminated", {
              cause: isErrorLike(reason) ? reason : void 0
            }));
          }
        }
        fetchParams.controller.connection.destroy();
      }
      return response;
      async function dispatch({ body }) {
        const url = requestCurrentURL(request);
        const agent = fetchParams.controller.dispatcher;
        return new Promise((resolve2, reject) => agent.dispatch(
          {
            path: url.pathname + url.search,
            origin: url.origin,
            method: request.method,
            body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
            headers: request.headersList.entries,
            maxRedirections: 0,
            upgrade: request.mode === "websocket" ? "websocket" : void 0
          },
          {
            body: null,
            abort: null,
            onConnect(abort) {
              const { connection } = fetchParams.controller;
              if (connection.destroyed) {
                abort(new DOMException2("The operation was aborted.", "AbortError"));
              } else {
                fetchParams.controller.on("terminated", abort);
                this.abort = connection.abort = abort;
              }
            },
            onHeaders(status, headersList, resume, statusText) {
              if (status < 200) {
                return;
              }
              let codings = [];
              let location = "";
              const headers = new Headers3();
              if (Array.isArray(headersList)) {
                for (let n = 0; n < headersList.length; n += 2) {
                  const key2 = headersList[n + 0].toString("latin1");
                  const val = headersList[n + 1].toString("latin1");
                  if (key2.toLowerCase() === "content-encoding") {
                    codings = val.toLowerCase().split(",").map((x) => x.trim());
                  } else if (key2.toLowerCase() === "location") {
                    location = val;
                  }
                  headers[kHeadersList].append(key2, val);
                }
              } else {
                const keys = Object.keys(headersList);
                for (const key2 of keys) {
                  const val = headersList[key2];
                  if (key2.toLowerCase() === "content-encoding") {
                    codings = val.toLowerCase().split(",").map((x) => x.trim()).reverse();
                  } else if (key2.toLowerCase() === "location") {
                    location = val;
                  }
                  headers[kHeadersList].append(key2, val);
                }
              }
              this.body = new Readable({ read: resume });
              const decoders = [];
              const willFollow = request.redirect === "follow" && location && redirectStatusSet.has(status);
              if (request.method !== "HEAD" && request.method !== "CONNECT" && !nullBodyStatus.includes(status) && !willFollow) {
                for (const coding of codings) {
                  if (coding === "x-gzip" || coding === "gzip") {
                    decoders.push(zlib.createGunzip({
                      // Be less strict when decoding compressed responses, since sometimes
                      // servers send slightly invalid responses that are still accepted
                      // by common browsers.
                      // Always using Z_SYNC_FLUSH is what cURL does.
                      flush: zlib.constants.Z_SYNC_FLUSH,
                      finishFlush: zlib.constants.Z_SYNC_FLUSH
                    }));
                  } else if (coding === "deflate") {
                    decoders.push(zlib.createInflate());
                  } else if (coding === "br") {
                    decoders.push(zlib.createBrotliDecompress());
                  } else {
                    decoders.length = 0;
                    break;
                  }
                }
              }
              resolve2({
                status,
                statusText,
                headersList: headers[kHeadersList],
                body: decoders.length ? pipeline(this.body, ...decoders, () => {
                }) : this.body.on("error", () => {
                })
              });
              return true;
            },
            onData(chunk) {
              if (fetchParams.controller.dump) {
                return;
              }
              const bytes = chunk;
              timingInfo.encodedBodySize += bytes.byteLength;
              return this.body.push(bytes);
            },
            onComplete() {
              if (this.abort) {
                fetchParams.controller.off("terminated", this.abort);
              }
              fetchParams.controller.ended = true;
              this.body.push(null);
            },
            onError(error3) {
              var _a;
              if (this.abort) {
                fetchParams.controller.off("terminated", this.abort);
              }
              (_a = this.body) == null ? void 0 : _a.destroy(error3);
              fetchParams.controller.terminate(error3);
              reject(error3);
            },
            onUpgrade(status, headersList, socket) {
              if (status !== 101) {
                return;
              }
              const headers = new Headers3();
              for (let n = 0; n < headersList.length; n += 2) {
                const key2 = headersList[n + 0].toString("latin1");
                const val = headersList[n + 1].toString("latin1");
                headers[kHeadersList].append(key2, val);
              }
              resolve2({
                status,
                statusText: STATUS_CODES[status],
                headersList: headers[kHeadersList],
                socket
              });
              return true;
            }
          }
        ));
      }
    }
    module2.exports = {
      fetch: fetch3,
      Fetch,
      fetching,
      finalizeAndReportTiming
    };
  }
});

// node_modules/undici/lib/fileapi/symbols.js
var require_symbols3 = __commonJS({
  "node_modules/undici/lib/fileapi/symbols.js"(exports, module2) {
    "use strict";
    module2.exports = {
      kState: Symbol("FileReader state"),
      kResult: Symbol("FileReader result"),
      kError: Symbol("FileReader error"),
      kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
      kEvents: Symbol("FileReader events"),
      kAborted: Symbol("FileReader aborted")
    };
  }
});

// node_modules/undici/lib/fileapi/progressevent.js
var require_progressevent = __commonJS({
  "node_modules/undici/lib/fileapi/progressevent.js"(exports, module2) {
    "use strict";
    var { webidl } = require_webidl();
    var kState = Symbol("ProgressEvent state");
    var ProgressEvent = class extends Event {
      constructor(type, eventInitDict = {}) {
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});
        super(type, eventInitDict);
        this[kState] = {
          lengthComputable: eventInitDict.lengthComputable,
          loaded: eventInitDict.loaded,
          total: eventInitDict.total
        };
      }
      get lengthComputable() {
        webidl.brandCheck(this, ProgressEvent);
        return this[kState].lengthComputable;
      }
      get loaded() {
        webidl.brandCheck(this, ProgressEvent);
        return this[kState].loaded;
      }
      get total() {
        webidl.brandCheck(this, ProgressEvent);
        return this[kState].total;
      }
    };
    webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
      {
        key: "lengthComputable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "loaded",
        converter: webidl.converters["unsigned long long"],
        defaultValue: 0
      },
      {
        key: "total",
        converter: webidl.converters["unsigned long long"],
        defaultValue: 0
      },
      {
        key: "bubbles",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "cancelable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "composed",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ]);
    module2.exports = {
      ProgressEvent
    };
  }
});

// node_modules/undici/lib/fileapi/encoding.js
var require_encoding = __commonJS({
  "node_modules/undici/lib/fileapi/encoding.js"(exports, module2) {
    "use strict";
    function getEncoding(label) {
      if (!label) {
        return "failure";
      }
      switch (label.trim().toLowerCase()) {
        case "unicode-1-1-utf-8":
        case "unicode11utf8":
        case "unicode20utf8":
        case "utf-8":
        case "utf8":
        case "x-unicode20utf8":
          return "UTF-8";
        case "866":
        case "cp866":
        case "csibm866":
        case "ibm866":
          return "IBM866";
        case "csisolatin2":
        case "iso-8859-2":
        case "iso-ir-101":
        case "iso8859-2":
        case "iso88592":
        case "iso_8859-2":
        case "iso_8859-2:1987":
        case "l2":
        case "latin2":
          return "ISO-8859-2";
        case "csisolatin3":
        case "iso-8859-3":
        case "iso-ir-109":
        case "iso8859-3":
        case "iso88593":
        case "iso_8859-3":
        case "iso_8859-3:1988":
        case "l3":
        case "latin3":
          return "ISO-8859-3";
        case "csisolatin4":
        case "iso-8859-4":
        case "iso-ir-110":
        case "iso8859-4":
        case "iso88594":
        case "iso_8859-4":
        case "iso_8859-4:1988":
        case "l4":
        case "latin4":
          return "ISO-8859-4";
        case "csisolatincyrillic":
        case "cyrillic":
        case "iso-8859-5":
        case "iso-ir-144":
        case "iso8859-5":
        case "iso88595":
        case "iso_8859-5":
        case "iso_8859-5:1988":
          return "ISO-8859-5";
        case "arabic":
        case "asmo-708":
        case "csiso88596e":
        case "csiso88596i":
        case "csisolatinarabic":
        case "ecma-114":
        case "iso-8859-6":
        case "iso-8859-6-e":
        case "iso-8859-6-i":
        case "iso-ir-127":
        case "iso8859-6":
        case "iso88596":
        case "iso_8859-6":
        case "iso_8859-6:1987":
          return "ISO-8859-6";
        case "csisolatingreek":
        case "ecma-118":
        case "elot_928":
        case "greek":
        case "greek8":
        case "iso-8859-7":
        case "iso-ir-126":
        case "iso8859-7":
        case "iso88597":
        case "iso_8859-7":
        case "iso_8859-7:1987":
        case "sun_eu_greek":
          return "ISO-8859-7";
        case "csiso88598e":
        case "csisolatinhebrew":
        case "hebrew":
        case "iso-8859-8":
        case "iso-8859-8-e":
        case "iso-ir-138":
        case "iso8859-8":
        case "iso88598":
        case "iso_8859-8":
        case "iso_8859-8:1988":
        case "visual":
          return "ISO-8859-8";
        case "csiso88598i":
        case "iso-8859-8-i":
        case "logical":
          return "ISO-8859-8-I";
        case "csisolatin6":
        case "iso-8859-10":
        case "iso-ir-157":
        case "iso8859-10":
        case "iso885910":
        case "l6":
        case "latin6":
          return "ISO-8859-10";
        case "iso-8859-13":
        case "iso8859-13":
        case "iso885913":
          return "ISO-8859-13";
        case "iso-8859-14":
        case "iso8859-14":
        case "iso885914":
          return "ISO-8859-14";
        case "csisolatin9":
        case "iso-8859-15":
        case "iso8859-15":
        case "iso885915":
        case "iso_8859-15":
        case "l9":
          return "ISO-8859-15";
        case "iso-8859-16":
          return "ISO-8859-16";
        case "cskoi8r":
        case "koi":
        case "koi8":
        case "koi8-r":
        case "koi8_r":
          return "KOI8-R";
        case "koi8-ru":
        case "koi8-u":
          return "KOI8-U";
        case "csmacintosh":
        case "mac":
        case "macintosh":
        case "x-mac-roman":
          return "macintosh";
        case "iso-8859-11":
        case "iso8859-11":
        case "iso885911":
        case "tis-620":
        case "windows-874":
          return "windows-874";
        case "cp1250":
        case "windows-1250":
        case "x-cp1250":
          return "windows-1250";
        case "cp1251":
        case "windows-1251":
        case "x-cp1251":
          return "windows-1251";
        case "ansi_x3.4-1968":
        case "ascii":
        case "cp1252":
        case "cp819":
        case "csisolatin1":
        case "ibm819":
        case "iso-8859-1":
        case "iso-ir-100":
        case "iso8859-1":
        case "iso88591":
        case "iso_8859-1":
        case "iso_8859-1:1987":
        case "l1":
        case "latin1":
        case "us-ascii":
        case "windows-1252":
        case "x-cp1252":
          return "windows-1252";
        case "cp1253":
        case "windows-1253":
        case "x-cp1253":
          return "windows-1253";
        case "cp1254":
        case "csisolatin5":
        case "iso-8859-9":
        case "iso-ir-148":
        case "iso8859-9":
        case "iso88599":
        case "iso_8859-9":
        case "iso_8859-9:1989":
        case "l5":
        case "latin5":
        case "windows-1254":
        case "x-cp1254":
          return "windows-1254";
        case "cp1255":
        case "windows-1255":
        case "x-cp1255":
          return "windows-1255";
        case "cp1256":
        case "windows-1256":
        case "x-cp1256":
          return "windows-1256";
        case "cp1257":
        case "windows-1257":
        case "x-cp1257":
          return "windows-1257";
        case "cp1258":
        case "windows-1258":
        case "x-cp1258":
          return "windows-1258";
        case "x-mac-cyrillic":
        case "x-mac-ukrainian":
          return "x-mac-cyrillic";
        case "chinese":
        case "csgb2312":
        case "csiso58gb231280":
        case "gb2312":
        case "gb_2312":
        case "gb_2312-80":
        case "gbk":
        case "iso-ir-58":
        case "x-gbk":
          return "GBK";
        case "gb18030":
          return "gb18030";
        case "big5":
        case "big5-hkscs":
        case "cn-big5":
        case "csbig5":
        case "x-x-big5":
          return "Big5";
        case "cseucpkdfmtjapanese":
        case "euc-jp":
        case "x-euc-jp":
          return "EUC-JP";
        case "csiso2022jp":
        case "iso-2022-jp":
          return "ISO-2022-JP";
        case "csshiftjis":
        case "ms932":
        case "ms_kanji":
        case "shift-jis":
        case "shift_jis":
        case "sjis":
        case "windows-31j":
        case "x-sjis":
          return "Shift_JIS";
        case "cseuckr":
        case "csksc56011987":
        case "euc-kr":
        case "iso-ir-149":
        case "korean":
        case "ks_c_5601-1987":
        case "ks_c_5601-1989":
        case "ksc5601":
        case "ksc_5601":
        case "windows-949":
          return "EUC-KR";
        case "csiso2022kr":
        case "hz-gb-2312":
        case "iso-2022-cn":
        case "iso-2022-cn-ext":
        case "iso-2022-kr":
        case "replacement":
          return "replacement";
        case "unicodefffe":
        case "utf-16be":
          return "UTF-16BE";
        case "csunicode":
        case "iso-10646-ucs-2":
        case "ucs-2":
        case "unicode":
        case "unicodefeff":
        case "utf-16":
        case "utf-16le":
          return "UTF-16LE";
        case "x-user-defined":
          return "x-user-defined";
        default:
          return "failure";
      }
    }
    module2.exports = {
      getEncoding
    };
  }
});

// node_modules/undici/lib/fileapi/util.js
var require_util4 = __commonJS({
  "node_modules/undici/lib/fileapi/util.js"(exports, module2) {
    "use strict";
    var {
      kState,
      kError,
      kResult,
      kAborted,
      kLastProgressEventFired
    } = require_symbols3();
    var { ProgressEvent } = require_progressevent();
    var { getEncoding } = require_encoding();
    var { DOMException: DOMException2 } = require_constants();
    var { serializeAMimeType, parseMIMEType } = require_dataURL();
    var { types } = require("util");
    var { StringDecoder } = require("string_decoder");
    var { btoa: btoa2 } = require("buffer");
    var staticPropertyDescriptors = {
      enumerable: true,
      writable: false,
      configurable: false
    };
    function readOperation(fr, blob, type, encodingName) {
      if (fr[kState] === "loading") {
        throw new DOMException2("Invalid state", "InvalidStateError");
      }
      fr[kState] = "loading";
      fr[kResult] = null;
      fr[kError] = null;
      const stream = blob.stream();
      const reader = stream.getReader();
      const bytes = [];
      let chunkPromise = reader.read();
      let isFirstChunk = true;
      (async () => {
        while (!fr[kAborted]) {
          try {
            const { done, value } = await chunkPromise;
            if (isFirstChunk && !fr[kAborted]) {
              queueMicrotask(() => {
                fireAProgressEvent("loadstart", fr);
              });
            }
            isFirstChunk = false;
            if (!done && types.isUint8Array(value)) {
              bytes.push(value);
              if ((fr[kLastProgressEventFired] === void 0 || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted]) {
                fr[kLastProgressEventFired] = Date.now();
                queueMicrotask(() => {
                  fireAProgressEvent("progress", fr);
                });
              }
              chunkPromise = reader.read();
            } else if (done) {
              queueMicrotask(() => {
                fr[kState] = "done";
                try {
                  const result = packageData(bytes, type, blob.type, encodingName);
                  if (fr[kAborted]) {
                    return;
                  }
                  fr[kResult] = result;
                  fireAProgressEvent("load", fr);
                } catch (error3) {
                  fr[kError] = error3;
                  fireAProgressEvent("error", fr);
                }
                if (fr[kState] !== "loading") {
                  fireAProgressEvent("loadend", fr);
                }
              });
              break;
            }
          } catch (error3) {
            if (fr[kAborted]) {
              return;
            }
            queueMicrotask(() => {
              fr[kState] = "done";
              fr[kError] = error3;
              fireAProgressEvent("error", fr);
              if (fr[kState] !== "loading") {
                fireAProgressEvent("loadend", fr);
              }
            });
            break;
          }
        }
      })();
    }
    function fireAProgressEvent(e, reader) {
      const event = new ProgressEvent(e, {
        bubbles: false,
        cancelable: false
      });
      reader.dispatchEvent(event);
    }
    function packageData(bytes, type, mimeType, encodingName) {
      switch (type) {
        case "DataURL": {
          let dataURL = "data:";
          const parsed = parseMIMEType(mimeType || "application/octet-stream");
          if (parsed !== "failure") {
            dataURL += serializeAMimeType(parsed);
          }
          dataURL += ";base64,";
          const decoder = new StringDecoder("latin1");
          for (const chunk of bytes) {
            dataURL += btoa2(decoder.write(chunk));
          }
          dataURL += btoa2(decoder.end());
          return dataURL;
        }
        case "Text": {
          let encoding = "failure";
          if (encodingName) {
            encoding = getEncoding(encodingName);
          }
          if (encoding === "failure" && mimeType) {
            const type2 = parseMIMEType(mimeType);
            if (type2 !== "failure") {
              encoding = getEncoding(type2.parameters.get("charset"));
            }
          }
          if (encoding === "failure") {
            encoding = "UTF-8";
          }
          return decode(bytes, encoding);
        }
        case "ArrayBuffer": {
          const sequence = combineByteSequences(bytes);
          return sequence.buffer;
        }
        case "BinaryString": {
          let binaryString = "";
          const decoder = new StringDecoder("latin1");
          for (const chunk of bytes) {
            binaryString += decoder.write(chunk);
          }
          binaryString += decoder.end();
          return binaryString;
        }
      }
    }
    function decode(ioQueue, encoding) {
      const bytes = combineByteSequences(ioQueue);
      const BOMEncoding = BOMSniffing(bytes);
      let slice = 0;
      if (BOMEncoding !== null) {
        encoding = BOMEncoding;
        slice = BOMEncoding === "UTF-8" ? 3 : 2;
      }
      const sliced = bytes.slice(slice);
      return new TextDecoder(encoding).decode(sliced);
    }
    function BOMSniffing(ioQueue) {
      const [a, b, c] = ioQueue;
      if (a === 239 && b === 187 && c === 191) {
        return "UTF-8";
      } else if (a === 254 && b === 255) {
        return "UTF-16BE";
      } else if (a === 255 && b === 254) {
        return "UTF-16LE";
      }
      return null;
    }
    function combineByteSequences(sequences) {
      const size = sequences.reduce((a, b) => {
        return a + b.byteLength;
      }, 0);
      let offset = 0;
      return sequences.reduce((a, b) => {
        a.set(b, offset);
        offset += b.byteLength;
        return a;
      }, new Uint8Array(size));
    }
    module2.exports = {
      staticPropertyDescriptors,
      readOperation,
      fireAProgressEvent
    };
  }
});

// node_modules/undici/lib/fileapi/filereader.js
var require_filereader = __commonJS({
  "node_modules/undici/lib/fileapi/filereader.js"(exports, module2) {
    "use strict";
    var {
      staticPropertyDescriptors,
      readOperation,
      fireAProgressEvent
    } = require_util4();
    var {
      kState,
      kError,
      kResult,
      kEvents,
      kAborted
    } = require_symbols3();
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util();
    var FileReader = class extends EventTarget {
      constructor() {
        super();
        this[kState] = "empty";
        this[kResult] = null;
        this[kError] = null;
        this[kEvents] = {
          loadend: null,
          error: null,
          abort: null,
          load: null,
          progress: null,
          loadstart: null
        };
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
       * @param {import('buffer').Blob} blob
       */
      readAsArrayBuffer(blob) {
        webidl.brandCheck(this, FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsArrayBuffer" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "ArrayBuffer");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#readAsBinaryString
       * @param {import('buffer').Blob} blob
       */
      readAsBinaryString(blob) {
        webidl.brandCheck(this, FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsBinaryString" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "BinaryString");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#readAsDataText
       * @param {import('buffer').Blob} blob
       * @param {string?} encoding
       */
      readAsText(blob, encoding = void 0) {
        webidl.brandCheck(this, FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsText" });
        blob = webidl.converters.Blob(blob, { strict: false });
        if (encoding !== void 0) {
          encoding = webidl.converters.DOMString(encoding);
        }
        readOperation(this, blob, "Text", encoding);
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
       * @param {import('buffer').Blob} blob
       */
      readAsDataURL(blob) {
        webidl.brandCheck(this, FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsDataURL" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "DataURL");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-abort
       */
      abort() {
        if (this[kState] === "empty" || this[kState] === "done") {
          this[kResult] = null;
          return;
        }
        if (this[kState] === "loading") {
          this[kState] = "done";
          this[kResult] = null;
        }
        this[kAborted] = true;
        fireAProgressEvent("abort", this);
        if (this[kState] !== "loading") {
          fireAProgressEvent("loadend", this);
        }
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
       */
      get readyState() {
        webidl.brandCheck(this, FileReader);
        switch (this[kState]) {
          case "empty":
            return this.EMPTY;
          case "loading":
            return this.LOADING;
          case "done":
            return this.DONE;
        }
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-result
       */
      get result() {
        webidl.brandCheck(this, FileReader);
        return this[kResult];
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-error
       */
      get error() {
        webidl.brandCheck(this, FileReader);
        return this[kError];
      }
      get onloadend() {
        webidl.brandCheck(this, FileReader);
        return this[kEvents].loadend;
      }
      set onloadend(fn) {
        webidl.brandCheck(this, FileReader);
        if (this[kEvents].loadend) {
          this.removeEventListener("loadend", this[kEvents].loadend);
        }
        if (typeof fn === "function") {
          this[kEvents].loadend = fn;
          this.addEventListener("loadend", fn);
        } else {
          this[kEvents].loadend = null;
        }
      }
      get onerror() {
        webidl.brandCheck(this, FileReader);
        return this[kEvents].error;
      }
      set onerror(fn) {
        webidl.brandCheck(this, FileReader);
        if (this[kEvents].error) {
          this.removeEventListener("error", this[kEvents].error);
        }
        if (typeof fn === "function") {
          this[kEvents].error = fn;
          this.addEventListener("error", fn);
        } else {
          this[kEvents].error = null;
        }
      }
      get onloadstart() {
        webidl.brandCheck(this, FileReader);
        return this[kEvents].loadstart;
      }
      set onloadstart(fn) {
        webidl.brandCheck(this, FileReader);
        if (this[kEvents].loadstart) {
          this.removeEventListener("loadstart", this[kEvents].loadstart);
        }
        if (typeof fn === "function") {
          this[kEvents].loadstart = fn;
          this.addEventListener("loadstart", fn);
        } else {
          this[kEvents].loadstart = null;
        }
      }
      get onprogress() {
        webidl.brandCheck(this, FileReader);
        return this[kEvents].progress;
      }
      set onprogress(fn) {
        webidl.brandCheck(this, FileReader);
        if (this[kEvents].progress) {
          this.removeEventListener("progress", this[kEvents].progress);
        }
        if (typeof fn === "function") {
          this[kEvents].progress = fn;
          this.addEventListener("progress", fn);
        } else {
          this[kEvents].progress = null;
        }
      }
      get onload() {
        webidl.brandCheck(this, FileReader);
        return this[kEvents].load;
      }
      set onload(fn) {
        webidl.brandCheck(this, FileReader);
        if (this[kEvents].load) {
          this.removeEventListener("load", this[kEvents].load);
        }
        if (typeof fn === "function") {
          this[kEvents].load = fn;
          this.addEventListener("load", fn);
        } else {
          this[kEvents].load = null;
        }
      }
      get onabort() {
        webidl.brandCheck(this, FileReader);
        return this[kEvents].abort;
      }
      set onabort(fn) {
        webidl.brandCheck(this, FileReader);
        if (this[kEvents].abort) {
          this.removeEventListener("abort", this[kEvents].abort);
        }
        if (typeof fn === "function") {
          this[kEvents].abort = fn;
          this.addEventListener("abort", fn);
        } else {
          this[kEvents].abort = null;
        }
      }
    };
    FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
    FileReader.LOADING = FileReader.prototype.LOADING = 1;
    FileReader.DONE = FileReader.prototype.DONE = 2;
    Object.defineProperties(FileReader.prototype, {
      EMPTY: staticPropertyDescriptors,
      LOADING: staticPropertyDescriptors,
      DONE: staticPropertyDescriptors,
      readAsArrayBuffer: kEnumerableProperty,
      readAsBinaryString: kEnumerableProperty,
      readAsText: kEnumerableProperty,
      readAsDataURL: kEnumerableProperty,
      abort: kEnumerableProperty,
      readyState: kEnumerableProperty,
      result: kEnumerableProperty,
      error: kEnumerableProperty,
      onloadstart: kEnumerableProperty,
      onprogress: kEnumerableProperty,
      onload: kEnumerableProperty,
      onabort: kEnumerableProperty,
      onerror: kEnumerableProperty,
      onloadend: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "FileReader",
        writable: false,
        enumerable: false,
        configurable: true
      }
    });
    Object.defineProperties(FileReader, {
      EMPTY: staticPropertyDescriptors,
      LOADING: staticPropertyDescriptors,
      DONE: staticPropertyDescriptors
    });
    module2.exports = {
      FileReader
    };
  }
});

// node_modules/undici/lib/cache/symbols.js
var require_symbols4 = __commonJS({
  "node_modules/undici/lib/cache/symbols.js"(exports, module2) {
    "use strict";
    module2.exports = {
      kConstruct: require_symbols().kConstruct
    };
  }
});

// node_modules/undici/lib/cache/util.js
var require_util5 = __commonJS({
  "node_modules/undici/lib/cache/util.js"(exports, module2) {
    "use strict";
    var assert = require("assert");
    var { URLSerializer } = require_dataURL();
    var { isValidHeaderName } = require_util2();
    function urlEquals(A, B, excludeFragment = false) {
      const serializedA = URLSerializer(A, excludeFragment);
      const serializedB = URLSerializer(B, excludeFragment);
      return serializedA === serializedB;
    }
    function fieldValues(header) {
      assert(header !== null);
      const values = [];
      for (let value of header.split(",")) {
        value = value.trim();
        if (!value.length) {
          continue;
        } else if (!isValidHeaderName(value)) {
          continue;
        }
        values.push(value);
      }
      return values;
    }
    module2.exports = {
      urlEquals,
      fieldValues
    };
  }
});

// node_modules/undici/lib/cache/cache.js
var require_cache = __commonJS({
  "node_modules/undici/lib/cache/cache.js"(exports, module2) {
    "use strict";
    var { kConstruct } = require_symbols4();
    var { urlEquals, fieldValues: getFieldValues } = require_util5();
    var { kEnumerableProperty, isDisturbed } = require_util();
    var { kHeadersList } = require_symbols();
    var { webidl } = require_webidl();
    var { Response: Response3, cloneResponse } = require_response();
    var { Request: Request3 } = require_request2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var { fetching } = require_fetch();
    var { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require_util2();
    var assert = require("assert");
    var { getGlobalDispatcher } = require_global2();
    var Cache = class {
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
       * @type {requestResponseList}
       */
      #relevantRequestResponseList;
      constructor() {
        if (arguments[0] !== kConstruct) {
          webidl.illegalConstructor();
        }
        this.#relevantRequestResponseList = arguments[1];
      }
      async match(request, options2 = {}) {
        webidl.brandCheck(this, Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.match" });
        request = webidl.converters.RequestInfo(request);
        options2 = webidl.converters.CacheQueryOptions(options2);
        const p = await this.matchAll(request, options2);
        if (p.length === 0) {
          return;
        }
        return p[0];
      }
      async matchAll(request = void 0, options2 = {}) {
        var _a;
        webidl.brandCheck(this, Cache);
        if (request !== void 0)
          request = webidl.converters.RequestInfo(request);
        options2 = webidl.converters.CacheQueryOptions(options2);
        let r = null;
        if (request !== void 0) {
          if (request instanceof Request3) {
            r = request[kState];
            if (r.method !== "GET" && !options2.ignoreMethod) {
              return [];
            }
          } else if (typeof request === "string") {
            r = new Request3(request)[kState];
          }
        }
        const responses = [];
        if (request === void 0) {
          for (const requestResponse of this.#relevantRequestResponseList) {
            responses.push(requestResponse[1]);
          }
        } else {
          const requestResponses = this.#queryCache(r, options2);
          for (const requestResponse of requestResponses) {
            responses.push(requestResponse[1]);
          }
        }
        const responseList = [];
        for (const response of responses) {
          const responseObject = new Response3(((_a = response.body) == null ? void 0 : _a.source) ?? null);
          const body = responseObject[kState].body;
          responseObject[kState] = response;
          responseObject[kState].body = body;
          responseObject[kHeaders][kHeadersList] = response.headersList;
          responseObject[kHeaders][kGuard] = "immutable";
          responseList.push(responseObject);
        }
        return Object.freeze(responseList);
      }
      async add(request) {
        webidl.brandCheck(this, Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.add" });
        request = webidl.converters.RequestInfo(request);
        const requests = [request];
        const responseArrayPromise = this.addAll(requests);
        return await responseArrayPromise;
      }
      async addAll(requests) {
        webidl.brandCheck(this, Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" });
        requests = webidl.converters["sequence<RequestInfo>"](requests);
        const responsePromises = [];
        const requestList = [];
        for (const request of requests) {
          if (typeof request === "string") {
            continue;
          }
          const r = request[kState];
          if (!urlIsHttpHttpsScheme(r.url) || r.method !== "GET") {
            throw webidl.errors.exception({
              header: "Cache.addAll",
              message: "Expected http/s scheme when method is not GET."
            });
          }
        }
        const fetchControllers = [];
        for (const request of requests) {
          const r = new Request3(request)[kState];
          if (!urlIsHttpHttpsScheme(r.url)) {
            throw webidl.errors.exception({
              header: "Cache.addAll",
              message: "Expected http/s scheme."
            });
          }
          r.initiator = "fetch";
          r.destination = "subresource";
          requestList.push(r);
          const responsePromise = createDeferredPromise();
          fetchControllers.push(fetching({
            request: r,
            dispatcher: getGlobalDispatcher(),
            processResponse(response) {
              if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) {
                responsePromise.reject(webidl.errors.exception({
                  header: "Cache.addAll",
                  message: "Received an invalid status code or the request failed."
                }));
              } else if (response.headersList.contains("vary")) {
                const fieldValues = getFieldValues(response.headersList.get("vary"));
                for (const fieldValue of fieldValues) {
                  if (fieldValue === "*") {
                    responsePromise.reject(webidl.errors.exception({
                      header: "Cache.addAll",
                      message: "invalid vary field value"
                    }));
                    for (const controller of fetchControllers) {
                      controller.abort();
                    }
                    return;
                  }
                }
              }
            },
            processResponseEndOfBody(response) {
              if (response.aborted) {
                responsePromise.reject(new DOMException("aborted", "AbortError"));
                return;
              }
              responsePromise.resolve(response);
            }
          }));
          responsePromises.push(responsePromise.promise);
        }
        const p = Promise.all(responsePromises);
        const responses = await p;
        const operations = [];
        let index13 = 0;
        for (const response of responses) {
          const operation = {
            type: "put",
            // 7.3.2
            request: requestList[index13],
            // 7.3.3
            response
            // 7.3.4
          };
          operations.push(operation);
          index13++;
        }
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        try {
          this.#batchCacheOperations(operations);
        } catch (e) {
          errorData = e;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve(void 0);
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      async put(request, response) {
        webidl.brandCheck(this, Cache);
        webidl.argumentLengthCheck(arguments, 2, { header: "Cache.put" });
        request = webidl.converters.RequestInfo(request);
        response = webidl.converters.Response(response);
        let innerRequest = null;
        if (request instanceof Request3) {
          innerRequest = request[kState];
        } else {
          innerRequest = new Request3(request)[kState];
        }
        if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Expected an http/s scheme when method is not GET"
          });
        }
        const innerResponse = response[kState];
        if (innerResponse.status === 206) {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Got 206 status"
          });
        }
        if (innerResponse.headersList.contains("vary")) {
          const fieldValues = getFieldValues(innerResponse.headersList.get("vary"));
          for (const fieldValue of fieldValues) {
            if (fieldValue === "*") {
              throw webidl.errors.exception({
                header: "Cache.put",
                message: "Got * vary field value"
              });
            }
          }
        }
        if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Response body is locked or disturbed"
          });
        }
        const clonedResponse = cloneResponse(innerResponse);
        const bodyReadPromise = createDeferredPromise();
        if (innerResponse.body != null) {
          const stream = innerResponse.body.stream;
          const reader = stream.getReader();
          readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
        } else {
          bodyReadPromise.resolve(void 0);
        }
        const operations = [];
        const operation = {
          type: "put",
          // 14.
          request: innerRequest,
          // 15.
          response: clonedResponse
          // 16.
        };
        operations.push(operation);
        const bytes = await bodyReadPromise.promise;
        if (clonedResponse.body != null) {
          clonedResponse.body.source = bytes;
        }
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        try {
          this.#batchCacheOperations(operations);
        } catch (e) {
          errorData = e;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve();
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      async delete(request, options2 = {}) {
        webidl.brandCheck(this, Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.delete" });
        request = webidl.converters.RequestInfo(request);
        options2 = webidl.converters.CacheQueryOptions(options2);
        let r = null;
        if (request instanceof Request3) {
          r = request[kState];
          if (r.method !== "GET" && !options2.ignoreMethod) {
            return false;
          }
        } else {
          assert(typeof request === "string");
          r = new Request3(request)[kState];
        }
        const operations = [];
        const operation = {
          type: "delete",
          request: r,
          options: options2
        };
        operations.push(operation);
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        let requestResponses;
        try {
          requestResponses = this.#batchCacheOperations(operations);
        } catch (e) {
          errorData = e;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve(!!(requestResponses == null ? void 0 : requestResponses.length));
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
       * @param {any} request
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @returns {readonly Request[]}
       */
      async keys(request = void 0, options2 = {}) {
        webidl.brandCheck(this, Cache);
        if (request !== void 0)
          request = webidl.converters.RequestInfo(request);
        options2 = webidl.converters.CacheQueryOptions(options2);
        let r = null;
        if (request !== void 0) {
          if (request instanceof Request3) {
            r = request[kState];
            if (r.method !== "GET" && !options2.ignoreMethod) {
              return [];
            }
          } else if (typeof request === "string") {
            r = new Request3(request)[kState];
          }
        }
        const promise = createDeferredPromise();
        const requests = [];
        if (request === void 0) {
          for (const requestResponse of this.#relevantRequestResponseList) {
            requests.push(requestResponse[0]);
          }
        } else {
          const requestResponses = this.#queryCache(r, options2);
          for (const requestResponse of requestResponses) {
            requests.push(requestResponse[0]);
          }
        }
        queueMicrotask(() => {
          const requestList = [];
          for (const request2 of requests) {
            const requestObject = new Request3("https://a");
            requestObject[kState] = request2;
            requestObject[kHeaders][kHeadersList] = request2.headersList;
            requestObject[kHeaders][kGuard] = "immutable";
            requestObject[kRealm] = request2.client;
            requestList.push(requestObject);
          }
          promise.resolve(Object.freeze(requestList));
        });
        return promise.promise;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
       * @param {CacheBatchOperation[]} operations
       * @returns {requestResponseList}
       */
      #batchCacheOperations(operations) {
        const cache = this.#relevantRequestResponseList;
        const backupCache = [...cache];
        const addedItems = [];
        const resultList = [];
        try {
          for (const operation of operations) {
            if (operation.type !== "delete" && operation.type !== "put") {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: 'operation type does not match "delete" or "put"'
              });
            }
            if (operation.type === "delete" && operation.response != null) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "delete operation should not have an associated response"
              });
            }
            if (this.#queryCache(operation.request, operation.options, addedItems).length) {
              throw new DOMException("???", "InvalidStateError");
            }
            let requestResponses;
            if (operation.type === "delete") {
              requestResponses = this.#queryCache(operation.request, operation.options);
              if (requestResponses.length === 0) {
                return [];
              }
              for (const requestResponse of requestResponses) {
                const idx = cache.indexOf(requestResponse);
                assert(idx !== -1);
                cache.splice(idx, 1);
              }
            } else if (operation.type === "put") {
              if (operation.response == null) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "put operation should have an associated response"
                });
              }
              const r = operation.request;
              if (!urlIsHttpHttpsScheme(r.url)) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "expected http or https scheme"
                });
              }
              if (r.method !== "GET") {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "not get method"
                });
              }
              if (operation.options != null) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "options must not be defined"
                });
              }
              requestResponses = this.#queryCache(operation.request);
              for (const requestResponse of requestResponses) {
                const idx = cache.indexOf(requestResponse);
                assert(idx !== -1);
                cache.splice(idx, 1);
              }
              cache.push([operation.request, operation.response]);
              addedItems.push([operation.request, operation.response]);
            }
            resultList.push([operation.request, operation.response]);
          }
          return resultList;
        } catch (e) {
          this.#relevantRequestResponseList.length = 0;
          this.#relevantRequestResponseList = backupCache;
          throw e;
        }
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#query-cache
       * @param {any} requestQuery
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @param {requestResponseList} targetStorage
       * @returns {requestResponseList}
       */
      #queryCache(requestQuery, options2, targetStorage) {
        const resultList = [];
        const storage = targetStorage ?? this.#relevantRequestResponseList;
        for (const requestResponse of storage) {
          const [cachedRequest, cachedResponse] = requestResponse;
          if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options2)) {
            resultList.push(requestResponse);
          }
        }
        return resultList;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
       * @param {any} requestQuery
       * @param {any} request
       * @param {any | null} response
       * @param {import('../../types/cache').CacheQueryOptions | undefined} options
       * @returns {boolean}
       */
      #requestMatchesCachedItem(requestQuery, request, response = null, options2) {
        const queryURL = new URL(requestQuery.url);
        const cachedURL = new URL(request.url);
        if (options2 == null ? void 0 : options2.ignoreSearch) {
          cachedURL.search = "";
          queryURL.search = "";
        }
        if (!urlEquals(queryURL, cachedURL, true)) {
          return false;
        }
        if (response == null || (options2 == null ? void 0 : options2.ignoreVary) || !response.headersList.contains("vary")) {
          return true;
        }
        const fieldValues = getFieldValues(response.headersList.get("vary"));
        for (const fieldValue of fieldValues) {
          if (fieldValue === "*") {
            return false;
          }
          const requestValue = request.headersList.get(fieldValue);
          const queryValue = requestQuery.headersList.get(fieldValue);
          if (requestValue !== queryValue) {
            return false;
          }
        }
        return true;
      }
    };
    Object.defineProperties(Cache.prototype, {
      [Symbol.toStringTag]: {
        value: "Cache",
        configurable: true
      },
      match: kEnumerableProperty,
      matchAll: kEnumerableProperty,
      add: kEnumerableProperty,
      addAll: kEnumerableProperty,
      put: kEnumerableProperty,
      delete: kEnumerableProperty,
      keys: kEnumerableProperty
    });
    var cacheQueryOptionConverters = [
      {
        key: "ignoreSearch",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "ignoreMethod",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "ignoreVary",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ];
    webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);
    webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
      ...cacheQueryOptionConverters,
      {
        key: "cacheName",
        converter: webidl.converters.DOMString
      }
    ]);
    webidl.converters.Response = webidl.interfaceConverter(Response3);
    webidl.converters["sequence<RequestInfo>"] = webidl.sequenceConverter(
      webidl.converters.RequestInfo
    );
    module2.exports = {
      Cache
    };
  }
});

// node_modules/undici/lib/cache/cachestorage.js
var require_cachestorage = __commonJS({
  "node_modules/undici/lib/cache/cachestorage.js"(exports, module2) {
    "use strict";
    var { kConstruct } = require_symbols4();
    var { Cache } = require_cache();
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util();
    var CacheStorage = class {
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
       * @type {Map<string, import('./cache').requestResponseList}
       */
      #caches = /* @__PURE__ */ new Map();
      constructor() {
        if (arguments[0] !== kConstruct) {
          webidl.illegalConstructor();
        }
      }
      async match(request, options2 = {}) {
        webidl.brandCheck(this, CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.match" });
        request = webidl.converters.RequestInfo(request);
        options2 = webidl.converters.MultiCacheQueryOptions(options2);
        if (options2.cacheName != null) {
          if (this.#caches.has(options2.cacheName)) {
            const cacheList = this.#caches.get(options2.cacheName);
            const cache = new Cache(kConstruct, cacheList);
            return await cache.match(request, options2);
          }
        } else {
          for (const cacheList of this.#caches.values()) {
            const cache = new Cache(kConstruct, cacheList);
            const response = await cache.match(request, options2);
            if (response !== void 0) {
              return response;
            }
          }
        }
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
       * @param {string} cacheName
       * @returns {Promise<boolean>}
       */
      async has(cacheName) {
        webidl.brandCheck(this, CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.has" });
        cacheName = webidl.converters.DOMString(cacheName);
        return this.#caches.has(cacheName);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
       * @param {string} cacheName
       * @returns {Promise<Cache>}
       */
      async open(cacheName) {
        webidl.brandCheck(this, CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.open" });
        cacheName = webidl.converters.DOMString(cacheName);
        if (this.#caches.has(cacheName)) {
          const cache2 = this.#caches.get(cacheName);
          return new Cache(kConstruct, cache2);
        }
        const cache = [];
        this.#caches.set(cacheName, cache);
        return new Cache(kConstruct, cache);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
       * @param {string} cacheName
       * @returns {Promise<boolean>}
       */
      async delete(cacheName) {
        webidl.brandCheck(this, CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.delete" });
        cacheName = webidl.converters.DOMString(cacheName);
        return this.#caches.delete(cacheName);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
       * @returns {string[]}
       */
      async keys() {
        webidl.brandCheck(this, CacheStorage);
        const keys = this.#caches.keys();
        return [...keys];
      }
    };
    Object.defineProperties(CacheStorage.prototype, {
      [Symbol.toStringTag]: {
        value: "CacheStorage",
        configurable: true
      },
      match: kEnumerableProperty,
      has: kEnumerableProperty,
      open: kEnumerableProperty,
      delete: kEnumerableProperty,
      keys: kEnumerableProperty
    });
    module2.exports = {
      CacheStorage
    };
  }
});

// node_modules/undici/lib/cookies/constants.js
var require_constants3 = __commonJS({
  "node_modules/undici/lib/cookies/constants.js"(exports, module2) {
    "use strict";
    var maxAttributeValueSize = 1024;
    var maxNameValuePairSize = 4096;
    module2.exports = {
      maxAttributeValueSize,
      maxNameValuePairSize
    };
  }
});

// node_modules/undici/lib/cookies/util.js
var require_util6 = __commonJS({
  "node_modules/undici/lib/cookies/util.js"(exports, module2) {
    "use strict";
    var assert = require("assert");
    var { kHeadersList } = require_symbols();
    function isCTLExcludingHtab(value) {
      if (value.length === 0) {
        return false;
      }
      for (const char of value) {
        const code = char.charCodeAt(0);
        if (code >= 0 || code <= 8 || (code >= 10 || code <= 31) || code === 127) {
          return false;
        }
      }
    }
    function validateCookieName(name) {
      for (const char of name) {
        const code = char.charCodeAt(0);
        if (code <= 32 || code > 127 || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") {
          throw new Error("Invalid cookie name");
        }
      }
    }
    function validateCookieValue(value) {
      for (const char of value) {
        const code = char.charCodeAt(0);
        if (code < 33 || // exclude CTLs (0-31)
        code === 34 || code === 44 || code === 59 || code === 92 || code > 126) {
          throw new Error("Invalid header value");
        }
      }
    }
    function validateCookiePath(path2) {
      for (const char of path2) {
        const code = char.charCodeAt(0);
        if (code < 33 || char === ";") {
          throw new Error("Invalid cookie path");
        }
      }
    }
    function validateCookieDomain(domain) {
      if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) {
        throw new Error("Invalid cookie domain");
      }
    }
    function toIMFDate(date) {
      if (typeof date === "number") {
        date = new Date(date);
      }
      const days = [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
      ];
      const months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ];
      const dayName = days[date.getUTCDay()];
      const day = date.getUTCDate().toString().padStart(2, "0");
      const month = months[date.getUTCMonth()];
      const year = date.getUTCFullYear();
      const hour = date.getUTCHours().toString().padStart(2, "0");
      const minute = date.getUTCMinutes().toString().padStart(2, "0");
      const second = date.getUTCSeconds().toString().padStart(2, "0");
      return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
    }
    function validateCookieMaxAge(maxAge) {
      if (maxAge < 0) {
        throw new Error("Invalid cookie max-age");
      }
    }
    function stringify2(cookie) {
      if (cookie.name.length === 0) {
        return null;
      }
      validateCookieName(cookie.name);
      validateCookieValue(cookie.value);
      const out = [`${cookie.name}=${cookie.value}`];
      if (cookie.name.startsWith("__Secure-")) {
        cookie.secure = true;
      }
      if (cookie.name.startsWith("__Host-")) {
        cookie.secure = true;
        cookie.domain = null;
        cookie.path = "/";
      }
      if (cookie.secure) {
        out.push("Secure");
      }
      if (cookie.httpOnly) {
        out.push("HttpOnly");
      }
      if (typeof cookie.maxAge === "number") {
        validateCookieMaxAge(cookie.maxAge);
        out.push(`Max-Age=${cookie.maxAge}`);
      }
      if (cookie.domain) {
        validateCookieDomain(cookie.domain);
        out.push(`Domain=${cookie.domain}`);
      }
      if (cookie.path) {
        validateCookiePath(cookie.path);
        out.push(`Path=${cookie.path}`);
      }
      if (cookie.expires && cookie.expires.toString() !== "Invalid Date") {
        out.push(`Expires=${toIMFDate(cookie.expires)}`);
      }
      if (cookie.sameSite) {
        out.push(`SameSite=${cookie.sameSite}`);
      }
      for (const part of cookie.unparsed) {
        if (!part.includes("=")) {
          throw new Error("Invalid unparsed");
        }
        const [key2, ...value] = part.split("=");
        out.push(`${key2.trim()}=${value.join("=")}`);
      }
      return out.join("; ");
    }
    var kHeadersListNode;
    function getHeadersList(headers) {
      if (headers[kHeadersList]) {
        return headers[kHeadersList];
      }
      if (!kHeadersListNode) {
        kHeadersListNode = Object.getOwnPropertySymbols(headers).find(
          (symbol) => symbol.description === "headers list"
        );
        assert(kHeadersListNode, "Headers cannot be parsed");
      }
      const headersList = headers[kHeadersListNode];
      assert(headersList);
      return headersList;
    }
    module2.exports = {
      isCTLExcludingHtab,
      stringify: stringify2,
      getHeadersList
    };
  }
});

// node_modules/undici/lib/cookies/parse.js
var require_parse = __commonJS({
  "node_modules/undici/lib/cookies/parse.js"(exports, module2) {
    "use strict";
    var { maxNameValuePairSize, maxAttributeValueSize } = require_constants3();
    var { isCTLExcludingHtab } = require_util6();
    var { collectASequenceOfCodePointsFast } = require_dataURL();
    var assert = require("assert");
    function parseSetCookie(header) {
      if (isCTLExcludingHtab(header)) {
        return null;
      }
      let nameValuePair = "";
      let unparsedAttributes = "";
      let name = "";
      let value = "";
      if (header.includes(";")) {
        const position = { position: 0 };
        nameValuePair = collectASequenceOfCodePointsFast(";", header, position);
        unparsedAttributes = header.slice(position.position);
      } else {
        nameValuePair = header;
      }
      if (!nameValuePair.includes("=")) {
        value = nameValuePair;
      } else {
        const position = { position: 0 };
        name = collectASequenceOfCodePointsFast(
          "=",
          nameValuePair,
          position
        );
        value = nameValuePair.slice(position.position + 1);
      }
      name = name.trim();
      value = value.trim();
      if (name.length + value.length > maxNameValuePairSize) {
        return null;
      }
      return {
        name,
        value,
        ...parseUnparsedAttributes(unparsedAttributes)
      };
    }
    function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
      if (unparsedAttributes.length === 0) {
        return cookieAttributeList;
      }
      assert(unparsedAttributes[0] === ";");
      unparsedAttributes = unparsedAttributes.slice(1);
      let cookieAv = "";
      if (unparsedAttributes.includes(";")) {
        cookieAv = collectASequenceOfCodePointsFast(
          ";",
          unparsedAttributes,
          { position: 0 }
        );
        unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
      } else {
        cookieAv = unparsedAttributes;
        unparsedAttributes = "";
      }
      let attributeName = "";
      let attributeValue = "";
      if (cookieAv.includes("=")) {
        const position = { position: 0 };
        attributeName = collectASequenceOfCodePointsFast(
          "=",
          cookieAv,
          position
        );
        attributeValue = cookieAv.slice(position.position + 1);
      } else {
        attributeName = cookieAv;
      }
      attributeName = attributeName.trim();
      attributeValue = attributeValue.trim();
      if (attributeValue.length > maxAttributeValueSize) {
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      }
      const attributeNameLowercase = attributeName.toLowerCase();
      if (attributeNameLowercase === "expires") {
        const expiryTime = new Date(attributeValue);
        cookieAttributeList.expires = expiryTime;
      } else if (attributeNameLowercase === "max-age") {
        const charCode = attributeValue.charCodeAt(0);
        if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") {
          return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        }
        if (!/^\d+$/.test(attributeValue)) {
          return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        }
        const deltaSeconds = Number(attributeValue);
        cookieAttributeList.maxAge = deltaSeconds;
      } else if (attributeNameLowercase === "domain") {
        let cookieDomain = attributeValue;
        if (cookieDomain[0] === ".") {
          cookieDomain = cookieDomain.slice(1);
        }
        cookieDomain = cookieDomain.toLowerCase();
        cookieAttributeList.domain = cookieDomain;
      } else if (attributeNameLowercase === "path") {
        let cookiePath = "";
        if (attributeValue.length === 0 || attributeValue[0] !== "/") {
          cookiePath = "/";
        } else {
          cookiePath = attributeValue;
        }
        cookieAttributeList.path = cookiePath;
      } else if (attributeNameLowercase === "secure") {
        cookieAttributeList.secure = true;
      } else if (attributeNameLowercase === "httponly") {
        cookieAttributeList.httpOnly = true;
      } else if (attributeNameLowercase === "samesite") {
        let enforcement = "Default";
        const attributeValueLowercase = attributeValue.toLowerCase();
        if (attributeValueLowercase.includes("none")) {
          enforcement = "None";
        }
        if (attributeValueLowercase.includes("strict")) {
          enforcement = "Strict";
        }
        if (attributeValueLowercase.includes("lax")) {
          enforcement = "Lax";
        }
        cookieAttributeList.sameSite = enforcement;
      } else {
        cookieAttributeList.unparsed ??= [];
        cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
      }
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
    }
    module2.exports = {
      parseSetCookie,
      parseUnparsedAttributes
    };
  }
});

// node_modules/undici/lib/cookies/index.js
var require_cookies = __commonJS({
  "node_modules/undici/lib/cookies/index.js"(exports, module2) {
    "use strict";
    var { parseSetCookie } = require_parse();
    var { stringify: stringify2, getHeadersList } = require_util6();
    var { webidl } = require_webidl();
    var { Headers: Headers3 } = require_headers();
    function getCookies(headers) {
      webidl.argumentLengthCheck(arguments, 1, { header: "getCookies" });
      webidl.brandCheck(headers, Headers3, { strict: false });
      const cookie = headers.get("cookie");
      const out = {};
      if (!cookie) {
        return out;
      }
      for (const piece of cookie.split(";")) {
        const [name, ...value] = piece.split("=");
        out[name.trim()] = value.join("=");
      }
      return out;
    }
    function deleteCookie(headers, name, attributes) {
      webidl.argumentLengthCheck(arguments, 2, { header: "deleteCookie" });
      webidl.brandCheck(headers, Headers3, { strict: false });
      name = webidl.converters.DOMString(name);
      attributes = webidl.converters.DeleteCookieAttributes(attributes);
      setCookie(headers, {
        name,
        value: "",
        expires: /* @__PURE__ */ new Date(0),
        ...attributes
      });
    }
    function getSetCookies(headers) {
      webidl.argumentLengthCheck(arguments, 1, { header: "getSetCookies" });
      webidl.brandCheck(headers, Headers3, { strict: false });
      const cookies = getHeadersList(headers).cookies;
      if (!cookies) {
        return [];
      }
      return cookies.map((pair) => parseSetCookie(Array.isArray(pair) ? pair[1] : pair));
    }
    function setCookie(headers, cookie) {
      webidl.argumentLengthCheck(arguments, 2, { header: "setCookie" });
      webidl.brandCheck(headers, Headers3, { strict: false });
      cookie = webidl.converters.Cookie(cookie);
      const str = stringify2(cookie);
      if (str) {
        headers.append("Set-Cookie", stringify2(cookie));
      }
    }
    webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "path",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
      }
    ]);
    webidl.converters.Cookie = webidl.dictionaryConverter([
      {
        converter: webidl.converters.DOMString,
        key: "name"
      },
      {
        converter: webidl.converters.DOMString,
        key: "value"
      },
      {
        converter: webidl.nullableConverter((value) => {
          if (typeof value === "number") {
            return webidl.converters["unsigned long long"](value);
          }
          return new Date(value);
        }),
        key: "expires",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters["long long"]),
        key: "maxAge",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "path",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.boolean),
        key: "secure",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.boolean),
        key: "httpOnly",
        defaultValue: null
      },
      {
        converter: webidl.converters.USVString,
        key: "sameSite",
        allowedValues: ["Strict", "Lax", "None"]
      },
      {
        converter: webidl.sequenceConverter(webidl.converters.DOMString),
        key: "unparsed",
        defaultValue: []
      }
    ]);
    module2.exports = {
      getCookies,
      deleteCookie,
      getSetCookies,
      setCookie
    };
  }
});

// node_modules/undici/lib/websocket/constants.js
var require_constants4 = __commonJS({
  "node_modules/undici/lib/websocket/constants.js"(exports, module2) {
    "use strict";
    var uid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
    var staticPropertyDescriptors = {
      enumerable: true,
      writable: false,
      configurable: false
    };
    var states = {
      CONNECTING: 0,
      OPEN: 1,
      CLOSING: 2,
      CLOSED: 3
    };
    var opcodes = {
      CONTINUATION: 0,
      TEXT: 1,
      BINARY: 2,
      CLOSE: 8,
      PING: 9,
      PONG: 10
    };
    var maxUnsigned16Bit = 2 ** 16 - 1;
    var parserStates = {
      INFO: 0,
      PAYLOADLENGTH_16: 2,
      PAYLOADLENGTH_64: 3,
      READ_DATA: 4
    };
    var emptyBuffer = Buffer.allocUnsafe(0);
    module2.exports = {
      uid,
      staticPropertyDescriptors,
      states,
      opcodes,
      maxUnsigned16Bit,
      parserStates,
      emptyBuffer
    };
  }
});

// node_modules/undici/lib/websocket/symbols.js
var require_symbols5 = __commonJS({
  "node_modules/undici/lib/websocket/symbols.js"(exports, module2) {
    "use strict";
    module2.exports = {
      kWebSocketURL: Symbol("url"),
      kReadyState: Symbol("ready state"),
      kController: Symbol("controller"),
      kResponse: Symbol("response"),
      kBinaryType: Symbol("binary type"),
      kSentClose: Symbol("sent close"),
      kReceivedClose: Symbol("received close"),
      kByteParser: Symbol("byte parser")
    };
  }
});

// node_modules/undici/lib/websocket/events.js
var require_events = __commonJS({
  "node_modules/undici/lib/websocket/events.js"(exports, module2) {
    "use strict";
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util();
    var { MessagePort } = require("worker_threads");
    var MessageEvent = class extends Event {
      #eventInit;
      constructor(type, eventInitDict = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent constructor" });
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.MessageEventInit(eventInitDict);
        super(type, eventInitDict);
        this.#eventInit = eventInitDict;
      }
      get data() {
        webidl.brandCheck(this, MessageEvent);
        return this.#eventInit.data;
      }
      get origin() {
        webidl.brandCheck(this, MessageEvent);
        return this.#eventInit.origin;
      }
      get lastEventId() {
        webidl.brandCheck(this, MessageEvent);
        return this.#eventInit.lastEventId;
      }
      get source() {
        webidl.brandCheck(this, MessageEvent);
        return this.#eventInit.source;
      }
      get ports() {
        webidl.brandCheck(this, MessageEvent);
        if (!Object.isFrozen(this.#eventInit.ports)) {
          Object.freeze(this.#eventInit.ports);
        }
        return this.#eventInit.ports;
      }
      initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = "", lastEventId = "", source = null, ports = []) {
        webidl.brandCheck(this, MessageEvent);
        webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent.initMessageEvent" });
        return new MessageEvent(type, {
          bubbles,
          cancelable,
          data,
          origin,
          lastEventId,
          source,
          ports
        });
      }
    };
    var CloseEvent = class extends Event {
      #eventInit;
      constructor(type, eventInitDict = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "CloseEvent constructor" });
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.CloseEventInit(eventInitDict);
        super(type, eventInitDict);
        this.#eventInit = eventInitDict;
      }
      get wasClean() {
        webidl.brandCheck(this, CloseEvent);
        return this.#eventInit.wasClean;
      }
      get code() {
        webidl.brandCheck(this, CloseEvent);
        return this.#eventInit.code;
      }
      get reason() {
        webidl.brandCheck(this, CloseEvent);
        return this.#eventInit.reason;
      }
    };
    var ErrorEvent = class extends Event {
      #eventInit;
      constructor(type, eventInitDict) {
        webidl.argumentLengthCheck(arguments, 1, { header: "ErrorEvent constructor" });
        super(type, eventInitDict);
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});
        this.#eventInit = eventInitDict;
      }
      get message() {
        webidl.brandCheck(this, ErrorEvent);
        return this.#eventInit.message;
      }
      get filename() {
        webidl.brandCheck(this, ErrorEvent);
        return this.#eventInit.filename;
      }
      get lineno() {
        webidl.brandCheck(this, ErrorEvent);
        return this.#eventInit.lineno;
      }
      get colno() {
        webidl.brandCheck(this, ErrorEvent);
        return this.#eventInit.colno;
      }
      get error() {
        webidl.brandCheck(this, ErrorEvent);
        return this.#eventInit.error;
      }
    };
    Object.defineProperties(MessageEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "MessageEvent",
        configurable: true
      },
      data: kEnumerableProperty,
      origin: kEnumerableProperty,
      lastEventId: kEnumerableProperty,
      source: kEnumerableProperty,
      ports: kEnumerableProperty,
      initMessageEvent: kEnumerableProperty
    });
    Object.defineProperties(CloseEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "CloseEvent",
        configurable: true
      },
      reason: kEnumerableProperty,
      code: kEnumerableProperty,
      wasClean: kEnumerableProperty
    });
    Object.defineProperties(ErrorEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "ErrorEvent",
        configurable: true
      },
      message: kEnumerableProperty,
      filename: kEnumerableProperty,
      lineno: kEnumerableProperty,
      colno: kEnumerableProperty,
      error: kEnumerableProperty
    });
    webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);
    webidl.converters["sequence<MessagePort>"] = webidl.sequenceConverter(
      webidl.converters.MessagePort
    );
    var eventInit = [
      {
        key: "bubbles",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "cancelable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "composed",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ];
    webidl.converters.MessageEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "data",
        converter: webidl.converters.any,
        defaultValue: null
      },
      {
        key: "origin",
        converter: webidl.converters.USVString,
        defaultValue: ""
      },
      {
        key: "lastEventId",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "source",
        // Node doesn't implement WindowProxy or ServiceWorker, so the only
        // valid value for source is a MessagePort.
        converter: webidl.nullableConverter(webidl.converters.MessagePort),
        defaultValue: null
      },
      {
        key: "ports",
        converter: webidl.converters["sequence<MessagePort>"],
        get defaultValue() {
          return [];
        }
      }
    ]);
    webidl.converters.CloseEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "wasClean",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "code",
        converter: webidl.converters["unsigned short"],
        defaultValue: 0
      },
      {
        key: "reason",
        converter: webidl.converters.USVString,
        defaultValue: ""
      }
    ]);
    webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "message",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "filename",
        converter: webidl.converters.USVString,
        defaultValue: ""
      },
      {
        key: "lineno",
        converter: webidl.converters["unsigned long"],
        defaultValue: 0
      },
      {
        key: "colno",
        converter: webidl.converters["unsigned long"],
        defaultValue: 0
      },
      {
        key: "error",
        converter: webidl.converters.any
      }
    ]);
    module2.exports = {
      MessageEvent,
      CloseEvent,
      ErrorEvent
    };
  }
});

// node_modules/undici/lib/websocket/util.js
var require_util7 = __commonJS({
  "node_modules/undici/lib/websocket/util.js"(exports, module2) {
    "use strict";
    var { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = require_symbols5();
    var { states, opcodes } = require_constants4();
    var { MessageEvent, ErrorEvent } = require_events();
    function isEstablished(ws) {
      return ws[kReadyState] === states.OPEN;
    }
    function isClosing(ws) {
      return ws[kReadyState] === states.CLOSING;
    }
    function isClosed(ws) {
      return ws[kReadyState] === states.CLOSED;
    }
    function fireEvent(e, target, eventConstructor = Event, eventInitDict) {
      const event = new eventConstructor(e, eventInitDict);
      target.dispatchEvent(event);
    }
    function websocketMessageReceived(ws, type, data) {
      if (ws[kReadyState] !== states.OPEN) {
        return;
      }
      let dataForEvent;
      if (type === opcodes.TEXT) {
        try {
          dataForEvent = new TextDecoder("utf-8", { fatal: true }).decode(data);
        } catch {
          failWebsocketConnection(ws, "Received invalid UTF-8 in text frame.");
          return;
        }
      } else if (type === opcodes.BINARY) {
        if (ws[kBinaryType] === "blob") {
          dataForEvent = new Blob([data]);
        } else {
          dataForEvent = new Uint8Array(data).buffer;
        }
      }
      fireEvent("message", ws, MessageEvent, {
        origin: ws[kWebSocketURL].origin,
        data: dataForEvent
      });
    }
    function isValidSubprotocol(protocol) {
      if (protocol.length === 0) {
        return false;
      }
      for (const char of protocol) {
        const code = char.charCodeAt(0);
        if (code < 33 || code > 126 || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code === 32 || // SP
        code === 9) {
          return false;
        }
      }
      return true;
    }
    function isValidStatusCode(code) {
      if (code >= 1e3 && code < 1015) {
        return code !== 1004 && // reserved
        code !== 1005 && // "MUST NOT be set as a status code"
        code !== 1006;
      }
      return code >= 3e3 && code <= 4999;
    }
    function failWebsocketConnection(ws, reason) {
      const { [kController]: controller, [kResponse]: response } = ws;
      controller.abort();
      if ((response == null ? void 0 : response.socket) && !response.socket.destroyed) {
        response.socket.destroy();
      }
      if (reason) {
        fireEvent("error", ws, ErrorEvent, {
          error: new Error(reason)
        });
      }
    }
    module2.exports = {
      isEstablished,
      isClosing,
      isClosed,
      fireEvent,
      isValidSubprotocol,
      isValidStatusCode,
      failWebsocketConnection,
      websocketMessageReceived
    };
  }
});

// node_modules/undici/lib/websocket/connection.js
var require_connection = __commonJS({
  "node_modules/undici/lib/websocket/connection.js"(exports, module2) {
    "use strict";
    var diagnosticsChannel = require("diagnostics_channel");
    var { uid, states } = require_constants4();
    var {
      kReadyState,
      kSentClose,
      kByteParser,
      kReceivedClose
    } = require_symbols5();
    var { fireEvent, failWebsocketConnection } = require_util7();
    var { CloseEvent } = require_events();
    var { makeRequest } = require_request2();
    var { fetching } = require_fetch();
    var { Headers: Headers3 } = require_headers();
    var { getGlobalDispatcher } = require_global2();
    var { kHeadersList } = require_symbols();
    var channels = {};
    channels.open = diagnosticsChannel.channel("undici:websocket:open");
    channels.close = diagnosticsChannel.channel("undici:websocket:close");
    channels.socketError = diagnosticsChannel.channel("undici:websocket:socket_error");
    var crypto3;
    try {
      crypto3 = require("crypto");
    } catch {
    }
    function establishWebSocketConnection(url, protocols, ws, onEstablish, options2) {
      const requestURL = url;
      requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
      const request = makeRequest({
        urlList: [requestURL],
        serviceWorkers: "none",
        referrer: "no-referrer",
        mode: "websocket",
        credentials: "include",
        cache: "no-store",
        redirect: "error"
      });
      if (options2.headers) {
        const headersList = new Headers3(options2.headers)[kHeadersList];
        request.headersList = headersList;
      }
      const keyValue = crypto3.randomBytes(16).toString("base64");
      request.headersList.append("sec-websocket-key", keyValue);
      request.headersList.append("sec-websocket-version", "13");
      for (const protocol of protocols) {
        request.headersList.append("sec-websocket-protocol", protocol);
      }
      const permessageDeflate = "";
      const controller = fetching({
        request,
        useParallelQueue: true,
        dispatcher: options2.dispatcher ?? getGlobalDispatcher(),
        processResponse(response) {
          var _a, _b;
          if (response.type === "error" || response.status !== 101) {
            failWebsocketConnection(ws, "Received network error or non-101 status code.");
            return;
          }
          if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
            failWebsocketConnection(ws, "Server did not respond with sent protocols.");
            return;
          }
          if (((_a = response.headersList.get("Upgrade")) == null ? void 0 : _a.toLowerCase()) !== "websocket") {
            failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".');
            return;
          }
          if (((_b = response.headersList.get("Connection")) == null ? void 0 : _b.toLowerCase()) !== "upgrade") {
            failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".');
            return;
          }
          const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
          const digest = crypto3.createHash("sha1").update(keyValue + uid).digest("base64");
          if (secWSAccept !== digest) {
            failWebsocketConnection(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
            return;
          }
          const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
          if (secExtension !== null && secExtension !== permessageDeflate) {
            failWebsocketConnection(ws, "Received different permessage-deflate than the one set.");
            return;
          }
          const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
          if (secProtocol !== null && secProtocol !== request.headersList.get("Sec-WebSocket-Protocol")) {
            failWebsocketConnection(ws, "Protocol was not set in the opening handshake.");
            return;
          }
          response.socket.on("data", onSocketData);
          response.socket.on("close", onSocketClose);
          response.socket.on("error", onSocketError);
          if (channels.open.hasSubscribers) {
            channels.open.publish({
              address: response.socket.address(),
              protocol: secProtocol,
              extensions: secExtension
            });
          }
          onEstablish(response);
        }
      });
      return controller;
    }
    function onSocketData(chunk) {
      if (!this.ws[kByteParser].write(chunk)) {
        this.pause();
      }
    }
    function onSocketClose() {
      const { ws } = this;
      const wasClean = ws[kSentClose] && ws[kReceivedClose];
      let code = 1005;
      let reason = "";
      const result = ws[kByteParser].closingInfo;
      if (result) {
        code = result.code ?? 1005;
        reason = result.reason;
      } else if (!ws[kSentClose]) {
        code = 1006;
      }
      ws[kReadyState] = states.CLOSED;
      fireEvent("close", ws, CloseEvent, {
        wasClean,
        code,
        reason
      });
      if (channels.close.hasSubscribers) {
        channels.close.publish({
          websocket: ws,
          code,
          reason
        });
      }
    }
    function onSocketError(error3) {
      const { ws } = this;
      ws[kReadyState] = states.CLOSING;
      if (channels.socketError.hasSubscribers) {
        channels.socketError.publish(error3);
      }
      this.destroy();
    }
    module2.exports = {
      establishWebSocketConnection
    };
  }
});

// node_modules/undici/lib/websocket/frame.js
var require_frame = __commonJS({
  "node_modules/undici/lib/websocket/frame.js"(exports, module2) {
    "use strict";
    var { maxUnsigned16Bit } = require_constants4();
    var crypto3;
    try {
      crypto3 = require("crypto");
    } catch {
    }
    var WebsocketFrameSend = class {
      /**
       * @param {Buffer|undefined} data
       */
      constructor(data) {
        this.frameData = data;
        this.maskKey = crypto3.randomBytes(4);
      }
      createFrame(opcode) {
        var _a;
        const bodyLength = ((_a = this.frameData) == null ? void 0 : _a.byteLength) ?? 0;
        let payloadLength = bodyLength;
        let offset = 6;
        if (bodyLength > maxUnsigned16Bit) {
          offset += 8;
          payloadLength = 127;
        } else if (bodyLength > 125) {
          offset += 2;
          payloadLength = 126;
        }
        const buffer2 = Buffer.allocUnsafe(bodyLength + offset);
        buffer2[0] = buffer2[1] = 0;
        buffer2[0] |= 128;
        buffer2[0] = (buffer2[0] & 240) + opcode;
        buffer2[offset - 4] = this.maskKey[0];
        buffer2[offset - 3] = this.maskKey[1];
        buffer2[offset - 2] = this.maskKey[2];
        buffer2[offset - 1] = this.maskKey[3];
        buffer2[1] = payloadLength;
        if (payloadLength === 126) {
          buffer2.writeUInt16BE(bodyLength, 2);
        } else if (payloadLength === 127) {
          buffer2[2] = buffer2[3] = 0;
          buffer2.writeUIntBE(bodyLength, 4, 6);
        }
        buffer2[1] |= 128;
        for (let i = 0; i < bodyLength; i++) {
          buffer2[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
        }
        return buffer2;
      }
    };
    module2.exports = {
      WebsocketFrameSend
    };
  }
});

// node_modules/undici/lib/websocket/receiver.js
var require_receiver = __commonJS({
  "node_modules/undici/lib/websocket/receiver.js"(exports, module2) {
    "use strict";
    var { Writable } = require("stream");
    var diagnosticsChannel = require("diagnostics_channel");
    var { parserStates, opcodes, states, emptyBuffer } = require_constants4();
    var { kReadyState, kSentClose, kResponse, kReceivedClose } = require_symbols5();
    var { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = require_util7();
    var { WebsocketFrameSend } = require_frame();
    var channels = {};
    channels.ping = diagnosticsChannel.channel("undici:websocket:ping");
    channels.pong = diagnosticsChannel.channel("undici:websocket:pong");
    var ByteParser = class extends Writable {
      #buffers = [];
      #byteOffset = 0;
      #state = parserStates.INFO;
      #info = {};
      #fragments = [];
      constructor(ws) {
        super();
        this.ws = ws;
      }
      /**
       * @param {Buffer} chunk
       * @param {() => void} callback
       */
      _write(chunk, _, callback) {
        this.#buffers.push(chunk);
        this.#byteOffset += chunk.length;
        this.run(callback);
      }
      /**
       * Runs whenever a new chunk is received.
       * Callback is called whenever there are no more chunks buffering,
       * or not enough bytes are buffered to parse.
       */
      run(callback) {
        while (true) {
          if (this.#state === parserStates.INFO) {
            if (this.#byteOffset < 2) {
              return callback();
            }
            const buffer2 = this.consume(2);
            this.#info.fin = (buffer2[0] & 128) !== 0;
            this.#info.opcode = buffer2[0] & 15;
            this.#info.originalOpcode ??= this.#info.opcode;
            this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION;
            if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {
              failWebsocketConnection(this.ws, "Invalid frame type was fragmented.");
              return;
            }
            const payloadLength = buffer2[1] & 127;
            if (payloadLength <= 125) {
              this.#info.payloadLength = payloadLength;
              this.#state = parserStates.READ_DATA;
            } else if (payloadLength === 126) {
              this.#state = parserStates.PAYLOADLENGTH_16;
            } else if (payloadLength === 127) {
              this.#state = parserStates.PAYLOADLENGTH_64;
            }
            if (this.#info.fragmented && payloadLength > 125) {
              failWebsocketConnection(this.ws, "Fragmented frame exceeded 125 bytes.");
              return;
            } else if ((this.#info.opcode === opcodes.PING || this.#info.opcode === opcodes.PONG || this.#info.opcode === opcodes.CLOSE) && payloadLength > 125) {
              failWebsocketConnection(this.ws, "Payload length for control frame exceeded 125 bytes.");
              return;
            } else if (this.#info.opcode === opcodes.CLOSE) {
              if (payloadLength === 1) {
                failWebsocketConnection(this.ws, "Received close frame with a 1-byte body.");
                return;
              }
              const body = this.consume(payloadLength);
              this.#info.closeInfo = this.parseCloseBody(false, body);
              if (!this.ws[kSentClose]) {
                const body2 = Buffer.allocUnsafe(2);
                body2.writeUInt16BE(this.#info.closeInfo.code, 0);
                const closeFrame = new WebsocketFrameSend(body2);
                this.ws[kResponse].socket.write(
                  closeFrame.createFrame(opcodes.CLOSE),
                  (err) => {
                    if (!err) {
                      this.ws[kSentClose] = true;
                    }
                  }
                );
              }
              this.ws[kReadyState] = states.CLOSING;
              this.ws[kReceivedClose] = true;
              this.end();
              return;
            } else if (this.#info.opcode === opcodes.PING) {
              const body = this.consume(payloadLength);
              if (!this.ws[kReceivedClose]) {
                const frame = new WebsocketFrameSend(body);
                this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));
                if (channels.ping.hasSubscribers) {
                  channels.ping.publish({
                    payload: body
                  });
                }
              }
              this.#state = parserStates.INFO;
              if (this.#byteOffset > 0) {
                continue;
              } else {
                callback();
                return;
              }
            } else if (this.#info.opcode === opcodes.PONG) {
              const body = this.consume(payloadLength);
              if (channels.pong.hasSubscribers) {
                channels.pong.publish({
                  payload: body
                });
              }
              if (this.#byteOffset > 0) {
                continue;
              } else {
                callback();
                return;
              }
            }
          } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
            if (this.#byteOffset < 2) {
              return callback();
            }
            const buffer2 = this.consume(2);
            this.#info.payloadLength = buffer2.readUInt16BE(0);
            this.#state = parserStates.READ_DATA;
          } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
            if (this.#byteOffset < 8) {
              return callback();
            }
            const buffer2 = this.consume(8);
            const upper = buffer2.readUInt32BE(0);
            if (upper > 2 ** 31 - 1) {
              failWebsocketConnection(this.ws, "Received payload length > 2^31 bytes.");
              return;
            }
            const lower = buffer2.readUInt32BE(4);
            this.#info.payloadLength = (upper << 8) + lower;
            this.#state = parserStates.READ_DATA;
          } else if (this.#state === parserStates.READ_DATA) {
            if (this.#byteOffset < this.#info.payloadLength) {
              return callback();
            } else if (this.#byteOffset >= this.#info.payloadLength) {
              const body = this.consume(this.#info.payloadLength);
              this.#fragments.push(body);
              if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes.CONTINUATION) {
                const fullMessage = Buffer.concat(this.#fragments);
                websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
                this.#info = {};
                this.#fragments.length = 0;
              }
              this.#state = parserStates.INFO;
            }
          }
          if (this.#byteOffset > 0) {
            continue;
          } else {
            callback();
            break;
          }
        }
      }
      /**
       * Take n bytes from the buffered Buffers
       * @param {number} n
       * @returns {Buffer|null}
       */
      consume(n) {
        if (n > this.#byteOffset) {
          return null;
        } else if (n === 0) {
          return emptyBuffer;
        }
        if (this.#buffers[0].length === n) {
          this.#byteOffset -= this.#buffers[0].length;
          return this.#buffers.shift();
        }
        const buffer2 = Buffer.allocUnsafe(n);
        let offset = 0;
        while (offset !== n) {
          const next = this.#buffers[0];
          const { length } = next;
          if (length + offset === n) {
            buffer2.set(this.#buffers.shift(), offset);
            break;
          } else if (length + offset > n) {
            buffer2.set(next.subarray(0, n - offset), offset);
            this.#buffers[0] = next.subarray(n - offset);
            break;
          } else {
            buffer2.set(this.#buffers.shift(), offset);
            offset += next.length;
          }
        }
        this.#byteOffset -= n;
        return buffer2;
      }
      parseCloseBody(onlyCode, data) {
        let code;
        if (data.length >= 2) {
          code = data.readUInt16BE(0);
        }
        if (onlyCode) {
          if (!isValidStatusCode(code)) {
            return null;
          }
          return { code };
        }
        let reason = data.subarray(2);
        if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) {
          reason = reason.subarray(3);
        }
        if (code !== void 0 && !isValidStatusCode(code)) {
          return null;
        }
        try {
          reason = new TextDecoder("utf-8", { fatal: true }).decode(reason);
        } catch {
          return null;
        }
        return { code, reason };
      }
      get closingInfo() {
        return this.#info.closeInfo;
      }
    };
    module2.exports = {
      ByteParser
    };
  }
});

// node_modules/undici/lib/websocket/websocket.js
var require_websocket = __commonJS({
  "node_modules/undici/lib/websocket/websocket.js"(exports, module2) {
    "use strict";
    var { webidl } = require_webidl();
    var { DOMException: DOMException2 } = require_constants();
    var { URLSerializer } = require_dataURL();
    var { getGlobalOrigin } = require_global();
    var { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require_constants4();
    var {
      kWebSocketURL,
      kReadyState,
      kController,
      kBinaryType,
      kResponse,
      kSentClose,
      kByteParser
    } = require_symbols5();
    var { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require_util7();
    var { establishWebSocketConnection } = require_connection();
    var { WebsocketFrameSend } = require_frame();
    var { ByteParser } = require_receiver();
    var { kEnumerableProperty, isBlobLike } = require_util();
    var { getGlobalDispatcher } = require_global2();
    var { types } = require("util");
    var experimentalWarned = false;
    var WebSocket = class extends EventTarget {
      #events = {
        open: null,
        error: null,
        close: null,
        message: null
      };
      #bufferedAmount = 0;
      #protocol = "";
      #extensions = "";
      /**
       * @param {string} url
       * @param {string|string[]} protocols
       */
      constructor(url, protocols = []) {
        super();
        webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket constructor" });
        if (!experimentalWarned) {
          experimentalWarned = true;
          process.emitWarning("WebSockets are experimental, expect them to change at any time.", {
            code: "UNDICI-WS"
          });
        }
        const options2 = webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
        url = webidl.converters.USVString(url);
        protocols = options2.protocols;
        const baseURL = getGlobalOrigin();
        let urlRecord;
        try {
          urlRecord = new URL(url, baseURL);
        } catch (e) {
          throw new DOMException2(e, "SyntaxError");
        }
        if (urlRecord.protocol === "http:") {
          urlRecord.protocol = "ws:";
        } else if (urlRecord.protocol === "https:") {
          urlRecord.protocol = "wss:";
        }
        if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") {
          throw new DOMException2(
            `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,
            "SyntaxError"
          );
        }
        if (urlRecord.hash || urlRecord.href.endsWith("#")) {
          throw new DOMException2("Got fragment", "SyntaxError");
        }
        if (typeof protocols === "string") {
          protocols = [protocols];
        }
        if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) {
          throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        }
        if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol(p))) {
          throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        }
        this[kWebSocketURL] = new URL(urlRecord.href);
        this[kController] = establishWebSocketConnection(
          urlRecord,
          protocols,
          this,
          (response) => this.#onConnectionEstablished(response),
          options2
        );
        this[kReadyState] = WebSocket.CONNECTING;
        this[kBinaryType] = "blob";
      }
      /**
       * @see https://websockets.spec.whatwg.org/#dom-websocket-close
       * @param {number|undefined} code
       * @param {string|undefined} reason
       */
      close(code = void 0, reason = void 0) {
        webidl.brandCheck(this, WebSocket);
        if (code !== void 0) {
          code = webidl.converters["unsigned short"](code, { clamp: true });
        }
        if (reason !== void 0) {
          reason = webidl.converters.USVString(reason);
        }
        if (code !== void 0) {
          if (code !== 1e3 && (code < 3e3 || code > 4999)) {
            throw new DOMException2("invalid code", "InvalidAccessError");
          }
        }
        let reasonByteLength = 0;
        if (reason !== void 0) {
          reasonByteLength = Buffer.byteLength(reason);
          if (reasonByteLength > 123) {
            throw new DOMException2(
              `Reason must be less than 123 bytes; received ${reasonByteLength}`,
              "SyntaxError"
            );
          }
        }
        if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {
        } else if (!isEstablished(this)) {
          failWebsocketConnection(this, "Connection was closed before it was established.");
          this[kReadyState] = WebSocket.CLOSING;
        } else if (!isClosing(this)) {
          const frame = new WebsocketFrameSend();
          if (code !== void 0 && reason === void 0) {
            frame.frameData = Buffer.allocUnsafe(2);
            frame.frameData.writeUInt16BE(code, 0);
          } else if (code !== void 0 && reason !== void 0) {
            frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
            frame.frameData.writeUInt16BE(code, 0);
            frame.frameData.write(reason, 2, "utf-8");
          } else {
            frame.frameData = emptyBuffer;
          }
          const socket = this[kResponse].socket;
          socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
            if (!err) {
              this[kSentClose] = true;
            }
          });
          this[kReadyState] = states.CLOSING;
        } else {
          this[kReadyState] = WebSocket.CLOSING;
        }
      }
      /**
       * @see https://websockets.spec.whatwg.org/#dom-websocket-send
       * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
       */
      send(data) {
        webidl.brandCheck(this, WebSocket);
        webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket.send" });
        data = webidl.converters.WebSocketSendData(data);
        if (this[kReadyState] === WebSocket.CONNECTING) {
          throw new DOMException2("Sent before connected.", "InvalidStateError");
        }
        if (!isEstablished(this) || isClosing(this)) {
          return;
        }
        const socket = this[kResponse].socket;
        if (typeof data === "string") {
          const value = Buffer.from(data);
          const frame = new WebsocketFrameSend(value);
          const buffer2 = frame.createFrame(opcodes.TEXT);
          this.#bufferedAmount += value.byteLength;
          socket.write(buffer2, () => {
            this.#bufferedAmount -= value.byteLength;
          });
        } else if (types.isArrayBuffer(data)) {
          const value = Buffer.from(data);
          const frame = new WebsocketFrameSend(value);
          const buffer2 = frame.createFrame(opcodes.BINARY);
          this.#bufferedAmount += value.byteLength;
          socket.write(buffer2, () => {
            this.#bufferedAmount -= value.byteLength;
          });
        } else if (ArrayBuffer.isView(data)) {
          const ab = Buffer.from(data, data.byteOffset, data.byteLength);
          const frame = new WebsocketFrameSend(ab);
          const buffer2 = frame.createFrame(opcodes.BINARY);
          this.#bufferedAmount += ab.byteLength;
          socket.write(buffer2, () => {
            this.#bufferedAmount -= ab.byteLength;
          });
        } else if (isBlobLike(data)) {
          const frame = new WebsocketFrameSend();
          data.arrayBuffer().then((ab) => {
            const value = Buffer.from(ab);
            frame.frameData = value;
            const buffer2 = frame.createFrame(opcodes.BINARY);
            this.#bufferedAmount += value.byteLength;
            socket.write(buffer2, () => {
              this.#bufferedAmount -= value.byteLength;
            });
          });
        }
      }
      get readyState() {
        webidl.brandCheck(this, WebSocket);
        return this[kReadyState];
      }
      get bufferedAmount() {
        webidl.brandCheck(this, WebSocket);
        return this.#bufferedAmount;
      }
      get url() {
        webidl.brandCheck(this, WebSocket);
        return URLSerializer(this[kWebSocketURL]);
      }
      get extensions() {
        webidl.brandCheck(this, WebSocket);
        return this.#extensions;
      }
      get protocol() {
        webidl.brandCheck(this, WebSocket);
        return this.#protocol;
      }
      get onopen() {
        webidl.brandCheck(this, WebSocket);
        return this.#events.open;
      }
      set onopen(fn) {
        webidl.brandCheck(this, WebSocket);
        if (this.#events.open) {
          this.removeEventListener("open", this.#events.open);
        }
        if (typeof fn === "function") {
          this.#events.open = fn;
          this.addEventListener("open", fn);
        } else {
          this.#events.open = null;
        }
      }
      get onerror() {
        webidl.brandCheck(this, WebSocket);
        return this.#events.error;
      }
      set onerror(fn) {
        webidl.brandCheck(this, WebSocket);
        if (this.#events.error) {
          this.removeEventListener("error", this.#events.error);
        }
        if (typeof fn === "function") {
          this.#events.error = fn;
          this.addEventListener("error", fn);
        } else {
          this.#events.error = null;
        }
      }
      get onclose() {
        webidl.brandCheck(this, WebSocket);
        return this.#events.close;
      }
      set onclose(fn) {
        webidl.brandCheck(this, WebSocket);
        if (this.#events.close) {
          this.removeEventListener("close", this.#events.close);
        }
        if (typeof fn === "function") {
          this.#events.close = fn;
          this.addEventListener("close", fn);
        } else {
          this.#events.close = null;
        }
      }
      get onmessage() {
        webidl.brandCheck(this, WebSocket);
        return this.#events.message;
      }
      set onmessage(fn) {
        webidl.brandCheck(this, WebSocket);
        if (this.#events.message) {
          this.removeEventListener("message", this.#events.message);
        }
        if (typeof fn === "function") {
          this.#events.message = fn;
          this.addEventListener("message", fn);
        } else {
          this.#events.message = null;
        }
      }
      get binaryType() {
        webidl.brandCheck(this, WebSocket);
        return this[kBinaryType];
      }
      set binaryType(type) {
        webidl.brandCheck(this, WebSocket);
        if (type !== "blob" && type !== "arraybuffer") {
          this[kBinaryType] = "blob";
        } else {
          this[kBinaryType] = type;
        }
      }
      /**
       * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
       */
      #onConnectionEstablished(response) {
        this[kResponse] = response;
        const parser = new ByteParser(this);
        parser.on("drain", function onParserDrain() {
          this.ws[kResponse].socket.resume();
        });
        response.socket.ws = this;
        this[kByteParser] = parser;
        this[kReadyState] = states.OPEN;
        const extensions = response.headersList.get("sec-websocket-extensions");
        if (extensions !== null) {
          this.#extensions = extensions;
        }
        const protocol = response.headersList.get("sec-websocket-protocol");
        if (protocol !== null) {
          this.#protocol = protocol;
        }
        fireEvent("open", this);
      }
    };
    WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
    WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
    WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
    WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;
    Object.defineProperties(WebSocket.prototype, {
      CONNECTING: staticPropertyDescriptors,
      OPEN: staticPropertyDescriptors,
      CLOSING: staticPropertyDescriptors,
      CLOSED: staticPropertyDescriptors,
      url: kEnumerableProperty,
      readyState: kEnumerableProperty,
      bufferedAmount: kEnumerableProperty,
      onopen: kEnumerableProperty,
      onerror: kEnumerableProperty,
      onclose: kEnumerableProperty,
      close: kEnumerableProperty,
      onmessage: kEnumerableProperty,
      binaryType: kEnumerableProperty,
      send: kEnumerableProperty,
      extensions: kEnumerableProperty,
      protocol: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "WebSocket",
        writable: false,
        enumerable: false,
        configurable: true
      }
    });
    Object.defineProperties(WebSocket, {
      CONNECTING: staticPropertyDescriptors,
      OPEN: staticPropertyDescriptors,
      CLOSING: staticPropertyDescriptors,
      CLOSED: staticPropertyDescriptors
    });
    webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(
      webidl.converters.DOMString
    );
    webidl.converters["DOMString or sequence<DOMString>"] = function(V) {
      if (webidl.util.Type(V) === "Object" && Symbol.iterator in V) {
        return webidl.converters["sequence<DOMString>"](V);
      }
      return webidl.converters.DOMString(V);
    };
    webidl.converters.WebSocketInit = webidl.dictionaryConverter([
      {
        key: "protocols",
        converter: webidl.converters["DOMString or sequence<DOMString>"],
        get defaultValue() {
          return [];
        }
      },
      {
        key: "dispatcher",
        converter: (V) => V,
        get defaultValue() {
          return getGlobalDispatcher();
        }
      },
      {
        key: "headers",
        converter: webidl.nullableConverter(webidl.converters.HeadersInit)
      }
    ]);
    webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
      if (webidl.util.Type(V) === "Object" && !(Symbol.iterator in V)) {
        return webidl.converters.WebSocketInit(V);
      }
      return { protocols: webidl.converters["DOMString or sequence<DOMString>"](V) };
    };
    webidl.converters.WebSocketSendData = function(V) {
      if (webidl.util.Type(V) === "Object") {
        if (isBlobLike(V)) {
          return webidl.converters.Blob(V, { strict: false });
        }
        if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
          return webidl.converters.BufferSource(V);
        }
      }
      return webidl.converters.USVString(V);
    };
    module2.exports = {
      WebSocket
    };
  }
});

// node_modules/undici/index.js
var require_undici = __commonJS({
  "node_modules/undici/index.js"(exports, module2) {
    "use strict";
    var Client = require_client();
    var Dispatcher = require_dispatcher();
    var errors = require_errors();
    var Pool = require_pool();
    var BalancedPool = require_balanced_pool();
    var Agent = require_agent();
    var util = require_util();
    var { InvalidArgumentError } = errors;
    var api = require_api();
    var buildConnector = require_connect();
    var MockClient = require_mock_client();
    var MockAgent = require_mock_agent();
    var MockPool = require_mock_pool();
    var mockErrors = require_mock_errors();
    var ProxyAgent = require_proxy_agent();
    var RetryHandler = require_RetryHandler();
    var { getGlobalDispatcher, setGlobalDispatcher } = require_global2();
    var DecoratorHandler = require_DecoratorHandler();
    var RedirectHandler = require_RedirectHandler();
    var createRedirectInterceptor = require_redirectInterceptor();
    var hasCrypto;
    try {
      require("crypto");
      hasCrypto = true;
    } catch {
      hasCrypto = false;
    }
    Object.assign(Dispatcher.prototype, api);
    module2.exports.Dispatcher = Dispatcher;
    module2.exports.Client = Client;
    module2.exports.Pool = Pool;
    module2.exports.BalancedPool = BalancedPool;
    module2.exports.Agent = Agent;
    module2.exports.ProxyAgent = ProxyAgent;
    module2.exports.RetryHandler = RetryHandler;
    module2.exports.DecoratorHandler = DecoratorHandler;
    module2.exports.RedirectHandler = RedirectHandler;
    module2.exports.createRedirectInterceptor = createRedirectInterceptor;
    module2.exports.buildConnector = buildConnector;
    module2.exports.errors = errors;
    function makeDispatcher(fn) {
      return (url, opts, handler) => {
        if (typeof opts === "function") {
          handler = opts;
          opts = null;
        }
        if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) {
          throw new InvalidArgumentError("invalid url");
        }
        if (opts != null && typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (opts && opts.path != null) {
          if (typeof opts.path !== "string") {
            throw new InvalidArgumentError("invalid opts.path");
          }
          let path2 = opts.path;
          if (!opts.path.startsWith("/")) {
            path2 = `/${path2}`;
          }
          url = new URL(util.parseOrigin(url).origin + path2);
        } else {
          if (!opts) {
            opts = typeof url === "object" ? url : {};
          }
          url = util.parseURL(url);
        }
        const { agent, dispatcher = getGlobalDispatcher() } = opts;
        if (agent) {
          throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
        }
        return fn.call(dispatcher, {
          ...opts,
          origin: url.origin,
          path: url.search ? `${url.pathname}${url.search}` : url.pathname,
          method: opts.method || (opts.body ? "PUT" : "GET")
        }, handler);
      };
    }
    module2.exports.setGlobalDispatcher = setGlobalDispatcher;
    module2.exports.getGlobalDispatcher = getGlobalDispatcher;
    if (util.nodeMajor > 16 || util.nodeMajor === 16 && util.nodeMinor >= 8) {
      let fetchImpl = null;
      module2.exports.fetch = async function fetch3(resource) {
        if (!fetchImpl) {
          fetchImpl = require_fetch().fetch;
        }
        try {
          return await fetchImpl(...arguments);
        } catch (err) {
          if (typeof err === "object") {
            Error.captureStackTrace(err, this);
          }
          throw err;
        }
      };
      module2.exports.Headers = require_headers().Headers;
      module2.exports.Response = require_response().Response;
      module2.exports.Request = require_request2().Request;
      module2.exports.FormData = require_formdata().FormData;
      module2.exports.File = require_file().File;
      module2.exports.FileReader = require_filereader().FileReader;
      const { setGlobalOrigin, getGlobalOrigin } = require_global();
      module2.exports.setGlobalOrigin = setGlobalOrigin;
      module2.exports.getGlobalOrigin = getGlobalOrigin;
      const { CacheStorage } = require_cachestorage();
      const { kConstruct } = require_symbols4();
      module2.exports.caches = new CacheStorage(kConstruct);
    }
    if (util.nodeMajor >= 16) {
      const { deleteCookie, getCookies, getSetCookies, setCookie } = require_cookies();
      module2.exports.deleteCookie = deleteCookie;
      module2.exports.getCookies = getCookies;
      module2.exports.getSetCookies = getSetCookies;
      module2.exports.setCookie = setCookie;
      const { parseMIMEType, serializeAMimeType } = require_dataURL();
      module2.exports.parseMIMEType = parseMIMEType;
      module2.exports.serializeAMimeType = serializeAMimeType;
    }
    if (util.nodeMajor >= 18 && hasCrypto) {
      const { WebSocket } = require_websocket();
      module2.exports.WebSocket = WebSocket;
    }
    module2.exports.request = makeDispatcher(api.request);
    module2.exports.stream = makeDispatcher(api.stream);
    module2.exports.pipeline = makeDispatcher(api.pipeline);
    module2.exports.connect = makeDispatcher(api.connect);
    module2.exports.upgrade = makeDispatcher(api.upgrade);
    module2.exports.MockClient = MockClient;
    module2.exports.MockPool = MockPool;
    module2.exports.MockAgent = MockAgent;
    module2.exports.mockErrors = mockErrors;
  }
});

// node_modules/set-cookie-parser/lib/set-cookie.js
var require_set_cookie = __commonJS({
  "node_modules/set-cookie-parser/lib/set-cookie.js"(exports, module2) {
    "use strict";
    var defaultParseOptions = {
      decodeValues: true,
      map: false,
      silent: false
    };
    function isNonEmptyString(str) {
      return typeof str === "string" && !!str.trim();
    }
    function parseString2(setCookieValue, options2) {
      var parts = setCookieValue.split(";").filter(isNonEmptyString);
      var nameValuePairStr = parts.shift();
      var parsed = parseNameValuePair(nameValuePairStr);
      var name = parsed.name;
      var value = parsed.value;
      options2 = options2 ? Object.assign({}, defaultParseOptions, options2) : defaultParseOptions;
      try {
        value = options2.decodeValues ? decodeURIComponent(value) : value;
      } catch (e) {
        console.error(
          "set-cookie-parser encountered an error while decoding a cookie with value '" + value + "'. Set options.decodeValues to false to disable this feature.",
          e
        );
      }
      var cookie = {
        name,
        value
      };
      parts.forEach(function(part) {
        var sides = part.split("=");
        var key2 = sides.shift().trimLeft().toLowerCase();
        var value2 = sides.join("=");
        if (key2 === "expires") {
          cookie.expires = new Date(value2);
        } else if (key2 === "max-age") {
          cookie.maxAge = parseInt(value2, 10);
        } else if (key2 === "secure") {
          cookie.secure = true;
        } else if (key2 === "httponly") {
          cookie.httpOnly = true;
        } else if (key2 === "samesite") {
          cookie.sameSite = value2;
        } else {
          cookie[key2] = value2;
        }
      });
      return cookie;
    }
    function parseNameValuePair(nameValuePairStr) {
      var name = "";
      var value = "";
      var nameValueArr = nameValuePairStr.split("=");
      if (nameValueArr.length > 1) {
        name = nameValueArr.shift();
        value = nameValueArr.join("=");
      } else {
        value = nameValuePairStr;
      }
      return { name, value };
    }
    function parse5(input, options2) {
      options2 = options2 ? Object.assign({}, defaultParseOptions, options2) : defaultParseOptions;
      if (!input) {
        if (!options2.map) {
          return [];
        } else {
          return {};
        }
      }
      if (input.headers) {
        if (typeof input.headers.getSetCookie === "function") {
          input = input.headers.getSetCookie();
        } else if (input.headers["set-cookie"]) {
          input = input.headers["set-cookie"];
        } else {
          var sch = input.headers[Object.keys(input.headers).find(function(key2) {
            return key2.toLowerCase() === "set-cookie";
          })];
          if (!sch && input.headers.cookie && !options2.silent) {
            console.warn(
              "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."
            );
          }
          input = sch;
        }
      }
      if (!Array.isArray(input)) {
        input = [input];
      }
      options2 = options2 ? Object.assign({}, defaultParseOptions, options2) : defaultParseOptions;
      if (!options2.map) {
        return input.filter(isNonEmptyString).map(function(str) {
          return parseString2(str, options2);
        });
      } else {
        var cookies = {};
        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {
          var cookie = parseString2(str, options2);
          cookies2[cookie.name] = cookie;
          return cookies2;
        }, cookies);
      }
    }
    function splitCookiesString3(cookiesString) {
      if (Array.isArray(cookiesString)) {
        return cookiesString;
      }
      if (typeof cookiesString !== "string") {
        return [];
      }
      var cookiesStrings = [];
      var pos = 0;
      var start;
      var ch;
      var lastComma;
      var nextStart;
      var cookiesSeparatorFound;
      function skipWhitespace() {
        while (pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))) {
          pos += 1;
        }
        return pos < cookiesString.length;
      }
      function notSpecialChar() {
        ch = cookiesString.charAt(pos);
        return ch !== "=" && ch !== ";" && ch !== ",";
      }
      while (pos < cookiesString.length) {
        start = pos;
        cookiesSeparatorFound = false;
        while (skipWhitespace()) {
          ch = cookiesString.charAt(pos);
          if (ch === ",") {
            lastComma = pos;
            pos += 1;
            skipWhitespace();
            nextStart = pos;
            while (pos < cookiesString.length && notSpecialChar()) {
              pos += 1;
            }
            if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
              cookiesSeparatorFound = true;
              pos = nextStart;
              cookiesStrings.push(cookiesString.substring(start, lastComma));
              start = pos;
            } else {
              pos = lastComma + 1;
            }
          } else {
            pos += 1;
          }
        }
        if (!cookiesSeparatorFound || pos >= cookiesString.length) {
          cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
        }
      }
      return cookiesStrings;
    }
    module2.exports = parse5;
    module2.exports.parse = parse5;
    module2.exports.parseString = parseString2;
    module2.exports.splitCookiesString = splitCookiesString3;
  }
});

// .svelte-kit/output/server/chunks/index.js
function error2(status, body) {
  if (isNaN(status) || status < 400 || status > 599) {
    throw new Error(`HTTP error status codes must be between 400 and 599 \u2014 ${status} is invalid`);
  }
  return new HttpError2(status, body);
}
function json(data, init2) {
  const body = JSON.stringify(data);
  const headers = new Headers(init2 == null ? void 0 : init2.headers);
  if (!headers.has("content-length")) {
    headers.set("content-length", encoder2.encode(body).byteLength.toString());
  }
  if (!headers.has("content-type")) {
    headers.set("content-type", "application/json");
  }
  return new Response(body, {
    ...init2,
    headers
  });
}
function text(body, init2) {
  const headers = new Headers(init2 == null ? void 0 : init2.headers);
  if (!headers.has("content-length")) {
    const encoded = encoder2.encode(body);
    headers.set("content-length", encoded.byteLength.toString());
    return new Response(encoded, {
      ...init2,
      headers
    });
  }
  return new Response(body, {
    ...init2,
    headers
  });
}
var HttpError2, Redirect2, NotFound, ActionFailure2, encoder2;
var init_chunks = __esm({
  ".svelte-kit/output/server/chunks/index.js"() {
    HttpError2 = class {
      /**
       * @param {number} status
       * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body
       */
      constructor(status, body) {
        this.status = status;
        if (typeof body === "string") {
          this.body = { message: body };
        } else if (body) {
          this.body = body;
        } else {
          this.body = { message: `Error: ${status}` };
        }
      }
      toString() {
        return JSON.stringify(this.body);
      }
    };
    Redirect2 = class {
      /**
       * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status
       * @param {string} location
       */
      constructor(status, location) {
        this.status = status;
        this.location = location;
      }
    };
    NotFound = class extends Error {
      /**
       * @param {string} pathname
       */
      constructor(pathname) {
        super();
        this.status = 404;
        this.message = `Not found: ${pathname}`;
      }
    };
    ActionFailure2 = class {
      /**
       * @param {number} status
       * @param {T} [data]
       */
      constructor(status, data) {
        this.status = status;
        this.data = data;
      }
    };
    encoder2 = new TextEncoder();
  }
});

// node_modules/contentful-management/dist/contentful-management.node.js
var require_contentful_management_node = __commonJS({
  "node_modules/contentful-management/dist/contentful-management.node.js"(exports, module2) {
    (() => {
      var __webpack_modules__ = {
        /***/
        "../node_modules/asynckit/index.js": (
          /*!*****************************************!*\
            !*** ../node_modules/asynckit/index.js ***!
            \*****************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            module3.exports = {
              parallel: __webpack_require__2(
                /*! ./parallel.js */
                "../node_modules/asynckit/parallel.js"
              ),
              serial: __webpack_require__2(
                /*! ./serial.js */
                "../node_modules/asynckit/serial.js"
              ),
              serialOrdered: __webpack_require__2(
                /*! ./serialOrdered.js */
                "../node_modules/asynckit/serialOrdered.js"
              )
            };
          }
        ),
        /***/
        "../node_modules/asynckit/lib/abort.js": (
          /*!*********************************************!*\
            !*** ../node_modules/asynckit/lib/abort.js ***!
            \*********************************************/
          /***/
          (module3) => {
            module3.exports = abort;
            function abort(state) {
              Object.keys(state.jobs).forEach(clean.bind(state));
              state.jobs = {};
            }
            function clean(key2) {
              if (typeof this.jobs[key2] == "function") {
                this.jobs[key2]();
              }
            }
          }
        ),
        /***/
        "../node_modules/asynckit/lib/async.js": (
          /*!*********************************************!*\
            !*** ../node_modules/asynckit/lib/async.js ***!
            \*********************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            var defer2 = __webpack_require__2(
              /*! ./defer.js */
              "../node_modules/asynckit/lib/defer.js"
            );
            module3.exports = async;
            function async(callback) {
              var isAsync = false;
              defer2(function() {
                isAsync = true;
              });
              return function async_callback(err, result) {
                if (isAsync) {
                  callback(err, result);
                } else {
                  defer2(function nextTick_callback() {
                    callback(err, result);
                  });
                }
              };
            }
          }
        ),
        /***/
        "../node_modules/asynckit/lib/defer.js": (
          /*!*********************************************!*\
            !*** ../node_modules/asynckit/lib/defer.js ***!
            \*********************************************/
          /***/
          (module3) => {
            module3.exports = defer2;
            function defer2(fn) {
              var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
              if (nextTick) {
                nextTick(fn);
              } else {
                setTimeout(fn, 0);
              }
            }
          }
        ),
        /***/
        "../node_modules/asynckit/lib/iterate.js": (
          /*!***********************************************!*\
            !*** ../node_modules/asynckit/lib/iterate.js ***!
            \***********************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            var async = __webpack_require__2(
              /*! ./async.js */
              "../node_modules/asynckit/lib/async.js"
            ), abort = __webpack_require__2(
              /*! ./abort.js */
              "../node_modules/asynckit/lib/abort.js"
            );
            module3.exports = iterate;
            function iterate(list, iterator, state, callback) {
              var key2 = state["keyedList"] ? state["keyedList"][state.index] : state.index;
              state.jobs[key2] = runJob(iterator, key2, list[key2], function(error3, output) {
                if (!(key2 in state.jobs)) {
                  return;
                }
                delete state.jobs[key2];
                if (error3) {
                  abort(state);
                } else {
                  state.results[key2] = output;
                }
                callback(error3, state.results);
              });
            }
            function runJob(iterator, key2, item, callback) {
              var aborter;
              if (iterator.length == 2) {
                aborter = iterator(item, async(callback));
              } else {
                aborter = iterator(item, key2, async(callback));
              }
              return aborter;
            }
          }
        ),
        /***/
        "../node_modules/asynckit/lib/state.js": (
          /*!*********************************************!*\
            !*** ../node_modules/asynckit/lib/state.js ***!
            \*********************************************/
          /***/
          (module3) => {
            module3.exports = state;
            function state(list, sortMethod) {
              var isNamedList = !Array.isArray(list), initState = {
                index: 0,
                keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
                jobs: {},
                results: isNamedList ? {} : [],
                size: isNamedList ? Object.keys(list).length : list.length
              };
              if (sortMethod) {
                initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
                  return sortMethod(list[a], list[b]);
                });
              }
              return initState;
            }
          }
        ),
        /***/
        "../node_modules/asynckit/lib/terminator.js": (
          /*!**************************************************!*\
            !*** ../node_modules/asynckit/lib/terminator.js ***!
            \**************************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            var abort = __webpack_require__2(
              /*! ./abort.js */
              "../node_modules/asynckit/lib/abort.js"
            ), async = __webpack_require__2(
              /*! ./async.js */
              "../node_modules/asynckit/lib/async.js"
            );
            module3.exports = terminator;
            function terminator(callback) {
              if (!Object.keys(this.jobs).length) {
                return;
              }
              this.index = this.size;
              abort(this);
              async(callback)(null, this.results);
            }
          }
        ),
        /***/
        "../node_modules/asynckit/parallel.js": (
          /*!********************************************!*\
            !*** ../node_modules/asynckit/parallel.js ***!
            \********************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            var iterate = __webpack_require__2(
              /*! ./lib/iterate.js */
              "../node_modules/asynckit/lib/iterate.js"
            ), initState = __webpack_require__2(
              /*! ./lib/state.js */
              "../node_modules/asynckit/lib/state.js"
            ), terminator = __webpack_require__2(
              /*! ./lib/terminator.js */
              "../node_modules/asynckit/lib/terminator.js"
            );
            module3.exports = parallel;
            function parallel(list, iterator, callback) {
              var state = initState(list);
              while (state.index < (state["keyedList"] || list).length) {
                iterate(list, iterator, state, function(error3, result) {
                  if (error3) {
                    callback(error3, result);
                    return;
                  }
                  if (Object.keys(state.jobs).length === 0) {
                    callback(null, state.results);
                    return;
                  }
                });
                state.index++;
              }
              return terminator.bind(state, callback);
            }
          }
        ),
        /***/
        "../node_modules/asynckit/serial.js": (
          /*!******************************************!*\
            !*** ../node_modules/asynckit/serial.js ***!
            \******************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            var serialOrdered = __webpack_require__2(
              /*! ./serialOrdered.js */
              "../node_modules/asynckit/serialOrdered.js"
            );
            module3.exports = serial;
            function serial(list, iterator, callback) {
              return serialOrdered(list, iterator, null, callback);
            }
          }
        ),
        /***/
        "../node_modules/asynckit/serialOrdered.js": (
          /*!*************************************************!*\
            !*** ../node_modules/asynckit/serialOrdered.js ***!
            \*************************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            var iterate = __webpack_require__2(
              /*! ./lib/iterate.js */
              "../node_modules/asynckit/lib/iterate.js"
            ), initState = __webpack_require__2(
              /*! ./lib/state.js */
              "../node_modules/asynckit/lib/state.js"
            ), terminator = __webpack_require__2(
              /*! ./lib/terminator.js */
              "../node_modules/asynckit/lib/terminator.js"
            );
            module3.exports = serialOrdered;
            module3.exports.ascending = ascending;
            module3.exports.descending = descending;
            function serialOrdered(list, iterator, sortMethod, callback) {
              var state = initState(list, sortMethod);
              iterate(list, iterator, state, function iteratorHandler(error3, result) {
                if (error3) {
                  callback(error3, result);
                  return;
                }
                state.index++;
                if (state.index < (state["keyedList"] || list).length) {
                  iterate(list, iterator, state, iteratorHandler);
                  return;
                }
                callback(null, state.results);
              });
              return terminator.bind(state, callback);
            }
            function ascending(a, b) {
              return a < b ? -1 : a > b ? 1 : 0;
            }
            function descending(a, b) {
              return -1 * ascending(a, b);
            }
          }
        ),
        /***/
        "./adapters/REST/endpoints/access-token.ts": (
          /*!*************************************************!*\
            !*** ./adapters/REST/endpoints/access-token.ts ***!
            \*************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              createPersonalAccessToken: () => (
                /* binding */
                createPersonalAccessToken
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              getManyForOrganization: () => (
                /* binding */
                getManyForOrganization
              ),
              /* harmony export */
              revoke: () => (
                /* binding */
                revoke
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/users/me/access_tokens/${params.tokenId}`);
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, "/users/me/access_tokens", {
                params: params.query
              });
            };
            const createPersonalAccessToken = (http2, _params, rawData, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, "/users/me/access_tokens", rawData, {
                headers
              });
            };
            const revoke = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, `/users/me/access_tokens/${params.tokenId}/revoked`, null);
            };
            const getManyForOrganization = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/organizations/${params.organizationId}/access_tokens`, {
                params: params.query
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/api-key.ts": (
          /*!********************************************!*\
            !*** ./adapters/REST/endpoints/api-key.ts ***!
            \********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              createWithId: () => (
                /* binding */
                createWithId
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/api_keys/${params.apiKeyId}`);
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/api_keys`, {
                params: params.query
              });
            };
            const create = (http2, params, data, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, `/spaces/${params.spaceId}/api_keys`, data, {
                headers
              });
            };
            const createWithId = (http2, params, data, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, `/spaces/${params.spaceId}/api_keys/${params.apiKeyId}`, data, {
                headers
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              if ("accessToken" in data) {
                delete data.accessToken;
              }
              if ("preview_api_key" in data) {
                delete data.preview_api_key;
              }
              if ("policies" in data) {
                delete data.policies;
              }
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, `/spaces/${params.spaceId}/api_keys/${params.apiKeyId}`, data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, `/spaces/${params.spaceId}/api_keys/${params.apiKeyId}`);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/app-action-call.ts": (
          /*!****************************************************!*\
            !*** ./adapters/REST/endpoints/app-action-call.ts ***!
            \****************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              createWithResponse: () => (
                /* binding */
                createWithResponse
              ),
              /* harmony export */
              getCallDetails: () => (
                /* binding */
                getCallDetails
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../../../common-utils */
              "./common-utils.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const create = (http2, params, data) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/app_installations/${params.appDefinitionId}/actions/${params.appActionId}/calls`, data);
            };
            const getCallDetails = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/actions/${params.appActionId}/calls/${params.callId}`);
            };
            const APP_ACTION_CALL_RETRY_INTERVAL = 2e3;
            const APP_ACTION_CALL_RETRIES = 10;
            async function callAppActionResult(http2, params, {
              callId
            }) {
              let checkCount = 1;
              const retryInterval = params.retryInterval || APP_ACTION_CALL_RETRY_INTERVAL;
              const retries = params.retries || APP_ACTION_CALL_RETRIES;
              return new Promise((resolve2, reject) => {
                const poll = async () => {
                  try {
                    var _result$response, _result$response2;
                    const result = await getCallDetails(http2, _objectSpread(_objectSpread({}, params), {}, {
                      callId
                    }));
                    if (result !== null && result !== void 0 && (_result$response = result.response) !== null && _result$response !== void 0 && _result$response.statusCode && !(0, _common_utils__WEBPACK_IMPORTED_MODULE_1__.isSuccessful)(result === null || result === void 0 ? void 0 : (_result$response2 = result.response) === null || _result$response2 === void 0 ? void 0 : _result$response2.statusCode)) {
                      const error3 = new Error("App action not found or lambda fails");
                      reject(error3);
                    } else if ((0, _common_utils__WEBPACK_IMPORTED_MODULE_1__.isSuccessful)(result.statusCode)) {
                      resolve2(result);
                    } else if ((0, _common_utils__WEBPACK_IMPORTED_MODULE_1__.shouldRePoll)(result.statusCode) && checkCount < retries) {
                      checkCount++;
                      await (0, _common_utils__WEBPACK_IMPORTED_MODULE_1__.waitFor)(retryInterval);
                      poll();
                    } else {
                      const error3 = new Error("The app action response is taking longer than expected to process.");
                      reject(error3);
                    }
                  } catch (error3) {
                    checkCount++;
                    if (checkCount > retries) {
                      reject(new Error("The app action response is taking longer than expected to process."));
                      return;
                    }
                    await (0, _common_utils__WEBPACK_IMPORTED_MODULE_1__.waitFor)(retryInterval);
                    poll();
                  }
                };
                poll();
              });
            }
            const createWithResponse = async (http2, params, data) => {
              const createResponse = await _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/app_installations/${params.appDefinitionId}/actions/${params.appActionId}/calls`, data);
              const callId = createResponse.sys.id;
              return callAppActionResult(http2, params, {
                callId
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/app-action.ts": (
          /*!***********************************************!*\
            !*** ./adapters/REST/endpoints/app-action.ts ***!
            \***********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              getManyForEnvironment: () => (
                /* binding */
                getManyForEnvironment
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            const getBaseUrl = (params) => `/organizations/${params.organizationId}/app_definitions/${params.appDefinitionId}/actions`;
            const getAppActionUrl = (params) => `${getBaseUrl(params)}/${params.appActionId}`;
            const getAppActionsEnvUrl = (params) => {
              if (params.environmentId) {
                return `/spaces/${params.spaceId}/environments/${params.environmentId}/actions`;
              }
              return `/spaces/${params.spaceId}/actions`;
            };
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getAppActionUrl(params));
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getBaseUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_1__.normalizeSelect)(params.query)
              });
            };
            const getManyForEnvironment = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getAppActionsEnvUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_1__.normalizeSelect)(params.query)
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.del(http2, getAppActionUrl(params));
            };
            const create = (http2, params, data) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, getBaseUrl(params), data);
            };
            const update = (http2, params, data) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, getAppActionUrl(params), data);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/app-bundle.ts": (
          /*!***********************************************!*\
            !*** ./adapters/REST/endpoints/app-bundle.ts ***!
            \***********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            const getBaseUrl = (params) => `/organizations/${params.organizationId}/app_definitions/${params.appDefinitionId}/app_bundles`;
            const getAppBundleUrl = (params) => `${getBaseUrl(params)}/${params.appBundleId}`;
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getAppBundleUrl(params));
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getBaseUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_1__.normalizeSelect)(params.query)
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.del(http2, getAppBundleUrl(params));
            };
            const create = (http2, params, payload) => {
              const {
                appUploadId,
                comment,
                actions,
                deliveryFunctions
              } = payload;
              const data = {
                upload: {
                  sys: {
                    type: "Link",
                    linkType: "AppUpload",
                    id: appUploadId
                  }
                },
                comment,
                actions,
                deliveryFunctions
              };
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, getBaseUrl(params), data);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/app-definition.ts": (
          /*!***************************************************!*\
            !*** ./adapters/REST/endpoints/app-definition.ts ***!
            \***************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getAppDefinitionUrl: () => (
                /* binding */
                getAppDefinitionUrl
              ),
              /* harmony export */
              getInstallationsForOrg: () => (
                /* binding */
                getInstallationsForOrg
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/organizations/${params.organizationId}/app_definitions`;
            const getAppDefinitionUrl = (params) => getBaseUrl(params) + `/${params.appDefinitionId}`;
            const getBaseUrlForOrgInstallations = (params) => `/app_definitions/${params.appDefinitionId}/app_installations`;
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getAppDefinitionUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query)
              });
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getBaseUrl(params), {
                params: params.query
              });
            };
            const create = (http2, params, rawData) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, getBaseUrl(params), data);
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, getAppDefinitionUrl(params), data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.del(http2, getAppDefinitionUrl(params));
            };
            const getInstallationsForOrg = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getBaseUrlForOrgInstallations(params), {
                params: _objectSpread(_objectSpread({}, (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSpaceId)((0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query))), {}, {
                  "sys.organization.sys.id[in]": params.organizationId
                })
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/app-details.ts": (
          /*!************************************************!*\
            !*** ./adapters/REST/endpoints/app-details.ts ***!
            \************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              upsert: () => (
                /* binding */
                upsert
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/organizations/${params.organizationId}/app_definitions/${params.appDefinitionId}/details`);
            };
            const upsert = (http2, params, data) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, `/organizations/${params.organizationId}/app_definitions/${params.appDefinitionId}/details`, data);
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.del(http2, `/organizations/${params.organizationId}/app_definitions/${params.appDefinitionId}/details`);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/app-installation.ts": (
          /*!*****************************************************!*\
            !*** ./adapters/REST/endpoints/app-installation.ts ***!
            \*****************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getAppInstallationUrl: () => (
                /* binding */
                getAppInstallationUrl
              ),
              /* harmony export */
              getForOrganization: () => (
                /* binding */
                getForOrganization
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              upsert: () => (
                /* binding */
                upsert
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/app_installations`;
            const getBaseUrlForOrgInstallations = (params) => `/app_definitions/${params.appDefinitionId}/app_installations`;
            const getAppInstallationUrl = (params) => getBaseUrl(params) + `/${params.appDefinitionId}`;
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getAppInstallationUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_1__.normalizeSelect)(params.query)
              });
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getBaseUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_1__.normalizeSelect)(params.query)
              });
            };
            const upsert = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_2__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, getAppInstallationUrl(params), data, {
                headers: _objectSpread(_objectSpread({}, headers), params.acceptAllTerms && {
                  "X-Contentful-Marketplace": "i-accept-end-user-license-agreement,i-accept-marketplace-terms-of-service,i-accept-privacy-policy"
                })
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.del(http2, getAppInstallationUrl(params));
            };
            const getForOrganization = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getBaseUrlForOrgInstallations(params), {
                params: _objectSpread(_objectSpread({}, (0, _utils__WEBPACK_IMPORTED_MODULE_1__.normalizeSpaceId)((0, _utils__WEBPACK_IMPORTED_MODULE_1__.normalizeSelect)(params.query))), {}, {
                  "sys.organization.sys.id[in]": params.organizationId
                })
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/app-signed-request.ts": (
          /*!*******************************************************!*\
            !*** ./adapters/REST/endpoints/app-signed-request.ts ***!
            \*******************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const create = (http2, params, data) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/app_installations/${params.appDefinitionId}/signed_requests`, data);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/app-signing-secret.ts": (
          /*!*******************************************************!*\
            !*** ./adapters/REST/endpoints/app-signing-secret.ts ***!
            \*******************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              upsert: () => (
                /* binding */
                upsert
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/organizations/${params.organizationId}/app_definitions/${params.appDefinitionId}/signing_secret`);
            };
            const upsert = (http2, params, data) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, `/organizations/${params.organizationId}/app_definitions/${params.appDefinitionId}/signing_secret`, data);
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.del(http2, `/organizations/${params.organizationId}/app_definitions/${params.appDefinitionId}/signing_secret`);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/app-upload.ts": (
          /*!***********************************************!*\
            !*** ./adapters/REST/endpoints/app-upload.ts ***!
            \***********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _upload_http_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../../../upload-http-client */
              "./upload-http-client.ts"
            );
            const getBaseUrl = (params) => `/organizations/${params.organizationId}/app_uploads`;
            const getAppUploadUrl = (params) => `${getBaseUrl(params)}/${params.appUploadId}`;
            const get3 = (http2, params) => {
              const httpUpload = (0, _upload_http_client__WEBPACK_IMPORTED_MODULE_1__.getUploadHttpClient)(http2);
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(httpUpload, getAppUploadUrl(params));
            };
            const del = (http2, params) => {
              const httpUpload = (0, _upload_http_client__WEBPACK_IMPORTED_MODULE_1__.getUploadHttpClient)(http2);
              return _raw__WEBPACK_IMPORTED_MODULE_0__.del(httpUpload, getAppUploadUrl(params));
            };
            const create = (http2, params, payload) => {
              const httpUpload = (0, _upload_http_client__WEBPACK_IMPORTED_MODULE_1__.getUploadHttpClient)(http2);
              const {
                file
              } = payload;
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(httpUpload, getBaseUrl(params), file, {
                headers: {
                  "Content-Type": "application/octet-stream"
                }
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/asset-key.ts": (
          /*!**********************************************!*\
            !*** ./adapters/REST/endpoints/asset-key.ts ***!
            \**********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              ValidationError: () => (
                /* binding */
                ValidationError
              ),
              /* harmony export */
              create: () => (
                /* binding */
                create
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;
            class ValidationError extends Error {
              constructor(name, message) {
                super(`Invalid "${name}" provided, ` + message);
                this.name = "ValidationError";
              }
            }
            const validateTimestamp = (name, timestamp, options2) => {
              options2 = options2 || {};
              if (typeof timestamp !== "number") {
                throw new ValidationError(name, `only numeric values are allowed for timestamps, provided type was "${typeof timestamp}"`);
              }
              if (options2.maximum && timestamp > options2.maximum) {
                throw new ValidationError(name, `value (${timestamp}) cannot be further in the future than expected maximum (${options2.maximum})`);
              }
              if (options2.now && timestamp < options2.now) {
                throw new ValidationError(name, `value (${timestamp}) cannot be in the past, current time was ${options2.now}`);
              }
            };
            const create = (http2, params, data) => {
              const expiresAt = data.expiresAt;
              const now = Math.floor(Date.now() / 1e3);
              const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;
              validateTimestamp("expiresAt", expiresAt, {
                maximum: currentMaxLifetime,
                now
              });
              const postParams = {
                expiresAt
              };
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/asset_keys`, postParams);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/asset.ts": (
          /*!******************************************!*\
            !*** ./adapters/REST/endpoints/asset.ts ***!
            \******************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              archive: () => (
                /* binding */
                archive
              ),
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              createFromFiles: () => (
                /* binding */
                createFromFiles
              ),
              /* harmony export */
              createWithId: () => (
                /* binding */
                createWithId
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              processForAllLocales: () => (
                /* binding */
                processForAllLocales
              ),
              /* harmony export */
              processForLocale: () => (
                /* binding */
                processForLocale
              ),
              /* harmony export */
              publish: () => (
                /* binding */
                publish
              ),
              /* harmony export */
              unarchive: () => (
                /* binding */
                unarchive
              ),
              /* harmony export */
              unpublish: () => (
                /* binding */
                unpublish
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _upload_http_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../../../upload-http-client */
              "./upload-http-client.ts"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _upload__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ./upload */
              "./adapters/REST/endpoints/upload.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            const _excluded = ["asset", "locale", "options"], _excluded2 = ["asset", "options"];
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const get3 = (http2, params, rawData, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_3__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`, {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_5__.normalizeSelect)(params.query),
                headers: headers ? _objectSpread({}, headers) : void 0
              });
            };
            const getMany = (http2, params, rawData, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_3__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets`, {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_5__.normalizeSelect)(params.query),
                headers: headers ? _objectSpread({}, headers) : void 0
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_3__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`, data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_3__.del(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`);
            };
            const publish = (http2, params, rawData) => {
              var _rawData$sys$version2;
              return _raw__WEBPACK_IMPORTED_MODULE_3__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/published`, null, {
                headers: {
                  "X-Contentful-Version": (_rawData$sys$version2 = rawData.sys.version) !== null && _rawData$sys$version2 !== void 0 ? _rawData$sys$version2 : 0
                }
              });
            };
            const unpublish = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_3__.del(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/published`);
            };
            const archive = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_3__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/archived`);
            };
            const unarchive = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_3__.del(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/archived`);
            };
            const create = (http2, params, rawData) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_3__.post(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets`, data);
            };
            const createWithId = (http2, params, rawData) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_3__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`, data);
            };
            const createFromFiles = (http2, params, data) => {
              const httpUpload = (0, _upload_http_client__WEBPACK_IMPORTED_MODULE_2__.getUploadHttpClient)(http2, {
                uploadTimeout: params.uploadTimeout
              });
              const {
                file
              } = data.fields;
              return Promise.all(Object.keys(file).map((locale) => {
                const {
                  contentType,
                  fileName
                } = file[locale];
                return (0, _upload__WEBPACK_IMPORTED_MODULE_4__.create)(httpUpload, params, file[locale]).then((upload) => {
                  return {
                    [locale]: {
                      contentType,
                      fileName,
                      uploadFrom: {
                        sys: {
                          type: "Link",
                          linkType: "Upload",
                          id: upload.sys.id
                        }
                      }
                    }
                  };
                });
              })).then((uploads) => {
                const file2 = uploads.reduce((fieldsData, upload) => _objectSpread(_objectSpread({}, fieldsData), upload), {});
                const asset = _objectSpread(_objectSpread({}, data), {}, {
                  fields: _objectSpread(_objectSpread({}, data.fields), {}, {
                    file: file2
                  })
                });
                return create(http2, params, asset);
              }).catch(contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.errorHandler);
            };
            const ASSET_PROCESSING_CHECK_WAIT = 3e3;
            const ASSET_PROCESSING_CHECK_RETRIES = 10;
            function checkIfAssetHasUrl(http2, params, {
              resolve: resolve2,
              reject,
              locale,
              processingCheckWait = ASSET_PROCESSING_CHECK_WAIT,
              processingCheckRetries = ASSET_PROCESSING_CHECK_RETRIES,
              checkCount = 0
            }) {
              return get3(http2, params).then((asset) => {
                if (asset.fields.file[locale].url) {
                  resolve2(asset);
                } else if (checkCount === processingCheckRetries) {
                  const error3 = new Error();
                  error3.name = "AssetProcessingTimeout";
                  error3.message = "Asset is taking longer then expected to process.";
                  reject(error3);
                } else {
                  checkCount++;
                  setTimeout(() => checkIfAssetHasUrl(http2, params, {
                    resolve: resolve2,
                    reject,
                    locale,
                    checkCount,
                    processingCheckWait,
                    processingCheckRetries
                  }), processingCheckWait);
                }
              });
            }
            const processForLocale = (http2, _ref) => {
              let {
                asset,
                locale,
                options: {
                  processingCheckRetries,
                  processingCheckWait
                } = {}
              } = _ref, params = _objectWithoutProperties(_ref, _excluded);
              return _raw__WEBPACK_IMPORTED_MODULE_3__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${asset.sys.id}/files/${locale}/process`, null, {
                headers: {
                  "X-Contentful-Version": asset.sys.version
                }
              }).then(() => {
                return new Promise((resolve2, reject) => checkIfAssetHasUrl(http2, {
                  spaceId: params.spaceId,
                  environmentId: params.environmentId,
                  assetId: asset.sys.id
                }, {
                  resolve: resolve2,
                  reject,
                  locale,
                  processingCheckWait,
                  processingCheckRetries
                }));
              });
            };
            const processForAllLocales = (http2, _ref2) => {
              let {
                asset,
                options: options2 = {}
              } = _ref2, params = _objectWithoutProperties(_ref2, _excluded2);
              const locales = Object.keys(asset.fields.file || {});
              let mostUpToDateAssetVersion = asset;
              const allProcessingLocales = locales.map((locale) => processForLocale(http2, _objectSpread(_objectSpread({}, params), {}, {
                asset,
                locale,
                options: options2
              })).then((result) => {
                mostUpToDateAssetVersion = result;
              }));
              return Promise.all(allProcessingLocales).then(() => mostUpToDateAssetVersion);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/bulk-action.ts": (
          /*!************************************************!*\
            !*** ./adapters/REST/endpoints/bulk-action.ts ***!
            \************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              publish: () => (
                /* binding */
                publish
              ),
              /* harmony export */
              unpublish: () => (
                /* binding */
                unpublish
              ),
              /* harmony export */
              validate: () => (
                /* binding */
                validate
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/bulk_actions/actions/${params.bulkActionId}`);
            };
            const publish = (http2, params, payload) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/bulk_actions/publish`, payload);
            };
            const unpublish = (http2, params, payload) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/bulk_actions/unpublish`, payload);
            };
            const validate = (http2, params, payload) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/bulk_actions/validate`, payload);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/comment.ts": (
          /*!********************************************!*\
            !*** ./adapters/REST/endpoints/comment.ts ***!
            \********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getAll: () => (
                /* binding */
                getAll
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            const _excluded = ["version"];
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const BODY_FORMAT_HEADER = "x-contentful-comment-body-format";
            const getSpaceEnvBaseUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}`;
            const getEntryBaseUrl = (params) => `${getSpaceEnvBaseUrl(params)}/entries/${params.entryId}/comments`;
            const getEntryCommentUrl = (params) => `${getEntryBaseUrl(params)}/${params.commentId}`;
            const getEntityBaseUrl = (params) => {
              if ("entryId" in params) {
                return getEntryBaseUrl(params);
              }
              const {
                parentEntityId,
                parentEntityType
              } = params;
              const parentPlural = parentEntityType === "Workflow" ? "workflows" : "entries";
              const versionPath = "parentEntityVersion" in params ? `/versions/${params.parentEntityVersion}` : "";
              return `${getSpaceEnvBaseUrl(params)}/${parentPlural}/${parentEntityId}${versionPath}/comments`;
            };
            const get3 = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getEntryCommentUrl(params), {
              headers: params.bodyFormat === "rich-text" ? {
                [BODY_FORMAT_HEADER]: params.bodyFormat
              } : {}
            });
            const getMany = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getEntityBaseUrl(params), {
              params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query),
              headers: params.bodyFormat === "rich-text" ? {
                [BODY_FORMAT_HEADER]: params.bodyFormat
              } : {}
            });
            const create = (http2, params, rawData) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, getEntityBaseUrl(params), data, {
                headers: typeof rawData.body !== "string" ? {
                  [BODY_FORMAT_HEADER]: "rich-text"
                } : {}
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getEntryCommentUrl(params), data, {
                headers: _objectSpread(_objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, typeof rawData.body !== "string" ? {
                  [BODY_FORMAT_HEADER]: "rich-text"
                } : {}), headers)
              });
            };
            const del = (http2, _ref) => {
              let {
                version
              } = _ref, params = _objectWithoutProperties(_ref, _excluded);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getEntryCommentUrl(params), {
                headers: {
                  "X-Contentful-Version": version
                }
              });
            };
            const getAll = getMany;
          }
        ),
        /***/
        "./adapters/REST/endpoints/content-type.ts": (
          /*!*************************************************!*\
            !*** ./adapters/REST/endpoints/content-type.ts ***!
            \*************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              createWithId: () => (
                /* binding */
                createWithId
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              publish: () => (
                /* binding */
                publish
              ),
              /* harmony export */
              unpublish: () => (
                /* binding */
                unpublish
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/content_types`;
            const getContentTypeUrl = (params) => getBaseUrl(params) + `/${params.contentTypeId}`;
            const get3 = (http2, params, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getContentTypeUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query),
                headers
              });
            };
            const getMany = (http2, params, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
                params: params.query,
                headers
              });
            };
            const create = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, getBaseUrl(params), data, {
                headers
              });
            };
            const createWithId = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getContentTypeUrl(params), data, {
                headers
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getContentTypeUrl(params), data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, params, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getContentTypeUrl(params), {
                headers
              });
            };
            const publish = (http2, params, rawData, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getContentTypeUrl(params) + "/published", null, {
                headers: _objectSpread({
                  "X-Contentful-Version": rawData.sys.version
                }, headers)
              });
            };
            const unpublish = (http2, params, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getContentTypeUrl(params) + "/published", {
                headers
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/editor-interface.ts": (
          /*!*****************************************************!*\
            !*** ./adapters/REST/endpoints/editor-interface.ts ***!
            \*****************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/content_types/${params.contentTypeId}/editor_interface`;
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params));
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/editor_interfaces`);
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getBaseUrl(params), data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/entry.ts": (
          /*!******************************************!*\
            !*** ./adapters/REST/endpoints/entry.ts ***!
            \******************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              archive: () => (
                /* binding */
                archive
              ),
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              createWithId: () => (
                /* binding */
                createWithId
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              getPublished: () => (
                /* binding */
                getPublished
              ),
              /* harmony export */
              patch: () => (
                /* binding */
                patch
              ),
              /* harmony export */
              publish: () => (
                /* binding */
                publish
              ),
              /* harmony export */
              references: () => (
                /* binding */
                references
              ),
              /* harmony export */
              unarchive: () => (
                /* binding */
                unarchive
              ),
              /* harmony export */
              unpublish: () => (
                /* binding */
                unpublish
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const get3 = (http2, params, rawData, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/entries/${params.entryId}`, {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query),
                headers: _objectSpread({}, headers)
              });
            };
            const getPublished = (http2, params, rawData, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/public/entries`, {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query),
                headers: _objectSpread({}, headers)
              });
            };
            const getMany = (http2, params, rawData, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/entries`, {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query),
                headers: _objectSpread({}, headers)
              });
            };
            const patch = (http2, params, data, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.patch(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/entries/${params.entryId}`, data, {
                headers: _objectSpread({
                  "X-Contentful-Version": params.version,
                  "Content-Type": "application/json-patch+json"
                }, headers)
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/entries/${params.entryId}`, data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/entries/${params.entryId}`);
            };
            const publish = (http2, params, rawData) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/entries/${params.entryId}/published`, null, {
                headers: {
                  "X-Contentful-Version": rawData.sys.version
                }
              });
            };
            const unpublish = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/entries/${params.entryId}/published`);
            };
            const archive = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/entries/${params.entryId}/archived`);
            };
            const unarchive = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/entries/${params.entryId}/archived`);
            };
            const create = (http2, params, rawData) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/entries`, data, {
                headers: {
                  "X-Contentful-Content-Type": params.contentTypeId
                }
              });
            };
            const createWithId = (http2, params, rawData) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/entries/${params.entryId}`, data, {
                headers: {
                  "X-Contentful-Content-Type": params.contentTypeId
                }
              });
            };
            const references = (http2, params) => {
              const {
                spaceId,
                environmentId,
                entryId,
                include
              } = params;
              const level = include || 2;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${spaceId}/environments/${environmentId}/entries/${entryId}/references?include=${level}`);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/environment-alias.ts": (
          /*!******************************************************!*\
            !*** ./adapters/REST/endpoints/environment-alias.ts ***!
            \******************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              createWithId: () => (
                /* binding */
                createWithId
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/environment_aliases`;
            const getEnvironmentAliasUrl = (params) => getBaseUrl(params) + `/${params.environmentAliasId}`;
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getEnvironmentAliasUrl(params));
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
                params: params.query
              });
            };
            const createWithId = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getEnvironmentAliasUrl(params), data, {
                headers
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getEnvironmentAliasUrl(params), data, {
                headers: _objectSpread(_objectSpread({}, headers), {}, {
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                })
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getEnvironmentAliasUrl(params));
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/environment-template-installation.ts": (
          /*!**********************************************************************!*\
            !*** ./adapters/REST/endpoints/environment-template-installation.ts ***!
            \**********************************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              getForEnvironment: () => (
                /* binding */
                getForEnvironment
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const _excluded = ["organizationId", "environmentTemplateId", "spaceId", "environmentId"], _excluded2 = ["spaceId", "environmentId", "environmentTemplateId", "installationId"];
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            const apiPath = (organizationId, ...pathSegments) => `/organizations/${organizationId}/environment_templates/` + pathSegments.join("/");
            const getMany = (http2, _ref) => {
              let {
                organizationId,
                environmentTemplateId,
                spaceId,
                environmentId
              } = _ref, paginationProps = _objectWithoutProperties(_ref, _excluded);
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, apiPath(organizationId, environmentTemplateId, "template_installations"), {
                params: _objectSpread(_objectSpread(_objectSpread({}, paginationProps), environmentId && {
                  "environment.sys.id": environmentId
                }), spaceId && {
                  "space.sys.id": spaceId
                })
              });
            };
            const getForEnvironment = (http2, _ref2) => {
              let {
                spaceId,
                environmentId,
                environmentTemplateId,
                installationId
              } = _ref2, paginationProps = _objectWithoutProperties(_ref2, _excluded2);
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${spaceId}/environments/${environmentId}/template_installations/${environmentTemplateId}`, {
                params: _objectSpread(_objectSpread({}, installationId && {
                  "sys.id": installationId
                }), paginationProps)
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/environment-template.ts": (
          /*!*********************************************************!*\
            !*** ./adapters/REST/endpoints/environment-template.ts ***!
            \*********************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              disconnect: () => (
                /* binding */
                disconnect
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              install: () => (
                /* binding */
                install
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              ),
              /* harmony export */
              validate: () => (
                /* binding */
                validate
              ),
              /* harmony export */
              versionUpdate: () => (
                /* binding */
                versionUpdate
              ),
              /* harmony export */
              versions: () => (
                /* binding */
                versions
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const apiPath = (organizationId, ...pathSegments) => `/organizations/${organizationId}/environment_templates/` + pathSegments.join("/");
            const get3 = (http2, {
              organizationId,
              environmentTemplateId,
              version,
              query: query5 = {}
            }) => version ? _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, apiPath(organizationId, environmentTemplateId, "versions", version), {
              params: query5
            }) : _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, apiPath(organizationId, environmentTemplateId), {
              params: query5
            });
            const getMany = (http2, {
              organizationId,
              query: query5 = {}
            }) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, apiPath(organizationId), {
              params: query5
            });
            const create = (http2, {
              organizationId
            }, payload) => _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, apiPath(organizationId), payload);
            const update = (http2, {
              organizationId,
              environmentTemplateId
            }, payload) => {
              var _payload$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(payload);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, apiPath(organizationId, environmentTemplateId), data, {
                headers: {
                  "X-Contentful-Version": (_payload$sys$version = payload.sys.version) !== null && _payload$sys$version !== void 0 ? _payload$sys$version : 0
                }
              });
            };
            const versionUpdate = (http2, {
              organizationId,
              version,
              environmentTemplateId
            }, payload) => _raw__WEBPACK_IMPORTED_MODULE_1__.patch(http2, apiPath(organizationId, environmentTemplateId, "versions", version), payload);
            const del = (http2, {
              organizationId,
              environmentTemplateId
            }) => _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, apiPath(organizationId, environmentTemplateId));
            const versions = (http2, {
              organizationId,
              environmentTemplateId,
              query: query5 = {}
            }) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, apiPath(organizationId, environmentTemplateId, "versions"), {
              params: query5
            });
            const validate = (http2, {
              spaceId,
              environmentId,
              environmentTemplateId,
              version
            }, payload) => _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, version ? `/spaces/${spaceId}/environments/${environmentId}/template_installations/${environmentTemplateId}/versions/${version}/validated` : `/spaces/${spaceId}/environments/${environmentId}/template_installations/${environmentTemplateId}/validated`, payload);
            const install = (http2, {
              spaceId,
              environmentId,
              environmentTemplateId
            }, payload) => _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, `/spaces/${spaceId}/environments/${environmentId}/template_installations/${environmentTemplateId}/versions`, payload);
            const disconnect = (http2, {
              spaceId,
              environmentId,
              environmentTemplateId
            }) => _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, `/spaces/${spaceId}/environments/${environmentId}/template_installations/${environmentTemplateId}`);
          }
        ),
        /***/
        "./adapters/REST/endpoints/environment.ts": (
          /*!************************************************!*\
            !*** ./adapters/REST/endpoints/environment.ts ***!
            \************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              createWithId: () => (
                /* binding */
                createWithId
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}`);
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/environments`, {
                params: params.query
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}`, data, {
                headers: _objectSpread(_objectSpread({}, headers), {}, {
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                })
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}`);
            };
            const create = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, `/spaces/${params.spaceId}/environments`, data, {
                headers
              });
            };
            const createWithId = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}`, data, {
                headers: _objectSpread(_objectSpread({}, headers), params.sourceEnvironmentId ? {
                  "X-Contentful-Source-Environment": params.sourceEnvironmentId
                } : {})
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/extension.ts": (
          /*!**********************************************!*\
            !*** ./adapters/REST/endpoints/extension.ts ***!
            \**********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              createWithId: () => (
                /* binding */
                createWithId
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getExtensionUrl: () => (
                /* binding */
                getExtensionUrl
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/extensions`;
            const getExtensionUrl = (params) => getBaseUrl(params) + `/${params.extensionId}`;
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getExtensionUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query)
              });
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query)
              });
            };
            const create = (http2, params, rawData, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, getBaseUrl(params), rawData, {
                headers
              });
            };
            const createWithId = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getExtensionUrl(params), data, {
                headers
              });
            };
            const update = async (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getExtensionUrl(params), data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getExtensionUrl(params));
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/http.ts": (
          /*!*****************************************!*\
            !*** ./adapters/REST/endpoints/http.ts ***!
            \*****************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              patch: () => (
                /* binding */
                patch
              ),
              /* harmony export */
              post: () => (
                /* binding */
                post
              ),
              /* harmony export */
              put: () => (
                /* binding */
                put
              ),
              /* harmony export */
              request: () => (
                /* binding */
                request
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const get3 = (http2, {
              url,
              config
            }) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, url, config);
            };
            const post = (http2, {
              url,
              config
            }, payload) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, url, payload, config);
            };
            const put = (http2, {
              url,
              config
            }, payload) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, url, payload, config);
            };
            const patch = (http2, {
              url,
              config
            }, payload) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.patch(http2, url, payload, config);
            };
            const del = (http2, {
              url,
              config
            }) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.del(http2, url, config);
            };
            const request = (http2, {
              url,
              config
            }) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.http(http2, url, config);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/index.ts": (
          /*!******************************************!*\
            !*** ./adapters/REST/endpoints/index.ts ***!
            \******************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _api_key__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./api-key */
              "./adapters/REST/endpoints/api-key.ts"
            );
            var _app_action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./app-action */
              "./adapters/REST/endpoints/app-action.ts"
            );
            var _app_action_call__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./app-action-call */
              "./adapters/REST/endpoints/app-action-call.ts"
            );
            var _app_bundle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ./app-bundle */
              "./adapters/REST/endpoints/app-bundle.ts"
            );
            var _app_definition__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ./app-definition */
              "./adapters/REST/endpoints/app-definition.ts"
            );
            var _app_details__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
              /*! ./app-details */
              "./adapters/REST/endpoints/app-details.ts"
            );
            var _app_installation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
              /*! ./app-installation */
              "./adapters/REST/endpoints/app-installation.ts"
            );
            var _app_signed_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
              /*! ./app-signed-request */
              "./adapters/REST/endpoints/app-signed-request.ts"
            );
            var _app_signing_secret__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
              /*! ./app-signing-secret */
              "./adapters/REST/endpoints/app-signing-secret.ts"
            );
            var _app_upload__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
              /*! ./app-upload */
              "./adapters/REST/endpoints/app-upload.ts"
            );
            var _asset__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
              /*! ./asset */
              "./adapters/REST/endpoints/asset.ts"
            );
            var _asset_key__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(
              /*! ./asset-key */
              "./adapters/REST/endpoints/asset-key.ts"
            );
            var _bulk_action__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
              /*! ./bulk-action */
              "./adapters/REST/endpoints/bulk-action.ts"
            );
            var _comment__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(
              /*! ./comment */
              "./adapters/REST/endpoints/comment.ts"
            );
            var _content_type__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(
              /*! ./content-type */
              "./adapters/REST/endpoints/content-type.ts"
            );
            var _editor_interface__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(
              /*! ./editor-interface */
              "./adapters/REST/endpoints/editor-interface.ts"
            );
            var _entry__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__2(
              /*! ./entry */
              "./adapters/REST/endpoints/entry.ts"
            );
            var _environment__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__2(
              /*! ./environment */
              "./adapters/REST/endpoints/environment.ts"
            );
            var _environment_alias__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__2(
              /*! ./environment-alias */
              "./adapters/REST/endpoints/environment-alias.ts"
            );
            var _environment_template__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__2(
              /*! ./environment-template */
              "./adapters/REST/endpoints/environment-template.ts"
            );
            var _environment_template_installation__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__2(
              /*! ./environment-template-installation */
              "./adapters/REST/endpoints/environment-template-installation.ts"
            );
            var _extension__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__2(
              /*! ./extension */
              "./adapters/REST/endpoints/extension.ts"
            );
            var _http__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__2(
              /*! ./http */
              "./adapters/REST/endpoints/http.ts"
            );
            var _locale__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__2(
              /*! ./locale */
              "./adapters/REST/endpoints/locale.ts"
            );
            var _organization__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__2(
              /*! ./organization */
              "./adapters/REST/endpoints/organization.ts"
            );
            var _organization_invitation__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__2(
              /*! ./organization-invitation */
              "./adapters/REST/endpoints/organization-invitation.ts"
            );
            var _organization_membership__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__2(
              /*! ./organization-membership */
              "./adapters/REST/endpoints/organization-membership.ts"
            );
            var _personal_access_token__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__2(
              /*! ./personal-access-token */
              "./adapters/REST/endpoints/personal-access-token.ts"
            );
            var _access_token__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__2(
              /*! ./access-token */
              "./adapters/REST/endpoints/access-token.ts"
            );
            var _preview_api_key__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__2(
              /*! ./preview-api-key */
              "./adapters/REST/endpoints/preview-api-key.ts"
            );
            var _release__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__2(
              /*! ./release */
              "./adapters/REST/endpoints/release.ts"
            );
            var _release_action__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__2(
              /*! ./release-action */
              "./adapters/REST/endpoints/release-action.ts"
            );
            var _role__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__2(
              /*! ./role */
              "./adapters/REST/endpoints/role.ts"
            );
            var _scheduled_action__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__2(
              /*! ./scheduled-action */
              "./adapters/REST/endpoints/scheduled-action.ts"
            );
            var _snapshot__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__2(
              /*! ./snapshot */
              "./adapters/REST/endpoints/snapshot.ts"
            );
            var _space__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__2(
              /*! ./space */
              "./adapters/REST/endpoints/space.ts"
            );
            var _space_member__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__2(
              /*! ./space-member */
              "./adapters/REST/endpoints/space-member.ts"
            );
            var _space_membership__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__2(
              /*! ./space-membership */
              "./adapters/REST/endpoints/space-membership.ts"
            );
            var _tag__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__2(
              /*! ./tag */
              "./adapters/REST/endpoints/tag.ts"
            );
            var _task__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__2(
              /*! ./task */
              "./adapters/REST/endpoints/task.ts"
            );
            var _team__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__2(
              /*! ./team */
              "./adapters/REST/endpoints/team.ts"
            );
            var _team_membership__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__2(
              /*! ./team-membership */
              "./adapters/REST/endpoints/team-membership.ts"
            );
            var _team_space_membership__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__2(
              /*! ./team-space-membership */
              "./adapters/REST/endpoints/team-space-membership.ts"
            );
            var _ui_config__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__2(
              /*! ./ui-config */
              "./adapters/REST/endpoints/ui-config.ts"
            );
            var _upload__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__2(
              /*! ./upload */
              "./adapters/REST/endpoints/upload.ts"
            );
            var _usage__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__2(
              /*! ./usage */
              "./adapters/REST/endpoints/usage.ts"
            );
            var _user__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__2(
              /*! ./user */
              "./adapters/REST/endpoints/user.ts"
            );
            var _user_ui_config__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__2(
              /*! ./user-ui-config */
              "./adapters/REST/endpoints/user-ui-config.ts"
            );
            var _webhook__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__2(
              /*! ./webhook */
              "./adapters/REST/endpoints/webhook.ts"
            );
            var _workflow__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__2(
              /*! ./workflow */
              "./adapters/REST/endpoints/workflow.ts"
            );
            var _workflow_definition__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__2(
              /*! ./workflow-definition */
              "./adapters/REST/endpoints/workflow-definition.ts"
            );
            var _workflows_changelog__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__2(
              /*! ./workflows-changelog */
              "./adapters/REST/endpoints/workflows-changelog.ts"
            );
            const __WEBPACK_DEFAULT_EXPORT__ = {
              ApiKey: _api_key__WEBPACK_IMPORTED_MODULE_0__,
              AppAction: _app_action__WEBPACK_IMPORTED_MODULE_1__,
              AppActionCall: _app_action_call__WEBPACK_IMPORTED_MODULE_2__,
              AppBundle: _app_bundle__WEBPACK_IMPORTED_MODULE_3__,
              AppDefinition: _app_definition__WEBPACK_IMPORTED_MODULE_4__,
              AppInstallation: _app_installation__WEBPACK_IMPORTED_MODULE_6__,
              AppUpload: _app_upload__WEBPACK_IMPORTED_MODULE_9__,
              AppSignedRequest: _app_signed_request__WEBPACK_IMPORTED_MODULE_7__,
              AppSigningSecret: _app_signing_secret__WEBPACK_IMPORTED_MODULE_8__,
              AppDetails: _app_details__WEBPACK_IMPORTED_MODULE_5__,
              Asset: _asset__WEBPACK_IMPORTED_MODULE_10__,
              AssetKey: _asset_key__WEBPACK_IMPORTED_MODULE_11__,
              BulkAction: _bulk_action__WEBPACK_IMPORTED_MODULE_12__,
              Comment: _comment__WEBPACK_IMPORTED_MODULE_13__,
              ContentType: _content_type__WEBPACK_IMPORTED_MODULE_14__,
              EditorInterface: _editor_interface__WEBPACK_IMPORTED_MODULE_15__,
              Entry: _entry__WEBPACK_IMPORTED_MODULE_16__,
              Environment: _environment__WEBPACK_IMPORTED_MODULE_17__,
              EnvironmentAlias: _environment_alias__WEBPACK_IMPORTED_MODULE_18__,
              EnvironmentTemplate: _environment_template__WEBPACK_IMPORTED_MODULE_19__,
              EnvironmentTemplateInstallation: _environment_template_installation__WEBPACK_IMPORTED_MODULE_20__,
              Extension: _extension__WEBPACK_IMPORTED_MODULE_21__,
              Http: _http__WEBPACK_IMPORTED_MODULE_22__,
              Locale: _locale__WEBPACK_IMPORTED_MODULE_23__,
              Organization: _organization__WEBPACK_IMPORTED_MODULE_24__,
              OrganizationInvitation: _organization_invitation__WEBPACK_IMPORTED_MODULE_25__,
              OrganizationMembership: _organization_membership__WEBPACK_IMPORTED_MODULE_26__,
              PersonalAccessToken: _personal_access_token__WEBPACK_IMPORTED_MODULE_27__,
              AccessToken: _access_token__WEBPACK_IMPORTED_MODULE_28__,
              PreviewApiKey: _preview_api_key__WEBPACK_IMPORTED_MODULE_29__,
              Release: _release__WEBPACK_IMPORTED_MODULE_30__,
              ReleaseAction: _release_action__WEBPACK_IMPORTED_MODULE_31__,
              Role: _role__WEBPACK_IMPORTED_MODULE_32__,
              ScheduledAction: _scheduled_action__WEBPACK_IMPORTED_MODULE_33__,
              Snapshot: _snapshot__WEBPACK_IMPORTED_MODULE_34__,
              Space: _space__WEBPACK_IMPORTED_MODULE_35__,
              SpaceMember: _space_member__WEBPACK_IMPORTED_MODULE_36__,
              SpaceMembership: _space_membership__WEBPACK_IMPORTED_MODULE_37__,
              Tag: _tag__WEBPACK_IMPORTED_MODULE_38__,
              Task: _task__WEBPACK_IMPORTED_MODULE_39__,
              Team: _team__WEBPACK_IMPORTED_MODULE_40__,
              TeamMembership: _team_membership__WEBPACK_IMPORTED_MODULE_41__,
              TeamSpaceMembership: _team_space_membership__WEBPACK_IMPORTED_MODULE_42__,
              UIConfig: _ui_config__WEBPACK_IMPORTED_MODULE_43__,
              Upload: _upload__WEBPACK_IMPORTED_MODULE_44__,
              Usage: _usage__WEBPACK_IMPORTED_MODULE_45__,
              User: _user__WEBPACK_IMPORTED_MODULE_46__,
              UserUIConfig: _user_ui_config__WEBPACK_IMPORTED_MODULE_47__,
              Webhook: _webhook__WEBPACK_IMPORTED_MODULE_48__,
              WorkflowDefinition: _workflow_definition__WEBPACK_IMPORTED_MODULE_50__,
              Workflow: _workflow__WEBPACK_IMPORTED_MODULE_49__,
              WorkflowsChangelog: _workflows_changelog__WEBPACK_IMPORTED_MODULE_51__
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/locale.ts": (
          /*!*******************************************!*\
            !*** ./adapters/REST/endpoints/locale.ts ***!
            \*******************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/locales/${params.localeId}`);
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/locales`, {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query)
              });
            };
            const create = (http2, params, data, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/locales`, data, {
                headers
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              delete data.default;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/locales/${params.localeId}`, data, {
                headers: _objectSpread(_objectSpread({}, headers), {}, {
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                })
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/locales/${params.localeId}`);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/organization-invitation.ts": (
          /*!************************************************************!*\
            !*** ./adapters/REST/endpoints/organization-invitation.ts ***!
            \************************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const OrganizationUserManagementAlphaHeaders = {
              "x-contentful-enable-alpha-feature": "organization-user-management-api"
            };
            const InvitationAlphaHeaders = {
              "x-contentful-enable-alpha-feature": "pending-org-membership"
            };
            const create = (http2, params, data, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, `/organizations/${params.organizationId}/invitations`, data, {
                headers: _objectSpread(_objectSpread({}, InvitationAlphaHeaders), headers)
              });
            };
            const get3 = (http2, params, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/organizations/${params.organizationId}/invitations/${params.invitationId}`, {
                headers: _objectSpread(_objectSpread({}, OrganizationUserManagementAlphaHeaders), headers)
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/organization-membership.ts": (
          /*!************************************************************!*\
            !*** ./adapters/REST/endpoints/organization-membership.ts ***!
            \************************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/organizations/${params.organizationId}/organization_memberships`;
            const getEntityUrl = (params) => `${getBaseUrl(params)}/${params.organizationMembershipId}`;
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getEntityUrl(params));
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
                params: params.query
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              const {
                role
              } = data;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getEntityUrl(params), {
                role
              }, {
                headers: _objectSpread(_objectSpread({}, headers), {}, {
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                })
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getEntityUrl(params));
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/organization.ts": (
          /*!*************************************************!*\
            !*** ./adapters/REST/endpoints/organization.ts ***!
            \*************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/organizations`, {
                params: params === null || params === void 0 ? void 0 : params.query
              });
            };
            const get3 = (http2, params) => {
              return getMany(http2, {
                query: {
                  limit: 100
                }
              }).then((data) => {
                const org = data.items.find((org2) => org2.sys.id === params.organizationId);
                if (!org) {
                  const error3 = new Error(`No organization was found with the ID ${params.organizationId} instead got ${JSON.stringify(data)}`);
                  error3.status = 404;
                  error3.statusText = "Not Found";
                  return Promise.reject(error3);
                }
                return org;
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/personal-access-token.ts": (
          /*!**********************************************************!*\
            !*** ./adapters/REST/endpoints/personal-access-token.ts ***!
            \**********************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              revoke: () => (
                /* binding */
                revoke
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/users/me/access_tokens/${params.tokenId}`);
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, "/users/me/access_tokens", {
                params: params.query
              });
            };
            const create = (http2, _params, rawData, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, "/users/me/access_tokens", rawData, {
                headers
              });
            };
            const revoke = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, `/users/me/access_tokens/${params.tokenId}/revoked`, null);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/preview-api-key.ts": (
          /*!****************************************************!*\
            !*** ./adapters/REST/endpoints/preview-api-key.ts ***!
            \****************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/preview_api_keys/${params.previewApiKeyId}`);
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/preview_api_keys`, {
                params: params.query
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/raw.ts": (
          /*!****************************************!*\
            !*** ./adapters/REST/endpoints/raw.ts ***!
            \****************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              http: () => (
                /* binding */
                http2
              ),
              /* harmony export */
              patch: () => (
                /* binding */
                patch
              ),
              /* harmony export */
              post: () => (
                /* binding */
                post
              ),
              /* harmony export */
              put: () => (
                /* binding */
                put
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function getBaseUrl(http3) {
              var _http$defaults$baseUR;
              return (_http$defaults$baseUR = http3.defaults.baseURL) === null || _http$defaults$baseUR === void 0 ? void 0 : _http$defaults$baseUR.split("/spaces")[0];
            }
            function get3(http3, url, config) {
              return http3.get(url, _objectSpread({
                baseURL: getBaseUrl(http3)
              }, config)).then((response) => response.data, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.errorHandler);
            }
            function patch(http3, url, payload, config) {
              return http3.patch(url, payload, _objectSpread({
                baseURL: getBaseUrl(http3)
              }, config)).then((response) => response.data, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.errorHandler);
            }
            function post(http3, url, payload, config) {
              return http3.post(url, payload, _objectSpread({
                baseURL: getBaseUrl(http3)
              }, config)).then((response) => response.data, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.errorHandler);
            }
            function put(http3, url, payload, config) {
              return http3.put(url, payload, _objectSpread({
                baseURL: getBaseUrl(http3)
              }, config)).then((response) => response.data, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.errorHandler);
            }
            function del(http3, url, config) {
              return http3.delete(url, _objectSpread({
                baseURL: getBaseUrl(http3)
              }, config)).then((response) => response.data, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.errorHandler);
            }
            function http2(http3, url, config) {
              return http3(url, _objectSpread({
                baseURL: getBaseUrl(http3)
              }, config)).then((response) => response.data, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.errorHandler);
            }
          }
        ),
        /***/
        "./adapters/REST/endpoints/release-action.ts": (
          /*!***************************************************!*\
            !*** ./adapters/REST/endpoints/release-action.ts ***!
            \***************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              queryForRelease: () => (
                /* binding */
                queryForRelease
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}/actions/${params.actionId}`);
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/release_actions`, {
                params: params.query
              });
            };
            const queryForRelease = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/release_actions`, {
                params: _objectSpread({
                  "sys.release.sys.id[in]": params.releaseId
                }, params.query)
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/release.ts": (
          /*!********************************************!*\
            !*** ./adapters/REST/endpoints/release.ts ***!
            \********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              archive: () => (
                /* binding */
                archive
              ),
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              publish: () => (
                /* binding */
                publish
              ),
              /* harmony export */
              query: () => (
                /* binding */
                query5
              ),
              /* harmony export */
              unarchive: () => (
                /* binding */
                unarchive
              ),
              /* harmony export */
              unpublish: () => (
                /* binding */
                unpublish
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              ),
              /* harmony export */
              validate: () => (
                /* binding */
                validate
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}`);
            };
            const query5 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases`, {
                params: params.query
              });
            };
            const create = (http2, params, payload) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases`, payload);
            };
            const update = (http2, params, payload, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}`, payload, {
                headers: _objectSpread({
                  "X-Contentful-Version": params.version
                }, headers)
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.del(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}`);
            };
            const publish = (http2, params, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}/published`, null, {
                headers: _objectSpread({
                  "X-Contentful-Version": params.version
                }, headers)
              });
            };
            const unpublish = (http2, params, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.del(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}/published`, {
                headers: _objectSpread({
                  "X-Contentful-Version": params.version
                }, headers)
              });
            };
            const validate = (http2, params, payload) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}/validate`, payload);
            };
            const archive = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}/archived`, null, {
                headers: {
                  "X-Contentful-Version": params.version
                }
              });
            };
            const unarchive = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.del(http2, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}/archived`, {
                headers: {
                  "X-Contentful-Version": params.version
                }
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/role.ts": (
          /*!*****************************************!*\
            !*** ./adapters/REST/endpoints/role.ts ***!
            \*****************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              createWithId: () => (
                /* binding */
                createWithId
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/roles/${params.roleId}`);
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/roles`, {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query)
              });
            };
            const create = (http2, params, data, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, `/spaces/${params.spaceId}/roles`, data, {
                headers
              });
            };
            const createWithId = (http2, params, data, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, `/spaces/${params.spaceId}/roles/${params.roleId}`, data, {
                headers
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, `/spaces/${params.spaceId}/roles/${params.roleId}`, data, {
                headers: _objectSpread(_objectSpread({}, headers), {}, {
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                })
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, `/spaces/${params.spaceId}/roles/${params.roleId}`);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/scheduled-action.ts": (
          /*!*****************************************************!*\
            !*** ./adapters/REST/endpoints/scheduled-action.ts ***!
            \*****************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/scheduled_actions/${params.scheduledActionId}`, {
                params: {
                  "environment.sys.id": params.environmentId
                }
              });
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/scheduled_actions`, {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_1__.normalizeSelect)(params.query)
              });
            };
            const create = (http2, params, data) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.post(http2, `/spaces/${params.spaceId}/scheduled_actions`, data);
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.del(http2, `/spaces/${params.spaceId}/scheduled_actions/${params.scheduledActionId}`, {
                params: {
                  "environment.sys.id": params.environmentId
                }
              });
            };
            const update = (http2, params, data) => {
              var _data$environment;
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, `/spaces/${params.spaceId}/scheduled_actions/${params.scheduledActionId}`, data, {
                params: {
                  "environment.sys.id": (_data$environment = data.environment) === null || _data$environment === void 0 ? void 0 : _data$environment.sys.id
                },
                headers: {
                  "X-Contentful-Version": params.version
                }
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/snapshot.ts": (
          /*!*********************************************!*\
            !*** ./adapters/REST/endpoints/snapshot.ts ***!
            \*********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              getForContentType: () => (
                /* binding */
                getForContentType
              ),
              /* harmony export */
              getForEntry: () => (
                /* binding */
                getForEntry
              ),
              /* harmony export */
              getManyForContentType: () => (
                /* binding */
                getManyForContentType
              ),
              /* harmony export */
              getManyForEntry: () => (
                /* binding */
                getManyForEntry
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            const getBaseEntryUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/entries/${params.entryId}/snapshots`;
            const getEntryUrl = (params) => getBaseEntryUrl(params) + `/${params.snapshotId}`;
            const getManyForEntry = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getBaseEntryUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_1__.normalizeSelect)(params.query)
              });
            };
            const getForEntry = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getEntryUrl(params));
            };
            const getBaseContentTypeUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/content_types/${params.contentTypeId}/snapshots`;
            const getContentTypeUrl = (params) => getBaseContentTypeUrl(params) + `/${params.snapshotId}`;
            const getManyForContentType = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getBaseContentTypeUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_1__.normalizeSelect)(params.query)
              });
            };
            const getForContentType = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getContentTypeUrl(params));
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/space-member.ts": (
          /*!*************************************************!*\
            !*** ./adapters/REST/endpoints/space-member.ts ***!
            \*************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const get3 = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/space_members/${params.spaceMemberId}`);
            const getMany = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/space_members`, {
              params: params.query
            });
          }
        ),
        /***/
        "./adapters/REST/endpoints/space-membership.ts": (
          /*!*****************************************************!*\
            !*** ./adapters/REST/endpoints/space-membership.ts ***!
            \*****************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              createWithId: () => (
                /* binding */
                createWithId
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getForOrganization: () => (
                /* binding */
                getForOrganization
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              getManyForOrganization: () => (
                /* binding */
                getManyForOrganization
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function spaceMembershipDeprecationWarning() {
              console.warn("The user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user)");
            }
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/space_memberships`;
            const getEntityUrl = (params) => `${getBaseUrl(params)}/${params.spaceMembershipId}`;
            const get3 = (http2, params) => {
              spaceMembershipDeprecationWarning();
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getEntityUrl(params));
            };
            const getMany = (http2, params) => {
              spaceMembershipDeprecationWarning();
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
                params: params.query
              });
            };
            const getForOrganization = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/organizations/${params.organizationId}/space_memberships/${params.spaceMembershipId}`);
            };
            const getManyForOrganization = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/organizations/${params.organizationId}/space_memberships`, {
                params: params.query
              });
            };
            const create = (http2, params, data, headers) => {
              spaceMembershipDeprecationWarning();
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, getBaseUrl(params), data, {
                headers
              });
            };
            const createWithId = (http2, params, data, headers) => {
              spaceMembershipDeprecationWarning();
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getEntityUrl(params), data, {
                headers
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getEntityUrl(params), data, {
                headers: _objectSpread(_objectSpread({}, headers), {}, {
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                })
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getEntityUrl(params));
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/space.ts": (
          /*!******************************************!*\
            !*** ./adapters/REST/endpoints/space.ts ***!
            \******************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const get3 = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}`);
            const getMany = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces`, {
              params: params.query
            });
            const create = (http2, params, payload, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, `/spaces`, payload, {
                headers: params.organizationId ? _objectSpread(_objectSpread({}, headers), {}, {
                  "X-Contentful-Organization": params.organizationId
                }) : headers
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, `/spaces/${params.spaceId}`, data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, `/spaces/${params.spaceId}`);
          }
        ),
        /***/
        "./adapters/REST/endpoints/tag.ts": (
          /*!****************************************!*\
            !*** ./adapters/REST/endpoints/tag.ts ***!
            \****************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              createWithId: () => (
                /* binding */
                createWithId
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const _excluded = ["version"];
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/tags`;
            const getTagUrl = (params) => getBaseUrl(params) + `/${params.tagId}`;
            const get3 = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getTagUrl(params));
            const getMany = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
              params: params.query
            });
            const createWithId = (http2, params, rawData) => {
              var _rawData$sys$visibili;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getTagUrl(params), data, {
                headers: {
                  "X-Contentful-Tag-Visibility": (_rawData$sys$visibili = rawData.sys.visibility) !== null && _rawData$sys$visibili !== void 0 ? _rawData$sys$visibili : "private"
                }
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getTagUrl(params), data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, _ref) => {
              let {
                version
              } = _ref, params = _objectWithoutProperties(_ref, _excluded);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getTagUrl(params), {
                headers: {
                  "X-Contentful-Version": version
                }
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/task.ts": (
          /*!*****************************************!*\
            !*** ./adapters/REST/endpoints/task.ts ***!
            \*****************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getAll: () => (
                /* binding */
                getAll
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            const _excluded = ["version"];
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/entries/${params.entryId}/tasks`;
            const getTaskUrl = (params) => `${getBaseUrl(params)}/${params.taskId}`;
            const get3 = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getTaskUrl(params));
            const getMany = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
              params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query)
            });
            const getAll = getMany;
            const create = (http2, params, rawData) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, getBaseUrl(params), data);
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getTaskUrl(params), data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, _ref) => {
              let {
                version
              } = _ref, params = _objectWithoutProperties(_ref, _excluded);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getTaskUrl(params), {
                headers: {
                  "X-Contentful-Version": version
                }
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/team-membership.ts": (
          /*!****************************************************!*\
            !*** ./adapters/REST/endpoints/team-membership.ts ***!
            \****************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getManyForOrganization: () => (
                /* binding */
                getManyForOrganization
              ),
              /* harmony export */
              getManyForTeam: () => (
                /* binding */
                getManyForTeam
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/organizations/${params.organizationId}/teams/${params.teamId}/team_memberships`;
            const getEntityUrl = (params) => `/organizations/${params.organizationId}/teams/${params.teamId}/team_memberships/${params.teamMembershipId}`;
            const get3 = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getEntityUrl(params));
            const getManyForOrganization = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/organizations/${params.organizationId}/team_memberships`, {
              params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query)
            });
            const getManyForTeam = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query)
              });
            };
            const create = (http2, params, rawData, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, getBaseUrl(params), rawData, {
                headers
              });
            };
            const update = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getEntityUrl(params), data, {
                headers: _objectSpread({
                  "X-Contentful-Version": rawData.sys.version || 0
                }, headers)
              });
            };
            const del = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getEntityUrl(params));
          }
        ),
        /***/
        "./adapters/REST/endpoints/team-space-membership.ts": (
          /*!**********************************************************!*\
            !*** ./adapters/REST/endpoints/team-space-membership.ts ***!
            \**********************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getForOrganization: () => (
                /* binding */
                getForOrganization
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              getManyForOrganization: () => (
                /* binding */
                getManyForOrganization
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/team_space_memberships`;
            const getEntityUrl = (params) => `${getBaseUrl(params)}/${params.teamSpaceMembershipId}`;
            const get3 = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getEntityUrl(params));
            const getMany = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
              params: params.query
            });
            const getForOrganization = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/organizations/${params.organizationId}/team_space_memberships/${params.teamSpaceMembershipId}`);
            };
            const getManyForOrganization = (http2, params) => {
              const query5 = params.query || {};
              if (params.teamId) {
                query5["sys.team.sys.id"] = params.teamId;
              }
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/organizations/${params.organizationId}/team_space_memberships`, {
                params: params.query
              });
            };
            const create = (http2, params, rawData, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, getBaseUrl(params), rawData, {
                headers: _objectSpread({
                  "x-contentful-team": params.teamId
                }, headers)
              });
            };
            const update = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getEntityUrl(params), data, {
                headers: _objectSpread({
                  "X-Contentful-Version": rawData.sys.version || 0,
                  "x-contentful-team": rawData.sys.team.sys.id
                }, headers)
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getEntityUrl(params));
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/team.ts": (
          /*!*****************************************!*\
            !*** ./adapters/REST/endpoints/team.ts ***!
            \*****************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              getManyForSpace: () => (
                /* binding */
                getManyForSpace
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/organizations/${params.organizationId}/teams`;
            const getEntityUrl = (params) => `${getBaseUrl(params)}/${params.teamId}`;
            const get3 = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getEntityUrl(params));
            const getMany = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
              params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query)
            });
            const getManyForSpace = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, `/spaces/${params.spaceId}/teams`, {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query)
              });
            };
            const create = (http2, params, rawData, headers) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, getBaseUrl(params), rawData, {
                headers
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getEntityUrl(params), data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getEntityUrl(params));
          }
        ),
        /***/
        "./adapters/REST/endpoints/ui-config.ts": (
          /*!**********************************************!*\
            !*** ./adapters/REST/endpoints/ui-config.ts ***!
            \**********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            const getUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/ui_config`;
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getUrl(params));
            };
            const update = (http2, params, rawData) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_0__.put(http2, getUrl(params), data, {
                headers: {
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/upload.ts": (
          /*!*******************************************!*\
            !*** ./adapters/REST/endpoints/upload.ts ***!
            \*******************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              )
              /* harmony export */
            });
            var _upload_http_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../../../upload-http-client */
              "./upload-http-client.ts"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const create = (http2, params, data) => {
              const httpUpload = (0, _upload_http_client__WEBPACK_IMPORTED_MODULE_0__.getUploadHttpClient)(http2);
              const {
                file
              } = data;
              if (!file) {
                return Promise.reject(new Error("Unable to locate a file to upload."));
              }
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(httpUpload, `/spaces/${params.spaceId}/uploads`, file, {
                headers: {
                  "Content-Type": "application/octet-stream"
                }
              });
            };
            const del = (http2, params) => {
              const httpUpload = (0, _upload_http_client__WEBPACK_IMPORTED_MODULE_0__.getUploadHttpClient)(http2);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(httpUpload, `/spaces/${params.spaceId}/uploads/${params.uploadId}`);
            };
            const get3 = (http2, params) => {
              const httpUpload = (0, _upload_http_client__WEBPACK_IMPORTED_MODULE_0__.getUploadHttpClient)(http2);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(httpUpload, `/spaces/${params.spaceId}/uploads/${params.uploadId}`);
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/usage.ts": (
          /*!******************************************!*\
            !*** ./adapters/REST/endpoints/usage.ts ***!
            \******************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              getManyForOrganization: () => (
                /* binding */
                getManyForOrganization
              ),
              /* harmony export */
              getManyForSpace: () => (
                /* binding */
                getManyForSpace
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const getManyForSpace = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/organizations/${params.organizationId}/space_periodic_usages`, {
                params: params.query
              });
            };
            const getManyForOrganization = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/organizations/${params.organizationId}/organization_periodic_usages`, {
                params: params.query
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/user-ui-config.ts": (
          /*!***************************************************!*\
            !*** ./adapters/REST/endpoints/user-ui-config.ts ***!
            \***************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const getUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/ui_config/me`;
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getUrl(params));
            };
            const update = (http2, params, rawData) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getUrl(params), data, {
                headers: {
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/user.ts": (
          /*!*****************************************!*\
            !*** ./adapters/REST/endpoints/user.ts ***!
            \*****************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              getCurrent: () => (
                /* binding */
                getCurrent
              ),
              /* harmony export */
              getForOrganization: () => (
                /* binding */
                getForOrganization
              ),
              /* harmony export */
              getForSpace: () => (
                /* binding */
                getForSpace
              ),
              /* harmony export */
              getManyForOrganization: () => (
                /* binding */
                getManyForOrganization
              ),
              /* harmony export */
              getManyForSpace: () => (
                /* binding */
                getManyForSpace
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const getForSpace = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/users/${params.userId}`);
            };
            const getCurrent = (http2, params) => _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/users/me`, {
              params: params === null || params === void 0 ? void 0 : params.query
            });
            const getManyForSpace = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/spaces/${params.spaceId}/users`, {
                params: params.query
              });
            };
            const getForOrganization = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/organizations/${params.organizationId}/users/${params.userId}`);
            };
            const getManyForOrganization = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, `/organizations/${params.organizationId}/users`, {
                params: params.query
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/utils.ts": (
          /*!******************************************!*\
            !*** ./adapters/REST/endpoints/utils.ts ***!
            \******************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              normalizeSelect: () => (
                /* binding */
                normalizeSelect
              ),
              /* harmony export */
              normalizeSpaceId: () => (
                /* binding */
                normalizeSpaceId
              )
              /* harmony export */
            });
            const _excluded = ["spaceId"];
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function normalizeSelect(query5) {
              if (query5 && query5.select && !/sys/i.test(query5.select)) {
                return _objectSpread(_objectSpread({}, query5), {}, {
                  select: query5.select + ",sys"
                });
              }
              return query5;
            }
            function normalizeSpaceId(query5) {
              if (query5 && query5.spaceId) {
                const {
                  spaceId
                } = query5, rest = _objectWithoutProperties(query5, _excluded);
                return _objectSpread(_objectSpread({}, rest), {}, {
                  "sys.space.sys.id[in]": spaceId
                });
              }
              return query5;
            }
          }
        ),
        /***/
        "./adapters/REST/endpoints/webhook.ts": (
          /*!********************************************!*\
            !*** ./adapters/REST/endpoints/webhook.ts ***!
            \********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              createWithId: () => (
                /* binding */
                createWithId
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getCallDetails: () => (
                /* binding */
                getCallDetails
              ),
              /* harmony export */
              getHealthStatus: () => (
                /* binding */
                getHealthStatus
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              getManyCallDetails: () => (
                /* binding */
                getManyCallDetails
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./utils */
              "./adapters/REST/endpoints/utils.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/webhook_definitions`;
            const getWebhookCallBaseUrl = (params) => `/spaces/${params.spaceId}/webhooks`;
            const getWebhookUrl = (params) => `${getBaseUrl(params)}/${params.webhookDefinitionId}`;
            const getWebhookCallUrl = (params) => `${getWebhookCallBaseUrl(params)}/${params.webhookDefinitionId}/calls`;
            const getWebhookCallDetailsUrl = (params) => `${getWebhookCallBaseUrl(params)}/${params.webhookDefinitionId}/calls/${params.callId}`;
            const getWebhookHealthUrl = (params) => `${getWebhookCallBaseUrl(params)}/${params.webhookDefinitionId}/health`;
            const get3 = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getWebhookUrl(params));
            };
            const getManyCallDetails = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getWebhookCallUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query)
              });
            };
            const getCallDetails = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getWebhookCallDetailsUrl(params));
            };
            const getHealthStatus = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getWebhookHealthUrl(params));
            };
            const getMany = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
                params: (0, _utils__WEBPACK_IMPORTED_MODULE_2__.normalizeSelect)(params.query)
              });
            };
            const create = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, getBaseUrl(params), data, {
                headers
              });
            };
            const createWithId = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getWebhookUrl(params), data, {
                headers
              });
            };
            const update = async (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getWebhookUrl(params), data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, params) => {
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getWebhookUrl(params));
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/workflow-definition.ts": (
          /*!********************************************************!*\
            !*** ./adapters/REST/endpoints/workflow-definition.ts ***!
            \********************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              get: () => (
                /* binding */
                get3
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const _excluded = ["version"];
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/workflow_definitions`;
            const getWorkflowDefinitionUrl = (params) => `${getBaseUrl(params)}/${params.workflowDefinitionId}`;
            const get3 = (http2, params, headers) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getWorkflowDefinitionUrl(params), {
              headers
            });
            const getMany = (http2, params, headers) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
              headers,
              params: params.query
            });
            const create = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, getBaseUrl(params), data, {
                headers
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getWorkflowDefinitionUrl(params), data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, _ref, headers) => {
              let {
                version
              } = _ref, params = _objectWithoutProperties(_ref, _excluded);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getWorkflowDefinitionUrl(params), {
                headers: _objectSpread({
                  "X-Contentful-Version": version
                }, headers)
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/workflow.ts": (
          /*!*********************************************!*\
            !*** ./adapters/REST/endpoints/workflow.ts ***!
            \*********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              complete: () => (
                /* binding */
                complete
              ),
              /* harmony export */
              create: () => (
                /* binding */
                create
              ),
              /* harmony export */
              del: () => (
                /* binding */
                del
              ),
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              ),
              /* harmony export */
              update: () => (
                /* binding */
                update
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const _excluded = ["version"], _excluded2 = ["version"];
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/workflows`;
            const getWorkflowUrl = (params) => `${getBaseUrl(params)}/${params.workflowId}`;
            const completeWorkflowUrl = (params) => `${getWorkflowUrl(params)}/complete`;
            const getMany = (http2, params, headers) => _raw__WEBPACK_IMPORTED_MODULE_1__.get(http2, getBaseUrl(params), {
              headers,
              params: params.query
            });
            const create = (http2, params, rawData, headers) => {
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.post(http2, getBaseUrl(params), data, {
                headers
              });
            };
            const update = (http2, params, rawData, headers) => {
              var _rawData$sys$version;
              const data = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(rawData);
              delete data.sys;
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, getWorkflowUrl(params), data, {
                headers: _objectSpread({
                  "X-Contentful-Version": (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
                }, headers)
              });
            };
            const del = (http2, _ref, headers) => {
              let {
                version
              } = _ref, params = _objectWithoutProperties(_ref, _excluded);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.del(http2, getWorkflowUrl(params), {
                headers: _objectSpread({
                  "X-Contentful-Version": version
                }, headers)
              });
            };
            const complete = (http2, _ref2, headers) => {
              let {
                version
              } = _ref2, params = _objectWithoutProperties(_ref2, _excluded2);
              return _raw__WEBPACK_IMPORTED_MODULE_1__.put(http2, completeWorkflowUrl(params), null, {
                headers: _objectSpread({
                  "X-Contentful-Version": version
                }, headers)
              });
            };
          }
        ),
        /***/
        "./adapters/REST/endpoints/workflows-changelog.ts": (
          /*!********************************************************!*\
            !*** ./adapters/REST/endpoints/workflows-changelog.ts ***!
            \********************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              getMany: () => (
                /* binding */
                getMany
              )
              /* harmony export */
            });
            var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./raw */
              "./adapters/REST/endpoints/raw.ts"
            );
            const getBaseUrl = (params) => `/spaces/${params.spaceId}/environments/${params.environmentId}/workflows_changelog`;
            const getMany = (http2, params, headers) => _raw__WEBPACK_IMPORTED_MODULE_0__.get(http2, getBaseUrl(params), {
              headers,
              params: params.query
            });
          }
        ),
        /***/
        "./adapters/REST/rest-adapter.ts": (
          /*!***************************************!*\
            !*** ./adapters/REST/rest-adapter.ts ***!
            \***************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              RestAdapter: () => (
                /* binding */
                RestAdapter
              )
              /* harmony export */
            });
            var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! axios */
              "../node_modules/axios/lib/axios.js"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _endpoints__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./endpoints */
              "./adapters/REST/endpoints/index.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const defaultHostParameters = {
              defaultHostname: "api.contentful.com",
              defaultHostnameUpload: "upload.contentful.com"
            };
            class RestAdapter {
              constructor(params) {
                _defineProperty(this, "params", void 0);
                if (!params.accessToken) {
                  throw new TypeError("Expected parameter accessToken");
                }
                this.params = _objectSpread(_objectSpread({}, defaultHostParameters), (0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(params));
              }
              async makeRequest({
                entityType,
                action: actionInput,
                params,
                payload,
                headers,
                userAgent
              }) {
                var _endpoints$entityType;
                const action = actionInput === "delete" ? "del" : actionInput;
                const endpoint = (
                  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                  // @ts-ignore
                  (_endpoints$entityType = _endpoints__WEBPACK_IMPORTED_MODULE_2__["default"][entityType]) === null || _endpoints$entityType === void 0 ? void 0 : _endpoints$entityType[action]
                );
                if (endpoint === void 0) {
                  throw new Error("Unknown endpoint");
                }
                const requiredHeaders = {
                  "Content-Type": "application/vnd.contentful.management.v1+json",
                  "X-Contentful-User-Agent": userAgent
                };
                const axiosInstance = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createHttpClient)(axios__WEBPACK_IMPORTED_MODULE_3__["default"], _objectSpread(_objectSpread({}, this.params), {}, {
                  headers: _objectSpread(_objectSpread({}, requiredHeaders), this.params.headers)
                }));
                return await endpoint(axiosInstance, params, payload, headers);
              }
            }
          }
        ),
        /***/
        "./common-types.ts": (
          /*!*************************!*\
            !*** ./common-types.ts ***!
            \*************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              ScheduledActionReferenceFilters: () => (
                /* binding */
                ScheduledActionReferenceFilters
              )
              /* harmony export */
            });
            let ScheduledActionReferenceFilters = /* @__PURE__ */ function(ScheduledActionReferenceFilters2) {
              ScheduledActionReferenceFilters2["contentTypeAnnotationNotIn"] = "sys.contentType.metadata.annotations.ContentType[nin]";
              return ScheduledActionReferenceFilters2;
            }({});
          }
        ),
        /***/
        "./common-utils.ts": (
          /*!*************************!*\
            !*** ./common-utils.ts ***!
            \*************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              isSuccessful: () => (
                /* binding */
                isSuccessful
              ),
              /* harmony export */
              shouldRePoll: () => (
                /* binding */
                shouldRePoll
              ),
              /* harmony export */
              waitFor: () => (
                /* binding */
                waitFor
              ),
              /* harmony export */
              wrapCollection: () => (
                /* binding */
                wrapCollection
              ),
              /* harmony export */
              wrapCursorPaginatedCollection: () => (
                /* binding */
                wrapCursorPaginatedCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            const wrapCollection = (fn) => (makeRequest, data, ...rest) => {
              const collectionData = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              collectionData.items = collectionData.items.map((entity) => fn(makeRequest, entity, ...rest));
              return collectionData;
            };
            const wrapCursorPaginatedCollection = (fn) => (makeRequest, data, ...rest) => {
              const collectionData = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              collectionData.items = collectionData.items.map((entity) => fn(makeRequest, entity, ...rest));
              return collectionData;
            };
            function isSuccessful(statusCode) {
              return statusCode < 300;
            }
            function shouldRePoll(statusCode) {
              return [404, 422, 429, 400].includes(statusCode);
            }
            async function waitFor(ms = 1e3) {
              return new Promise((resolve2) => setTimeout(resolve2, ms));
            }
          }
        ),
        /***/
        "./constants/editor-interface-defaults/controls-defaults.ts": (
          /*!******************************************************************!*\
            !*** ./constants/editor-interface-defaults/controls-defaults.ts ***!
            \******************************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              DEFAULTS_SETTINGS: () => (
                /* binding */
                DEFAULTS_SETTINGS
              ),
              /* harmony export */
              DEFAULTS_WIDGET: () => (
                /* binding */
                DEFAULTS_WIDGET
              ),
              /* harmony export */
              FIELD_TYPES: () => (
                /* binding */
                FIELD_TYPES
              ),
              /* harmony export */
              "default": () => (
                /* binding */
                getDefaultControlOfField
              ),
              /* harmony export */
              toApiFieldType: () => (
                /* binding */
                toApiFieldType
              ),
              /* harmony export */
              toInternalFieldType: () => (
                /* binding */
                toInternalFieldType
              )
              /* harmony export */
            });
            var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./types */
              "./constants/editor-interface-defaults/types.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const DROPDOWN_TYPES = ["Text", "Symbol", "Integer", "Number", "Boolean"];
            const INTERNAL_TO_API = {
              Symbol: {
                type: "Symbol"
              },
              Text: {
                type: "Text"
              },
              RichText: {
                type: "RichText"
              },
              Integer: {
                type: "Integer"
              },
              Number: {
                type: "Number"
              },
              Boolean: {
                type: "Boolean"
              },
              Date: {
                type: "Date"
              },
              Location: {
                type: "Location"
              },
              Object: {
                type: "Object"
              },
              File: {
                type: "File"
              },
              Entry: {
                type: "Link",
                linkType: "Entry"
              },
              Asset: {
                type: "Link",
                linkType: "Asset"
              },
              Resource: {
                type: "ResourceLink"
              },
              Symbols: {
                type: "Array",
                items: {
                  type: "Symbol"
                }
              },
              Entries: {
                type: "Array",
                items: {
                  type: "Link",
                  linkType: "Entry"
                }
              },
              Assets: {
                type: "Array",
                items: {
                  type: "Link",
                  linkType: "Asset"
                }
              },
              Resources: {
                type: "Array",
                items: {
                  type: "ResourceLink"
                }
              }
            };
            const FIELD_TYPES = Object.keys(INTERNAL_TO_API);
            function toInternalFieldType(api) {
              return FIELD_TYPES.find((key2) => {
                const internalApi = INTERNAL_TO_API[key2];
                const stripped = {
                  type: api.type,
                  linkType: api.linkType,
                  items: api.items
                };
                if (stripped.items) {
                  stripped.items = {
                    type: stripped.items.type,
                    linkType: stripped.items.linkType
                  };
                }
                if (internalApi.type === "Link") {
                  return internalApi.linkType === stripped.linkType;
                }
                if (internalApi.type === "Array" && internalApi.items && stripped.items) {
                  if (internalApi.items.type === "Link") {
                    return internalApi.items.linkType === stripped.items.linkType;
                  }
                  return internalApi.items.type === stripped.items.type;
                }
                return internalApi.type === stripped.type;
              });
            }
            const DEFAULTS_WIDGET = {
              Text: {
                widgetId: "markdown"
              },
              Symbol: {
                widgetId: "singleLine"
              },
              Integer: {
                widgetId: "numberEditor"
              },
              Number: {
                widgetId: "numberEditor"
              },
              Boolean: {
                widgetId: "boolean"
              },
              Date: {
                widgetId: "datePicker"
              },
              Location: {
                widgetId: "locationEditor"
              },
              Object: {
                widgetId: "objectEditor"
              },
              RichText: {
                widgetId: "richTextEditor"
              },
              Entry: {
                widgetId: "entryLinkEditor"
              },
              Asset: {
                widgetId: "assetLinkEditor"
              },
              Symbols: {
                widgetId: "tagEditor"
              },
              Entries: {
                widgetId: "entryLinksEditor"
              },
              Assets: {
                widgetId: "assetLinksEditor"
              },
              File: {
                widgetId: "fileEditor"
              },
              Resource: {
                widgetId: "resourceLinkEditor"
              },
              Resources: {
                widgetId: "resourceLinksEditor"
              }
            };
            const DEFAULTS_SETTINGS = {
              Boolean: {
                falseLabel: "No",
                helpText: null,
                trueLabel: "Yes"
              },
              Date: {
                helpText: null,
                ampm: "24",
                format: "timeZ"
              },
              Entry: {
                helpText: null,
                showCreateEntityAction: true,
                showLinkEntityAction: true
              },
              Asset: {
                helpText: null,
                showCreateEntityAction: true,
                showLinkEntityAction: true
              },
              Entries: {
                helpText: null,
                bulkEditing: false,
                showCreateEntityAction: true,
                showLinkEntityAction: true
              },
              Assets: {
                helpText: null,
                showCreateEntityAction: true,
                showLinkEntityAction: true
              }
            };
            function getDefaultWidget(field, fieldId) {
              const defaultWidget = _objectSpread(_objectSpread({}, DEFAULTS_WIDGET[field]), {}, {
                settings: {
                  helpText: null
                },
                widgetNamespace: "builtin",
                fieldId
              });
              if ((0, _types__WEBPACK_IMPORTED_MODULE_0__.in_)(field, DEFAULTS_SETTINGS)) {
                defaultWidget.settings = _objectSpread(_objectSpread({}, defaultWidget.settings), DEFAULTS_SETTINGS[field]);
              }
              return defaultWidget;
            }
            function toApiFieldType(internal) {
              return INTERNAL_TO_API[internal];
            }
            function getDefaultControlOfField(field) {
              const fieldType = toInternalFieldType(field);
              if (!fieldType) {
                throw new Error("Invalid field type");
              }
              const hasInValidation = (field.validations || []).find((v) => "in" in v);
              if (hasInValidation && DROPDOWN_TYPES.includes(fieldType)) {
                return {
                  widgetId: "dropdown",
                  fieldId: field.id,
                  widgetNameSpace: "builtin"
                };
              }
              return getDefaultWidget(fieldType, field.id);
            }
          }
        ),
        /***/
        "./constants/editor-interface-defaults/editors-defaults.ts": (
          /*!*****************************************************************!*\
            !*** ./constants/editor-interface-defaults/editors-defaults.ts ***!
            \*****************************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              EntryConfiguration: () => (
                /* binding */
                EntryConfiguration
              ),
              /* harmony export */
              EntryEditorWidgetTypes: () => (
                /* binding */
                EntryEditorWidgetTypes
              )
              /* harmony export */
            });
            var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./types */
              "./constants/editor-interface-defaults/types.ts"
            );
            const EntryEditorWidgetTypes = {
              DEFAULT_EDITOR: {
                name: "Editor",
                id: _types__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_EDITOR_ID,
                icon: "Entry"
              },
              REFERENCE_TREE: {
                name: "References",
                id: "reference-tree",
                icon: "References"
              },
              TAGS_EDITOR: {
                name: "Tags",
                id: "tags-editor",
                icon: "Tags"
              }
            };
            const DefaultEntryEditor = {
              widgetId: EntryEditorWidgetTypes.DEFAULT_EDITOR.id,
              widgetNamespace: _types__WEBPACK_IMPORTED_MODULE_0__.WidgetNamespace.EDITOR_BUILTIN,
              name: EntryEditorWidgetTypes.DEFAULT_EDITOR.name
            };
            const ReferencesEntryEditor = {
              widgetId: EntryEditorWidgetTypes.REFERENCE_TREE.id,
              widgetNamespace: _types__WEBPACK_IMPORTED_MODULE_0__.WidgetNamespace.EDITOR_BUILTIN,
              name: EntryEditorWidgetTypes.REFERENCE_TREE.name
            };
            const TagsEditor = {
              widgetId: EntryEditorWidgetTypes.TAGS_EDITOR.id,
              widgetNamespace: _types__WEBPACK_IMPORTED_MODULE_0__.WidgetNamespace.EDITOR_BUILTIN,
              name: EntryEditorWidgetTypes.TAGS_EDITOR.name
            };
            const EntryConfiguration = [DefaultEntryEditor, ReferencesEntryEditor, TagsEditor];
          }
        ),
        /***/
        "./constants/editor-interface-defaults/index.ts": (
          /*!******************************************************!*\
            !*** ./constants/editor-interface-defaults/index.ts ***!
            \******************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _sidebar_defaults__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./sidebar-defaults */
              "./constants/editor-interface-defaults/sidebar-defaults.ts"
            );
            var _editors_defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./editors-defaults */
              "./constants/editor-interface-defaults/editors-defaults.ts"
            );
            var _controls_defaults__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./controls-defaults */
              "./constants/editor-interface-defaults/controls-defaults.ts"
            );
            const __WEBPACK_DEFAULT_EXPORT__ = {
              SidebarEntryConfiguration: _sidebar_defaults__WEBPACK_IMPORTED_MODULE_0__.SidebarEntryConfiguration,
              SidebarAssetConfiguration: _sidebar_defaults__WEBPACK_IMPORTED_MODULE_0__.SidebarAssetConfiguration,
              EntryConfiguration: _editors_defaults__WEBPACK_IMPORTED_MODULE_1__.EntryConfiguration,
              getDefaultControlOfField: _controls_defaults__WEBPACK_IMPORTED_MODULE_2__["default"]
            };
          }
        ),
        /***/
        "./constants/editor-interface-defaults/sidebar-defaults.ts": (
          /*!*****************************************************************!*\
            !*** ./constants/editor-interface-defaults/sidebar-defaults.ts ***!
            \*****************************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              SidebarAssetConfiguration: () => (
                /* binding */
                SidebarAssetConfiguration
              ),
              /* harmony export */
              SidebarEntryConfiguration: () => (
                /* binding */
                SidebarEntryConfiguration
              )
              /* harmony export */
            });
            var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./types */
              "./constants/editor-interface-defaults/types.ts"
            );
            const SidebarWidgetTypes = {
              USERS: "users-widget",
              CONTENT_PREVIEW: "content-preview-widget",
              TRANSLATION: "translation-widget",
              INCOMING_LINKS: "incoming-links-widget",
              PUBLICATION: "publication-widget",
              RELEASES: "releases-widget",
              VERSIONS: "versions-widget",
              INFO_PANEL: "info-panel",
              JOBS: "jobs-widget",
              COMMENTS_PANEL: "comments-panel"
            };
            const Publication = {
              widgetId: SidebarWidgetTypes.PUBLICATION,
              widgetNamespace: _types__WEBPACK_IMPORTED_MODULE_0__.WidgetNamespace.SIDEBAR_BUILTIN,
              name: "Publish & Status",
              description: "Built-in - View entry status, publish, etc."
            };
            const Releases = {
              widgetId: SidebarWidgetTypes.RELEASES,
              widgetNamespace: _types__WEBPACK_IMPORTED_MODULE_0__.WidgetNamespace.SIDEBAR_BUILTIN,
              name: "Release",
              description: "Built-in - View release, add to it, etc."
            };
            const ContentPreview = {
              widgetId: SidebarWidgetTypes.CONTENT_PREVIEW,
              widgetNamespace: _types__WEBPACK_IMPORTED_MODULE_0__.WidgetNamespace.SIDEBAR_BUILTIN,
              name: "Preview",
              description: "Built-in - Displays preview functionality."
            };
            const Links = {
              widgetId: SidebarWidgetTypes.INCOMING_LINKS,
              widgetNamespace: _types__WEBPACK_IMPORTED_MODULE_0__.WidgetNamespace.SIDEBAR_BUILTIN,
              name: "Links",
              description: "Built-in - Shows where an entry is linked."
            };
            const Translation = {
              widgetId: SidebarWidgetTypes.TRANSLATION,
              widgetNamespace: _types__WEBPACK_IMPORTED_MODULE_0__.WidgetNamespace.SIDEBAR_BUILTIN,
              name: "Translation",
              description: "Built-in - Manage which translations are visible."
            };
            const Versions = {
              widgetId: SidebarWidgetTypes.VERSIONS,
              widgetNamespace: _types__WEBPACK_IMPORTED_MODULE_0__.WidgetNamespace.SIDEBAR_BUILTIN,
              name: "Versions",
              description: "Built-in - View previously published versions. Available only for master environment."
            };
            const Users = {
              widgetId: SidebarWidgetTypes.USERS,
              widgetNamespace: _types__WEBPACK_IMPORTED_MODULE_0__.WidgetNamespace.SIDEBAR_BUILTIN,
              name: "Users",
              description: "Built-in - Displays users on the same entry."
            };
            const SidebarEntryConfiguration = [Publication, Releases, ContentPreview, Links, Translation, Versions, Users];
            const SidebarAssetConfiguration = [Publication, Releases, Links, Translation, Users];
          }
        ),
        /***/
        "./constants/editor-interface-defaults/types.ts": (
          /*!******************************************************!*\
            !*** ./constants/editor-interface-defaults/types.ts ***!
            \******************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              DEFAULT_EDITOR_ID: () => (
                /* binding */
                DEFAULT_EDITOR_ID
              ),
              /* harmony export */
              WidgetNamespace: () => (
                /* binding */
                WidgetNamespace
              ),
              /* harmony export */
              in_: () => (
                /* binding */
                in_
              )
              /* harmony export */
            });
            let WidgetNamespace = /* @__PURE__ */ function(WidgetNamespace2) {
              WidgetNamespace2["BUILTIN"] = "builtin";
              WidgetNamespace2["EXTENSION"] = "extension";
              WidgetNamespace2["SIDEBAR_BUILTIN"] = "sidebar-builtin";
              WidgetNamespace2["APP"] = "app";
              WidgetNamespace2["EDITOR_BUILTIN"] = "editor-builtin";
              return WidgetNamespace2;
            }({});
            const DEFAULT_EDITOR_ID = "default-editor";
            const in_ = (key2, object) => key2 in object;
          }
        ),
        /***/
        "./create-adapter.ts": (
          /*!***************************!*\
            !*** ./create-adapter.ts ***!
            \***************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              createAdapter: () => (
                /* binding */
                createAdapter
              )
              /* harmony export */
            });
            var _adapters_REST_rest_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./adapters/REST/rest-adapter */
              "./adapters/REST/rest-adapter.ts"
            );
            function createAdapter(params) {
              if ("apiAdapter" in params) {
                return params.apiAdapter;
              } else {
                return new _adapters_REST_rest_adapter__WEBPACK_IMPORTED_MODULE_0__.RestAdapter(params);
              }
            }
          }
        ),
        /***/
        "./create-app-definition-api.ts": (
          /*!**************************************!*\
            !*** ./create-app-definition-api.ts ***!
            \**************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                createAppDefinitionApi
              )
              /* harmony export */
            });
            var _entities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./entities */
              "./entities/index.ts"
            );
            var _entities_app_definition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./entities/app-definition */
              "./entities/app-definition.ts"
            );
            function createAppDefinitionApi(makeRequest) {
              const {
                wrapAppBundle,
                wrapAppBundleCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_0__["default"].appBundle;
              const getParams = (data) => ({
                appDefinitionId: data.sys.id,
                organizationId: data.sys.organization.sys.id
              });
              return {
                /**
                 * Sends an update to the server with any changes made to the object's properties
                 * @return Object returned from the server with updated changes.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.getAppDefinition('<app_def_id>'))
                 * .then((appDefinition) => {
                 *   appDefinition.name = 'New App Definition name'
                 *   return appDefinition.update()
                 * })
                 * .then((appDefinition) => console.log(`App Definition ${appDefinition.sys.id} updated.`))
                 * .catch(console.error)
                 * ```
                 */
                update: function update() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppDefinition",
                    action: "update",
                    params: getParams(data),
                    headers: {},
                    payload: data
                  }).then((data2) => (0, _entities_app_definition__WEBPACK_IMPORTED_MODULE_1__.wrapAppDefinition)(makeRequest, data2));
                },
                /**
                 * Deletes this object on the server.
                 * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.getAppDefinition('<app_def_id>'))
                 * .then((appDefinition) => appDefinition.delete())
                 * .then(() => console.log(`App Definition deleted.`))
                 * .catch(console.error)
                 * ```
                 */
                delete: function del() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppDefinition",
                    action: "delete",
                    params: getParams(data)
                  });
                },
                /**
                 * Gets an app bundle
                 * @param id - AppBundle ID
                 * @return Promise for an AppBundle
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.getAppDefinition('<app_def_id>'))
                 * .then((appDefinition) => appDefinition.getAppBundle('<app_upload_id>'))
                 * .then((appBundle) => console.log(appBundle))
                 * .catch(console.error)
                 * ```
                 */
                getAppBundle(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppBundle",
                    action: "get",
                    params: {
                      appBundleId: id,
                      appDefinitionId: raw.sys.id,
                      organizationId: raw.sys.organization.sys.id
                    }
                  }).then((data) => wrapAppBundle(makeRequest, data));
                },
                /**
                 * Gets a collection of AppBundles
                 * @return Promise for a collection of AppBundles
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.getAppDefinition('<app_def_id>'))
                 * .then((appDefinition) => appDefinition.getAppBundles())
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getAppBundles(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppBundle",
                    action: "getMany",
                    params: {
                      organizationId: raw.sys.organization.sys.id,
                      appDefinitionId: raw.sys.id,
                      query: query5
                    }
                  }).then((data) => wrapAppBundleCollection(makeRequest, data));
                },
                /**
                 * Creates an app bundle
                 * @param Object representation of the App Bundle to be created
                 * @return Promise for the newly created AppBundle
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.getAppDefinition('<app_def_id>'))
                 * .then((appDefinition) => appDefinition.createAppBundle('<app_upload_id>'))
                 * .then((appBundle) => console.log(appBundle))
                 * .catch(console.error)
                 * ```
                 */
                createAppBundle(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppBundle",
                    action: "create",
                    params: {
                      appDefinitionId: raw.sys.id,
                      organizationId: raw.sys.organization.sys.id
                    },
                    payload: data
                  }).then((data2) => wrapAppBundle(makeRequest, data2));
                },
                /**
                 * Gets a list of App Installations across an org for given organization and App Definition
                 * If a spaceId is provided in the query object, it will return the App Installations for that specific space.
                 * @return Promise for the newly created AppBundle
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 * client.getAppDefinition('<organization_id>', '<app_definition_id>')
                 * .then((appDefinition) => appDefinition.getInstallationsForOrg(
                 *   { spaceId: '<space_id>' } // optional
                 * ))
                 * .then((appInstallationsForOrg) => console.log(appInstallationsForOrg.items))
                 * .catch(console.error)
                 * ```
                 */
                getInstallationsForOrg(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppDefinition",
                    action: "getInstallationsForOrg",
                    params: {
                      appDefinitionId: raw.sys.id,
                      organizationId: raw.sys.organization.sys.id,
                      query: query5
                    }
                  });
                }
              };
            }
          }
        ),
        /***/
        "./create-contentful-api.ts": (
          /*!**********************************!*\
            !*** ./create-contentful-api.ts ***!
            \**********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                createClientApi
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./entities */
              "./entities/index.ts"
            );
            const _excluded = ["url"];
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            function createClientApi(makeRequest) {
              const {
                wrapSpace,
                wrapSpaceCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].space;
              const {
                wrapUser
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].user;
              const {
                wrapPersonalAccessToken,
                wrapPersonalAccessTokenCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].personalAccessToken;
              const {
                wrapAccessToken,
                wrapAccessTokenCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].accessToken;
              const {
                wrapOrganization,
                wrapOrganizationCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].organization;
              const {
                wrapUsageCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].usage;
              const {
                wrapAppDefinition
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].appDefinition;
              const {
                wrapEnvironmentTemplate,
                wrapEnvironmentTemplateCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].environmentTemplate;
              return {
                /**
                 * Gets all environment templates for a given organization with the lasted version
                 * @param organizationId - Organization ID
                 * @return Promise for a collection of EnvironmentTemplates
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getEnvironmentTemplates('<organization_id>')
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getEnvironmentTemplates: function getEnvironmentTemplates(organizationId, query5 = {}) {
                  return makeRequest({
                    entityType: "EnvironmentTemplate",
                    action: "getMany",
                    params: {
                      organizationId,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapEnvironmentTemplateCollection(makeRequest, data, organizationId));
                },
                /**
                 * Gets the lasted version environment template if params.version is not specified
                 * @param params.organizationId - Organization ID
                 * @param params.environmentTemplateId - Environment template ID
                 * @param [params.version] - Template version number to return a specific version of the environment template
                 * @return Promise for a EnvironmentTemplate
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getEnvironmentTemplate({
                 *   organizationId: '<organization_id>',
                 *   environmentTemplateId: '<environment_template_id>',
                 *   version: version>
                 * })
                 * .then((space) => console.log(space))
                 * .catch(console.error)
                 * ```
                 */
                getEnvironmentTemplate: function getEnvironmentTemplate({
                  organizationId,
                  environmentTemplateId,
                  version,
                  query: query5 = {}
                }) {
                  return makeRequest({
                    entityType: "EnvironmentTemplate",
                    action: "get",
                    params: {
                      organizationId,
                      environmentTemplateId,
                      version,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapEnvironmentTemplate(makeRequest, data, organizationId));
                },
                /**
                 * Creates an environment template
                 * @param organizationId - Organization ID
                 * @param environmentTemplateData - Object representation of the environment template to be created
                 * @return Promise for the newly created EnvironmentTemplate
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.createEnvironmentTemplate('<organization_id>', {<environment_template_date>})
                 * .then((environmentTemplate) => console.log(environmentTemplate))
                 * .catch(console.error)
                 * ```
                 */
                createEnvironmentTemplate: function createEnvironmentTemplate(organizationId, environmentTemplateData) {
                  return makeRequest({
                    entityType: "EnvironmentTemplate",
                    action: "create",
                    params: {
                      organizationId
                    },
                    payload: environmentTemplateData
                  }).then((data) => wrapEnvironmentTemplate(makeRequest, data, organizationId));
                },
                /**
                 * Gets all spaces
                 * @return Promise for a collection of Spaces
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpaces()
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getSpaces: function getSpaces(query5 = {}) {
                  return makeRequest({
                    entityType: "Space",
                    action: "getMany",
                    params: {
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapSpaceCollection(makeRequest, data));
                },
                /**
                 * Gets a space
                 * @param spaceId - Space ID
                 * @return Promise for a Space
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => console.log(space))
                 * .catch(console.error)
                 * ```
                 */
                getSpace: function getSpace(spaceId) {
                  return makeRequest({
                    entityType: "Space",
                    action: "get",
                    params: {
                      spaceId
                    }
                  }).then((data) => wrapSpace(makeRequest, data));
                },
                /**
                 * Creates a space
                 * @param spaceData - Object representation of the Space to be created
                 * @param organizationId - Organization ID, if the associated token can manage more than one organization.
                 * @return Promise for the newly created Space
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.createSpace({
                 *   name: 'Name of new space'
                 * })
                 * .then((space) => console.log(space))
                 * .catch(console.error)
                 * ```
                 */
                createSpace: function createSpace(spaceData, organizationId) {
                  return makeRequest({
                    entityType: "Space",
                    action: "create",
                    params: {
                      organizationId
                    },
                    payload: spaceData
                  }).then((data) => wrapSpace(makeRequest, data));
                },
                /**
                 * Gets an organization
                 * @param  id - Organization ID
                 * @return Promise for a Organization
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => console.log(org))
                 * .catch(console.error)
                 * ```
                 */
                getOrganization: function getOrganization(id) {
                  return makeRequest({
                    entityType: "Organization",
                    action: "get",
                    params: {
                      organizationId: id
                    }
                  }).then((data) => wrapOrganization(makeRequest, data));
                },
                /**
                 * Gets a collection of Organizations
                 * @return Promise for a collection of Organizations
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganizations()
                 * .then(result => console.log(result.items))
                 * .catch(console.error)
                 * ```
                 */
                getOrganizations: function getOrganizations(query5 = {}) {
                  return makeRequest({
                    entityType: "Organization",
                    action: "getMany",
                    params: {
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapOrganizationCollection(makeRequest, data));
                },
                /**
                 * Gets the authenticated user
                 * @return Promise for a User
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getCurrentUser()
                 * .then(user => console.log(user.firstName))
                 * .catch(console.error)
                 * ```
                 */
                getCurrentUser: function getCurrentUser(params) {
                  return makeRequest({
                    entityType: "User",
                    action: "getCurrent",
                    params
                  }).then((data) => wrapUser(makeRequest, data));
                },
                /**
                 * Gets App Definition
                 * @return Promise for App Definition
                 * @param organizationId - Id of the organization where the app is installed
                 * @param appDefinitionId - Id of the app that will be returned
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getAppDefinition(<'org_id'>, <'app_id'>)
                 * .then(appDefinition => console.log(appDefinition.name))
                 * .catch(console.error)
                 * ```
                 */
                getAppDefinition: function getAppDefinition(params) {
                  return makeRequest({
                    entityType: "AppDefinition",
                    action: "get",
                    params
                  }).then((data) => wrapAppDefinition(makeRequest, data));
                },
                /**
                 * Creates a personal access token
                 * @param data - personal access token config
                 * @return Promise for a Token
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.createPersonalAccessToken(
                 *  {
                 *    "name": "My Token",
                 *    "scope": [
                 *      "content_management_manage"
                 *    ]
                 *  }
                 * )
                 * .then(personalAccessToken => console.log(personalAccessToken.token))
                 * .catch(console.error)
                 * ```
                 */
                createPersonalAccessToken: function createPersonalAccessToken(data) {
                  return makeRequest({
                    /**
                     * When the `PersonalAccessToken` entity is removed, replace the `entityType` with `AccessToken`
                     * and update the action to `createPersonalToken` to ultilize the new entity called AccessToken.
                     */
                    entityType: "PersonalAccessToken",
                    action: "create",
                    params: {},
                    payload: data
                  }).then((response) => wrapPersonalAccessToken(makeRequest, response));
                },
                /**
                 * @deprecated - use getAccessToken instead
                 *
                 * Gets a personal access token
                 * @param data - personal access token config
                 * @return Promise for a Token
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getPersonalAccessToken(tokenId)
                 * .then(token => console.log(token.token))
                 * .catch(console.error)
                 * ```
                 */
                getPersonalAccessToken: function getPersonalAccessToken(tokenId) {
                  return makeRequest({
                    entityType: "PersonalAccessToken",
                    action: "get",
                    params: {
                      tokenId
                    }
                  }).then((data) => wrapPersonalAccessToken(makeRequest, data));
                },
                /**
                 * @deprecated - use getAccessTokens instead
                 *
                 * Gets all personal access tokens
                 * @return Promise for a Token
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getPersonalAccessTokens()
                 * .then(response => console.log(reponse.items))
                 * .catch(console.error)
                 * ```
                 */
                getPersonalAccessTokens: function getPersonalAccessTokens() {
                  return makeRequest({
                    entityType: "PersonalAccessToken",
                    action: "getMany",
                    params: {}
                  }).then((data) => wrapPersonalAccessTokenCollection(makeRequest, data));
                },
                /**
                 * Gets a users access token
                 * @param data - users access token config
                 * @return Promise for a Token
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getAccessToken(tokenId)
                 * .then(token => console.log(token.token))
                 * .catch(console.error)
                 * ```
                 */
                getAccessToken: function getAccessToken(tokenId) {
                  return makeRequest({
                    entityType: "AccessToken",
                    action: "get",
                    params: {
                      tokenId
                    }
                  }).then((data) => wrapAccessToken(makeRequest, data));
                },
                /**
                 * Gets all user access tokens
                 * @return Promise for a Token
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getAccessTokens()
                 * .then(response => console.log(reponse.items))
                 * .catch(console.error)
                 * ```
                 */
                getAccessTokens: function getAccessTokens() {
                  return makeRequest({
                    entityType: "AccessToken",
                    action: "getMany",
                    params: {}
                  }).then((data) => wrapAccessTokenCollection(makeRequest, data));
                },
                /**
                 * Retrieves a list of redacted versions of access tokens for an organization, accessible to owners or administrators of an organization.
                 *
                 * @return Promise for a Token
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganizationAccessTokens(organizationId)
                 * .then(response => console.log(reponse.items))
                 * .catch(console.error)
                 * ```
                 */
                getOrganizationAccessTokens: function getOrganizationAccessTokens(organizationId, query5 = {}) {
                  return makeRequest({
                    entityType: "AccessToken",
                    action: "getManyForOrganization",
                    params: {
                      organizationId,
                      query: query5
                    }
                  }).then((data) => wrapAccessTokenCollection(makeRequest, data));
                },
                /**
                 * Get organization usage grouped by {@link UsageMetricEnum metric}
                 *
                 * @param organizationId - Id of an organization
                 * @param query - Query parameters
                 * @return Promise of a collection of usages
                 * @example ```javascript
                 *
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganizationUsage('<organizationId>', {
                 *    'metric[in]': 'cma,gql',
                 *    'dateRange.startAt': '2019-10-22',
                 *    'dateRange.endAt': '2019-11-10'
                 *    }
                 * })
                 * .then(result => console.log(result.items))
                 * .catch(console.error)
                 * ```
                 */
                getOrganizationUsage: function getOrganizationUsage(organizationId, query5 = {}) {
                  return makeRequest({
                    entityType: "Usage",
                    action: "getManyForOrganization",
                    params: {
                      organizationId,
                      query: query5
                    }
                  }).then((data) => wrapUsageCollection(makeRequest, data));
                },
                /**
                 * Get organization usage grouped by space and metric
                 *
                 * @param organizationId - Id of an organization
                 * @param query - Query parameters
                 * @return Promise of a collection of usages
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpaceUsage('<organizationId>', {
                 *    skip: 0,
                 *    limit: 10,
                 *    'metric[in]': 'cda,cpa,gql',
                 *    'dateRange.startAt': '2019-10-22',
                 *    'dateRange.endAt': '2020-11-30'
                 *    }
                 * })
                 * .then(result => console.log(result.items))
                 * .catch(console.error)
                 * ```
                 */
                getSpaceUsage: function getSpaceUsage(organizationId, query5 = {}) {
                  return makeRequest({
                    entityType: "Usage",
                    action: "getManyForSpace",
                    params: {
                      organizationId,
                      query: query5
                    }
                  }).then((data) => wrapUsageCollection(makeRequest, data));
                },
                /**
                 * Make a custom request to the Contentful management API's /spaces endpoint
                 * @param opts - axios request options (https://github.com/mzabriskie/axios)
                 * @return Promise for the response data
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.rawRequest({
                 *   method: 'GET',
                 *   url: '/custom/path'
                 * })
                 * .then((responseData) => console.log(responseData))
                 * .catch(console.error)
                 * ```
                 */
                rawRequest: function rawRequest(_ref) {
                  let {
                    url
                  } = _ref, config = _objectWithoutProperties(_ref, _excluded);
                  return makeRequest({
                    entityType: "Http",
                    action: "request",
                    params: {
                      url,
                      config
                    }
                  });
                }
              };
            }
          }
        ),
        /***/
        "./create-entry-api.ts": (
          /*!*****************************!*\
            !*** ./create-entry-api.ts ***!
            \*****************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                createEntryApi
              )
              /* harmony export */
            });
            var _plain_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./plain/checks */
              "./plain/checks.ts"
            );
            var _entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./entities */
              "./entities/index.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function createEntryApi(makeRequest) {
              const {
                wrapEntry,
                wrapEntryCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].entry;
              const {
                wrapSnapshot,
                wrapSnapshotCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].snapshot;
              const {
                wrapTask,
                wrapTaskCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].task;
              const {
                wrapComment,
                wrapCommentCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].comment;
              const getParams = (self2) => {
                const entry = self2.toPlainObject();
                return {
                  params: {
                    spaceId: entry.sys.space.sys.id,
                    environmentId: entry.sys.environment.sys.id,
                    entryId: entry.sys.id
                  },
                  raw: entry
                };
              };
              return {
                /**
                 * Sends an update to the server with any changes made to the object's properties
                 * @return Object returned from the server with updated changes.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getEntry('<entry_id>'))
                 * .then((entry) => {
                 *   entry.fields.title['en-US'] = 'New entry title'
                 *   return entry.update()
                 * })
                 * .then((entry) => console.log(`Entry ${entry.sys.id} updated.`))
                 * .catch(console.error)
                 * ```
                 */
                update: function update() {
                  const {
                    raw,
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Entry",
                    action: "update",
                    params,
                    payload: raw
                  }).then((data) => wrapEntry(makeRequest, data));
                },
                /**
                 * Sends an JSON patch to the server with any changes made to the object's properties
                 * @return Object returned from the server with updated changes.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getEntry('<entry_id>'))
                 * .then((entry) => entry.patch([
                 *   {
                 *     op: 'replace',
                 *     path: '/fields/title/en-US',
                 *     value: 'New entry title'
                 *   }
                 * ]))
                 * .then((entry) => console.log(`Entry ${entry.sys.id} updated.`))
                 * .catch(console.error)
                 * ```
                 */
                patch: function patch(ops) {
                  const {
                    raw,
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Entry",
                    action: "patch",
                    params: _objectSpread(_objectSpread({}, params), {}, {
                      version: raw.sys.version
                    }),
                    payload: ops
                  }).then((data) => wrapEntry(makeRequest, data));
                },
                /**
                 * Deletes this object on the server.
                 * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getEntry('<entry_id>'))
                 * .then((entry) => entry.delete())
                 * .then(() => console.log(`Entry deleted.`))
                 * .catch(console.error)
                 * ```
                 */
                delete: function del() {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Entry",
                    action: "delete",
                    params
                  });
                },
                /**
                 * Publishes the object
                 * @return Object returned from the server with updated metadata.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getEntry('<entry_id>'))
                 * .then((entry) => entry.publish())
                 * .then((entry) => console.log(`Entry ${entry.sys.id} published.`))
                 * .catch(console.error)
                 * ```
                 */
                publish: function publish() {
                  const {
                    raw,
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Entry",
                    action: "publish",
                    params,
                    payload: raw
                  }).then((data) => wrapEntry(makeRequest, data));
                },
                /**
                 * Unpublishes the object
                 * @return Object returned from the server with updated metadata.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getEntry('<entry_id>'))
                 * .then((entry) => entry.unpublish())
                 * .then((entry) => console.log(`Entry ${entry.sys.id} unpublished.`))
                 * .catch(console.error)
                 * ```
                 */
                unpublish: function unpublish() {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Entry",
                    action: "unpublish",
                    params
                  }).then((data) => wrapEntry(makeRequest, data));
                },
                /**
                 * Archives the object
                 * @return Object returned from the server with updated metadata.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getEntry('<entry_id>'))
                 * .then((entry) => entry.archive())
                 * .then((entry) => console.log(`Entry ${entry.sys.id} archived.`))
                 * .catch(console.error)
                 * ```
                 */
                archive: function archive() {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Entry",
                    action: "archive",
                    params
                  }).then((data) => wrapEntry(makeRequest, data));
                },
                /**
                 * Unarchives the object
                 * @return Object returned from the server with updated metadata.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getEntry('<entry_id>'))
                 * .then((entry) => entry.unarchive())
                 * .then((entry) => console.log(`Entry ${entry.sys.id} unarchived.`))
                 * .catch(console.error)
                 * ```
                 */
                unarchive: function unarchive() {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Entry",
                    action: "unarchive",
                    params
                  }).then((data) => wrapEntry(makeRequest, data));
                },
                /**
                 * Gets all snapshots of an entry
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getEntry('<entry_id>'))
                 * .then((entry) => entry.getSnapshots())
                 * .then((snapshots) => console.log(snapshots.items))
                 * .catch(console.error)
                 * ```
                 */
                getSnapshots: function(query5 = {}) {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Snapshot",
                    action: "getManyForEntry",
                    params: _objectSpread(_objectSpread({}, params), {}, {
                      query: query5
                    })
                  }).then((data) => wrapSnapshotCollection(makeRequest, data));
                },
                /**
                 * Gets a snapshot of an entry
                 * @param snapshotId - Id of the snapshot
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getEntry('<entry_id>'))
                 * .then((entry) => entry.getSnapshot('<snapshot_id>'))
                 * .then((snapshot) => console.log(snapshot))
                 * .catch(console.error)
                 * ```
                 */
                getSnapshot: function(snapshotId) {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Snapshot",
                    action: "getForEntry",
                    params: _objectSpread(_objectSpread({}, params), {}, {
                      snapshotId
                    })
                  }).then((data) => wrapSnapshot(makeRequest, data));
                },
                /**
                 * Creates a new comment for an entry
                 * @param data Object representation of the Comment to be created
                 * @returns Promise for the newly created Comment
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getEntry('<entry-id>'))
                 * .then((entry) => entry.createComment({
                 *   body: 'Something left to do'
                 * }))
                 * .then((comment) => console.log(comment))
                 * .catch(console.error)
                 * ```
                 */
                createComment: function(data) {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Comment",
                    action: "create",
                    params: {
                      spaceId: params.spaceId,
                      environmentId: params.environmentId,
                      parentEntityId: params.entryId,
                      parentEntityType: "Entry"
                    },
                    payload: data
                  }).then((data2) => wrapComment(makeRequest, data2));
                },
                /**
                 * Gets all comments of an entry
                 * @returns
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getEntry('<entry-id>'))
                 * .then((entry) => entry.getComments())
                 * .then((comments) => console.log(comments))
                 * .catch(console.error)
                 * ```
                 */
                getComments: function() {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Comment",
                    action: "getMany",
                    params
                  }).then((data) => wrapCommentCollection(makeRequest, data));
                },
                /**
                 * Gets a comment of an entry
                 * @returns
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getEntry('<entry-id>'))
                 * .then((entry) => entry.getComment(`<comment-id>`))
                 * .then((comment) => console.log(comment))
                 * .catch(console.error)
                 * ```
                 */
                getComment: function(id) {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Comment",
                    action: "get",
                    params: _objectSpread(_objectSpread({}, params), {}, {
                      commentId: id
                    })
                  }).then((data) => wrapComment(makeRequest, data));
                },
                /**
                 * Creates a new task for an entry
                 * @param data Object representation of the Task to be created
                 * @returns Promise for the newly created Task
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getEntry('<entry-id>'))
                 * .then((entry) => entry.createTask({
                 *   body: 'Something left to do',
                 *   assignedTo: '<user-id>',
                 *   status: 'active'
                 * }))
                 * .then((task) => console.log(task))
                 * .catch(console.error)
                 * ```
                 */
                createTask: function(data) {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Task",
                    action: "create",
                    params,
                    payload: data
                  }).then((data2) => wrapTask(makeRequest, data2));
                },
                /**
                 * Gets all tasks of an entry
                 * @returns
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getEntry('<entry-id>'))
                 * .then((entry) => entry.getTasks())
                 * .then((tasks) => console.log(tasks))
                 * .catch(console.error)
                 * ```
                 */
                getTasks: function(query5 = {}) {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Task",
                    action: "getMany",
                    params: _objectSpread(_objectSpread({}, params), {}, {
                      query: query5
                    })
                  }).then((data) => wrapTaskCollection(makeRequest, data));
                },
                /**
                 * Gets a task of an entry
                 * @returns
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getEntry('<entry-id>'))
                 * .then((entry) => entry.getTask(`<task-id>`))
                 * .then((task) => console.log(task))
                 * .catch(console.error)
                 * ```
                 */
                getTask: function(id) {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Task",
                    action: "get",
                    params: _objectSpread(_objectSpread({}, params), {}, {
                      taskId: id
                    })
                  }).then((data) => wrapTask(makeRequest, data));
                },
                /**
                 * Checks if the entry is published. A published entry might have unpublished changes
                 */
                isPublished: function isPublished() {
                  const raw = this.toPlainObject();
                  return _plain_checks__WEBPACK_IMPORTED_MODULE_0__.isPublished(raw);
                },
                /**
                 * Checks if the entry is updated. This means the entry was previously published but has unpublished changes.
                 */
                isUpdated: function isUpdated() {
                  const raw = this.toPlainObject();
                  return _plain_checks__WEBPACK_IMPORTED_MODULE_0__.isUpdated(raw);
                },
                /**
                 * Checks if the entry is in draft mode. This means it is not published.
                 */
                isDraft: function isDraft() {
                  const raw = this.toPlainObject();
                  return _plain_checks__WEBPACK_IMPORTED_MODULE_0__.isDraft(raw);
                },
                /**
                 * Checks if entry is archived. This means it's not exposed to the Delivery/Preview APIs.
                 */
                isArchived: function isArchived() {
                  const raw = this.toPlainObject();
                  return _plain_checks__WEBPACK_IMPORTED_MODULE_0__.isArchived(raw);
                },
                /**
                 * Recursively collects references of an entry and their descendants
                 */
                references: function references(options2) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Entry",
                    action: "references",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.environment.sys.id,
                      entryId: raw.sys.id,
                      include: options2 === null || options2 === void 0 ? void 0 : options2.include
                    }
                  }).then((response) => wrapEntryCollection(makeRequest, response));
                }
              };
            }
          }
        ),
        /***/
        "./create-environment-api.ts": (
          /*!***********************************!*\
            !*** ./create-environment-api.ts ***!
            \***********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                createEnvironmentApi
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./entities */
              "./entities/index.ts"
            );
            var _entities_release_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./entities/release-action */
              "./entities/release-action.ts"
            );
            var _entities_release__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ./entities/release */
              "./entities/release.ts"
            );
            var _entities_tag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ./entities/tag */
              "./entities/tag.ts"
            );
            var _entities_ui_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
              /*! ./entities/ui-config */
              "./entities/ui-config.ts"
            );
            var _entities_user_ui_config__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
              /*! ./entities/user-ui-config */
              "./entities/user-ui-config.ts"
            );
            var _entities_environment_template_installation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
              /*! ./entities/environment-template-installation */
              "./entities/environment-template-installation.ts"
            );
            const _excluded = ["installationId"];
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            function createEnvironmentApi(makeRequest) {
              const {
                wrapEnvironment
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].environment;
              const {
                wrapContentType,
                wrapContentTypeCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].contentType;
              const {
                wrapEntry,
                wrapEntryCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].entry;
              const {
                wrapAsset,
                wrapAssetCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].asset;
              const {
                wrapAssetKey
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].assetKey;
              const {
                wrapLocale,
                wrapLocaleCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].locale;
              const {
                wrapSnapshotCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].snapshot;
              const {
                wrapEditorInterface,
                wrapEditorInterfaceCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].editorInterface;
              const {
                wrapUpload
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].upload;
              const {
                wrapExtension,
                wrapExtensionCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].extension;
              const {
                wrapAppInstallation,
                wrapAppInstallationCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].appInstallation;
              const {
                wrapAppSignedRequest
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].appSignedRequest;
              const {
                wrapAppActionCall
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].appActionCall;
              const {
                wrapBulkAction
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].bulkAction;
              return {
                /**
                 * Deletes the environment
                 * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.delete())
                 * .then(() => console.log('Environment deleted.'))
                 * .catch(console.error)
                 * ```
                 */
                delete: function deleteEnvironment() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Environment",
                    action: "delete",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    }
                  }).then(() => {
                  });
                },
                /**
                 * Updates the environment
                 * @return Promise for the updated environment.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => {
                 *   environment.name = 'New name'
                 *   return environment.update()
                 * })
                 * .then((environment) => console.log(`Environment ${environment.sys.id} renamed.`)
                 * .catch(console.error)
                 * ```
                 */
                update: function updateEnvironment() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Environment",
                    action: "update",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    },
                    payload: raw
                  }).then((data) => wrapEnvironment(makeRequest, data));
                },
                /**
                 * Creates SDK Entry object (locally) from entry data
                 * @param entryData - Entry Data
                 * @return Entry
                 * @example ```javascript
                 * environment.getEntry('entryId').then(entry => {
                 *
                 *   // Build a plainObject in order to make it usable for React (saving in state or redux)
                 *   const plainObject = entry.toPlainObject();
                 *
                 *   // The entry is being updated in some way as plainObject:
                 *   const updatedPlainObject = {
                 *     ...plainObject,
                 *     fields: {
                 *       ...plainObject.fields,
                 *       title: {
                 *         'en-US': 'updatedTitle'
                 *       }
                 *     }
                 *   };
                 *
                 *   // Rebuild an sdk object out of the updated plainObject:
                 *   const entryWithMethodsAgain = environment.getEntryFromData(updatedPlainObject);
                 *
                 *   // Update with help of the sdk method:
                 *   entryWithMethodsAgain.update();
                 *
                 * });
                 * ```
                 **/
                getEntryFromData(entryData) {
                  return wrapEntry(makeRequest, entryData);
                },
                /**
                 * Creates SDK Asset object (locally) from entry data
                 * @param assetData - Asset ID
                 * @return Asset
                 * @example ```javascript
                 * environment.getAsset('asset_id').then(asset => {
                 *
                 *   // Build a plainObject in order to make it usable for React (saving in state or redux)
                 *   const plainObject = asset.toPlainObject();
                 *
                 *   // The asset is being updated in some way as plainObject:
                 *   const updatedPlainObject = {
                 *     ...plainObject,
                 *     fields: {
                 *       ...plainObject.fields,
                 *       title: {
                 *         'en-US': 'updatedTitle'
                 *       }
                 *     }
                 *   };
                 *
                 *   // Rebuild an sdk object out of the updated plainObject:
                 *   const assetWithMethodsAgain = environment.getAssetFromData(updatedPlainObject);
                 *
                 *   // Update with help of the sdk method:
                 *   assetWithMethodsAgain.update();
                 *
                 * });
                 * ```
                 */
                getAssetFromData(assetData) {
                  return wrapAsset(makeRequest, assetData);
                },
                /**
                 *
                 * @description Get a BulkAction by ID.
                 *  See: https://www.contentful.com/developers/docs/references/content-management-api/#/reference/bulk-actions/bulk-action
                 * @param bulkActionId - ID of the BulkAction to fetch
                 * @returns - Promise with the BulkAction
                 *
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getBulkAction('<bulk_action_id>'))
                 * .then((bulkAction) => console.log(bulkAction))
                 * ```
                 */
                getBulkAction(bulkActionId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "BulkAction",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      bulkActionId
                    }
                  }).then((data) => wrapBulkAction(makeRequest, data));
                },
                /**
                 * @description Creates a BulkAction that will attempt to publish all items contained in the payload.
                 * See: https://www.contentful.com/developers/docs/references/content-management-api/#/reference/bulk-actions/publish-bulk-action
                 * @param {BulkActionPayload} payload - Object containing the items to be processed in the bulkAction
                 * @returns - Promise with the BulkAction
                 *
                 * @example
                 *
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * const payload = {
                 *  entities: {
                 *    sys: { type: 'Array' }
                 *    items: [
                 *      { sys: { type: 'Link', id: '<entry-id>', linkType: 'Entry', version: 2 } }
                 *    ]
                 *  }
                 * }
                 *
                 * // Using Thenables
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.createPublishBulkAction(payload))
                 * .then((bulkAction) => console.log(bulkAction.waitProcessing()))
                 * .catch(console.error)
                 *
                 * // Using async/await
                 * try {
                 *  const space = await client.getSpace('<space_id>')
                 *  const environment = await space.getEnvironment('<environment_id>')
                 *  const bulkActionInProgress = await environment.createPublishBulkAction(payload)
                 *
                 *  // You can wait for a recently created BulkAction to be processed by using `bulkAction.waitProcessing()`
                 *  const bulkActionCompleted = await bulkActionInProgress.waitProcessing()
                 *  console.log(bulkActionCompleted)
                 * } catch (error) {
                 *  console.log(error)
                 * }
                 * ```
                 */
                createPublishBulkAction(payload) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "BulkAction",
                    action: "publish",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    },
                    payload
                  }).then((data) => wrapBulkAction(makeRequest, data));
                },
                /**
                 * @description Creates a BulkAction that will attempt to validate all items contained in the payload.
                 * See: https://www.contentful.com/developers/docs/references/content-management-api/#/reference/bulk-actions/validate-bulk-action
                 * @param {BulkActionPayload} payload - Object containing the items to be processed in the bulkAction
                 * @returns - Promise with the BulkAction
                 *
                 * @example
                 *
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * const payload = {
                 *  action: 'publish',
                 *  entities: {
                 *    sys: { type: 'Array' }
                 *    items: [
                 *      { sys: { type: 'Link', id: '<entry-id>', linkType: 'Entry' } }
                 *    ]
                 *  }
                 * }
                 *
                 * // Using Thenables
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.createValidateBulkAction(payload))
                 * .then((bulkAction) => console.log(bulkAction.waitProcessing()))
                 * .catch(console.error)
                 *
                 * // Using async/await
                 * try {
                 *  const space = await client.getSpace('<space_id>')
                 *  const environment = await space.getEnvironment('<environment_id>')
                 *  const bulkActionInProgress = await environment.createValidateBulkAction(payload)
                 *
                 *  // You can wait for a recently created BulkAction to be processed by using `bulkAction.waitProcessing()`
                 *  const bulkActionCompleted = await bulkActionInProgress.waitProcessing()
                 *  console.log(bulkActionCompleted)
                 * } catch (error) {
                 *  console.log(error)
                 * }
                 * ```
                 */
                createValidateBulkAction(payload) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "BulkAction",
                    action: "validate",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    },
                    payload
                  }).then((data) => wrapBulkAction(makeRequest, data));
                },
                /**
                 * @description Creates a BulkAction that will attempt to unpublish all items contained in the payload.
                 * See: https://www.contentful.com/developers/docs/references/content-management-api/#/reference/bulk-actions/unpublish-bulk-action
                 * @param {BulkActionPayload} payload - Object containing the items to be processed in the bulkAction
                 * @returns - Promise with the BulkAction
                 *
                 * @example
                 *
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * const payload = {
                 *  entities: {
                 *    sys: { type: 'Array' }
                 *    items: [
                 *      { sys: { type: 'Link', id: 'entry-id', linkType: 'Entry' } }
                 *    ]
                 *  }
                 * }
                 *
                 * // Using Thenables
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.createUnpublishBulkAction(payload))
                 * .then((bulkAction) => console.log(bulkAction.waitProcessing()))
                 * .catch(console.error)
                 *
                 * // Using async/await
                 * try {
                 *  const space = await clientgetSpace('<space_id>')
                 *  const environment = await space.getEnvironment('<environment_id>')
                 *  const bulkActionInProgress = await environment.createUnpublishBulkAction(payload)
                 *
                 *  // You can wait for a recently created BulkAction to be processed by using `bulkAction.waitProcessing()`
                 *  const bulkActionCompleted = await bulkActionInProgress.waitProcessing()
                 *  console.log(bulkActionCompleted)
                 * } catch (error) {
                 *  console.log(error)
                 * }
                 * ```
                 */
                createUnpublishBulkAction(payload) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "BulkAction",
                    action: "unpublish",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    },
                    payload
                  }).then((data) => wrapBulkAction(makeRequest, data));
                },
                /**
                 * Gets a Content Type
                 * @param contentTypeId - Content Type ID
                 * @return Promise for a Content Type
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getContentType('<content_type_id>'))
                 * .then((contentType) => console.log(contentType))
                 * .catch(console.error)
                 * ```
                 */
                getContentType(contentTypeId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "ContentType",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      contentTypeId
                    }
                  }).then((data) => wrapContentType(makeRequest, data));
                },
                /**
                 * Gets a collection of Content Types
                 * @param query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
                 * @return Promise for a collection of Content Types
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getContentTypes())
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getContentTypes(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "ContentType",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapContentTypeCollection(makeRequest, data));
                },
                /**
                 * Creates a Content Type
                 * @param data - Object representation of the Content Type to be created
                 * @return Promise for the newly created Content Type
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createContentType({
                 *   name: 'Blog Post',
                 *   fields: [
                 *     {
                 *       id: 'title',
                 *       name: 'Title',
                 *       required: true,
                 *       localized: false,
                 *       type: 'Text'
                 *     }
                 *   ]
                 * }))
                 * .then((contentType) => console.log(contentType))
                 * .catch(console.error)
                 * ```
                 */
                createContentType(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "ContentType",
                    action: "create",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    },
                    payload: data
                  }).then((response) => wrapContentType(makeRequest, response));
                },
                /**
                 * Creates a Content Type with a custom ID
                 * @param contentTypeId - Content Type ID
                 * @param data - Object representation of the Content Type to be created
                 * @return Promise for the newly created Content Type
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createContentTypeWithId('<content-type-id>', {
                 *   name: 'Blog Post',
                 *   fields: [
                 *     {
                 *       id: 'title',
                 *       name: 'Title',
                 *       required: true,
                 *       localized: false,
                 *       type: 'Text'
                 *     }
                 *   ]
                 * }))
                 * .then((contentType) => console.log(contentType))
                 * .catch(console.error)
                 * ```
                 */
                createContentTypeWithId(contentTypeId, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "ContentType",
                    action: "createWithId",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      contentTypeId
                    },
                    payload: data
                  }).then((response) => wrapContentType(makeRequest, response));
                },
                /**
                 * Gets an EditorInterface for a ContentType
                 * @param contentTypeId - Content Type ID
                 * @return Promise for an EditorInterface
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getEditorInterfaceForContentType('<content_type_id>'))
                 * .then((EditorInterface) => console.log(EditorInterface))
                 * .catch(console.error)
                 * ```
                 */
                getEditorInterfaceForContentType(contentTypeId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EditorInterface",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      contentTypeId
                    }
                  }).then((response) => wrapEditorInterface(makeRequest, response));
                },
                /**
                 * Gets all EditorInterfaces
                 * @return Promise for a collection of EditorInterface
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getEditorInterfaces())
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getEditorInterfaces() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EditorInterface",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    }
                  }).then((response) => wrapEditorInterfaceCollection(makeRequest, response));
                },
                /**
                 * Gets an Entry
                 * Warning: if you are using the select operator, when saving, any field that was not selected will be removed
                 * from your entry in the backend
                 * @param id - Entry ID
                 * @param query - Object with search parameters. In this method it's only useful for `locale`.
                 * @return Promise for an Entry
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getEntry('<entry-id>'))
                 * .then((entry) => console.log(entry))
                 * .catch(console.error)
                 * ```
                 */
                getEntry(id, query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Entry",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      entryId: id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapEntry(makeRequest, data));
                },
                /**
                 * Deletes an Entry of this environment
                 * @param id - Entry ID
                 * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.deleteEntry("4bmLXiuviAZH3jkj5DLRWE"))
                 * .then(() => console.log('Entry deleted.'))
                 * .catch(console.error)
                 * ```
                 */
                deleteEntry(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Entry",
                    action: "delete",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      entryId: id
                    }
                  }).then(() => {
                  });
                },
                /**
                 * Gets a collection of Entries
                 * Warning: if you are using the select operator, when saving, any field that was not selected will be removed
                 * from your entry in the backend
                 * @param query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
                 * @return Promise for a collection of Entries
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getEntries({'content_type': 'foo'})) // you can add more queries as 'key': 'value'
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getEntries(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Entry",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapEntryCollection(makeRequest, data));
                },
                /**
                 * Gets a collection of published Entries
                 * @param query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
                 * @return Promise for a collection of published Entries
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getPublishedEntries({'content_type': 'foo'})) // you can add more queries as 'key': 'value'
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getPublishedEntries(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Entry",
                    action: "getPublished",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapEntryCollection(makeRequest, data));
                },
                /**
                 * Creates a Entry
                 * @param contentTypeId - The Content Type ID of the newly created Entry
                 * @param data - Object representation of the Entry to be created
                 * @return Promise for the newly created Entry
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createEntry('<content_type_id>', {
                 *   fields: {
                 *     title: {
                 *       'en-US': 'Entry title'
                 *     }
                 *   }
                 * }))
                 * .then((entry) => console.log(entry))
                 * .catch(console.error)
                 * ```
                 */
                createEntry(contentTypeId, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Entry",
                    action: "create",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      contentTypeId
                    },
                    payload: data
                  }).then((response) => wrapEntry(makeRequest, response));
                },
                /**
                 * Creates a Entry with a custom ID
                 * @param contentTypeId - The Content Type of the newly created Entry
                 * @param id - Entry ID
                 * @param data - Object representation of the Entry to be created
                 * @return Promise for the newly created Entry
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * // Create entry
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createEntryWithId('<content_type_id>', '<entry_id>', {
                 *   fields: {
                 *     title: {
                 *       'en-US': 'Entry title'
                 *     }
                 *   }
                 * }))
                 * .then((entry) => console.log(entry))
                 * .catch(console.error)
                 * ```
                 */
                createEntryWithId(contentTypeId, id, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Entry",
                    action: "createWithId",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      entryId: id,
                      contentTypeId
                    },
                    payload: data
                  }).then((response) => wrapEntry(makeRequest, response));
                },
                /**
                 * Get entry references
                 * @param entryId - Entry ID
                 * @param {Object} options.include - Level of the entry descendants from 1 up to 10 maximum
                 * @returns Promise of Entry references
                 * @example ```javascript
                 * const contentful = require('contentful-management');
                 *
                 * const client = contentful.createClient({
                 *  accessToken: '<contentful_management_api_key>
                 * })
                 *
                 * // Get entry references
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getEntryReferences('<entry_id>', {include: number}))
                 * .then((entry) => console.log(entry.includes))
                 * // or
                 * .then((environment) => environment.getEntry('<entry_id>')).then((entry) => entry.references({include: number}))
                 * .catch(console.error)
                 * ```
                 */
                getEntryReferences(entryId, options2) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Entry",
                    action: "references",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      entryId,
                      include: options2 === null || options2 === void 0 ? void 0 : options2.include
                    }
                  }).then((response) => wrapEntryCollection(makeRequest, response));
                },
                /**
                 * Gets an Asset
                 * Warning: if you are using the select operator, when saving, any field that was not selected will be removed
                 * from your entry in the backend
                 * @param id - Asset ID
                 * @param query - Object with search parameters. In this method it's only useful for `locale`.
                 * @return Promise for an Asset
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getAsset('<asset_id>'))
                 * .then((asset) => console.log(asset))
                 * .catch(console.error)
                 * ```
                 */
                getAsset(id, query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      assetId: id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapAsset(makeRequest, data));
                },
                /**
                 * Gets a collection of Assets
                 * Warning: if you are using the select operator, when saving, any field that was not selected will be removed
                 * from your entry in the backend
                 * @param query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
                 * @return Promise for a collection of Assets
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getAssets())
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getAssets(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapAssetCollection(makeRequest, data));
                },
                /**
                 * Creates a Asset. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.
                 * @param data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.
                 * @return Promise for the newly created Asset
                 * @example ```javascript
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * // Create asset
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createAsset({
                 *   fields: {
                 *     title: {
                 *       'en-US': 'Playsam Streamliner'
                 *    },
                 *    file: {
                 *       'en-US': {
                 *         contentType: 'image/jpeg',
                 *        fileName: 'example.jpeg',
                 *        upload: 'https://example.com/example.jpg'
                 *      }
                 *    }
                 *   }
                 * }))
                 * .then((asset) => asset.processForLocale("en-US")) // OR asset.processForAllLocales()
                 * .then((asset) => console.log(asset))
                 * .catch(console.error)
                 * ```
                 */
                createAsset(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "create",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    },
                    payload: data
                  }).then((response) => wrapAsset(makeRequest, response));
                },
                /**
                 * Creates a Asset with a custom ID. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.
                 * @param id - Asset ID
                 * @param data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.
                 * @return Promise for the newly created Asset
                 * @example ```javascript
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * // Create asset
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createAssetWithId('<asset_id>', {
                 *   title: {
                 *     'en-US': 'Playsam Streamliner'
                 *   },
                 *   file: {
                 *     'en-US': {
                 *       contentType: 'image/jpeg',
                 *       fileName: 'example.jpeg',
                 *       upload: 'https://example.com/example.jpg'
                 *     }
                 *   }
                 * }))
                 * .then((asset) => asset.process())
                 * .then((asset) => console.log(asset))
                 * .catch(console.error)
                 * ```
                 */
                createAssetWithId(id, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "createWithId",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      assetId: id
                    },
                    payload: data
                  }).then((response) => wrapAsset(makeRequest, response));
                },
                /**
                 * Creates a Asset based on files. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.
                 * @param data - Object representation of the Asset to be created. Note that the field object should have an uploadFrom property on asset creation, which will be removed and replaced with an url property when processing is finished.
                 * @param data.fields.file.[LOCALE].file - Can be a string, an ArrayBuffer or a Stream.
                 * @return Promise for the newly created Asset
                 * @example ```javascript
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createAssetFromFiles({
                 *   fields: {
                 *     file: {
                 *       'en-US': {
                 *          contentType: 'image/jpeg',
                 *          fileName: 'filename_english.jpg',
                 *          file: createReadStream('path/to/filename_english.jpg')
                 *       },
                 *       'de-DE': {
                 *          contentType: 'image/svg+xml',
                 *          fileName: 'filename_german.svg',
                 *          file: '<svg><path fill="red" d="M50 50h150v50H50z"/></svg>'
                 *       }
                 *     }
                 *   }
                 * }))
                 * .then((asset) => console.log(asset))
                 * .catch(console.error)
                 * ```
                 */
                createAssetFromFiles(data, options2) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "createFromFiles",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      uploadTimeout: options2 === null || options2 === void 0 ? void 0 : options2.uploadTimeout
                    },
                    payload: data
                  }).then((response) => wrapAsset(makeRequest, response));
                },
                /**
                 * Creates an asset key for signing asset URLs (Embargoed Assets)
                 * @param data Object with request payload
                 * @param data.expiresAt number a UNIX timestamp in the future (but not more than 48 hours from time of calling)
                 * @return Promise for the newly created AssetKey
                 * @example ```javascript
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * // Create assetKey
                 * now = () => Math.floor(Date.now() / 1000)
                 * const withExpiryIn1Hour = () => now() + 1 * 60 * 60
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createAssetKey({ expiresAt: withExpiryIn1Hour() }))
                 * .then((policy, secret) => console.log({ policy, secret }))
                 * .catch(console.error)
                 * ```
                 */
                createAssetKey(payload) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AssetKey",
                    action: "create",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    },
                    payload
                  }).then((data) => wrapAssetKey(makeRequest, data));
                },
                /**
                 * Gets an Upload
                 * @param id - Upload ID
                 * @return Promise for an Upload
                 * @example ```javascript
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 * const uploadStream = createReadStream('path/to/filename_english.jpg')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getUpload('<upload-id>')
                 * .then((upload) => console.log(upload))
                 * .catch(console.error)
                 */
                getUpload(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Upload",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      uploadId: id
                    }
                  }).then((data) => wrapUpload(makeRequest, data));
                },
                /**
                 * Creates a Upload.
                 * @param data - Object with file information.
                 * @param data.file - Actual file content. Can be a string, an ArrayBuffer or a Stream.
                 * @return Upload object containing information about the uploaded file.
                 * @example ```javascript
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 * const uploadStream = createReadStream('path/to/filename_english.jpg')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createUpload({file: uploadStream})
                 * .then((upload) => console.log(upload))
                 * .catch(console.error)
                 * ```
                 */
                createUpload: function createUpload(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Upload",
                    action: "create",
                    params: {
                      spaceId: raw.sys.space.sys.id
                    },
                    payload: data
                  }).then((data2) => wrapUpload(makeRequest, data2));
                },
                /**
                 * Gets a Locale
                 * @param localeId - Locale ID
                 * @return Promise for an Locale
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getLocale('<locale_id>'))
                 * .then((locale) => console.log(locale))
                 * .catch(console.error)
                 * ```
                 */
                getLocale(localeId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Locale",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      localeId
                    }
                  }).then((data) => wrapLocale(makeRequest, data));
                },
                /**
                 * Gets a collection of Locales
                 * @return Promise for a collection of Locales
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getLocales())
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getLocales() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Locale",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    }
                  }).then((data) => wrapLocaleCollection(makeRequest, data));
                },
                /**
                 * Creates a Locale
                 * @param data - Object representation of the Locale to be created
                 * @return Promise for the newly created Locale
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * // Create locale
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createLocale({
                 *   name: 'German (Austria)',
                 *   code: 'de-AT',
                 *   fallbackCode: 'de-DE',
                 *   optional: true
                 * }))
                 * .then((locale) => console.log(locale))
                 * .catch(console.error)
                 * ```
                 */
                createLocale(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Locale",
                    action: "create",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    },
                    payload: data
                  }).then((response) => wrapLocale(makeRequest, response));
                },
                /**
                 * Gets an UI Extension
                 * @param id - Extension ID
                 * @return Promise for an UI Extension
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getUiExtension('<extension-id>'))
                 * .then((extension) => console.log(extension))
                 * .catch(console.error)
                 * ```
                 */
                getUiExtension(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Extension",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      extensionId: id
                    }
                  }).then((data) => wrapExtension(makeRequest, data));
                },
                /**
                 * Gets a collection of UI Extension
                 * @return Promise for a collection of UI Extensions
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getUiExtensions()
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getUiExtensions() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Extension",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    }
                  }).then((response) => wrapExtensionCollection(makeRequest, response));
                },
                /**
                 * Creates a UI Extension
                 * @param data - Object representation of the UI Extension to be created
                 * @return Promise for the newly created UI Extension
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createUiExtension({
                 *   extension: {
                 *     name: 'My awesome extension',
                 *     src: 'https://example.com/my',
                 *     fieldTypes: [
                 *       {
                 *         type: 'Symbol'
                 *       },
                 *       {
                 *         type: 'Text'
                 *       }
                 *     ],
                 *     sidebar: false
                 *   }
                 * }))
                 * .then((extension) => console.log(extension))
                 * .catch(console.error)
                 * ```
                 */
                createUiExtension(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Extension",
                    action: "create",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    },
                    payload: data
                  }).then((response) => wrapExtension(makeRequest, response));
                },
                /**
                 * Creates a UI Extension with a custom ID
                 * @param id - Extension ID
                 * @param data - Object representation of the UI Extension to be created
                 * @return Promise for the newly created UI Extension
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createUiExtensionWithId('<extension_id>', {
                 *   extension: {
                 *     name: 'My awesome extension',
                 *     src: 'https://example.com/my',
                 *     fieldTypes: [
                 *       {
                 *         type: 'Symbol'
                 *       },
                 *       {
                 *         type: 'Text'
                 *       }
                 *     ],
                 *     sidebar: false
                 *   }
                 * }))
                 * .then((extension) => console.log(extension))
                 * .catch(console.error)
                 * ```
                 */
                createUiExtensionWithId(id, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Extension",
                    action: "createWithId",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      extensionId: id
                    },
                    payload: data
                  }).then((response) => wrapExtension(makeRequest, response));
                },
                /**
                 * Creates an App Installation
                 * @param appDefinitionId - AppDefinition ID
                 * @param data - AppInstallation data
                 * @param options.acceptAllTerms - Flag for accepting Apps' Marketplace EULA, Terms, and Privacy policy (need to pass `{acceptAllTerms: true}` to install a marketplace app)
                 * @return Promise for an App Installation
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 *  .then((space) => space.getEnvironment('<environment-id>'))
                 *  .then((environment) => environment.createAppInstallation('<app_definition_id>', {
                 *    parameters: {
                 *      someParameter: someValue
                 *    }
                 *   })
                 *  .then((appInstallation) => console.log(appInstallation))
                 *  .catch(console.error)
                 *  ```
                 */
                createAppInstallation(appDefinitionId, data, {
                  acceptAllTerms
                } = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppInstallation",
                    action: "upsert",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      appDefinitionId,
                      acceptAllTerms
                    },
                    payload: data
                  }).then((payload) => wrapAppInstallation(makeRequest, payload));
                },
                /**
                 * Gets an App Installation
                 * @param id - AppDefintion ID
                 * @return Promise for an App Installation
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 *  .then((space) => space.getEnvironment('<environment-id>'))
                 *  .then((environment) => environment.getAppInstallation('<app-definition-id>'))
                 *  .then((appInstallation) => console.log(appInstallation))
                 *  .catch(console.error)
                 *  ```
                 */
                getAppInstallation(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppInstallation",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      appDefinitionId: id
                    }
                  }).then((data) => wrapAppInstallation(makeRequest, data));
                },
                /**
                 * Gets a collection of App Installation
                 * @return Promise for a collection of App Installations
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 *  .then((space) => space.getEnvironment('<environment-id>'))
                 *  .then((environment) => environment.getAppInstallations()
                 *  .then((response) => console.log(response.items))
                 *  .catch(console.error)
                 *  ```
                 */
                getAppInstallations() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppInstallation",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    }
                  }).then((data) => wrapAppInstallationCollection(makeRequest, data));
                },
                /**
                 * Creates an app action call
                 * @param appDefinitionId - AppDefinition ID
                 * @param appActionId - action ID
                 * @param data - App Action Call data
                 * @return Promise for an App Action Call
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * const data = {
                 *   headers: {
                 *     'x-my-header': 'some-value'
                 *   },
                 *   body: {
                 *     'some-body-value': true
                 *   }
                 * }
                 *
                 * client.getSpace('<space_id>')
                 *  .then((space) => space.getEnvironment('<environment-id>'))
                 *  .then((environment) => environment.createAppActionCall('<app_definition_id>', '<action_id>', data)
                 *  .then((appActionCall) => console.log(appActionCall))
                 *  .catch(console.error)
                 *  ```
                 */
                createAppActionCall(appDefinitionId, appActionId, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppActionCall",
                    action: "create",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      appDefinitionId,
                      appActionId
                    },
                    payload: data
                  }).then((payload) => wrapAppActionCall(makeRequest, payload));
                },
                /**
                 * Creates an app signed request
                 * @param appDefinitionId - AppDefinition ID
                 * @param data - SignedRequest data
                 * @return Promise for a Signed Request
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * const data = {
                 *   method: 'POST',
                 *   path: '/request_path',
                 *   body: '{ "key": "data" }',
                 *   headers: {
                 *     'x-my-header': 'some-value'
                 *   },
                 * }
                 *
                 * client.getSpace('<space_id>')
                 *  .then((space) => space.getEnvironment('<environment-id>'))
                 *  .then((environment) => environment.createAppSignedRequest('<app_definition_id>', data)
                 *  .then((signedRequest) => console.log(signedRequest))
                 *  .catch(console.error)
                 *  ```
                 */
                createAppSignedRequest(appDefinitionId, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppSignedRequest",
                    action: "create",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      appDefinitionId
                    },
                    payload: data
                  }).then((payload) => wrapAppSignedRequest(makeRequest, payload));
                },
                /**
                 * Gets all snapshots of an entry
                 * @func getEntrySnapshots
                 * @param entryId - Entry ID
                 * @param query - query additional query paramaters
                 * @return Promise for a collection of Entry Snapshots
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getEntrySnapshots('<entry_id>'))
                 * .then((snapshots) => console.log(snapshots.items))
                 * .catch(console.error)
                 * ```
                 */
                getEntrySnapshots(entryId, query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Snapshot",
                    action: "getManyForEntry",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      entryId,
                      query: query5
                    }
                  }).then((data) => wrapSnapshotCollection(makeRequest, data));
                },
                /**
                 * Gets all snapshots of a contentType
                 * @func getContentTypeSnapshots
                 * @param contentTypeId - Content Type ID
                 * @param query - query additional query paramaters
                 * @return Promise for a collection of Content Type Snapshots
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getContentTypeSnapshots('<contentTypeId>'))
                 * .then((snapshots) => console.log(snapshots.items))
                 * .catch(console.error)
                 * ```
                 */
                getContentTypeSnapshots(contentTypeId, query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Snapshot",
                    action: "getManyForContentType",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      contentTypeId,
                      query: query5
                    }
                  }).then((data) => wrapSnapshotCollection(makeRequest, data));
                },
                createTag(id, name, visibility) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Tag",
                    action: "createWithId",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      tagId: id
                    },
                    payload: {
                      name,
                      sys: {
                        visibility: visibility !== null && visibility !== void 0 ? visibility : "private"
                      }
                    }
                  }).then((data) => (0, _entities_tag__WEBPACK_IMPORTED_MODULE_4__.wrapTag)(makeRequest, data));
                },
                getTags(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Tag",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => (0, _entities_tag__WEBPACK_IMPORTED_MODULE_4__.wrapTagCollection)(makeRequest, data));
                },
                getTag(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Tag",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      tagId: id
                    }
                  }).then((data) => (0, _entities_tag__WEBPACK_IMPORTED_MODULE_4__.wrapTag)(makeRequest, data));
                },
                /**
                 * Retrieves a Release by ID
                 * @param releaseId
                 * @returns Promise containing a wrapped Release
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getRelease('<release_id>'))
                 * .then((release) => console.log(release))
                 * .catch(console.error)
                 * ```
                 */
                getRelease(releaseId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Release",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      releaseId
                    }
                  }).then((data) => (0, _entities_release__WEBPACK_IMPORTED_MODULE_3__.wrapRelease)(makeRequest, data));
                },
                /**
                 * Gets a Collection of Releases,
                 * @param {ReleaseQueryOptions} query filtering options for the collection result
                 * @returns Promise containing a wrapped Release Collection
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getReleases({ 'entities.sys.id[in]': '<asset_id>,<entry_id>' }))
                 * .then((releases) => console.log(releases))
                 * .catch(console.error)
                 * ```
                 */
                getReleases(query5) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Release",
                    action: "query",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      query: query5
                    }
                  }).then((data) => (0, _entities_release__WEBPACK_IMPORTED_MODULE_3__.wrapReleaseCollection)(makeRequest, data));
                },
                /**
                 * Creates a new Release with the entities and title in the payload
                 * @param payload Object containing the payload in order to create a Release
                 * @returns Promise containing a wrapped Release, that has other helper methods within.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * const payload = {
                 *   title: 'My Release',
                 *   entities: {
                 *     sys: { type: 'Array' },
                 *     items: [
                 *      { sys: { linkType: 'Entry', type: 'Link', id: '<entry_id>' } }
                 *     ]
                 *   }
                 * }
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.createRelease(payload))
                 * .then((release) => console.log(release))
                 * .catch(console.error)
                 * ```
                 */
                createRelease(payload) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Release",
                    action: "create",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    },
                    payload
                  }).then((data) => (0, _entities_release__WEBPACK_IMPORTED_MODULE_3__.wrapRelease)(makeRequest, data));
                },
                /**
                 * Updates a Release and replaces all the properties.
                 * @param {object} options,
                 * @param options.releaseId the ID of the release
                 * @param options.payload the payload to be updated in the Release
                 * @param options.version Release sys.version that to be updated
                 * @returns Promise containing a wrapped Release, that has helper methods within.
                 *
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 *
                 * const payload = {
                 *   title: "Updated Release title",
                 *   entities: {
                 *     sys: { type: 'Array' },
                 *     items: [
                 *        { sys: { linkType: 'Entry', type: 'Link', id: '<entry_id>' } }
                 *     ]
                 *   }
                 * }
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.updateRelease({ releaseId: '<release_id>', version: 1, payload } ))
                 * .then((release) => console.log(release))
                 * .catch(console.error)
                 * ```
                 */
                updateRelease({
                  releaseId,
                  payload,
                  version
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Release",
                    action: "update",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      releaseId,
                      version
                    },
                    payload
                  }).then((data) => (0, _entities_release__WEBPACK_IMPORTED_MODULE_3__.wrapRelease)(makeRequest, data));
                },
                /**
                 * Deletes a Release by ID - does not delete any entities.
                 * @param releaseId the ID of the release
                 *
                 * @returns Promise containing a wrapped Release, that has helper methods within.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.deleteRelease('<release_id>')
                 * .catch(console.error)
                 * ```
                 */
                deleteRelease(releaseId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Release",
                    action: "delete",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      releaseId
                    }
                  });
                },
                /**
                 * Publishes all Entities contained in a Release.
                 * @param options.releaseId the ID of the release
                 * @param options.version the version of the release that is to be published
                 * @returns Promise containing a wrapped Release, that has helper methods within.
                 *
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.publishRelease({ releaseId: '<release_id>', version: 1 }))
                 * .catch(console.error)
                 * ```
                 */
                publishRelease({
                  releaseId,
                  version
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Release",
                    action: "publish",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      releaseId,
                      version
                    }
                  }).then((data) => (0, _entities_release_action__WEBPACK_IMPORTED_MODULE_2__.wrapReleaseAction)(makeRequest, data));
                },
                /**
                 * Unpublishes all Entities contained in a Release.
                 * @param options.releaseId the ID of the release
                 * @param options.version the version of the release that is to be published
                 * @returns Promise containing a wrapped Release, that has helper methods within.
                 *
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.unpublishRelease({ releaseId: '<release_id>', version: 1 }))
                 * .catch(console.error)
                 * ```
                 */
                unpublishRelease({
                  releaseId,
                  version
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Release",
                    action: "unpublish",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      releaseId,
                      version
                    }
                  }).then((data) => (0, _entities_release_action__WEBPACK_IMPORTED_MODULE_2__.wrapReleaseAction)(makeRequest, data));
                },
                /**
                 * Validates all Entities contained in a Release against an action (publish or unpublish)
                 * @param options.releaseId the ID of the release
                 * @param options.payload (optional) the type of action to be validated against
                 *
                 * @returns Promise containing a wrapped Release, that has helper methods within.
                 *
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.validateRelease({ releaseId: '<release_id>', payload: { action: 'unpublish' } }))
                 * .catch(console.error)
                 * ```
                 */
                validateRelease({
                  releaseId,
                  payload
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Release",
                    action: "validate",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      releaseId
                    },
                    payload
                  }).then((data) => (0, _entities_release_action__WEBPACK_IMPORTED_MODULE_2__.wrapReleaseAction)(makeRequest, data));
                },
                /**
                 * Archives a Release and prevents new operations (publishing, unpublishing adding new entities etc).
                 * @param options.releaseId the ID of the release
                 * @param options.version the version of the release that is to be archived
                 * @returns Promise containing a wrapped Release, that has helper methods within.
                 *
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.archiveRelease({ releaseId: '<release_id>', version: 1 }))
                 * .catch(console.error)
                 * ```
                 */
                archiveRelease({
                  releaseId,
                  version
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Release",
                    action: "archive",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      releaseId,
                      version
                    }
                  }).then((data) => (0, _entities_release__WEBPACK_IMPORTED_MODULE_3__.wrapRelease)(makeRequest, data));
                },
                /**
                 * Unarchives a previously archived Release - this enables the release to be published, unpublished etc.
                 * @param options.releaseId the ID of the release
                 * @param options.version the version of the release that is to be unarchived
                 * @returns Promise containing a wrapped Release, that has helper methods within.
                 *
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.unarchiveRelease({ releaseId: '<release_id>', version: 1 }))
                 * .catch(console.error)
                 * ```
                 */
                unarchiveRelease({
                  releaseId,
                  version
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Release",
                    action: "unarchive",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      releaseId,
                      version
                    }
                  }).then((data) => (0, _entities_release__WEBPACK_IMPORTED_MODULE_3__.wrapRelease)(makeRequest, data));
                },
                /**
                 * Retrieves a ReleaseAction by ID
                 * @param params.releaseId The ID of a Release
                 * @param params.actionId The ID of a Release Action
                 * @returns Promise containing a wrapped ReleaseAction
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getReleaseAction({ releaseId: '<release_id>', actionId: '<action_id>' }))
                 * .then((releaseAction) => console.log(releaseAction))
                 * .catch(console.error)
                 * ```
                 */
                getReleaseAction({
                  actionId,
                  releaseId
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "ReleaseAction",
                    action: "get",
                    params: {
                      actionId,
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      releaseId
                    }
                  }).then((data) => (0, _entities_release_action__WEBPACK_IMPORTED_MODULE_2__.wrapReleaseAction)(makeRequest, data));
                },
                /**
                 * Gets a Collection of ReleaseActions
                 * @param {string} params.releaseId ID of the Release to fetch the actions from
                 * @param {ReleaseQueryOptions} params.query filtering options for the collection result
                 * @returns Promise containing a wrapped ReleaseAction Collection
                 *
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment-id>'))
                 * .then((environment) => environment.getReleaseActions({ query: { 'sys.id[in]': '<id_1>,<id_2>', 'sys.release.sys.id[in]': '<id1>,<id2>' } }))
                 * .then((releaseActions) => console.log(releaseActions))
                 * .catch(console.error)
                 * ```
                 */
                getReleaseActions({
                  query: query5
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "ReleaseAction",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id,
                      query: query5
                    }
                  }).then((data) => (0, _entities_release_action__WEBPACK_IMPORTED_MODULE_2__.wrapReleaseActionCollection)(makeRequest, data));
                },
                async getUIConfig() {
                  const raw = this.toPlainObject();
                  const data = await makeRequest({
                    entityType: "UIConfig",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    }
                  });
                  return (0, _entities_ui_config__WEBPACK_IMPORTED_MODULE_5__.wrapUIConfig)(makeRequest, data);
                },
                async getUserUIConfig() {
                  const raw = this.toPlainObject();
                  const data = await makeRequest({
                    entityType: "UserUIConfig",
                    action: "get",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    }
                  });
                  return (0, _entities_user_ui_config__WEBPACK_IMPORTED_MODULE_6__.wrapUserUIConfig)(makeRequest, data);
                },
                /**
                 * Gets a collection of all environment template installations in the environment for a given template
                 * @param environmentTemplateId - Environment template ID to return installations for
                 * @param [options.installationId] - Installation ID to filter for a specific installation
                 * @return Promise for a collection of EnvironmentTemplateInstallations
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getEnvironmentTemplateInstallations('<environment_template_id>'))
                 * .then((installations) => console.log(installations.items))
                 * .catch(console.error)
                 * ```
                 */
                async getEnvironmentTemplateInstallations(environmentTemplateId, _ref = {}) {
                  let {
                    installationId
                  } = _ref, query5 = _objectWithoutProperties(_ref, _excluded);
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentTemplateInstallation",
                    action: "getForEnvironment",
                    params: _objectSpread(_objectSpread({
                      environmentTemplateId
                    }, installationId && {
                      installationId
                    }), {}, {
                      query: _objectSpread({}, (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params),
                      spaceId: raw.sys.space.sys.id,
                      environmentId: raw.sys.id
                    })
                  }).then((data) => (0, _entities_environment_template_installation__WEBPACK_IMPORTED_MODULE_7__.wrapEnvironmentTemplateInstallationCollection)(makeRequest, data));
                }
              };
            }
          }
        ),
        /***/
        "./create-environment-template-api.ts": (
          /*!********************************************!*\
            !*** ./create-environment-template-api.ts ***!
            \********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              createEnvironmentTemplateApi: () => (
                /* binding */
                createEnvironmentTemplateApi
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./entities */
              "./entities/index.ts"
            );
            const _excluded = ["spaceId", "environmentId"];
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            function createEnvironmentTemplateApi(makeRequest, organizationId) {
              const {
                wrapEnvironmentTemplate,
                wrapEnvironmentTemplateCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].environmentTemplate;
              const {
                wrapEnvironmentTemplateInstallationCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].environmentTemplateInstallation;
              return {
                /**
                 * Updates a environment template
                 * @return Promise for new version of the template
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
                 * .then((environmentTemplate) => {
                 *   environmentTemplate.name = 'New name'
                 *   return environmentTemplate.update()
                 * })
                 * .then((environmentTemplate) =>
                 *   console.log(`Environment template ${environmentTemplate.sys.id} renamed.`)
                 * ).catch(console.error)
                 * ```
                 */
                update: function updateEnvironmentTemplate() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentTemplate",
                    action: "update",
                    params: {
                      organizationId,
                      environmentTemplateId: raw.sys.id
                    },
                    payload: raw
                  }).then((data) => wrapEnvironmentTemplate(makeRequest, data, organizationId));
                },
                /**
                 * Updates environment template version data
                 * @param version.versionName - Name of the environment template version
                 * @param version.versionDescription - Description of the environment template version
                 * @return Promise for an updated EnvironmentTemplate
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
                 * .then((environmentTemplate) => {
                 *   return environmentTemplate.updateVersion({
                 *     versionName: 'New Name',
                 *     versionDescription: 'New Description',
                 *   })
                 * })
                 * .then((environmentTemplate) =>
                 *   console.log(`Environment template version ${environmentTemplate.sys.id} renamed.`)
                 * ).catch(console.error)
                 * ```
                 */
                updateVersion: function updateEnvironmentTemplateVersion({
                  versionName,
                  versionDescription
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentTemplate",
                    action: "versionUpdate",
                    params: {
                      organizationId,
                      environmentTemplateId: raw.sys.id,
                      version: raw.sys.version
                    },
                    payload: {
                      versionName,
                      versionDescription
                    }
                  }).then((data) => wrapEnvironmentTemplate(makeRequest, data, organizationId));
                },
                /**
                 * Deletes the environment template
                 * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
                 *   .then((environmentTemplate) => environmentTemplate.delete())
                 *   .then(() => console.log('Environment template deleted.'))
                 *   .catch(console.error)
                 * ```
                 */
                delete: function deleteEnvironmentTemplate() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentTemplate",
                    action: "delete",
                    params: {
                      organizationId,
                      environmentTemplateId: raw.sys.id
                    }
                  });
                },
                /**
                 * Gets a collection of all versions for the environment template
                 * @return Promise for a EnvironmentTemplate
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
                 * .then((environmentTemplate) => environmentTemplate.getVersions())
                 * .then((environmentTemplateVersions) => console.log(environmentTemplateVersions.items))
                 * .catch(console.error)
                 * ```
                 */
                getVersions: function getEnvironmentTemplateVersions() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentTemplate",
                    action: "versions",
                    params: {
                      organizationId,
                      environmentTemplateId: raw.sys.id
                    }
                  }).then((data) => wrapEnvironmentTemplateCollection(makeRequest, data, organizationId));
                },
                /**
                 * Gets a collection of all installations for the environment template
                 * @param [installationParams.spaceId] - Space ID to filter installations by space and environment
                 * @param [installationParams.environmentId] - Environment ID to filter installations by space and environment
                 * @return Promise for a collection of EnvironmentTemplateInstallations
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
                 * .then((environmentTemplate) => environmentTemplate.getInstallations())
                 * .then((environmentTemplateInstallations) =>
                 *   console.log(environmentTemplateInstallations.items)
                 * )
                 * .catch(console.error)
                 * ```
                 */
                getInstallations: function getEnvironmentTemplateInstallations(_ref = {}) {
                  let {
                    spaceId,
                    environmentId
                  } = _ref, query5 = _objectWithoutProperties(_ref, _excluded);
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentTemplateInstallation",
                    action: "getMany",
                    params: {
                      organizationId,
                      environmentTemplateId: raw.sys.id,
                      query: _objectSpread({}, (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params),
                      spaceId,
                      environmentId
                    }
                  }).then((data) => wrapEnvironmentTemplateInstallationCollection(makeRequest, data));
                },
                /**
                 * Validates an environment template against a given space and environment
                 * @param params.spaceId - Space ID where the template should be installed into
                 * @param params.environmentId - Environment ID where the template should be installed into
                 * @param [params.version] - Version of the template
                 * @param [params.installation.takeover] - Already existing Content types to takeover in the target environment
                 * @param [params.changeSet] - Change set which should be applied
                 * @return Promise for a EnvironmentTemplateValidation
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
                 * .then((environmentTemplate) => environmentTemplate.validate({
                 *   spaceId: '<space_id>',
                 *   environmentId: '<environment_id>',
                 *   version: <version>,
                 * }))
                 * .then((validationResult) => console.log(validationResult))
                 * .catch(console.error)
                 * ```
                 */
                validate: function validateEnvironmentTemplate({
                  spaceId,
                  environmentId,
                  version,
                  takeover,
                  changeSet
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentTemplate",
                    action: "validate",
                    params: {
                      spaceId,
                      version,
                      environmentId,
                      environmentTemplateId: raw.sys.id
                    },
                    payload: _objectSpread(_objectSpread({}, takeover && {
                      takeover
                    }), changeSet && {
                      changeSet
                    })
                  });
                },
                /**
                 * Installs a template against a given space and environment
                 * @param params.spaceId - Space ID where the template should be installed into
                 * @param params.environmentId - Environment ID where the template should be installed into
                 * @param params.installation.version- Template version which should be installed
                 * @param [params.installation.takeover] - Already existing Content types tp takeover in the target environment
                 * @param [params.changeSet] - Change set which should be applied
                 * @return Promise for a EnvironmentTemplateInstallation
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
                 * .then((environmentTemplate) => environmentTemplate.validate({
                 *   spaceId: '<space_id>',
                 *   environmentId: '<environment_id>',
                 *   installation: {
                 *     version: <version>,
                 *   }
                 * }))
                 * .then((installation) => console.log(installation))
                 * .catch(console.error)
                 * ```
                 */
                install: function installEnvironmentTemplate({
                  spaceId,
                  environmentId,
                  installation
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentTemplate",
                    action: "install",
                    params: {
                      spaceId,
                      environmentId,
                      environmentTemplateId: raw.sys.id
                    },
                    payload: installation
                  });
                },
                /**
                 * Disconnects the template from a given environment
                 * @param params.spaceId - Space ID where the template should be installed into
                 * @param params.environmentId - Environment ID where the template should be installed into
                 * @return Promise for the disconnection with no data
                 * ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
                 * .then(environmentTemplate) => environmentTemplate.disconnected())
                 * .then(() => console.log('Template disconnected'))
                 * .catch(console.error)
                 * ```
                 */
                disconnect: function disconnectEnvironmentTemplate({
                  spaceId,
                  environmentId
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentTemplate",
                    action: "disconnect",
                    params: {
                      spaceId,
                      environmentId,
                      environmentTemplateId: raw.sys.id
                    }
                  });
                }
              };
            }
          }
        ),
        /***/
        "./create-organization-api.ts": (
          /*!************************************!*\
            !*** ./create-organization-api.ts ***!
            \************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                createOrganizationApi
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./entities */
              "./entities/index.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function createOrganizationApi(makeRequest) {
              const {
                wrapAppDefinition,
                wrapAppDefinitionCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].appDefinition;
              const {
                wrapUser,
                wrapUserCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].user;
              const {
                wrapOrganizationMembership,
                wrapOrganizationMembershipCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].organizationMembership;
              const {
                wrapTeamMembership,
                wrapTeamMembershipCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].teamMembership;
              const {
                wrapTeamSpaceMembership,
                wrapTeamSpaceMembershipCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].teamSpaceMembership;
              const {
                wrapTeam,
                wrapTeamCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].team;
              const {
                wrapSpaceMembership,
                wrapSpaceMembershipCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].spaceMembership;
              const {
                wrapOrganizationInvitation
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].organizationInvitation;
              const {
                wrapAppUpload
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].appUpload;
              const {
                wrapAppSigningSecret
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].appSigningSecret;
              const {
                wrapAppDetails
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].appDetails;
              const {
                wrapAppAction,
                wrapAppActionCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].appAction;
              return {
                /**
                 * Gets a User
                 * @return Promise for a User
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<organization_id>')
                 * .then((organization) => organization.getUser('id'))
                 * .then((user) => console.log(user))
                 * .catch(console.error)
                 * ```
                 */
                getUser(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "User",
                    action: "getForOrganization",
                    params: {
                      organizationId: raw.sys.id,
                      userId: id
                    }
                  }).then((data) => wrapUser(makeRequest, data));
                },
                /**
                 * Gets a collection of Users in organization
                 * @param query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
                 * @return Promise a collection of Users in organization
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<organization_id>')
                 * .then((organization) => organization.getUsers())
                 * .then((user) => console.log(user))
                 * .catch(console.error)
                 * ```
                 */
                getUsers(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "User",
                    action: "getManyForOrganization",
                    params: {
                      organizationId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapUserCollection(makeRequest, data));
                },
                /**
                 * Gets an Organization Membership
                 * @param id - Organization Membership ID
                 * @return Promise for an Organization Membership
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('organization_id')
                 * .then((organization) => organization.getOrganizationMembership('organizationMembership_id'))
                 * .then((organizationMembership) => console.log(organizationMembership))
                 * .catch(console.error)
                 * ```
                 */
                getOrganizationMembership(id) {
                  const raw = this.toPlainObject();
                  const organizationId = raw.sys.id;
                  return makeRequest({
                    entityType: "OrganizationMembership",
                    action: "get",
                    params: {
                      organizationId,
                      organizationMembershipId: id
                    }
                  }).then((data) => wrapOrganizationMembership(makeRequest, data, organizationId));
                },
                /**
                 * Gets a collection of Organization Memberships
                 * @param  params - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
                 * @return Promise for a collection of Organization Memberships
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('organization_id')
                 * .then((organization) => organization.getOrganizationMemberships({'limit': 100})) // you can add more queries as 'key': 'value'
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getOrganizationMemberships(params = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "OrganizationMembership",
                    action: "getMany",
                    params: _objectSpread({
                      organizationId: raw.sys.id
                    }, params)
                  }).then((data) => wrapOrganizationMembershipCollection(makeRequest, data, raw.sys.id));
                },
                /**
                 * Creates a Team
                 * @param data representation of the Team to be created
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.createTeam({
                 *    name: 'new team',
                 *    description: 'new team description'
                 *  }))
                 * .then((team) => console.log(team))
                 * .catch(console.error)
                 * ```
                 */
                createTeam(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Team",
                    action: "create",
                    params: {
                      organizationId: raw.sys.id
                    },
                    payload: data
                  }).then((data2) => wrapTeam(makeRequest, data2));
                },
                /**
                 * Gets an Team
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('orgId')
                 * .then((organization) => organization.getTeam('teamId'))
                 * .then((team) => console.log(team))
                 * .catch(console.error)
                 * ```
                 */
                getTeam(teamId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Team",
                    action: "get",
                    params: {
                      organizationId: raw.sys.id,
                      teamId
                    }
                  }).then((data) => wrapTeam(makeRequest, data));
                },
                /**
                 * Gets all Teams in an organization
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('orgId')
                 * .then((organization) => organization.getTeams())
                 * .then((teams) => console.log(teams))
                 * .catch(console.error)
                 * ```
                 */
                getTeams(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Team",
                    action: "getMany",
                    params: {
                      organizationId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapTeamCollection(makeRequest, data));
                },
                /**
                 * Creates a Team membership
                 * @param teamId - Id of the team the membership will be created in
                 * @param data - Object representation of the Team Membership to be created
                 * @return Promise for the newly created TeamMembership
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('organizationId')
                 * .then((org) => org.createTeamMembership('teamId', {
                 *    admin: true,
                 *    organizationMembershipId: 'organizationMembershipId'
                 *  }))
                 * .then((teamMembership) => console.log(teamMembership))
                 * .catch(console.error)
                 * ```
                 */
                createTeamMembership(teamId, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "TeamMembership",
                    action: "create",
                    params: {
                      organizationId: raw.sys.id,
                      teamId
                    },
                    payload: data
                  }).then((data2) => wrapTeamMembership(makeRequest, data2));
                },
                /**
                 * Gets an Team Membership from the team with given teamId
                 * @return Promise for an Team Membership
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('organizationId')
                 * .then((organization) => organization.getTeamMembership('teamId', 'teamMembership_id'))
                 * .then((teamMembership) => console.log(teamMembership))
                 * .catch(console.error)
                 * ```
                 */
                getTeamMembership(teamId, teamMembershipId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "TeamMembership",
                    action: "get",
                    params: {
                      organizationId: raw.sys.id,
                      teamId,
                      teamMembershipId
                    }
                  }).then((data) => wrapTeamMembership(makeRequest, data));
                },
                /**
                 * Get all Team Memberships. If teamID is provided in the optional config object, it will return all Team Memberships in that team. By default, returns all team memberships for the organization.
                 * @return Promise for a Team Membership Collection
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('organizationId')
                 * .then((organization) => organization.getTeamMemberships('teamId'))
                 * .then((teamMemberships) => console.log(teamMemberships))
                 * .catch(console.error)
                 * ```
                 */
                getTeamMemberships(opts = {}) {
                  const {
                    teamId,
                    query: query5 = {}
                  } = opts;
                  const raw = this.toPlainObject();
                  if (teamId) {
                    return makeRequest({
                      entityType: "TeamMembership",
                      action: "getManyForTeam",
                      params: {
                        organizationId: raw.sys.id,
                        teamId,
                        query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                          query: query5
                        }).params
                      }
                    }).then((data) => wrapTeamMembershipCollection(makeRequest, data));
                  }
                  return makeRequest({
                    entityType: "TeamMembership",
                    action: "getManyForOrganization",
                    params: {
                      organizationId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapTeamMembershipCollection(makeRequest, data));
                },
                /**
                 * Get all Team Space Memberships. If teamID is provided in the optional config object, it will return all Team Space Memberships in that team. By default, returns all team space memberships across all teams in the organization.
                 * @return Promise for a Team Space Membership Collection
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('organizationId')
                 * .then((organization) => organization.getTeamSpaceMemberships('teamId'))
                 * .then((teamSpaceMemberships) => console.log(teamSpaceMemberships))
                 * .catch(console.error)
                 * ```
                 */
                getTeamSpaceMemberships(opts = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "TeamSpaceMembership",
                    action: "getManyForOrganization",
                    params: {
                      organizationId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: opts.query || {}
                      }).params,
                      teamId: opts.teamId
                    }
                  }).then((data) => wrapTeamSpaceMembershipCollection(makeRequest, data));
                },
                /**
                 * Get a Team Space Membership with given teamSpaceMembershipId
                 * @return Promise for a Team Space Membership
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('organizationId')
                 * .then((organization) => organization.getTeamSpaceMembership('teamSpaceMembershipId'))
                 * .then((teamSpaceMembership) => console.log(teamSpaceMembership))
                 * .catch(console.error)]
                 * ```
                 */
                getTeamSpaceMembership(teamSpaceMembershipId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "TeamSpaceMembership",
                    action: "getForOrganization",
                    params: {
                      organizationId: raw.sys.id,
                      teamSpaceMembershipId
                    }
                  }).then((data) => wrapTeamSpaceMembership(makeRequest, data));
                },
                /**
                 * Gets an Space Membership in Organization
                 * @param id - Organiztion Space Membership ID
                 * @return Promise for a Space Membership in an organization
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('organization_id')
                 * .then((organization) => organization.getOrganizationSpaceMembership('organizationSpaceMembership_id'))
                 * .then((organizationMembership) => console.log(organizationMembership))
                 * .catch(console.error)
                 * ```
                 */
                getOrganizationSpaceMembership(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "SpaceMembership",
                    action: "getForOrganization",
                    params: {
                      organizationId: raw.sys.id,
                      spaceMembershipId: id
                    }
                  }).then((data) => wrapSpaceMembership(makeRequest, data));
                },
                /**
                 * Gets a collection Space Memberships in organization
                 * @param query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
                 * @return Promise for a Space Membership collection across all spaces in the organization
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('organization_id')
                 * .then((organization) => organization.getOrganizationSpaceMemberships()) // you can add queries like 'limit': 100
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getOrganizationSpaceMemberships(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "SpaceMembership",
                    action: "getManyForOrganization",
                    params: {
                      organizationId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapSpaceMembershipCollection(makeRequest, data));
                },
                /**
                 * Gets an Invitation in Organization
                 * @return Promise for a OrganizationInvitation in an organization
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((organization) => organization.getOrganizationInvitation('invitation_id'))
                 * .then((invitation) => console.log(invitation))
                 * .catch(console.error)
                 * ```
                 */
                getOrganizationInvitation(invitationId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "OrganizationInvitation",
                    action: "get",
                    params: {
                      organizationId: raw.sys.id,
                      invitationId
                    }
                  }).then((data) => wrapOrganizationInvitation(makeRequest, data));
                },
                /**
                 * Create an Invitation in Organization
                 * @return Promise for a OrganizationInvitation in an organization
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 *  .then((organization) => organization.createOrganizationInvitation({
                 *    email: 'user.email@example.com'
                 *    firstName: 'User First Name'
                 *    lastName: 'User Last Name'
                 *    role: 'developer'
                 *  })
                 * .catch(console.error)
                 * ```
                 */
                createOrganizationInvitation(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "OrganizationInvitation",
                    action: "create",
                    params: {
                      organizationId: raw.sys.id
                    },
                    payload: data
                  }).then((data2) => wrapOrganizationInvitation(makeRequest, data2));
                },
                /**
                 * Creates an app definition
                 * @param Object representation of the App Definition to be created
                 * @return Promise for the newly created AppDefinition
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.createAppDefinition({
                 *    name: 'Example app',
                 *    locations: [{ location: 'app-config' }],
                 *    src: "http://my-app-host.com/my-app"
                 *  }))
                 * .then((appDefinition) => console.log(appDefinition))
                 * .catch(console.error)
                 * ```
                 */
                createAppDefinition(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppDefinition",
                    action: "create",
                    params: {
                      organizationId: raw.sys.id
                    },
                    payload: data
                  }).then((data2) => wrapAppDefinition(makeRequest, data2));
                },
                /**
                 * Gets all app definitions
                 * @return Promise for a collection of App Definitions
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.getAppDefinitions())
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getAppDefinitions(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppDefinition",
                    action: "getMany",
                    params: {
                      organizationId: raw.sys.id,
                      query: query5
                    }
                  }).then((data) => wrapAppDefinitionCollection(makeRequest, data));
                },
                /**
                 * Gets an app definition
                 * @return Promise for an App Definition
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.getAppDefinition('<app_definition_id>'))
                 * .then((appDefinition) => console.log(appDefinition))
                 * .catch(console.error)
                 * ```
                 */
                getAppDefinition(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppDefinition",
                    action: "get",
                    params: {
                      organizationId: raw.sys.id,
                      appDefinitionId: id
                    }
                  }).then((data) => wrapAppDefinition(makeRequest, data));
                },
                /**
                 * Gets an app upload
                 * @return Promise for an App Upload
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.getAppUpload('<app_upload_id>'))
                 * .then((appUpload) => console.log(appUpload))
                 * .catch(console.error)
                 * ```
                 */
                getAppUpload(appUploadId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppUpload",
                    action: "get",
                    params: {
                      organizationId: raw.sys.id,
                      appUploadId
                    }
                  }).then((data) => wrapAppUpload(makeRequest, data));
                },
                /**
                 * Creates an app upload
                 * @return Promise for an App Upload
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.createAppUpload('some_zip_file'))
                 * .then((appUpload) => console.log(appUpload))
                 * .catch(console.error)
                 * ```
                 */
                createAppUpload(file) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppUpload",
                    action: "create",
                    params: {
                      organizationId: raw.sys.id
                    },
                    payload: {
                      file
                    }
                  }).then((data) => wrapAppUpload(makeRequest, data));
                },
                /**
                 * Creates or updates an app signing secret
                 * @return Promise for an App SigningSecret
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.upsertAppSigningSecret('app_definition_id', { value: 'tsren3s1....wn1e' }))
                 * .then((appSigningSecret) => console.log(appSigningSecret))
                 * .catch(console.error)
                 * ```
                 */
                upsertAppSigningSecret(appDefinitionId, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppSigningSecret",
                    action: "upsert",
                    params: {
                      organizationId: raw.sys.id,
                      appDefinitionId
                    },
                    payload: data
                  }).then((payload) => wrapAppSigningSecret(makeRequest, payload));
                },
                /**
                 * Gets an app signing secret
                 * @return Promise for an App SigningSecret
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.getAppSigningSecret('app_definition_id'))
                 * .then((appSigningSecret) => console.log(appSigningSecret))
                 * .catch(console.error)
                 * ```
                 */
                getAppSigningSecret(appDefinitionId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppSigningSecret",
                    action: "get",
                    params: {
                      organizationId: raw.sys.id,
                      appDefinitionId
                    }
                  }).then((payload) => wrapAppSigningSecret(makeRequest, payload));
                },
                /**
                 * Deletes an app signing secret
                 * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.deleteAppSigningSecret('app_definition_id'))
                 * .then((result) => console.log(result))
                 * .catch(console.error)
                 * ```
                 */
                deleteAppSigningSecret(appDefinitionId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppSigningSecret",
                    action: "delete",
                    params: {
                      organizationId: raw.sys.id,
                      appDefinitionId
                    }
                  }).then(() => {
                  });
                },
                /**
                 * Creates or updates an app details entity
                 * @return Promise for an App Details
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.upsertAppDetails('app_definition_id',
                 *   { icon: { value: 'base_64_image', type: 'base64' }}
                 *  ))
                 * .then((appDetails) => console.log(appDetails))
                 * .catch(console.error)
                 * ```
                 */
                upsertAppDetails(appDefinitionId, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppDetails",
                    action: "upsert",
                    params: {
                      organizationId: raw.sys.id,
                      appDefinitionId
                    },
                    payload: data
                  }).then((payload) => wrapAppDetails(makeRequest, payload));
                },
                /**
                 * Gets an app details entity
                 * @return Promise for an App Details
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.getAppDetails('app_definition_id'))
                 * .then((appDetails) => console.log(appDetails))
                 * .catch(console.error)
                 * ```
                 */
                getAppDetails(appDefinitionId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppDetails",
                    action: "get",
                    params: {
                      organizationId: raw.sys.id,
                      appDefinitionId
                    }
                  }).then((payload) => wrapAppDetails(makeRequest, payload));
                },
                /**
                 * Deletes an app details entity.
                 * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.deleteAppDetails('app_definition_id'))
                 * .then((result) => console.log(result))
                 * .catch(console.error)
                 * ```
                 */
                deleteAppDetails(appDefinitionId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppDetails",
                    action: "delete",
                    params: {
                      organizationId: raw.sys.id,
                      appDefinitionId
                    }
                  }).then(() => {
                  });
                },
                /**
                 * Creates an app action entity.
                 * @return Promise that resolves an App Action entity
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.createAppAction('app_definition_id', {
                 *    type: 'endpoint',
                 *    name: 'my nice new app action',
                 *    url: 'https://www.somewhere.com/action'
                 *  }))
                 * .then((appAction) => console.log(appAction))
                 * .catch(console.error)
                 * ```
                 */
                createAppAction(appDefinitionId, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppAction",
                    action: "create",
                    params: {
                      organizationId: raw.sys.id,
                      appDefinitionId
                    },
                    payload: data
                  }).then((payload) => wrapAppAction(makeRequest, payload));
                },
                /**
                 * Updates an existing app action entity.
                 * @return Promise that resolves an App Action entity
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.updateAppAction('app_definition_id', 'app_action_id', {
                 *    type: 'endpoint',
                 *    name: 'my nice updated app action',
                 *    url: 'https://www.somewhere-else.com/action'
                 *  }))
                 * .then((appAction) => console.log(appAction))
                 * .catch(console.error)
                 * ```
                 */
                updateAppAction(appDefinitionId, appActionId, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppAction",
                    action: "update",
                    params: {
                      organizationId: raw.sys.id,
                      appDefinitionId,
                      appActionId
                    },
                    payload: data
                  }).then((payload) => wrapAppAction(makeRequest, payload));
                },
                /**
                 * Deletes an app action entity.
                 * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.deleteAppAction('app_definition_id', 'app_action_id'))
                 * .then((result) => console.log(result))
                 * .catch(console.error)
                 * ```
                 */
                deleteAppAction(appDefinitionId, appActionId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppAction",
                    action: "delete",
                    params: {
                      organizationId: raw.sys.id,
                      appDefinitionId,
                      appActionId
                    }
                  }).then((payload) => {
                  });
                },
                /**
                 * Gets an existing app action entity.
                 * @return Promise that resolves an App Action entity
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.getAppAction('app_definition_id', 'app_action_id'))
                 * .then((appAction) => console.log(appAction))
                 * .catch(console.error)
                 * ```
                 */
                getAppAction(appDefinitionId, appActionId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppAction",
                    action: "get",
                    params: {
                      organizationId: raw.sys.id,
                      appDefinitionId,
                      appActionId
                    }
                  }).then((payload) => wrapAppAction(makeRequest, payload));
                },
                /**
                 * Gets existing app actions for an App Definition.
                 * @return Promise that resolves an App Action entity
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getOrganization('<org_id>')
                 * .then((org) => org.getAppActions('app_definition_id'))
                 * .then((appActions) => console.log(appActions))
                 * .catch(console.error)
                 * ```
                 */
                getAppActions(appDefinitionId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppAction",
                    action: "getMany",
                    params: {
                      organizationId: raw.sys.id,
                      appDefinitionId
                    }
                  }).then((payload) => wrapAppActionCollection(makeRequest, payload));
                }
              };
            }
          }
        ),
        /***/
        "./create-space-api.ts": (
          /*!*****************************!*\
            !*** ./create-space-api.ts ***!
            \*****************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                createSpaceApi
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./entities */
              "./entities/index.ts"
            );
            function createSpaceApi(makeRequest) {
              const {
                wrapSpace
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].space;
              const {
                wrapEnvironment,
                wrapEnvironmentCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].environment;
              const {
                wrapWebhook,
                wrapWebhookCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].webhook;
              const {
                wrapRole,
                wrapRoleCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].role;
              const {
                wrapUser,
                wrapUserCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].user;
              const {
                wrapSpaceMember,
                wrapSpaceMemberCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].spaceMember;
              const {
                wrapSpaceMembership,
                wrapSpaceMembershipCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].spaceMembership;
              const {
                wrapTeamSpaceMembership,
                wrapTeamSpaceMembershipCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].teamSpaceMembership;
              const {
                wrapTeamCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].team;
              const {
                wrapApiKey,
                wrapApiKeyCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].apiKey;
              const {
                wrapEnvironmentAlias,
                wrapEnvironmentAliasCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].environmentAlias;
              const {
                wrapPreviewApiKey,
                wrapPreviewApiKeyCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].previewApiKey;
              const {
                wrapScheduledAction,
                wrapScheduledActionCollection
              } = _entities__WEBPACK_IMPORTED_MODULE_1__["default"].scheduledAction;
              return {
                /**
                 * Deletes the space
                 * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 *   .then((space) => space.delete())
                 *   .then(() => console.log('Space deleted.'))
                 *   .catch(console.error)
                 * ```
                 */
                delete: function deleteSpace() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Space",
                    action: "delete",
                    params: {
                      spaceId: raw.sys.id
                    }
                  });
                },
                /**
                 * Updates the space
                 * @return Promise for the updated space.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => {
                 *   space.name = 'New name'
                 *   return space.update()
                 * })
                 * .then((space) => console.log(`Space ${space.sys.id} renamed.`)
                 * .catch(console.error)
                 * ```
                 */
                update: function updateSpace() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Space",
                    action: "update",
                    params: {
                      spaceId: raw.sys.id
                    },
                    payload: raw,
                    headers: {}
                  }).then((data) => wrapSpace(makeRequest, data));
                },
                /**
                 * Gets an environment
                 * @param id - Environment ID
                 * @return Promise for an Environment
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => console.log(environment))
                 * .catch(console.error)
                 * ```
                 */
                getEnvironment(environmentId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Environment",
                    action: "get",
                    params: {
                      spaceId: raw.sys.id,
                      environmentId
                    }
                  }).then((data) => wrapEnvironment(makeRequest, data));
                },
                /**
                 * Gets a collection of Environments
                 * @return Promise for a collection of Environment
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironments())
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getEnvironments(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Environment",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.id,
                      query: query5
                    }
                  }).then((data) => wrapEnvironmentCollection(makeRequest, data));
                },
                /**
                 * Creates an environment
                 * @param data - Object representation of the Environment to be created
                 * @return Promise for the newly created Environment
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.createEnvironment({ name: 'Staging' }))
                 * .then((environment) => console.log(environment))
                 * .catch(console.error)
                 * ```
                 */
                createEnvironment(data = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Environment",
                    action: "create",
                    params: {
                      spaceId: raw.sys.id
                    },
                    payload: data
                  }).then((response) => wrapEnvironment(makeRequest, response));
                },
                /**
                 * Creates an Environment with a custom ID
                 * @param id - Environment ID
                 * @param data - Object representation of the Environment to be created
                 * @param sourceEnvironmentId - ID of the source environment that will be copied to create the new environment. Default is "master"
                 * @return Promise for the newly created Environment
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.createEnvironmentWithId('<environment-id>', { name: 'Staging'}, 'master'))
                 * .then((environment) => console.log(environment))
                 * .catch(console.error)
                 * ```
                 */
                createEnvironmentWithId(id, data, sourceEnvironmentId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Environment",
                    action: "createWithId",
                    params: {
                      spaceId: raw.sys.id,
                      environmentId: id,
                      sourceEnvironmentId
                    },
                    payload: data
                  }).then((response) => wrapEnvironment(makeRequest, response));
                },
                /**
                 * Gets a Webhook
                 * @param id - Webhook ID
                 * @return Promise for a Webhook
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getWebhook('<webhook_id>'))
                 * .then((webhook) => console.log(webhook))
                 * .catch(console.error)
                 * ```
                 */
                getWebhook(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Webhook",
                    action: "get",
                    params: {
                      spaceId: raw.sys.id,
                      webhookDefinitionId: id
                    }
                  }).then((data) => wrapWebhook(makeRequest, data));
                },
                /**
                 * Gets a collection of Webhooks
                 * @return Promise for a collection of Webhooks
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getWebhooks())
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getWebhooks() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Webhook",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.id
                    }
                  }).then((data) => wrapWebhookCollection(makeRequest, data));
                },
                /**
                 * Creates a Webhook
                 * @param data - Object representation of the Webhook to be created
                 * @return Promise for the newly created Webhook
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.createWebhook({
                 *   'name': 'My webhook',
                 *   'url': 'https://www.example.com/test',
                 *   'topics': [
                 *     'Entry.create',
                 *     'ContentType.create',
                 *     '*.publish',
                 *     'Asset.*'
                 *   ]
                 * }))
                 * .then((webhook) => console.log(webhook))
                 * .catch(console.error)
                 * ```
                 */
                createWebhook(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Webhook",
                    action: "create",
                    params: {
                      spaceId: raw.sys.id
                    },
                    payload: data
                  }).then((data2) => wrapWebhook(makeRequest, data2));
                },
                /**
                 * Creates a Webhook with a custom ID
                 * @param id - Webhook ID
                 * @param  data - Object representation of the Webhook to be created
                 * @return Promise for the newly created Webhook
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.createWebhookWithId('<webhook_id>', {
                 *   'name': 'My webhook',
                 *   'url': 'https://www.example.com/test',
                 *   'topics': [
                 *     'Entry.create',
                 *     'ContentType.create',
                 *     '*.publish',
                 *     'Asset.*'
                 *   ]
                 * }))
                 * .then((webhook) => console.log(webhook))
                 * .catch(console.error)
                 * ```
                 */
                createWebhookWithId(id, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Webhook",
                    action: "createWithId",
                    params: {
                      spaceId: raw.sys.id,
                      webhookDefinitionId: id
                    },
                    payload: data
                  }).then((data2) => wrapWebhook(makeRequest, data2));
                },
                /**
                 * Gets a Role
                 * @param id - Role ID
                 * @return Promise for a Role
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.createRole({
                 *   fields: {
                 *     title: {
                 *       'en-US': 'Role title'
                 *     }
                 *   }
                 * }))
                 * .then((role) => console.log(role))
                 * .catch(console.error)
                 * ```
                 */
                getRole(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Role",
                    action: "get",
                    params: {
                      spaceId: raw.sys.id,
                      roleId: id
                    }
                  }).then((data) => wrapRole(makeRequest, data));
                },
                /**
                 * Gets a collection of Roles
                 * @return Promise for a collection of Roles
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getRoles())
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getRoles(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Role",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapRoleCollection(makeRequest, data));
                },
                /**
                 * Creates a Role
                 * @param data - Object representation of the Role to be created
                 * @return  Promise for the newly created Role
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 * client.getSpace('<space_id>')
                 * .then((space) => space.createRole({
                 *   name: 'My Role',
                 *   description: 'foobar role',
                 *   permissions: {
                 *     ContentDelivery: 'all',
                 *     ContentModel: ['read'],
                 *     Settings: []
                 *   },
                 *   policies: [
                 *     {
                 *       effect: 'allow',
                 *       actions: 'all',
                 *       constraint: {
                 *         and: [
                 *           {
                 *             equals: [
                 *               { doc: 'sys.type' },
                 *               'Entry'
                 *             ]
                 *           },
                 *           {
                 *             equals: [
                 *               { doc: 'sys.type' },
                 *               'Asset'
                 *             ]
                 *           }
                 *         ]
                 *       }
                 *     }
                 *   ]
                 * }))
                 * .then((role) => console.log(role))
                 * .catch(console.error)
                 * ```
                 */
                createRole(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Role",
                    action: "create",
                    params: {
                      spaceId: raw.sys.id
                    },
                    payload: data
                  }).then((data2) => wrapRole(makeRequest, data2));
                },
                /**
                 * Creates a Role with a custom ID
                 * @param id - Role ID
                 * @param data - Object representation of the Role to be created
                 * @return Promise for the newly created Role
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 * client.getSpace('<space_id>')
                 * .then((space) => space.createRoleWithId('<role-id>', {
                 *   name: 'My Role',
                 *   description: 'foobar role',
                 *   permissions: {
                 *     ContentDelivery: 'all',
                 *     ContentModel: ['read'],
                 *     Settings: []
                 *   },
                 *   policies: [
                 *     {
                 *       effect: 'allow',
                 *       actions: 'all',
                 *       constraint: {
                 *         and: [
                 *           {
                 *             equals: [
                 *               { doc: 'sys.type' },
                 *               'Entry'
                 *             ]
                 *           },
                 *           {
                 *             equals: [
                 *               { doc: 'sys.type' },
                 *               'Asset'
                 *             ]
                 *           }
                 *         ]
                 *       }
                 *     }
                 *   ]
                 * }))
                 * .then((role) => console.log(role))
                 * .catch(console.error)
                 * ```
                 */
                createRoleWithId(id, roleData) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Role",
                    action: "createWithId",
                    params: {
                      spaceId: raw.sys.id,
                      roleId: id
                    },
                    payload: roleData
                  }).then((data) => wrapRole(makeRequest, data));
                },
                /**
                 * Gets a User
                 * @param userId - User ID
                 * @return Promise for a User
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getSpaceUser('id'))
                 * .then((user) => console.log(user))
                 * .catch(console.error)
                 * ```
                 */
                getSpaceUser(userId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "User",
                    action: "getForSpace",
                    params: {
                      spaceId: raw.sys.id,
                      userId
                    }
                  }).then((data) => wrapUser(makeRequest, data));
                },
                /**
                 * Gets a collection of Users in a space
                 * @param query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
                 * @return Promise a collection of Users in a space
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getSpaceUsers(query))
                 * .then((data) => console.log(data))
                 * .catch(console.error)
                 * ```
                 */
                getSpaceUsers(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "User",
                    action: "getManyForSpace",
                    params: {
                      spaceId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapUserCollection(makeRequest, data));
                },
                /**
                 * Gets a collection of teams for a space
                 * @param query
                 * @return Promise for a collection of teams for a space
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getTeams())
                 * .then((teamsCollection) => console.log(teamsCollection))
                 * .catch(console.error)
                 * ```
                 */
                getTeams(query5 = {
                  limit: 100
                }) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Team",
                    action: "getManyForSpace",
                    params: {
                      spaceId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapTeamCollection(makeRequest, data));
                },
                /**
                 * Gets a Space Member
                 * @param id Get Space Member by user_id
                 * @return Promise for a Space Member
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getSpaceMember(id))
                 * .then((spaceMember) => console.log(spaceMember))
                 * .catch(console.error)
                 * ```
                 */
                getSpaceMember(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "SpaceMember",
                    action: "get",
                    params: {
                      spaceId: raw.sys.id,
                      spaceMemberId: id
                    }
                  }).then((data) => wrapSpaceMember(makeRequest, data));
                },
                /**
                 * Gets a collection of Space Members
                 * @param query
                 * @return Promise for a collection of Space Members
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getSpaceMembers({'limit': 100}))
                 * .then((spaceMemberCollection) => console.log(spaceMemberCollection))
                 * .catch(console.error)
                 * ```
                 */
                getSpaceMembers(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "SpaceMember",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapSpaceMemberCollection(makeRequest, data));
                },
                /**
                 * Gets a Space Membership
                 * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).
                 * @param id - Space Membership ID
                 * @return Promise for a Space Membership
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getSpaceMembership('id'))
                 * .then((spaceMembership) => console.log(spaceMembership))
                 * .catch(console.error)
                 * ```
                 */
                getSpaceMembership(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "SpaceMembership",
                    action: "get",
                    params: {
                      spaceId: raw.sys.id,
                      spaceMembershipId: id
                    }
                  }).then((data) => wrapSpaceMembership(makeRequest, data));
                },
                /**
                 * Gets a collection of Space Memberships
                 * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).
                 * @param query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
                 * @return Promise for a collection of Space Memberships
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getSpaceMemberships({'limit': 100})) // you can add more queries as 'key': 'value'
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getSpaceMemberships(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "SpaceMembership",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapSpaceMembershipCollection(makeRequest, data));
                },
                /**
                 * Creates a Space Membership
                 * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).
                 * @param  data - Object representation of the Space Membership to be created
                 * @return Promise for the newly created Space Membership
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.createSpaceMembership({
                 *   admin: false,
                 *   roles: [
                 *     {
                 *       type: 'Link',
                 *       linkType: 'Role',
                 *       id: '<role_id>'
                 *     }
                 *   ],
                 *   email: 'foo@example.com'
                 * }))
                 * .then((spaceMembership) => console.log(spaceMembership))
                 * .catch(console.error)
                 * ```
                 */
                createSpaceMembership(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "SpaceMembership",
                    action: "create",
                    params: {
                      spaceId: raw.sys.id
                    },
                    payload: data
                  }).then((response) => wrapSpaceMembership(makeRequest, response));
                },
                /**
                 * Creates a Space Membership with a custom ID
                 * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).
                 * @param id - Space Membership ID
                 * @param data - Object representation of the Space Membership to be created
                 * @return Promise for the newly created Space Membership
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.createSpaceMembershipWithId('<space-membership-id>', {
                 *   admin: false,
                 *   roles: [
                 *     {
                 *       type: 'Link',
                 *       linkType: 'Role',
                 *       id: '<role_id>'
                 *     }
                 *   ],
                 *   email: 'foo@example.com'
                 * }))
                 * .then((spaceMembership) => console.log(spaceMembership))
                 * .catch(console.error)
                 * ```
                 */
                createSpaceMembershipWithId(id, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "SpaceMembership",
                    action: "createWithId",
                    params: {
                      spaceId: raw.sys.id,
                      spaceMembershipId: id
                    },
                    payload: data
                  }).then((response) => wrapSpaceMembership(makeRequest, response));
                },
                /**
                 * Gets a Team Space Membership
                 * @param id - Team Space Membership ID
                 * @return Promise for a Team Space Membership
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getTeamSpaceMembership('team_space_membership_id'))
                 * .then((teamSpaceMembership) => console.log(teamSpaceMembership))
                 * .catch(console.error)
                 * ```
                 */
                getTeamSpaceMembership(teamSpaceMembershipId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "TeamSpaceMembership",
                    action: "get",
                    params: {
                      spaceId: raw.sys.id,
                      teamSpaceMembershipId
                    }
                  }).then((data) => wrapTeamSpaceMembership(makeRequest, data));
                },
                /**
                 * Gets a collection of Team Space Memberships
                 * @param query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
                 * @return Promise for a collection of Team Space Memberships
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getTeamSpaceMemberships())
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getTeamSpaceMemberships(query5 = {}) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "TeamSpaceMembership",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.id,
                      query: (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.createRequestConfig)({
                        query: query5
                      }).params
                    }
                  }).then((data) => wrapTeamSpaceMembershipCollection(makeRequest, data));
                },
                /**
                * Creates a Team Space Membership
                * @param id - Team ID
                * @param data - Object representation of the Team Space Membership to be created
                * @return Promise for the newly created Team Space Membership
                * @example ```javascript
                * const contentful = require('contentful-management')
                *
                * const client = contentful.createClient({
                *   accessToken: '<content_management_api_key>'
                * })
                *
                * client.getSpace('<space_id>')
                * .then((space) => space.createTeamSpaceMembership('team_id', {
                *   admin: false,
                *   roles: [
                *    {
                      sys: {
                *       type: 'Link',
                *       linkType: 'Role',
                *       id: '<role_id>'
                *      }
                *    }
                *   ],
                * }))
                * .then((teamSpaceMembership) => console.log(teamSpaceMembership))
                * .catch(console.error)
                * ```
                */
                createTeamSpaceMembership(teamId, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "TeamSpaceMembership",
                    action: "create",
                    params: {
                      spaceId: raw.sys.id,
                      teamId
                    },
                    payload: data
                  }).then((response) => wrapTeamSpaceMembership(makeRequest, response));
                },
                /**
                 * Gets a Api Key
                 * @param id - API Key ID
                 * @return  Promise for a Api Key
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getApiKey('<apikey-id>'))
                 * .then((apikey) => console.log(apikey))
                 * .catch(console.error)
                 * ```
                 */
                getApiKey(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "ApiKey",
                    action: "get",
                    params: {
                      spaceId: raw.sys.id,
                      apiKeyId: id
                    }
                  }).then((data) => wrapApiKey(makeRequest, data));
                },
                /**
                 * Gets a collection of Api Keys
                 * @return Promise for a collection of Api Keys
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getApiKeys())
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getApiKeys() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "ApiKey",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.id
                    }
                  }).then((data) => wrapApiKeyCollection(makeRequest, data));
                },
                /**
                 * Gets a collection of preview Api Keys
                 * @return Promise for a collection of Preview Api Keys
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getPreviewApiKeys())
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getPreviewApiKeys() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "PreviewApiKey",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.id
                    }
                  }).then((data) => wrapPreviewApiKeyCollection(makeRequest, data));
                },
                /**
                 * Gets a preview Api Key
                 * @param id - Preview API Key ID
                 * @return  Promise for a Preview Api Key
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getPreviewApiKey('<preview-apikey-id>'))
                 * .then((previewApikey) => console.log(previewApikey))
                 * .catch(console.error)
                 * ```
                 */
                getPreviewApiKey(id) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "PreviewApiKey",
                    action: "get",
                    params: {
                      spaceId: raw.sys.id,
                      previewApiKeyId: id
                    }
                  }).then((data) => wrapPreviewApiKey(makeRequest, data));
                },
                /**
                 * Creates a Api Key
                 * @param payload - Object representation of the Api Key to be created
                 * @return Promise for the newly created Api Key
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.createApiKey({
                 *   name: 'API Key name',
                 *   environments:[
                 *    {
                 *     sys: {
                 *      type: 'Link'
                 *      linkType: 'Environment',
                 *      id:'<environment_id>'
                 *     }
                 *    }
                 *   ]
                 *   }
                 * }))
                 * .then((apiKey) => console.log(apiKey))
                 * .catch(console.error)
                 * ```
                 */
                createApiKey: function createApiKey(payload) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "ApiKey",
                    action: "create",
                    params: {
                      spaceId: raw.sys.id
                    },
                    payload
                  }).then((data) => wrapApiKey(makeRequest, data));
                },
                /**
                 * Creates a Api Key with a custom ID
                 * @param id - Api Key ID
                 * @param payload - Object representation of the Api Key to be created
                 * @return Promise for the newly created Api Key
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.createApiKeyWithId('<api-key-id>', {
                 *   name: 'API Key name'
                 *   environments:[
                 *    {
                 *     sys: {
                 *      type: 'Link'
                 *      linkType: 'Environment',
                 *      id:'<environment_id>'
                 *     }
                 *    }
                 *   ]
                 *   }
                 * }))
                 * .then((apiKey) => console.log(apiKey))
                 * .catch(console.error)
                 * ```
                 */
                createApiKeyWithId(id, payload) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "ApiKey",
                    action: "createWithId",
                    params: {
                      spaceId: raw.sys.id,
                      apiKeyId: id
                    },
                    payload
                  }).then((data) => wrapApiKey(makeRequest, data));
                },
                /**
                 * Creates an EnvironmentAlias with a custom ID
                 * @param environmentAliasId - EnvironmentAlias ID
                 * @param data - Object representation of the EnvironmentAlias to be created
                 * @return Promise for the newly created EnvironmentAlias
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.createEnvironmentAliasWithId('<environment-alias-id>', {
                 *   environment: {
                 *     sys: { type: 'Link', linkType: 'Environment', id: 'targetEnvironment' }
                 *   }
                 * }))
                 * .then((environmentAlias) => console.log(environmentAlias))
                 * .catch(console.error)
                 * ```
                 */
                createEnvironmentAliasWithId(environmentAliasId, data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentAlias",
                    action: "createWithId",
                    params: {
                      spaceId: raw.sys.id,
                      environmentAliasId
                    },
                    payload: data
                  }).then((response) => wrapEnvironmentAlias(makeRequest, response));
                },
                /**
                 * Gets an Environment Alias
                 * @param Environment Alias ID
                 * @return Promise for an Environment Alias
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironmentAlias('<alias-id>'))
                 * .then((alias) => console.log(alias))
                 * .catch(console.error)
                 * ```
                 */
                getEnvironmentAlias(environmentAliasId) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentAlias",
                    action: "get",
                    params: {
                      spaceId: raw.sys.id,
                      environmentAliasId
                    }
                  }).then((data) => wrapEnvironmentAlias(makeRequest, data));
                },
                /**
                 * Gets a collection of Environment Aliases
                 * @return Promise for a collection of Environment Aliases
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironmentAliases()
                 * .then((response) => console.log(response.items))
                 * .catch(console.error)
                 * ```
                 */
                getEnvironmentAliases() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentAlias",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.id
                    }
                  }).then((data) => wrapEnvironmentAliasCollection(makeRequest, data));
                },
                /**
                 * Query for scheduled actions in space.
                 * @param query - Object with search parameters. The enviroment id field is mandatory. Check the <a href="https://www.contentful.com/developers/docs/references/content-management-api/#/reference/scheduled-actions/scheduled-actions-collection">REST API reference</a> for more details.
                 * @return Promise for the scheduled actions query
                 *
                 * @example ```javascript
                 *  const contentful = require('contentful-management');
                 *
                 *  const client = contentful.createClient({
                 *    accessToken: '<content_management_api_key>'
                 *  })
                 *
                 *  client.getSpace('<space_id>')
                 *    .then((space) => space.getScheduledActions({
                 *      'environment.sys.id': '<environment_id>',
                 *      'sys.status': 'scheduled'
                 *    }))
                 *    .then((scheduledActionCollection) => console.log(scheduledActionCollection.items))
                 *    .catch(console.error)
                 * ```
                 */
                getScheduledActions(query5) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "ScheduledAction",
                    action: "getMany",
                    params: {
                      spaceId: raw.sys.id,
                      query: query5
                    }
                  }).then((response) => wrapScheduledActionCollection(makeRequest, response));
                },
                /**
                 * Get a Scheduled Action in the current space by environment and ID.
                 *
                 * @throws if the Scheduled Action cannot be found or the user doesn't have permission to read schedules from the entity of the scheduled action itself.
                 * @returns Promise with the Scheduled Action
                 * @example ```javascript
                 *  const contentful = require('contentful-management');
                 *
                 *  const client = contentful.createClient({
                 *    accessToken: '<content_management_api_key>'
                 *  })
                 *
                 *  client.getSpace('<space_id>')
                 *    .then((space) => space.getScheduledAction({
                 *      scheduledActionId: '<scheduled-action-id>',
                 *      environmentId: '<environmentId>'
                 *    }))
                 *    .then((scheduledAction) => console.log(scheduledAction))
                 *    .catch(console.error)
                 * ```
                 */
                getScheduledAction({
                  scheduledActionId,
                  environmentId
                }) {
                  const space = this.toPlainObject();
                  return makeRequest({
                    entityType: "ScheduledAction",
                    action: "get",
                    params: {
                      spaceId: space.sys.id,
                      environmentId,
                      scheduledActionId
                    }
                  }).then((scheduledAction) => wrapScheduledAction(makeRequest, scheduledAction));
                },
                /**
                 * Creates a scheduled action
                 * @param data - Object representation of the scheduled action to be created
                 * @return Promise for the newly created scheduled actions
                 * @example ```javascript
                 *  const contentful = require('contentful-management');
                 *
                 *  const client = contentful.createClient({
                 *    accessToken: '<content_management_api_key>'
                 *  })
                 *
                 *  client.getSpace('<space_id>')
                 *    .then((space) => space.createScheduledAction({
                 *      entity: {
                 *        sys: {
                 *          type: 'Link',
                 *          linkType: 'Entry',
                 *          id: '<entry_id>'
                 *        }
                 *      },
                 *      environment: {
                 *        sys: {
                 *          type: 'Link',
                 *          linkType: 'Environment',
                 *          id: '<environment_id>'
                 *        }
                 *      },
                 *      action: 'publish',
                 *      scheduledFor: {
                 *        datetime: <ISO_date_string>,
                 *        timezone: 'Europe/Berlin'
                 *      }
                 *    }))
                 *    .then((scheduledAction) => console.log(scheduledAction))
                 *    .catch(console.error)
                 * ```
                 */
                createScheduledAction(data) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "ScheduledAction",
                    action: "create",
                    params: {
                      spaceId: raw.sys.id
                    },
                    payload: data
                  }).then((response) => wrapScheduledAction(makeRequest, response));
                },
                /**
                 * Update a scheduled action
                 * @param {object} options
                 * @param options.scheduledActionId the id of the scheduled action to update
                 * @param options.version the sys.version of the scheduled action to be updated
                 * @param payload the scheduled actions object with updates, omitting sys object
                 * @returns Promise containing a wrapped scheduled action with helper methods
                 * @example ```javascript
                 *  const contentful = require('contentful-management');
                 *
                 *  const client = contentful.createClient({
                 *    accessToken: '<content_management_api_key>'
                 *  })
                 *
                 *  client.getSpace('<space_id>')
                 *    .then((space) => {
                 *      return space.createScheduledAction({
                 *        entity: {
                 *          sys: {
                 *            type: 'Link',
                 *            linkType: 'Entry',
                 *            id: '<entry_id>'
                 *          }
                 *        },
                 *        environment: {
                 *          sys: {
                 *            type: 'Link',
                 *            linkType: 'Environment',
                 *            id: '<environment_id>'
                 *          }
                 *        },
                 *        action: 'publish',
                 *        scheduledFor: {
                 *          datetime: <ISO_date_string>,
                 *          timezone: 'Europe/Berlin'
                 *        }
                 *      })
                 *      .then((scheduledAction) => {
                 *        const { _sys, ...payload } = scheduledAction;
                 *        return space.updateScheduledAction({
                 *          ...payload,
                 *          scheduledFor: {
                 *            ...payload.scheduledFor,
                 *            timezone: 'Europe/Paris'
                 *          }
                 *        })
                 *      })
                 *    .then((scheduledAction) => console.log(scheduledAction))
                 *    .catch(console.error);
                 * ```
                 */
                updateScheduledAction({
                  scheduledActionId,
                  payload,
                  version
                }) {
                  const spaceProps = this.toPlainObject();
                  return makeRequest({
                    entityType: "ScheduledAction",
                    action: "update",
                    params: {
                      spaceId: spaceProps.sys.id,
                      version,
                      scheduledActionId
                    },
                    payload
                  }).then((response) => wrapScheduledAction(makeRequest, response));
                },
                /**
                 * Cancels a Scheduled Action.
                 * Only cancels actions that have not yet executed.
                 *
                 * @param {object} options
                 * @param options.scheduledActionId the id of the scheduled action to be canceled
                 * @param options.environmentId the environment ID of the scheduled action to be canceled
                 * @throws if the Scheduled Action cannot be found or the user doesn't have permissions in the entity in the action.
                 * @returns Promise containing a wrapped Scheduled Action with helper methods
                 * @example ```javascript
                 *  const contentful = require('contentful-management');
                 *
                 *  const client = contentful.createClient({
                 *    accessToken: '<content_management_api_key>'
                 *  })
                 *
                 *  // Given that an Scheduled Action is scheduled
                 *  client.getSpace('<space_id>')
                 *    .then((space) => space.deleteScheduledAction({
                 *        environmentId: '<environment-id>',
                 *        scheduledActionId: '<scheduled-action-id>'
                 *     }))
                 *     // The scheduled Action sys.status is now 'canceled'
                 *    .then((scheduledAction) => console.log(scheduledAction))
                 *    .catch(console.error);
                 * ```
                 */
                deleteScheduledAction({
                  scheduledActionId,
                  environmentId
                }) {
                  const spaceProps = this.toPlainObject();
                  return makeRequest({
                    entityType: "ScheduledAction",
                    action: "delete",
                    params: {
                      spaceId: spaceProps.sys.id,
                      environmentId,
                      scheduledActionId
                    }
                  }).then((response) => wrapScheduledAction(makeRequest, response));
                }
              };
            }
          }
        ),
        /***/
        "./create-ui-config-api.ts": (
          /*!*********************************!*\
            !*** ./create-ui-config-api.ts ***!
            \*********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                createUIConfigApi
              )
              /* harmony export */
            });
            var _entities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./entities */
              "./entities/index.ts"
            );
            function createUIConfigApi(makeRequest) {
              const {
                wrapUIConfig
              } = _entities__WEBPACK_IMPORTED_MODULE_0__["default"].uiConfig;
              const getParams = (self2) => {
                const uiConfig = self2.toPlainObject();
                return {
                  params: {
                    spaceId: uiConfig.sys.space.sys.id,
                    environmentId: uiConfig.sys.environment.sys.id
                  },
                  raw: uiConfig
                };
              };
              return {
                /**
                 * Sends an update to the server with any changes made to the object's properties
                 * @return Object returned from the server with updated changes.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getUIConfig())
                 * .then((uiConfig) => {
                 *   uiConfig.entryListViews = [...]
                 *   return uiConfig.update()
                 * })
                 * .then((uiConfig) => console.log(`UIConfig updated.`))
                 * .catch(console.error)
                 * ```
                 */
                update: async function update() {
                  const {
                    raw,
                    params
                  } = getParams(this);
                  const data = await makeRequest({
                    entityType: "UIConfig",
                    action: "update",
                    params,
                    payload: raw
                  });
                  return wrapUIConfig(makeRequest, data);
                }
              };
            }
          }
        ),
        /***/
        "./create-user-ui-config-api.ts": (
          /*!**************************************!*\
            !*** ./create-user-ui-config-api.ts ***!
            \**************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                createUserUIConfigApi
              )
              /* harmony export */
            });
            var _entities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./entities */
              "./entities/index.ts"
            );
            function createUserUIConfigApi(makeRequest) {
              const {
                wrapUserUIConfig
              } = _entities__WEBPACK_IMPORTED_MODULE_0__["default"].userUIConfig;
              const getParams = (self2) => {
                const userUIConfig = self2.toPlainObject();
                return {
                  params: {
                    spaceId: userUIConfig.sys.space.sys.id,
                    environmentId: userUIConfig.sys.environment.sys.id
                  },
                  raw: userUIConfig
                };
              };
              return {
                /**
                 * Sends an update to the server with any changes made to the object's properties
                 * @return Object returned from the server with updated changes.
                 * @example ```javascript
                 * const contentful = require('contentful-management')
                 *
                 * const client = contentful.createClient({
                 *   accessToken: '<content_management_api_key>'
                 * })
                 *
                 * client.getSpace('<space_id>')
                 * .then((space) => space.getEnvironment('<environment_id>'))
                 * .then((environment) => environment.getUserUIConfig())
                 * .then((uiConfig) => {
                 *   uiConfig.entryListViews = [...]
                 *   return uiConfig.update()
                 * })
                 * .then((uiConfig) => console.log(`UserUIConfig updated.`))
                 * .catch(console.error)
                 * ```
                 */
                update: async function update() {
                  const {
                    raw,
                    params
                  } = getParams(this);
                  const data = await makeRequest({
                    entityType: "UserUIConfig",
                    action: "update",
                    params,
                    payload: raw
                  });
                  return wrapUserUIConfig(makeRequest, data);
                }
              };
            }
          }
        ),
        /***/
        "./enhance-with-methods.ts": (
          /*!*********************************!*\
            !*** ./enhance-with-methods.ts ***!
            \*********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                enhanceWithMethods
              )
              /* harmony export */
            });
            function enhanceWithMethods(baseObject, methodsObject) {
              return Object.keys(methodsObject).reduce((enhancedObject, methodName) => {
                Object.defineProperty(enhancedObject, methodName, {
                  enumerable: false,
                  configurable: true,
                  writable: false,
                  value: methodsObject[methodName]
                });
                return enhancedObject;
              }, baseObject);
            }
          }
        ),
        /***/
        "./entities/access-token.ts": (
          /*!**********************************!*\
            !*** ./entities/access-token.ts ***!
            \**********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapAccessToken: () => (
                /* binding */
                wrapAccessToken
              ),
              /* harmony export */
              wrapAccessTokenCollection: () => (
                /* binding */
                wrapAccessTokenCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function wrapAccessToken(makeRequest, data) {
              const AccessToken = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const accessTokenWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(AccessToken, {
                revoke: function() {
                  return makeRequest({
                    entityType: "AccessToken",
                    action: "revoke",
                    params: {
                      tokenId: data.sys.id
                    }
                  }).then((data2) => wrapAccessToken(makeRequest, data2));
                }
              });
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(accessTokenWithMethods);
            }
            const wrapAccessTokenCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapAccessToken);
          }
        ),
        /***/
        "./entities/api-key.ts": (
          /*!*****************************!*\
            !*** ./entities/api-key.ts ***!
            \*****************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapApiKey: () => (
                /* binding */
                wrapApiKey
              ),
              /* harmony export */
              wrapApiKeyCollection: () => (
                /* binding */
                wrapApiKeyCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function createApiKeyApi(makeRequest) {
              const getParams = (data) => {
                var _data$sys$space$sys$i, _data$sys$space;
                return {
                  spaceId: (_data$sys$space$sys$i = (_data$sys$space = data.sys.space) === null || _data$sys$space === void 0 ? void 0 : _data$sys$space.sys.id) !== null && _data$sys$space$sys$i !== void 0 ? _data$sys$space$sys$i : "",
                  apiKeyId: data.sys.id
                };
              };
              return {
                update: function update() {
                  const self2 = this;
                  return makeRequest({
                    entityType: "ApiKey",
                    action: "update",
                    params: getParams(self2),
                    payload: self2,
                    headers: {}
                  }).then((data) => wrapApiKey(makeRequest, data));
                },
                delete: function del() {
                  const self2 = this;
                  return makeRequest({
                    entityType: "ApiKey",
                    action: "delete",
                    params: getParams(self2)
                  });
                }
              };
            }
            function wrapApiKey(makeRequest, data) {
              const apiKey = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const apiKeyWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(apiKey, createApiKeyApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(apiKeyWithMethods);
            }
            const wrapApiKeyCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapApiKey);
          }
        ),
        /***/
        "./entities/app-action-call.ts": (
          /*!*************************************!*\
            !*** ./entities/app-action-call.ts ***!
            \*************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                createAppActionCallApi
              ),
              /* harmony export */
              wrapAppActionCall: () => (
                /* binding */
                wrapAppActionCall
              ),
              /* harmony export */
              wrapAppActionCallResponse: () => (
                /* binding */
                wrapAppActionCallResponse
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function createAppActionCallApi(makeRequest, retryOptions) {
              return {
                createWithResponse: function() {
                  const payload = {
                    parameters: {
                      recipient: "Alice <alice@my-company.com>",
                      message_body: "Hello from Bob!"
                    }
                  };
                  return makeRequest({
                    entityType: "AppActionCall",
                    action: "createWithResponse",
                    params: _objectSpread({
                      spaceId: "space-id",
                      environmentId: "environment-id",
                      appDefinitionId: "app-definiton-id",
                      appActionId: "app-action-id"
                    }, retryOptions),
                    payload
                  }).then((data) => wrapAppActionCallResponse(makeRequest, data));
                },
                getCallDetails: function getCallDetails() {
                  return makeRequest({
                    entityType: "AppActionCall",
                    action: "getCallDetails",
                    params: {
                      spaceId: "space-id",
                      environmentId: "environment-id",
                      callId: "call-id",
                      appActionId: "app-action-id"
                    }
                  }).then((data) => wrapAppActionCallResponse(makeRequest, data));
                }
              };
            }
            function wrapAppActionCall(makeRequest, data) {
              const signedRequest = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const signedRequestWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(signedRequest, createAppActionCallApi(makeRequest));
              return signedRequestWithMethods;
            }
            function wrapAppActionCallResponse(makeRequest, data, retryOptions) {
              const appActionCallResponse = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const appActionCallResponseWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(appActionCallResponse, createAppActionCallApi(makeRequest, retryOptions));
              return appActionCallResponseWithMethods;
            }
          }
        ),
        /***/
        "./entities/app-action.ts": (
          /*!********************************!*\
            !*** ./entities/app-action.ts ***!
            \********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapAppAction: () => (
                /* binding */
                wrapAppAction
              ),
              /* harmony export */
              wrapAppActionCollection: () => (
                /* binding */
                wrapAppActionCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function createAppActionApi(makeRequest) {
              const getParams = (data) => ({
                organizationId: data.sys.organization.sys.id,
                appDefinitionId: data.sys.appDefinition.sys.id,
                appActionId: data.sys.id
              });
              return {
                delete: function del() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppAction",
                    action: "delete",
                    params: getParams(data)
                  });
                }
              };
            }
            function wrapAppAction(makeRequest, data) {
              const appAction = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const appActionWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(appAction, createAppActionApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(appActionWithMethods);
            }
            const wrapAppActionCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapAppAction);
          }
        ),
        /***/
        "./entities/app-bundle.ts": (
          /*!********************************!*\
            !*** ./entities/app-bundle.ts ***!
            \********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapAppBundle: () => (
                /* binding */
                wrapAppBundle
              ),
              /* harmony export */
              wrapAppBundleCollection: () => (
                /* binding */
                wrapAppBundleCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function createAppBundleApi(makeRequest) {
              const getParams = (data) => ({
                organizationId: data.sys.organization.sys.id,
                appDefinitionId: data.sys.appDefinition.sys.id,
                appBundleId: data.sys.id
              });
              return {
                delete: function del() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppBundle",
                    action: "delete",
                    params: getParams(data)
                  });
                }
              };
            }
            function wrapAppBundle(makeRequest, data) {
              const appBundle = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const appBundleWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(appBundle, createAppBundleApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(appBundleWithMethods);
            }
            const wrapAppBundleCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapAppBundle);
          }
        ),
        /***/
        "./entities/app-definition.ts": (
          /*!************************************!*\
            !*** ./entities/app-definition.ts ***!
            \************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapAppDefinition: () => (
                /* binding */
                wrapAppDefinition
              ),
              /* harmony export */
              wrapAppDefinitionCollection: () => (
                /* binding */
                wrapAppDefinitionCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _create_app_definition_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../create-app-definition-api */
              "./create-app-definition-api.ts"
            );
            function wrapAppDefinition(makeRequest, data) {
              const appDefinition = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const appDefinitionWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(appDefinition, (0, _create_app_definition_api__WEBPACK_IMPORTED_MODULE_4__["default"])(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(appDefinitionWithMethods);
            }
            const wrapAppDefinitionCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapAppDefinition);
          }
        ),
        /***/
        "./entities/app-details.ts": (
          /*!*********************************!*\
            !*** ./entities/app-details.ts ***!
            \*********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapAppDetails: () => (
                /* binding */
                wrapAppDetails
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function createAppDetailsApi(makeRequest) {
              const getParams = (data) => ({
                organizationId: data.sys.organization.sys.id,
                appDefinitionId: data.sys.appDefinition.sys.id
              });
              return {
                delete: function del() {
                  const self2 = this;
                  return makeRequest({
                    entityType: "AppDetails",
                    action: "delete",
                    params: getParams(self2)
                  });
                }
              };
            }
            function wrapAppDetails(makeRequest, data) {
              const appDetails = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              return (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(appDetails, createAppDetailsApi(makeRequest));
            }
          }
        ),
        /***/
        "./entities/app-installation.ts": (
          /*!**************************************!*\
            !*** ./entities/app-installation.ts ***!
            \**************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapAppInstallation: () => (
                /* binding */
                wrapAppInstallation
              ),
              /* harmony export */
              wrapAppInstallationCollection: () => (
                /* binding */
                wrapAppInstallationCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function createAppInstallationApi(makeRequest) {
              const getParams = (data) => ({
                spaceId: data.sys.space.sys.id,
                environmentId: data.sys.environment.sys.id,
                appDefinitionId: data.sys.appDefinition.sys.id
              });
              return {
                update: function update() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppInstallation",
                    action: "upsert",
                    params: getParams(data),
                    headers: {},
                    payload: data
                  }).then((data2) => wrapAppInstallation(makeRequest, data2));
                },
                delete: function del() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppInstallation",
                    action: "delete",
                    params: getParams(data)
                  });
                }
              };
            }
            function wrapAppInstallation(makeRequest, data) {
              const appInstallation = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const appInstallationWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(appInstallation, createAppInstallationApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(appInstallationWithMethods);
            }
            const wrapAppInstallationCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapAppInstallation);
          }
        ),
        /***/
        "./entities/app-signed-request.ts": (
          /*!****************************************!*\
            !*** ./entities/app-signed-request.ts ***!
            \****************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapAppSignedRequest: () => (
                /* binding */
                wrapAppSignedRequest
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            function wrapAppSignedRequest(_makeRequest, data) {
              const signedRequest = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              return signedRequest;
            }
          }
        ),
        /***/
        "./entities/app-signing-secret.ts": (
          /*!****************************************!*\
            !*** ./entities/app-signing-secret.ts ***!
            \****************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapAppSigningSecret: () => (
                /* binding */
                wrapAppSigningSecret
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function createSigningSecretApi(makeRequest) {
              const getParams = (data) => ({
                organizationId: data.sys.organization.sys.id,
                appDefinitionId: data.sys.appDefinition.sys.id
              });
              return {
                delete: function del() {
                  const self2 = this;
                  return makeRequest({
                    entityType: "AppSigningSecret",
                    action: "delete",
                    params: getParams(self2)
                  });
                }
              };
            }
            function wrapAppSigningSecret(makeRequest, data) {
              const signingSecret = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              return (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(signingSecret, createSigningSecretApi(makeRequest));
            }
          }
        ),
        /***/
        "./entities/app-upload.ts": (
          /*!********************************!*\
            !*** ./entities/app-upload.ts ***!
            \********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapAppUpload: () => (
                /* binding */
                wrapAppUpload
              ),
              /* harmony export */
              wrapAppUploadCollection: () => (
                /* binding */
                wrapAppUploadCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function createAppUploadApi(makeRequest) {
              const getParams = (data) => ({
                organizationId: data.sys.organization.sys.id,
                appUploadId: data.sys.id
              });
              return {
                delete: function del() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "AppUpload",
                    action: "delete",
                    params: getParams(data)
                  });
                }
              };
            }
            function wrapAppUpload(makeRequest, data) {
              const appUpload = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const appUploadWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(appUpload, createAppUploadApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(appUploadWithMethods);
            }
            const wrapAppUploadCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapAppUpload);
          }
        ),
        /***/
        "./entities/asset-key.ts": (
          /*!*******************************!*\
            !*** ./entities/asset-key.ts ***!
            \*******************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapAssetKey: () => (
                /* binding */
                wrapAssetKey
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            function wrapAssetKey(_makeRequest, data) {
              const assetKey = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              return assetKey;
            }
          }
        ),
        /***/
        "./entities/asset.ts": (
          /*!***************************!*\
            !*** ./entities/asset.ts ***!
            \***************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapAsset: () => (
                /* binding */
                wrapAsset
              ),
              /* harmony export */
              wrapAssetCollection: () => (
                /* binding */
                wrapAssetCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _plain_checks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../plain/checks */
              "./plain/checks.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function createAssetApi(makeRequest) {
              const getParams = (raw) => {
                return {
                  spaceId: raw.sys.space.sys.id,
                  environmentId: raw.sys.environment.sys.id,
                  assetId: raw.sys.id
                };
              };
              return {
                processForLocale: function processForLocale(locale, options2) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "processForLocale",
                    params: _objectSpread(_objectSpread({}, getParams(raw)), {}, {
                      locale,
                      options: options2,
                      asset: raw
                    })
                  }).then((data) => wrapAsset(makeRequest, data));
                },
                processForAllLocales: function processForAllLocales(options2) {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "processForAllLocales",
                    params: _objectSpread(_objectSpread({}, getParams(raw)), {}, {
                      asset: raw,
                      options: options2
                    })
                  }).then((data) => wrapAsset(makeRequest, data));
                },
                update: function update() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "update",
                    params: getParams(raw),
                    payload: raw,
                    headers: {}
                  }).then((data) => wrapAsset(makeRequest, data));
                },
                delete: function del() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "delete",
                    params: getParams(raw)
                  });
                },
                publish: function publish() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "publish",
                    params: getParams(raw),
                    payload: raw
                  }).then((data) => wrapAsset(makeRequest, data));
                },
                unpublish: function unpublish() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "unpublish",
                    params: getParams(raw)
                  }).then((data) => wrapAsset(makeRequest, data));
                },
                archive: function archive() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "archive",
                    params: getParams(raw)
                  }).then((data) => wrapAsset(makeRequest, data));
                },
                unarchive: function unarchive() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Asset",
                    action: "unarchive",
                    params: getParams(raw)
                  }).then((data) => wrapAsset(makeRequest, data));
                },
                isPublished: function isPublished() {
                  const raw = this.toPlainObject();
                  return _plain_checks__WEBPACK_IMPORTED_MODULE_4__.isPublished(raw);
                },
                isUpdated: function isUpdated() {
                  const raw = this.toPlainObject();
                  return _plain_checks__WEBPACK_IMPORTED_MODULE_4__.isUpdated(raw);
                },
                isDraft: function isDraft() {
                  const raw = this.toPlainObject();
                  return _plain_checks__WEBPACK_IMPORTED_MODULE_4__.isDraft(raw);
                },
                isArchived: function isArchived() {
                  const raw = this.toPlainObject();
                  return _plain_checks__WEBPACK_IMPORTED_MODULE_4__.isArchived(raw);
                }
              };
            }
            function wrapAsset(makeRequest, data) {
              const asset = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const assetWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(asset, createAssetApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(assetWithMethods);
            }
            const wrapAssetCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapAsset);
          }
        ),
        /***/
        "./entities/bulk-action.ts": (
          /*!*********************************!*\
            !*** ./entities/bulk-action.ts ***!
            \*********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              BulkActionStatus: () => (
                /* binding */
                BulkActionStatus
              ),
              /* harmony export */
              wrapBulkAction: () => (
                /* binding */
                wrapBulkAction
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _methods_action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../methods/action */
              "./methods/action.ts"
            );
            let BulkActionStatus = /* @__PURE__ */ function(BulkActionStatus2) {
              BulkActionStatus2["created"] = "created";
              BulkActionStatus2["inProgress"] = "inProgress";
              BulkActionStatus2["succeeded"] = "succeeded";
              BulkActionStatus2["failed"] = "failed";
              return BulkActionStatus2;
            }({});
            const STATUSES = Object.values(BulkActionStatus);
            function createBulkActionApi(makeRequest) {
              const getParams = (self2) => {
                const bulkAction = self2.toPlainObject();
                return {
                  spaceId: bulkAction.sys.space.sys.id,
                  environmentId: bulkAction.sys.environment.sys.id,
                  bulkActionId: bulkAction.sys.id
                };
              };
              return {
                async get() {
                  const params = getParams(this);
                  return makeRequest({
                    entityType: "BulkAction",
                    action: "get",
                    params
                  }).then((bulkAction) => wrapBulkAction(makeRequest, bulkAction));
                },
                async waitProcessing(options2) {
                  return (0, _methods_action__WEBPACK_IMPORTED_MODULE_3__.pollAsyncActionStatus)(async () => this.get(), options2);
                }
              };
            }
            function wrapBulkAction(makeRequest, data) {
              const bulkAction = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const bulkActionWithApiMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(bulkAction, createBulkActionApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(bulkActionWithApiMethods);
            }
          }
        ),
        /***/
        "./entities/comment.ts": (
          /*!*****************************!*\
            !*** ./entities/comment.ts ***!
            \*****************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              CommentNode: () => (
                /* binding */
                CommentNode
              ),
              /* harmony export */
              "default": () => (
                /* binding */
                createCommentApi
              ),
              /* harmony export */
              wrapComment: () => (
                /* binding */
                wrapComment
              ),
              /* harmony export */
              wrapCommentCollection: () => (
                /* binding */
                wrapCommentCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            let CommentNode = /* @__PURE__ */ function(CommentNode2) {
              CommentNode2["Document"] = "document";
              CommentNode2["Paragraph"] = "paragraph";
              CommentNode2["Mention"] = "mention";
              return CommentNode2;
            }({});
            function createCommentApi(makeRequest) {
              const getParams = (comment) => ({
                spaceId: comment.sys.space.sys.id,
                environmentId: comment.sys.environment.sys.id,
                entryId: comment.sys.parentEntity.sys.id,
                commentId: comment.sys.id
              });
              return {
                update: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Comment",
                    action: "update",
                    params: getParams(raw),
                    payload: raw
                  }).then((data) => wrapComment(makeRequest, data));
                },
                delete: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Comment",
                    action: "delete",
                    params: _objectSpread(_objectSpread({}, getParams(raw)), {}, {
                      version: raw.sys.version
                    })
                  }).then(() => {
                  });
                }
              };
            }
            function wrapComment(makeRequest, data) {
              const comment = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const commentWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(comment, createCommentApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(commentWithMethods);
            }
            const wrapCommentCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapComment);
          }
        ),
        /***/
        "./entities/content-type.ts": (
          /*!**********************************!*\
            !*** ./entities/content-type.ts ***!
            \**********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapContentType: () => (
                /* binding */
                wrapContentType
              ),
              /* harmony export */
              wrapContentTypeCollection: () => (
                /* binding */
                wrapContentTypeCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _plain_checks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../plain/checks */
              "./plain/checks.ts"
            );
            var _editor_interface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
              /*! ./editor-interface */
              "./entities/editor-interface.ts"
            );
            var _snapshot__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
              /*! ./snapshot */
              "./entities/snapshot.ts"
            );
            var _methods_content_type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
              /*! ../methods/content-type */
              "./methods/content-type.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function createContentTypeApi(makeRequest) {
              const getParams = (self2) => {
                const contentType = self2.toPlainObject();
                return {
                  raw: contentType,
                  params: {
                    spaceId: contentType.sys.space.sys.id,
                    environmentId: contentType.sys.environment.sys.id,
                    contentTypeId: contentType.sys.id
                  }
                };
              };
              return {
                update: function() {
                  const {
                    raw,
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "ContentType",
                    action: "update",
                    params,
                    payload: raw
                  }).then((data) => wrapContentType(makeRequest, data));
                },
                delete: function() {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "ContentType",
                    action: "delete",
                    params
                  }).then(() => {
                  });
                },
                publish: function() {
                  const {
                    raw,
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "ContentType",
                    action: "publish",
                    params,
                    payload: raw
                  }).then((data) => wrapContentType(makeRequest, data));
                },
                unpublish: function() {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "ContentType",
                    action: "unpublish",
                    params
                  }).then((data) => wrapContentType(makeRequest, data));
                },
                getEditorInterface: function() {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "EditorInterface",
                    action: "get",
                    params
                  }).then((data) => (0, _editor_interface__WEBPACK_IMPORTED_MODULE_5__.wrapEditorInterface)(makeRequest, data));
                },
                getSnapshots: function(query5 = {}) {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Snapshot",
                    action: "getManyForContentType",
                    params: _objectSpread(_objectSpread({}, params), {}, {
                      query: query5
                    })
                  }).then((data) => (0, _snapshot__WEBPACK_IMPORTED_MODULE_6__.wrapSnapshotCollection)(makeRequest, data));
                },
                getSnapshot: function(snapshotId) {
                  const {
                    params
                  } = getParams(this);
                  return makeRequest({
                    entityType: "Snapshot",
                    action: "getForContentType",
                    params: _objectSpread(_objectSpread({}, params), {}, {
                      snapshotId
                    })
                  }).then((data) => (0, _snapshot__WEBPACK_IMPORTED_MODULE_6__.wrapSnapshot)(makeRequest, data));
                },
                isPublished: function() {
                  return (0, _plain_checks__WEBPACK_IMPORTED_MODULE_4__.isPublished)(this);
                },
                isUpdated: function() {
                  return (0, _plain_checks__WEBPACK_IMPORTED_MODULE_4__.isUpdated)(this);
                },
                isDraft: function() {
                  return (0, _plain_checks__WEBPACK_IMPORTED_MODULE_4__.isDraft)(this);
                },
                omitAndDeleteField: function(fieldId) {
                  const {
                    raw,
                    params
                  } = getParams(this);
                  return (0, _methods_content_type__WEBPACK_IMPORTED_MODULE_7__.omitAndDeleteField)(makeRequest, _objectSpread(_objectSpread({}, params), {}, {
                    fieldId
                  }), raw).then((data) => wrapContentType(makeRequest, data));
                }
              };
            }
            function wrapContentType(makeRequest, data) {
              const contentType = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const contentTypeWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(contentType, createContentTypeApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(contentTypeWithMethods);
            }
            const wrapContentTypeCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapContentType);
          }
        ),
        /***/
        "./entities/editor-interface.ts": (
          /*!**************************************!*\
            !*** ./entities/editor-interface.ts ***!
            \**************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapEditorInterface: () => (
                /* binding */
                wrapEditorInterface
              ),
              /* harmony export */
              wrapEditorInterfaceCollection: () => (
                /* binding */
                wrapEditorInterfaceCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function createEditorInterfaceApi(makeRequest) {
              return {
                update: function() {
                  const self2 = this;
                  const raw = self2.toPlainObject();
                  return makeRequest({
                    entityType: "EditorInterface",
                    action: "update",
                    params: {
                      spaceId: self2.sys.space.sys.id,
                      environmentId: self2.sys.environment.sys.id,
                      contentTypeId: self2.sys.contentType.sys.id
                    },
                    payload: raw
                  }).then((response) => wrapEditorInterface(makeRequest, response));
                },
                getControlForField: function(fieldId) {
                  const self2 = this;
                  const result = (self2.controls || []).filter((control) => {
                    return control.fieldId === fieldId;
                  });
                  return result && result.length > 0 ? result[0] : null;
                }
              };
            }
            function wrapEditorInterface(makeRequest, data) {
              const editorInterface = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const editorInterfaceWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(editorInterface, createEditorInterfaceApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(editorInterfaceWithMethods);
            }
            const wrapEditorInterfaceCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapEditorInterface);
          }
        ),
        /***/
        "./entities/entry.ts": (
          /*!***************************!*\
            !*** ./entities/entry.ts ***!
            \***************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapEntry: () => (
                /* binding */
                wrapEntry
              ),
              /* harmony export */
              wrapEntryCollection: () => (
                /* binding */
                wrapEntryCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _create_entry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../create-entry-api */
              "./create-entry-api.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function wrapEntry(makeRequest, data) {
              const entry = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const entryWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_4__["default"])(entry, (0, _create_entry_api__WEBPACK_IMPORTED_MODULE_3__["default"])(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(entryWithMethods);
            }
            const wrapEntryCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapEntry);
          }
        ),
        /***/
        "./entities/environment-alias.ts": (
          /*!***************************************!*\
            !*** ./entities/environment-alias.ts ***!
            \***************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapEnvironmentAlias: () => (
                /* binding */
                wrapEnvironmentAlias
              ),
              /* harmony export */
              wrapEnvironmentAliasCollection: () => (
                /* binding */
                wrapEnvironmentAliasCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function createEnvironmentAliasApi(makeRequest) {
              const getParams = (alias) => ({
                spaceId: alias.sys.space.sys.id,
                environmentAliasId: alias.sys.id
              });
              return {
                update: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentAlias",
                    action: "update",
                    params: getParams(raw),
                    payload: raw
                  }).then((data) => wrapEnvironmentAlias(makeRequest, data));
                },
                delete: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "EnvironmentAlias",
                    action: "delete",
                    params: getParams(raw)
                  }).then(() => {
                  });
                }
              };
            }
            function wrapEnvironmentAlias(makeRequest, data) {
              const alias = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const enhancedAlias = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(alias, createEnvironmentAliasApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(enhancedAlias);
            }
            const wrapEnvironmentAliasCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapEnvironmentAlias);
          }
        ),
        /***/
        "./entities/environment-template-installation.ts": (
          /*!*******************************************************!*\
            !*** ./entities/environment-template-installation.ts ***!
            \*******************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapEnvironmentTemplateInstallation: () => (
                /* binding */
                wrapEnvironmentTemplateInstallation
              ),
              /* harmony export */
              wrapEnvironmentTemplateInstallationCollection: () => (
                /* binding */
                wrapEnvironmentTemplateInstallationCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var EnvironmentTemplateInstallationStatuses = /* @__PURE__ */ function(EnvironmentTemplateInstallationStatuses2) {
              EnvironmentTemplateInstallationStatuses2["created"] = "created";
              EnvironmentTemplateInstallationStatuses2["inProgress"] = "inProgress";
              EnvironmentTemplateInstallationStatuses2["failed"] = "failed";
              EnvironmentTemplateInstallationStatuses2["succeeded"] = "succeeded";
              EnvironmentTemplateInstallationStatuses2["disconnected"] = "disconnected";
              EnvironmentTemplateInstallationStatuses2["inRetry"] = "inRetry";
              return EnvironmentTemplateInstallationStatuses2;
            }(EnvironmentTemplateInstallationStatuses || {});
            function wrapEnvironmentTemplateInstallation(makeRequest, data) {
              const environmentTemplate = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(environmentTemplate);
            }
            const wrapEnvironmentTemplateInstallationCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCursorPaginatedCollection)(wrapEnvironmentTemplateInstallation);
          }
        ),
        /***/
        "./entities/environment-template.ts": (
          /*!******************************************!*\
            !*** ./entities/environment-template.ts ***!
            \******************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapEnvironmentTemplate: () => (
                /* binding */
                wrapEnvironmentTemplate
              ),
              /* harmony export */
              wrapEnvironmentTemplateCollection: () => (
                /* binding */
                wrapEnvironmentTemplateCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _create_environment_template_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../create-environment-template-api */
              "./create-environment-template-api.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function wrapEnvironmentTemplate(makeRequest, data, organizationId) {
              const environmentTemplate = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const environmentTemplateApi = (0, _create_environment_template_api__WEBPACK_IMPORTED_MODULE_3__.createEnvironmentTemplateApi)(makeRequest, organizationId);
              const enhancedEnvironmentTemplate = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_4__["default"])(environmentTemplate, environmentTemplateApi);
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(enhancedEnvironmentTemplate);
            }
            const wrapEnvironmentTemplateCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCursorPaginatedCollection)(wrapEnvironmentTemplate);
          }
        ),
        /***/
        "./entities/environment.ts": (
          /*!*********************************!*\
            !*** ./entities/environment.ts ***!
            \*********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapEnvironment: () => (
                /* binding */
                wrapEnvironment
              ),
              /* harmony export */
              wrapEnvironmentCollection: () => (
                /* binding */
                wrapEnvironmentCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _create_environment_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../create-environment-api */
              "./create-environment-api.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function wrapEnvironment(makeRequest, data) {
              const environment = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const environmentApi = (0, _create_environment_api__WEBPACK_IMPORTED_MODULE_3__["default"])(makeRequest);
              const enhancedEnvironment = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(environment, environmentApi);
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(enhancedEnvironment);
            }
            const wrapEnvironmentCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_4__.wrapCollection)(wrapEnvironment);
          }
        ),
        /***/
        "./entities/extension.ts": (
          /*!*******************************!*\
            !*** ./entities/extension.ts ***!
            \*******************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapExtension: () => (
                /* binding */
                wrapExtension
              ),
              /* harmony export */
              wrapExtensionCollection: () => (
                /* binding */
                wrapExtensionCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function createExtensionApi(makeRequest) {
              const getParams = (data) => ({
                spaceId: data.sys.space.sys.id,
                environmentId: data.sys.environment.sys.id,
                extensionId: data.sys.id
              });
              return {
                update: function update() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "Extension",
                    action: "update",
                    params: getParams(data),
                    payload: data
                  }).then((response) => wrapExtension(makeRequest, response));
                },
                delete: function del() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "Extension",
                    action: "delete",
                    params: getParams(data)
                  });
                }
              };
            }
            function wrapExtension(makeRequest, data) {
              const extension = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const extensionWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(extension, createExtensionApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(extensionWithMethods);
            }
            const wrapExtensionCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapExtension);
          }
        ),
        /***/
        "./entities/index.ts": (
          /*!***************************!*\
            !*** ./entities/index.ts ***!
            \***************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _api_key__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./api-key */
              "./entities/api-key.ts"
            );
            var _app_action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./app-action */
              "./entities/app-action.ts"
            );
            var _app_action_call__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./app-action-call */
              "./entities/app-action-call.ts"
            );
            var _app_bundle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ./app-bundle */
              "./entities/app-bundle.ts"
            );
            var _app_definition__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ./app-definition */
              "./entities/app-definition.ts"
            );
            var _app_details__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
              /*! ./app-details */
              "./entities/app-details.ts"
            );
            var _app_installation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
              /*! ./app-installation */
              "./entities/app-installation.ts"
            );
            var _app_signed_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
              /*! ./app-signed-request */
              "./entities/app-signed-request.ts"
            );
            var _app_signing_secret__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
              /*! ./app-signing-secret */
              "./entities/app-signing-secret.ts"
            );
            var _app_upload__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
              /*! ./app-upload */
              "./entities/app-upload.ts"
            );
            var _asset__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
              /*! ./asset */
              "./entities/asset.ts"
            );
            var _asset_key__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(
              /*! ./asset-key */
              "./entities/asset-key.ts"
            );
            var _bulk_action__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
              /*! ./bulk-action */
              "./entities/bulk-action.ts"
            );
            var _comment__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(
              /*! ./comment */
              "./entities/comment.ts"
            );
            var _content_type__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(
              /*! ./content-type */
              "./entities/content-type.ts"
            );
            var _editor_interface__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(
              /*! ./editor-interface */
              "./entities/editor-interface.ts"
            );
            var _entry__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__2(
              /*! ./entry */
              "./entities/entry.ts"
            );
            var _environment__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__2(
              /*! ./environment */
              "./entities/environment.ts"
            );
            var _environment_alias__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__2(
              /*! ./environment-alias */
              "./entities/environment-alias.ts"
            );
            var _environment_template__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__2(
              /*! ./environment-template */
              "./entities/environment-template.ts"
            );
            var _environment_template_installation__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__2(
              /*! ./environment-template-installation */
              "./entities/environment-template-installation.ts"
            );
            var _extension__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__2(
              /*! ./extension */
              "./entities/extension.ts"
            );
            var _locale__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__2(
              /*! ./locale */
              "./entities/locale.ts"
            );
            var _organization__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__2(
              /*! ./organization */
              "./entities/organization.ts"
            );
            var _organization_invitation__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__2(
              /*! ./organization-invitation */
              "./entities/organization-invitation.ts"
            );
            var _organization_membership__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__2(
              /*! ./organization-membership */
              "./entities/organization-membership.ts"
            );
            var _personal_access_token__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__2(
              /*! ./personal-access-token */
              "./entities/personal-access-token.ts"
            );
            var _access_token__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__2(
              /*! ./access-token */
              "./entities/access-token.ts"
            );
            var _preview_api_key__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__2(
              /*! ./preview-api-key */
              "./entities/preview-api-key.ts"
            );
            var _release__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__2(
              /*! ./release */
              "./entities/release.ts"
            );
            var _release_action__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__2(
              /*! ./release-action */
              "./entities/release-action.ts"
            );
            var _role__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__2(
              /*! ./role */
              "./entities/role.ts"
            );
            var _scheduled_action__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__2(
              /*! ./scheduled-action */
              "./entities/scheduled-action.ts"
            );
            var _snapshot__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__2(
              /*! ./snapshot */
              "./entities/snapshot.ts"
            );
            var _space__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__2(
              /*! ./space */
              "./entities/space.ts"
            );
            var _space_member__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__2(
              /*! ./space-member */
              "./entities/space-member.ts"
            );
            var _space_membership__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__2(
              /*! ./space-membership */
              "./entities/space-membership.ts"
            );
            var _tag__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__2(
              /*! ./tag */
              "./entities/tag.ts"
            );
            var _task__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__2(
              /*! ./task */
              "./entities/task.ts"
            );
            var _team__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__2(
              /*! ./team */
              "./entities/team.ts"
            );
            var _team_membership__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__2(
              /*! ./team-membership */
              "./entities/team-membership.ts"
            );
            var _team_space_membership__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__2(
              /*! ./team-space-membership */
              "./entities/team-space-membership.ts"
            );
            var _ui_config__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__2(
              /*! ./ui-config */
              "./entities/ui-config.ts"
            );
            var _upload__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__2(
              /*! ./upload */
              "./entities/upload.ts"
            );
            var _usage__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__2(
              /*! ./usage */
              "./entities/usage.ts"
            );
            var _user__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__2(
              /*! ./user */
              "./entities/user.ts"
            );
            var _user_ui_config__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__2(
              /*! ./user-ui-config */
              "./entities/user-ui-config.ts"
            );
            var _webhook__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__2(
              /*! ./webhook */
              "./entities/webhook.ts"
            );
            var _workflow_definition__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__2(
              /*! ./workflow-definition */
              "./entities/workflow-definition.ts"
            );
            const __WEBPACK_DEFAULT_EXPORT__ = {
              accessToken: _access_token__WEBPACK_IMPORTED_MODULE_27__,
              appAction: _app_action__WEBPACK_IMPORTED_MODULE_1__,
              appActionCall: _app_action_call__WEBPACK_IMPORTED_MODULE_2__,
              appBundle: _app_bundle__WEBPACK_IMPORTED_MODULE_3__,
              apiKey: _api_key__WEBPACK_IMPORTED_MODULE_0__,
              appDefinition: _app_definition__WEBPACK_IMPORTED_MODULE_4__,
              appInstallation: _app_installation__WEBPACK_IMPORTED_MODULE_6__,
              appUpload: _app_upload__WEBPACK_IMPORTED_MODULE_9__,
              appDetails: _app_details__WEBPACK_IMPORTED_MODULE_5__,
              appSignedRequest: _app_signed_request__WEBPACK_IMPORTED_MODULE_7__,
              appSigningSecret: _app_signing_secret__WEBPACK_IMPORTED_MODULE_8__,
              asset: _asset__WEBPACK_IMPORTED_MODULE_10__,
              assetKey: _asset_key__WEBPACK_IMPORTED_MODULE_11__,
              bulkAction: _bulk_action__WEBPACK_IMPORTED_MODULE_12__,
              comment: _comment__WEBPACK_IMPORTED_MODULE_13__,
              contentType: _content_type__WEBPACK_IMPORTED_MODULE_14__,
              editorInterface: _editor_interface__WEBPACK_IMPORTED_MODULE_15__,
              entry: _entry__WEBPACK_IMPORTED_MODULE_16__,
              environment: _environment__WEBPACK_IMPORTED_MODULE_17__,
              environmentAlias: _environment_alias__WEBPACK_IMPORTED_MODULE_18__,
              environmentTemplate: _environment_template__WEBPACK_IMPORTED_MODULE_19__,
              environmentTemplateInstallation: _environment_template_installation__WEBPACK_IMPORTED_MODULE_20__,
              extension: _extension__WEBPACK_IMPORTED_MODULE_21__,
              locale: _locale__WEBPACK_IMPORTED_MODULE_22__,
              organization: _organization__WEBPACK_IMPORTED_MODULE_23__,
              organizationInvitation: _organization_invitation__WEBPACK_IMPORTED_MODULE_24__,
              organizationMembership: _organization_membership__WEBPACK_IMPORTED_MODULE_25__,
              personalAccessToken: _personal_access_token__WEBPACK_IMPORTED_MODULE_26__,
              previewApiKey: _preview_api_key__WEBPACK_IMPORTED_MODULE_28__,
              release: _release__WEBPACK_IMPORTED_MODULE_29__,
              releaseAction: _release_action__WEBPACK_IMPORTED_MODULE_30__,
              role: _role__WEBPACK_IMPORTED_MODULE_31__,
              scheduledAction: _scheduled_action__WEBPACK_IMPORTED_MODULE_32__,
              snapshot: _snapshot__WEBPACK_IMPORTED_MODULE_33__,
              space: _space__WEBPACK_IMPORTED_MODULE_34__,
              spaceMember: _space_member__WEBPACK_IMPORTED_MODULE_35__,
              spaceMembership: _space_membership__WEBPACK_IMPORTED_MODULE_36__,
              tag: _tag__WEBPACK_IMPORTED_MODULE_37__,
              task: _task__WEBPACK_IMPORTED_MODULE_38__,
              team: _team__WEBPACK_IMPORTED_MODULE_39__,
              teamMembership: _team_membership__WEBPACK_IMPORTED_MODULE_40__,
              teamSpaceMembership: _team_space_membership__WEBPACK_IMPORTED_MODULE_41__,
              uiConfig: _ui_config__WEBPACK_IMPORTED_MODULE_42__,
              upload: _upload__WEBPACK_IMPORTED_MODULE_43__,
              usage: _usage__WEBPACK_IMPORTED_MODULE_44__,
              user: _user__WEBPACK_IMPORTED_MODULE_45__,
              userUIConfig: _user_ui_config__WEBPACK_IMPORTED_MODULE_46__,
              webhook: _webhook__WEBPACK_IMPORTED_MODULE_47__,
              workflowDefinition: _workflow_definition__WEBPACK_IMPORTED_MODULE_48__
            };
          }
        ),
        /***/
        "./entities/locale.ts": (
          /*!****************************!*\
            !*** ./entities/locale.ts ***!
            \****************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapLocale: () => (
                /* binding */
                wrapLocale
              ),
              /* harmony export */
              wrapLocaleCollection: () => (
                /* binding */
                wrapLocaleCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function createLocaleApi(makeRequest) {
              const getParams = (locale) => ({
                spaceId: locale.sys.space.sys.id,
                environmentId: locale.sys.environment.sys.id,
                localeId: locale.sys.id
              });
              return {
                update: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Locale",
                    action: "update",
                    params: getParams(raw),
                    payload: raw
                  }).then((data) => wrapLocale(makeRequest, data));
                },
                delete: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Locale",
                    action: "delete",
                    params: getParams(raw)
                  }).then(() => {
                  });
                }
              };
            }
            function wrapLocale(makeRequest, data) {
              delete data.internal_code;
              const locale = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const localeWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(locale, createLocaleApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(localeWithMethods);
            }
            const wrapLocaleCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapLocale);
          }
        ),
        /***/
        "./entities/organization-invitation.ts": (
          /*!*********************************************!*\
            !*** ./entities/organization-invitation.ts ***!
            \*********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapOrganizationInvitation: () => (
                /* binding */
                wrapOrganizationInvitation
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            function wrapOrganizationInvitation(_makeRequest, data) {
              const invitation = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(invitation);
            }
          }
        ),
        /***/
        "./entities/organization-membership.ts": (
          /*!*********************************************!*\
            !*** ./entities/organization-membership.ts ***!
            \*********************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapOrganizationMembership: () => (
                /* binding */
                wrapOrganizationMembership
              ),
              /* harmony export */
              wrapOrganizationMembershipCollection: () => (
                /* binding */
                wrapOrganizationMembershipCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function createOrganizationMembershipApi(makeRequest, organizationId) {
              const getParams = (data) => ({
                organizationMembershipId: data.sys.id,
                organizationId
              });
              return {
                update: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "OrganizationMembership",
                    action: "update",
                    params: getParams(raw),
                    payload: raw
                  }).then((data) => wrapOrganizationMembership(makeRequest, data, organizationId));
                },
                delete: function del() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "OrganizationMembership",
                    action: "delete",
                    params: getParams(raw)
                  });
                }
              };
            }
            function wrapOrganizationMembership(makeRequest, data, organizationId) {
              const organizationMembership = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const organizationMembershipWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(organizationMembership, createOrganizationMembershipApi(makeRequest, organizationId));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(organizationMembershipWithMethods);
            }
            const wrapOrganizationMembershipCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapOrganizationMembership);
          }
        ),
        /***/
        "./entities/organization.ts": (
          /*!**********************************!*\
            !*** ./entities/organization.ts ***!
            \**********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapOrganization: () => (
                /* binding */
                wrapOrganization
              ),
              /* harmony export */
              wrapOrganizationCollection: () => (
                /* binding */
                wrapOrganizationCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _create_organization_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../create-organization-api */
              "./create-organization-api.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function wrapOrganization(makeRequest, data) {
              const org = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const orgApi = (0, _create_organization_api__WEBPACK_IMPORTED_MODULE_3__["default"])(makeRequest);
              const enhancedOrganization = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(org, orgApi);
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(enhancedOrganization);
            }
            const wrapOrganizationCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_4__.wrapCollection)(wrapOrganization);
          }
        ),
        /***/
        "./entities/personal-access-token.ts": (
          /*!*******************************************!*\
            !*** ./entities/personal-access-token.ts ***!
            \*******************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapPersonalAccessToken: () => (
                /* binding */
                wrapPersonalAccessToken
              ),
              /* harmony export */
              wrapPersonalAccessTokenCollection: () => (
                /* binding */
                wrapPersonalAccessTokenCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function wrapPersonalAccessToken(makeRequest, data) {
              const personalAccessToken = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const personalAccessTokenWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(personalAccessToken, {
                revoke: function() {
                  return makeRequest({
                    entityType: "PersonalAccessToken",
                    action: "revoke",
                    params: {
                      tokenId: data.sys.id
                    }
                  }).then((data2) => wrapPersonalAccessToken(makeRequest, data2));
                }
              });
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(personalAccessTokenWithMethods);
            }
            const wrapPersonalAccessTokenCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapPersonalAccessToken);
          }
        ),
        /***/
        "./entities/preview-api-key.ts": (
          /*!*************************************!*\
            !*** ./entities/preview-api-key.ts ***!
            \*************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapPreviewApiKey: () => (
                /* binding */
                wrapPreviewApiKey
              ),
              /* harmony export */
              wrapPreviewApiKeyCollection: () => (
                /* binding */
                wrapPreviewApiKeyCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function createPreviewApiKeyApi() {
              return {};
            }
            function wrapPreviewApiKey(_makeRequest, data) {
              const previewApiKey = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const previewApiKeyWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(previewApiKey, createPreviewApiKeyApi());
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(previewApiKeyWithMethods);
            }
            const wrapPreviewApiKeyCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapPreviewApiKey);
          }
        ),
        /***/
        "./entities/release-action.ts": (
          /*!************************************!*\
            !*** ./entities/release-action.ts ***!
            \************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapReleaseAction: () => (
                /* binding */
                wrapReleaseAction
              ),
              /* harmony export */
              wrapReleaseActionCollection: () => (
                /* binding */
                wrapReleaseActionCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _methods_action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../methods/action */
              "./methods/action.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function createReleaseActionApi(makeRequest) {
              const getParams = (self2) => {
                const action = self2.toPlainObject();
                return {
                  spaceId: action.sys.space.sys.id,
                  environmentId: action.sys.environment.sys.id,
                  releaseId: action.sys.release.sys.id,
                  actionId: action.sys.id
                };
              };
              return {
                async get() {
                  const params = getParams(this);
                  return makeRequest({
                    entityType: "ReleaseAction",
                    action: "get",
                    params
                  }).then((releaseAction) => wrapReleaseAction(makeRequest, releaseAction));
                },
                /** Waits for a Release Action to complete */
                async waitProcessing(options2) {
                  return (0, _methods_action__WEBPACK_IMPORTED_MODULE_3__.pollAsyncActionStatus)(async () => this.get(), options2);
                }
              };
            }
            function wrapReleaseAction(makeRequest, data) {
              const releaseAction = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const releaseActionWithApiMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_4__["default"])(releaseAction, createReleaseActionApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(releaseActionWithApiMethods);
            }
            const wrapReleaseActionCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapReleaseAction);
          }
        ),
        /***/
        "./entities/release.ts": (
          /*!*****************************!*\
            !*** ./entities/release.ts ***!
            \*****************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              ReleaseReferenceFilters: () => (
                /* binding */
                ReleaseReferenceFilters
              ),
              /* harmony export */
              wrapRelease: () => (
                /* binding */
                wrapRelease
              ),
              /* harmony export */
              wrapReleaseCollection: () => (
                /* binding */
                wrapReleaseCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-types */
              "./common-types.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _release_action__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
              /*! ./release-action */
              "./entities/release-action.ts"
            );
            const ReleaseReferenceFilters = _common_types__WEBPACK_IMPORTED_MODULE_2__.ScheduledActionReferenceFilters;
            function createReleaseApi(makeRequest) {
              const getParams = (self2) => {
                const release = self2.toPlainObject();
                return {
                  spaceId: release.sys.space.sys.id,
                  environmentId: release.sys.environment.sys.id,
                  releaseId: release.sys.id,
                  version: release.sys.version
                };
              };
              return {
                async archive() {
                  const params = getParams(this);
                  return makeRequest({
                    entityType: "Release",
                    action: "archive",
                    params
                  }).then((release) => wrapRelease(makeRequest, release));
                },
                async unarchive() {
                  const params = getParams(this);
                  return makeRequest({
                    entityType: "Release",
                    action: "unarchive",
                    params
                  }).then((release) => wrapRelease(makeRequest, release));
                },
                async update(payload) {
                  const params = getParams(this);
                  return makeRequest({
                    entityType: "Release",
                    action: "update",
                    params,
                    payload
                  }).then((release) => wrapRelease(makeRequest, release));
                },
                async delete() {
                  const params = getParams(this);
                  await makeRequest({
                    entityType: "Release",
                    action: "delete",
                    params
                  });
                },
                async publish(options2) {
                  const params = getParams(this);
                  return makeRequest({
                    entityType: "Release",
                    action: "publish",
                    params
                  }).then((data) => (0, _release_action__WEBPACK_IMPORTED_MODULE_5__.wrapReleaseAction)(makeRequest, data)).then((action) => action.waitProcessing(options2));
                },
                async unpublish(options2) {
                  const params = getParams(this);
                  return makeRequest({
                    entityType: "Release",
                    action: "unpublish",
                    params
                  }).then((data) => (0, _release_action__WEBPACK_IMPORTED_MODULE_5__.wrapReleaseAction)(makeRequest, data)).then((action) => action.waitProcessing(options2));
                },
                async validate(options2) {
                  const params = getParams(this);
                  return makeRequest({
                    entityType: "Release",
                    action: "validate",
                    params,
                    payload: options2 === null || options2 === void 0 ? void 0 : options2.payload
                  }).then((data) => (0, _release_action__WEBPACK_IMPORTED_MODULE_5__.wrapReleaseAction)(makeRequest, data)).then((action) => action.waitProcessing(options2 === null || options2 === void 0 ? void 0 : options2.processingOptions));
                }
              };
            }
            function wrapRelease(makeRequest, data) {
              const release = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const releaseWithApiMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_4__["default"])(release, createReleaseApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(releaseWithApiMethods);
            }
            const wrapReleaseCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCursorPaginatedCollection)(wrapRelease);
          }
        ),
        /***/
        "./entities/role.ts": (
          /*!**************************!*\
            !*** ./entities/role.ts ***!
            \**************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapRole: () => (
                /* binding */
                wrapRole
              ),
              /* harmony export */
              wrapRoleCollection: () => (
                /* binding */
                wrapRoleCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function createRoleApi(makeRequest) {
              const getParams = (data) => ({
                spaceId: data.sys.space.sys.id,
                roleId: data.sys.id
              });
              return {
                update: function update() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "Role",
                    action: "update",
                    params: getParams(data),
                    payload: data
                  }).then((data2) => wrapRole(makeRequest, data2));
                },
                delete: function del() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "Role",
                    action: "delete",
                    params: getParams(data)
                  });
                }
              };
            }
            function wrapRole(makeRequest, data) {
              const role = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const roleWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(role, createRoleApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(roleWithMethods);
            }
            const wrapRoleCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapRole);
          }
        ),
        /***/
        "./entities/scheduled-action.ts": (
          /*!**************************************!*\
            !*** ./entities/scheduled-action.ts ***!
            \**************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                getInstanceMethods
              ),
              /* harmony export */
              wrapScheduledAction: () => (
                /* binding */
                wrapScheduledAction
              ),
              /* harmony export */
              wrapScheduledActionCollection: () => (
                /* binding */
                wrapScheduledActionCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            const _excluded = ["sys"];
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            var ScheduledActionStatus = /* @__PURE__ */ function(ScheduledActionStatus2) {
              ScheduledActionStatus2["scheduled"] = "scheduled";
              ScheduledActionStatus2["inProgress"] = "inProgress";
              ScheduledActionStatus2["succeeded"] = "succeeded";
              ScheduledActionStatus2["failed"] = "failed";
              ScheduledActionStatus2["canceled"] = "canceled";
              return ScheduledActionStatus2;
            }(ScheduledActionStatus || {});
            function getInstanceMethods(makeRequest) {
              const getParams = (self2) => {
                var _scheduledAction$envi;
                const scheduledAction = self2.toPlainObject();
                return {
                  spaceId: scheduledAction.sys.space.sys.id,
                  environmentId: (_scheduledAction$envi = scheduledAction.environment) === null || _scheduledAction$envi === void 0 ? void 0 : _scheduledAction$envi.sys.id,
                  scheduledActionId: scheduledAction.sys.id,
                  version: scheduledAction.sys.version
                };
              };
              return {
                /**
                 * Cancels the current Scheduled Action schedule.
                 *
                 * @example ```javascript
                 *  const contentful = require('contentful-management');
                 *
                 *  const client = contentful.createClient({
                 *    accessToken: '<content_management_api_key>'
                 *  })
                 *
                 *  client.getSpace('<space_id>')
                 *    .then((space) => {
                 *      return space.createScheduledAction({
                 *        entity: {
                 *          sys: {
                 *            type: 'Link',
                 *            linkType: 'Entry',
                 *            id: '<entry_id>'
                 *          }
                 *        },
                 *        environment: {
                 *          sys: {
                 *            type: 'Link',
                 *            linkType: 'Environment',
                 *            id: '<environment_id>'
                 *          }
                 *        },
                 *        action: 'publish',
                 *        scheduledFor: {
                 *          datetime: <ISO_date_string>,
                 *          timezone: 'Europe/Berlin'
                 *        }
                 *      })
                 *    .then((scheduledAction) => scheduledAction.delete())
                 *    .then((deletedScheduledAction) => console.log(deletedScheduledAction))
                 *    .catch(console.error);
                 * ```
                 */
                async delete() {
                  const params = getParams(this);
                  return makeRequest({
                    entityType: "ScheduledAction",
                    action: "delete",
                    params
                  }).then((data) => wrapScheduledAction(makeRequest, data));
                },
                /**
                 * Update the current scheduled action. Currently, only changes made to the `scheduledFor` property will be saved.
                 *
                 * @example ```javascript
                 *  const contentful = require('contentful-management');
                 *
                 *  const client = contentful.createClient({
                 *    accessToken: '<content_management_api_key>'
                 *  })
                 *
                 *  client.getSpace('<space_id>')
                 *    .then((space) => {
                 *      return space.createScheduledAction({
                 *        entity: {
                 *          sys: {
                 *            type: 'Link',
                 *            linkType: 'Entry',
                 *            id: '<entry_id>'
                 *          }
                 *        },
                 *        environment: {
                 *          sys: {
                 *            type: 'Link',
                 *            linkType: 'Environment',
                 *            id: '<environment_id>'
                 *          }
                 *        },
                 *        action: 'publish',
                 *        scheduledFor: {
                 *          datetime: <ISO_date_string>,
                 *          timezone: 'Europe/Berlin'
                 *        }
                 *      })
                 *    .then((scheduledAction) => {
                 *      scheduledAction.scheduledFor.timezone = 'Europe/Paris';
                 *      return scheduledAction.update();
                 *    })
                 *    .then((scheduledAction) => console.log(scheduledAction))
                 *    .catch(console.error);
                 * ```
                 */
                async update() {
                  const params = getParams(this);
                  const _this$toPlainObject = this.toPlainObject(), {
                    sys
                  } = _this$toPlainObject, payload = _objectWithoutProperties(_this$toPlainObject, _excluded);
                  return makeRequest({
                    entityType: "ScheduledAction",
                    action: "update",
                    params,
                    payload
                  }).then((data) => wrapScheduledAction(makeRequest, data));
                }
              };
            }
            function wrapScheduledAction(makeRequest, data) {
              const scheduledAction = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const scheduledActionWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(scheduledAction, getInstanceMethods(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(scheduledActionWithMethods);
            }
            const wrapScheduledActionCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapScheduledAction);
          }
        ),
        /***/
        "./entities/snapshot.ts": (
          /*!******************************!*\
            !*** ./entities/snapshot.ts ***!
            \******************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapSnapshot: () => (
                /* binding */
                wrapSnapshot
              ),
              /* harmony export */
              wrapSnapshotCollection: () => (
                /* binding */
                wrapSnapshotCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function createSnapshotApi() {
              return {
                /* In case the snapshot object evolve later */
              };
            }
            function wrapSnapshot(_makeRequest, data) {
              const snapshot = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const snapshotWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(snapshot, createSnapshotApi());
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(snapshotWithMethods);
            }
            const wrapSnapshotCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapSnapshot);
          }
        ),
        /***/
        "./entities/space-member.ts": (
          /*!**********************************!*\
            !*** ./entities/space-member.ts ***!
            \**********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapSpaceMember: () => (
                /* binding */
                wrapSpaceMember
              ),
              /* harmony export */
              wrapSpaceMemberCollection: () => (
                /* binding */
                wrapSpaceMemberCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function wrapSpaceMember(_makeRequest, data) {
              const spaceMember = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(spaceMember);
            }
            const wrapSpaceMemberCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapSpaceMember);
          }
        ),
        /***/
        "./entities/space-membership.ts": (
          /*!**************************************!*\
            !*** ./entities/space-membership.ts ***!
            \**************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapSpaceMembership: () => (
                /* binding */
                wrapSpaceMembership
              ),
              /* harmony export */
              wrapSpaceMembershipCollection: () => (
                /* binding */
                wrapSpaceMembershipCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function createSpaceMembershipApi(makeRequest) {
              const getParams = (data) => ({
                spaceId: data.sys.space.sys.id,
                spaceMembershipId: data.sys.id
              });
              return {
                update: function update() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "SpaceMembership",
                    action: "update",
                    params: getParams(data),
                    payload: data
                  }).then((data2) => wrapSpaceMembership(makeRequest, data2));
                },
                delete: function del() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "SpaceMembership",
                    action: "delete",
                    params: getParams(data)
                  });
                }
              };
            }
            function wrapSpaceMembership(makeRequest, data) {
              const spaceMembership = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const spaceMembershipWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(spaceMembership, createSpaceMembershipApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(spaceMembershipWithMethods);
            }
            const wrapSpaceMembershipCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapSpaceMembership);
          }
        ),
        /***/
        "./entities/space.ts": (
          /*!***************************!*\
            !*** ./entities/space.ts ***!
            \***************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapSpace: () => (
                /* binding */
                wrapSpace
              ),
              /* harmony export */
              wrapSpaceCollection: () => (
                /* binding */
                wrapSpaceCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _create_space_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../create-space-api */
              "./create-space-api.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function wrapSpace(makeRequest, data) {
              const space = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const spaceApi = (0, _create_space_api__WEBPACK_IMPORTED_MODULE_3__["default"])(makeRequest);
              const enhancedSpace = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_4__["default"])(space, spaceApi);
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(enhancedSpace);
            }
            const wrapSpaceCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapSpace);
          }
        ),
        /***/
        "./entities/tag.ts": (
          /*!*************************!*\
            !*** ./entities/tag.ts ***!
            \*************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                createTagApi
              ),
              /* harmony export */
              wrapTag: () => (
                /* binding */
                wrapTag
              ),
              /* harmony export */
              wrapTagCollection: () => (
                /* binding */
                wrapTagCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function createTagApi(makeRequest) {
              const getParams = (tag) => ({
                spaceId: tag.sys.space.sys.id,
                environmentId: tag.sys.environment.sys.id,
                tagId: tag.sys.id
              });
              return {
                update: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Tag",
                    action: "update",
                    params: getParams(raw),
                    payload: raw
                  }).then((data) => wrapTag(makeRequest, data));
                },
                delete: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Tag",
                    action: "delete",
                    params: _objectSpread(_objectSpread({}, getParams(raw)), {}, {
                      version: raw.sys.version
                    })
                  }).then(() => {
                  });
                }
              };
            }
            function wrapTag(makeRequest, data) {
              const tag = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const tagWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(tag, createTagApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(tagWithMethods);
            }
            const wrapTagCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapTag);
          }
        ),
        /***/
        "./entities/task.ts": (
          /*!**************************!*\
            !*** ./entities/task.ts ***!
            \**************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                createTaskApi
              ),
              /* harmony export */
              wrapTask: () => (
                /* binding */
                wrapTask
              ),
              /* harmony export */
              wrapTaskCollection: () => (
                /* binding */
                wrapTaskCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function createTaskApi(makeRequest) {
              const getParams = (task) => ({
                spaceId: task.sys.space.sys.id,
                environmentId: task.sys.environment.sys.id,
                entryId: task.sys.parentEntity.sys.id,
                taskId: task.sys.id
              });
              return {
                update: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Task",
                    action: "update",
                    params: getParams(raw),
                    payload: raw
                  }).then((data) => wrapTask(makeRequest, data));
                },
                delete: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Task",
                    action: "delete",
                    params: _objectSpread(_objectSpread({}, getParams(raw)), {}, {
                      version: raw.sys.version
                    })
                  }).then(() => {
                  });
                }
              };
            }
            function wrapTask(makeRequest, data) {
              const task = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const taskWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(task, createTaskApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(taskWithMethods);
            }
            const wrapTaskCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapTask);
          }
        ),
        /***/
        "./entities/team-membership.ts": (
          /*!*************************************!*\
            !*** ./entities/team-membership.ts ***!
            \*************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapTeamMembership: () => (
                /* binding */
                wrapTeamMembership
              ),
              /* harmony export */
              wrapTeamMembershipCollection: () => (
                /* binding */
                wrapTeamMembershipCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function createTeamMembershipApi(makeRequest) {
              const getParams = (data) => ({
                teamMembershipId: data.sys.id,
                teamId: data.sys.team.sys.id,
                organizationId: data.sys.organization.sys.id
              });
              return {
                update: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "TeamMembership",
                    action: "update",
                    params: getParams(raw),
                    payload: raw
                  }).then((data) => wrapTeamMembership(makeRequest, data));
                },
                delete: function del() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "TeamMembership",
                    action: "delete",
                    params: getParams(raw)
                  });
                }
              };
            }
            function wrapTeamMembership(makeRequest, data) {
              const teamMembership = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const teamMembershipWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(teamMembership, createTeamMembershipApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(teamMembershipWithMethods);
            }
            const wrapTeamMembershipCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapTeamMembership);
          }
        ),
        /***/
        "./entities/team-space-membership.ts": (
          /*!*******************************************!*\
            !*** ./entities/team-space-membership.ts ***!
            \*******************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapTeamSpaceMembership: () => (
                /* binding */
                wrapTeamSpaceMembership
              ),
              /* harmony export */
              wrapTeamSpaceMembershipCollection: () => (
                /* binding */
                wrapTeamSpaceMembershipCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function createTeamSpaceMembershipApi(makeRequest) {
              const getParams = (data) => ({
                teamSpaceMembershipId: data.sys.id,
                spaceId: data.sys.space.sys.id
              });
              return {
                update: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "TeamSpaceMembership",
                    action: "update",
                    params: getParams(raw),
                    payload: raw
                  }).then((data) => wrapTeamSpaceMembership(makeRequest, data));
                },
                delete: function del() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "TeamSpaceMembership",
                    action: "delete",
                    params: getParams(data)
                  });
                }
              };
            }
            function wrapTeamSpaceMembership(makeRequest, data) {
              const teamSpaceMembership = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const teamSpaceMembershipWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(teamSpaceMembership, createTeamSpaceMembershipApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(teamSpaceMembershipWithMethods);
            }
            const wrapTeamSpaceMembershipCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapTeamSpaceMembership);
          }
        ),
        /***/
        "./entities/team.ts": (
          /*!**************************!*\
            !*** ./entities/team.ts ***!
            \**************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapTeam: () => (
                /* binding */
                wrapTeam
              ),
              /* harmony export */
              wrapTeamCollection: () => (
                /* binding */
                wrapTeamCollection
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function createTeamApi(makeRequest) {
              const getParams = (data) => ({
                teamId: data.sys.id,
                organizationId: data.sys.organization.sys.id
              });
              return {
                update: function update() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Team",
                    action: "update",
                    params: getParams(raw),
                    payload: raw
                  }).then((data) => wrapTeam(makeRequest, data));
                },
                delete: function del() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "Team",
                    action: "delete",
                    params: getParams(raw)
                  });
                }
              };
            }
            function wrapTeam(makeRequest, data) {
              const team = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const teamWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(team, createTeamApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(teamWithMethods);
            }
            const wrapTeamCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapTeam);
          }
        ),
        /***/
        "./entities/ui-config.ts": (
          /*!*******************************!*\
            !*** ./entities/ui-config.ts ***!
            \*******************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapUIConfig: () => (
                /* binding */
                wrapUIConfig
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _create_ui_config_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../create-ui-config-api */
              "./create-ui-config-api.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function wrapUIConfig(makeRequest, data) {
              const user = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const userWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(user, (0, _create_ui_config_api__WEBPACK_IMPORTED_MODULE_2__["default"])(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(userWithMethods);
            }
          }
        ),
        /***/
        "./entities/upload.ts": (
          /*!****************************!*\
            !*** ./entities/upload.ts ***!
            \****************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapUpload: () => (
                /* binding */
                wrapUpload
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function createUploadApi(makeRequest) {
              return {
                delete: async function del() {
                  const raw = this.toPlainObject();
                  await makeRequest({
                    entityType: "Upload",
                    action: "delete",
                    params: {
                      spaceId: raw.sys.space.sys.id,
                      uploadId: raw.sys.id
                    }
                  });
                }
              };
            }
            function wrapUpload(makeRequest, data) {
              const upload = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(data));
              const uploadWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(upload, createUploadApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_1__.freezeSys)(uploadWithMethods);
            }
          }
        ),
        /***/
        "./entities/usage.ts": (
          /*!***************************!*\
            !*** ./entities/usage.ts ***!
            \***************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapUsage: () => (
                /* binding */
                wrapUsage
              ),
              /* harmony export */
              wrapUsageCollection: () => (
                /* binding */
                wrapUsageCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function wrapUsage(_makeRequest, data) {
              const usage = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const usageWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(usage, {});
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(usageWithMethods);
            }
            const wrapUsageCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapUsage);
          }
        ),
        /***/
        "./entities/user-ui-config.ts": (
          /*!************************************!*\
            !*** ./entities/user-ui-config.ts ***!
            \************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapUserUIConfig: () => (
                /* binding */
                wrapUserUIConfig
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _create_user_ui_config_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../create-user-ui-config-api */
              "./create-user-ui-config-api.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function wrapUserUIConfig(makeRequest, data) {
              const user = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const userWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(user, (0, _create_user_ui_config_api__WEBPACK_IMPORTED_MODULE_2__["default"])(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(userWithMethods);
            }
          }
        ),
        /***/
        "./entities/user.ts": (
          /*!**************************!*\
            !*** ./entities/user.ts ***!
            \**************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapUser: () => (
                /* binding */
                wrapUser
              ),
              /* harmony export */
              wrapUserCollection: () => (
                /* binding */
                wrapUserCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            function wrapUser(_makeRequest, data) {
              const user = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const userWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_2__["default"])(user, {});
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(userWithMethods);
            }
            const wrapUserCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_3__.wrapCollection)(wrapUser);
          }
        ),
        /***/
        "./entities/webhook.ts": (
          /*!*****************************!*\
            !*** ./entities/webhook.ts ***!
            \*****************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrapWebhook: () => (
                /* binding */
                wrapWebhook
              ),
              /* harmony export */
              wrapWebhookCollection: () => (
                /* binding */
                wrapWebhookCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function createWebhookApi(makeRequest) {
              const getParams = (data) => ({
                spaceId: data.sys.space.sys.id,
                webhookDefinitionId: data.sys.id
              });
              return {
                update: function update() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "Webhook",
                    action: "update",
                    params: getParams(data),
                    payload: data
                  }).then((data2) => wrapWebhook(makeRequest, data2));
                },
                delete: function del() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "Webhook",
                    action: "delete",
                    params: getParams(data)
                  });
                },
                getCalls: function getCalls() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "Webhook",
                    action: "getManyCallDetails",
                    params: getParams(data)
                  });
                },
                getCall: function getCall(id) {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "Webhook",
                    action: "getCallDetails",
                    params: _objectSpread(_objectSpread({}, getParams(data)), {}, {
                      callId: id
                    })
                  });
                },
                getHealth: function getHealth() {
                  const data = this.toPlainObject();
                  return makeRequest({
                    entityType: "Webhook",
                    action: "getHealthStatus",
                    params: getParams(data)
                  });
                }
              };
            }
            function wrapWebhook(makeRequest, data) {
              const webhook = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const webhookWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(webhook, createWebhookApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(webhookWithMethods);
            }
            const wrapWebhookCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapWebhook);
          }
        ),
        /***/
        "./entities/workflow-definition.ts": (
          /*!*****************************************!*\
            !*** ./entities/workflow-definition.ts ***!
            \*****************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              WorkflowStepActionType: () => (
                /* binding */
                WorkflowStepActionType
              ),
              /* harmony export */
              WorkflowStepPermissionAction: () => (
                /* binding */
                WorkflowStepPermissionAction
              ),
              /* harmony export */
              WorkflowStepPermissionEffect: () => (
                /* binding */
                WorkflowStepPermissionEffect
              ),
              /* harmony export */
              WorkflowStepPermissionType: () => (
                /* binding */
                WorkflowStepPermissionType
              ),
              /* harmony export */
              "default": () => (
                /* binding */
                createWorkflowDefinitionApi
              ),
              /* harmony export */
              wrapWorkflowDefinition: () => (
                /* binding */
                wrapWorkflowDefinition
              ),
              /* harmony export */
              wrapWorkflowDefinitionCollection: () => (
                /* binding */
                wrapWorkflowDefinitionCollection
              )
              /* harmony export */
            });
            var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! contentful-sdk-core */
              "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
            );
            var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../common-utils */
              "./common-utils.ts"
            );
            var _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../enhance-with-methods */
              "./enhance-with-methods.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            let WorkflowStepPermissionType = /* @__PURE__ */ function(WorkflowStepPermissionType2) {
              WorkflowStepPermissionType2["EntityPermission"] = "entity_permission";
              WorkflowStepPermissionType2["WorkflowPermission"] = "workflow_permission";
              return WorkflowStepPermissionType2;
            }({});
            let WorkflowStepPermissionAction = /* @__PURE__ */ function(WorkflowStepPermissionAction2) {
              WorkflowStepPermissionAction2["Edit"] = "edit";
              WorkflowStepPermissionAction2["Publish"] = "publish";
              return WorkflowStepPermissionAction2;
            }({});
            let WorkflowStepPermissionEffect = /* @__PURE__ */ function(WorkflowStepPermissionEffect2) {
              WorkflowStepPermissionEffect2["Allow"] = "allow";
              WorkflowStepPermissionEffect2["Deny"] = "deny";
              return WorkflowStepPermissionEffect2;
            }({});
            let WorkflowStepActionType = /* @__PURE__ */ function(WorkflowStepActionType2) {
              WorkflowStepActionType2["App"] = "app";
              WorkflowStepActionType2["Email"] = "email";
              WorkflowStepActionType2["Task"] = "task";
              return WorkflowStepActionType2;
            }({});
            function createWorkflowDefinitionApi(makeRequest) {
              const getParams = (workflowDefinition) => ({
                spaceId: workflowDefinition.sys.space.sys.id,
                environmentId: workflowDefinition.sys.environment.sys.id,
                workflowDefinitionId: workflowDefinition.sys.id
              });
              return {
                update: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "WorkflowDefinition",
                    action: "update",
                    params: getParams(raw),
                    payload: raw
                  }).then((data) => wrapWorkflowDefinition(makeRequest, data));
                },
                delete: function() {
                  const raw = this.toPlainObject();
                  return makeRequest({
                    entityType: "WorkflowDefinition",
                    action: "delete",
                    params: _objectSpread(_objectSpread({}, getParams(raw)), {}, {
                      version: raw.sys.version
                    })
                  }).then(() => {
                  });
                }
              };
            }
            function wrapWorkflowDefinition(makeRequest, data) {
              const workflowDefinition = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.toPlainObject)((0, fast_copy__WEBPACK_IMPORTED_MODULE_1__["default"])(data));
              const workflowDefinitionWithMethods = (0, _enhance_with_methods__WEBPACK_IMPORTED_MODULE_3__["default"])(workflowDefinition, createWorkflowDefinitionApi(makeRequest));
              return (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.freezeSys)(workflowDefinitionWithMethods);
            }
            const wrapWorkflowDefinitionCollection = (0, _common_utils__WEBPACK_IMPORTED_MODULE_2__.wrapCollection)(wrapWorkflowDefinition);
          }
        ),
        /***/
        "./export-types.ts": (
          /*!*************************!*\
            !*** ./export-types.ts ***!
            \*************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              ScheduledActionReferenceFilters: () => (
                /* reexport safe */
                _common_types__WEBPACK_IMPORTED_MODULE_0__.ScheduledActionReferenceFilters
              )
              /* harmony export */
            });
            var _common_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./common-types */
              "./common-types.ts"
            );
            var _plain_common_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./plain/common-types */
              "./plain/common-types.ts"
            );
          }
        ),
        /***/
        "./methods/action.ts": (
          /*!***************************!*\
            !*** ./methods/action.ts ***!
            \***************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              AsyncActionFailedError: () => (
                /* binding */
                AsyncActionFailedError
              ),
              /* harmony export */
              AsyncActionProcessingError: () => (
                /* binding */
                AsyncActionProcessingError
              ),
              /* harmony export */
              pollAsyncActionStatus: () => (
                /* binding */
                pollAsyncActionStatus
              )
              /* harmony export */
            });
            var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./utils */
              "./methods/utils.ts"
            );
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const DEFAULT_MAX_RETRIES = 30;
            const DEFAULT_INITIAL_DELAY_MS = 1e3;
            const DEFAULT_RETRY_INTERVAL_MS = 2e3;
            class AsyncActionProcessingError extends Error {
              constructor(message, action) {
                super(message);
                _defineProperty(this, "action", void 0);
                this.action = action;
                this.name = this.constructor.name;
              }
            }
            class AsyncActionFailedError extends AsyncActionProcessingError {
            }
            async function pollAsyncActionStatus(actionFunction, options2) {
              var _options$retryCount, _options$retryInterva, _options$initialDelay, _options$throwOnFaile, _action;
              let retryCount = 0;
              let done = false;
              let action;
              const maxRetries = (_options$retryCount = options2 === null || options2 === void 0 ? void 0 : options2.retryCount) !== null && _options$retryCount !== void 0 ? _options$retryCount : DEFAULT_MAX_RETRIES;
              const retryIntervalMs = (_options$retryInterva = options2 === null || options2 === void 0 ? void 0 : options2.retryIntervalMs) !== null && _options$retryInterva !== void 0 ? _options$retryInterva : DEFAULT_RETRY_INTERVAL_MS;
              const initialDelayMs = (_options$initialDelay = options2 === null || options2 === void 0 ? void 0 : options2.initialDelayMs) !== null && _options$initialDelay !== void 0 ? _options$initialDelay : DEFAULT_INITIAL_DELAY_MS;
              const throwOnFailedExecution = (_options$throwOnFaile = options2 === null || options2 === void 0 ? void 0 : options2.throwOnFailedExecution) !== null && _options$throwOnFaile !== void 0 ? _options$throwOnFaile : true;
              await (0, _utils__WEBPACK_IMPORTED_MODULE_0__.sleep)(initialDelayMs);
              while (retryCount < maxRetries && !done) {
                action = await actionFunction();
                if (action && ["succeeded", "failed"].includes(action.sys.status)) {
                  done = true;
                  if (action.sys.status === "failed" && throwOnFailedExecution) {
                    throw new AsyncActionFailedError(`${action.sys.type} failed to execute.`, action);
                  }
                  return action;
                }
                await (0, _utils__WEBPACK_IMPORTED_MODULE_0__.sleep)(retryIntervalMs);
                retryCount += 1;
              }
              throw new AsyncActionProcessingError(`${(_action = action) === null || _action === void 0 ? void 0 : _action.sys.type} didn't finish processing within the expected timeframe.`, action);
            }
          }
        ),
        /***/
        "./methods/content-type.ts": (
          /*!*********************************!*\
            !*** ./methods/content-type.ts ***!
            \*********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              omitAndDeleteField: () => (
                /* binding */
                omitAndDeleteField
              )
              /* harmony export */
            });
            const _excluded = ["fieldId"];
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key2, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key2 = sourceSymbolKeys[i];
                  if (excluded.indexOf(key2) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                    continue;
                  target[key2] = source[key2];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key2, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key2 = sourceKeys[i];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                target[key2] = source[key2];
              }
              return target;
            }
            const findAndUpdateField = function(contentType, fieldId, omitOrDelete) {
              const field = contentType.fields.find((field2) => field2.id === fieldId);
              if (!field) {
                return Promise.reject(new Error(`Tried to omitAndDeleteField on a nonexistent field, ${fieldId}, on the content type ${contentType.name}.`));
              }
              field[omitOrDelete] = true;
              return Promise.resolve(contentType);
            };
            const omitAndDeleteField = (makeRequest, _ref, contentType) => {
              let {
                fieldId
              } = _ref, params = _objectWithoutProperties(_ref, _excluded);
              return findAndUpdateField(contentType, fieldId, "omitted").then((newContentType) => {
                return makeRequest({
                  entityType: "ContentType",
                  action: "update",
                  params,
                  payload: newContentType
                });
              }).then((newContentType) => {
                return findAndUpdateField(newContentType, fieldId, "deleted");
              }).then((newContentType) => {
                return makeRequest({
                  entityType: "ContentType",
                  action: "update",
                  params,
                  payload: newContentType
                });
              });
            };
          }
        ),
        /***/
        "./methods/utils.ts": (
          /*!**************************!*\
            !*** ./methods/utils.ts ***!
            \**************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              sleep: () => (
                /* binding */
                sleep
              )
              /* harmony export */
            });
            function sleep(durationMs) {
              return new Promise((resolve2) => setTimeout(resolve2, durationMs));
            }
          }
        ),
        /***/
        "./plain/as-iterator.ts": (
          /*!******************************!*\
            !*** ./plain/as-iterator.ts ***!
            \******************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              asIterator: () => (
                /* binding */
                asIterator
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/fast-copy/dist/esm/index.mjs"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const asIterator = (fn, params) => {
              return {
                [Symbol.asyncIterator]() {
                  let options2 = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(params);
                  const get3 = () => fn((0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(options2));
                  let currentResult = get3();
                  return {
                    current: 0,
                    async next() {
                      const {
                        total = 0,
                        items = [],
                        skip = 0,
                        limit = 100
                      } = await currentResult;
                      if (total === this.current) {
                        return {
                          done: true,
                          value: null
                        };
                      }
                      const value = items[this.current++ - skip];
                      const endOfPage = this.current % limit === 0;
                      const endOfList = this.current === total;
                      if (endOfPage && !endOfList) {
                        options2 = _objectSpread(_objectSpread({}, options2), {}, {
                          query: _objectSpread(_objectSpread({}, options2.query), {}, {
                            skip: skip + limit
                          })
                        });
                        currentResult = get3();
                      }
                      return {
                        done: false,
                        value
                      };
                    }
                  };
                }
              };
            };
          }
        ),
        /***/
        "./plain/checks.ts": (
          /*!*************************!*\
            !*** ./plain/checks.ts ***!
            \*************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              isArchived: () => (
                /* binding */
                isArchived
              ),
              /* harmony export */
              isDraft: () => (
                /* binding */
                isDraft
              ),
              /* harmony export */
              isPublished: () => (
                /* binding */
                isPublished
              ),
              /* harmony export */
              isUpdated: () => (
                /* binding */
                isUpdated
              )
              /* harmony export */
            });
            const isPublished = (data) => !!data.sys.publishedVersion;
            const isUpdated = (data) => {
              return !!(data.sys.publishedVersion && data.sys.version > data.sys.publishedVersion + 1);
            };
            const isDraft = (data) => !data.sys.publishedVersion;
            const isArchived = (data) => !!data.sys.archivedVersion;
          }
        ),
        /***/
        "./plain/common-types.ts": (
          /*!*******************************!*\
            !*** ./plain/common-types.ts ***!
            \*******************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
          }
        ),
        /***/
        "./plain/plain-client.ts": (
          /*!*******************************!*\
            !*** ./plain/plain-client.ts ***!
            \*******************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              createPlainClient: () => (
                /* binding */
                createPlainClient
              )
              /* harmony export */
            });
            var _methods_content_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../methods/content-type */
              "./methods/content-type.ts"
            );
            var _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./wrappers/wrap */
              "./plain/wrappers/wrap.ts"
            );
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const createPlainClient = (makeRequest, defaults) => {
              const wrapParams = {
                makeRequest,
                defaults
              };
              return {
                raw: {
                  getDefaultParams: () => defaults,
                  get: (url, config) => makeRequest({
                    entityType: "Http",
                    action: "get",
                    params: {
                      url,
                      config
                    }
                  }),
                  patch: (url, payload, config) => makeRequest({
                    entityType: "Http",
                    action: "patch",
                    params: {
                      url,
                      config
                    },
                    payload
                  }),
                  post: (url, payload, config) => makeRequest({
                    entityType: "Http",
                    action: "post",
                    params: {
                      url,
                      config
                    },
                    payload
                  }),
                  put: (url, payload, config) => makeRequest({
                    entityType: "Http",
                    action: "put",
                    params: {
                      url,
                      config
                    },
                    payload
                  }),
                  delete: (url, config) => makeRequest({
                    entityType: "Http",
                    action: "delete",
                    params: {
                      url,
                      config
                    }
                  }),
                  http: (url, config) => makeRequest({
                    entityType: "Http",
                    action: "request",
                    params: {
                      url,
                      config
                    }
                  })
                },
                appAction: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppAction", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppAction", "getMany"),
                  getManyForEnvironment: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppAction", "getManyForEnvironment"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppAction", "delete"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppAction", "create"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppAction", "update")
                },
                appActionCall: {
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppActionCall", "create"),
                  getCallDetails: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppActionCall", "getCallDetails"),
                  createWithResponse: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppActionCall", "createWithResponse")
                },
                appBundle: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppBundle", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppBundle", "getMany"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppBundle", "delete"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppBundle", "create")
                },
                appDetails: {
                  upsert: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppDetails", "upsert"),
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppDetails", "get"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppDetails", "delete")
                },
                appSignedRequest: {
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppSignedRequest", "create")
                },
                appSigningSecret: {
                  upsert: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppSigningSecret", "upsert"),
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppSigningSecret", "get"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppSigningSecret", "delete")
                },
                deliveryFunction: {
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "DeliveryFunction", "getMany")
                },
                editorInterface: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EditorInterface", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EditorInterface", "getMany"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EditorInterface", "update")
                },
                space: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Space", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Space", "getMany"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Space", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Space", "delete"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Space", "create")
                },
                environment: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Environment", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Environment", "getMany"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Environment", "create"),
                  createWithId: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Environment", "createWithId"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Environment", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Environment", "delete")
                },
                environmentAlias: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentAlias", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentAlias", "getMany"),
                  createWithId: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentAlias", "createWithId"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentAlias", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentAlias", "delete")
                },
                environmentTemplate: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentTemplate", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentTemplate", "getMany"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentTemplate", "create"),
                  versionUpdate: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentTemplate", "versionUpdate"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentTemplate", "update"),
                  install: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentTemplate", "install"),
                  versions: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentTemplate", "versions"),
                  validate: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentTemplate", "validate"),
                  disconnect: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentTemplate", "disconnect"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentTemplate", "delete")
                },
                environmentTemplateInstallation: {
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentTemplateInstallation", "getMany"),
                  getForEnvironment: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "EnvironmentTemplateInstallation", "getForEnvironment")
                },
                bulkAction: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "BulkAction", "get"),
                  publish: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "BulkAction", "publish"),
                  unpublish: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "BulkAction", "unpublish"),
                  validate: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "BulkAction", "validate")
                },
                comment: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Comment", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Comment", "getMany"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Comment", "create"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Comment", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Comment", "delete")
                },
                contentType: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ContentType", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ContentType", "getMany"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ContentType", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ContentType", "delete"),
                  publish: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ContentType", "publish"),
                  unpublish: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ContentType", "unpublish"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ContentType", "create"),
                  createWithId: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ContentType", "createWithId"),
                  omitAndDeleteField: (params, contentType, fieldId) => (0, _methods_content_type__WEBPACK_IMPORTED_MODULE_0__.omitAndDeleteField)(makeRequest, _objectSpread(_objectSpread({}, _objectSpread(_objectSpread({}, defaults), params)), {}, {
                    fieldId
                  }), contentType)
                },
                user: {
                  getManyForSpace: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "User", "getManyForSpace"),
                  getForSpace: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "User", "getForSpace"),
                  getCurrent: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "User", "getCurrent"),
                  getForOrganization: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "User", "getForOrganization"),
                  getManyForOrganization: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "User", "getManyForOrganization")
                },
                task: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Task", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Task", "getMany"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Task", "create"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Task", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Task", "delete")
                },
                entry: {
                  getPublished: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "getPublished"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "getMany"),
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "get"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "update"),
                  patch: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "patch"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "delete"),
                  publish: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "publish"),
                  unpublish: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "unpublish"),
                  archive: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "archive"),
                  unarchive: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "unarchive"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "create"),
                  createWithId: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "createWithId"),
                  references: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Entry", "references")
                },
                asset: {
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Asset", "getMany"),
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Asset", "get"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Asset", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Asset", "delete"),
                  publish: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Asset", "publish"),
                  unpublish: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Asset", "unpublish"),
                  archive: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Asset", "archive"),
                  unarchive: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Asset", "unarchive"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Asset", "create"),
                  createWithId: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Asset", "createWithId"),
                  createFromFiles: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Asset", "createFromFiles"),
                  processForAllLocales: (params, asset, options2) => makeRequest({
                    entityType: "Asset",
                    action: "processForAllLocales",
                    params: _objectSpread(_objectSpread({}, _objectSpread(_objectSpread({}, defaults), params)), {}, {
                      options: options2,
                      asset
                    })
                  }),
                  processForLocale: (params, asset, locale, options2) => makeRequest({
                    entityType: "Asset",
                    action: "processForLocale",
                    params: _objectSpread(_objectSpread({}, _objectSpread(_objectSpread({}, defaults), params)), {}, {
                      locale,
                      asset,
                      options: options2
                    })
                  })
                },
                appUpload: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppUpload", "get"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppUpload", "delete"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppUpload", "create")
                },
                assetKey: {
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AssetKey", "create")
                },
                upload: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Upload", "get"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Upload", "create"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Upload", "delete")
                },
                locale: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Locale", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Locale", "getMany"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Locale", "delete"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Locale", "update"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Locale", "create")
                },
                personalAccessToken: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "PersonalAccessToken", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "PersonalAccessToken", "getMany"),
                  create: (data, headers) => makeRequest({
                    entityType: "PersonalAccessToken",
                    action: "create",
                    params: {},
                    headers,
                    payload: data
                  }),
                  revoke: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "PersonalAccessToken", "revoke")
                },
                accessToken: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AccessToken", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AccessToken", "getMany"),
                  createPersonalAccessToken: (data, headers) => makeRequest({
                    entityType: "AccessToken",
                    action: "createPersonalAccessToken",
                    params: {},
                    headers,
                    payload: data
                  }),
                  revoke: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AccessToken", "revoke"),
                  getManyForOrganization: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AccessToken", "getManyForOrganization")
                },
                usage: {
                  getManyForSpace: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Usage", "getManyForSpace"),
                  getManyForOrganization: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Usage", "getManyForOrganization")
                },
                release: {
                  archive: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Release", "archive"),
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Release", "get"),
                  query: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Release", "query"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Release", "create"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Release", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Release", "delete"),
                  publish: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Release", "publish"),
                  unarchive: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Release", "unarchive"),
                  unpublish: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Release", "unpublish"),
                  validate: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Release", "validate")
                },
                releaseAction: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ReleaseAction", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ReleaseAction", "getMany"),
                  queryForRelease: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ReleaseAction", "queryForRelease")
                },
                role: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Role", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Role", "getMany"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Role", "create"),
                  createWithId: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Role", "createWithId"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Role", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Role", "delete")
                },
                scheduledActions: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ScheduledAction", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ScheduledAction", "getMany"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ScheduledAction", "create"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ScheduledAction", "delete"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ScheduledAction", "update")
                },
                previewApiKey: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "PreviewApiKey", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "PreviewApiKey", "getMany")
                },
                apiKey: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ApiKey", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ApiKey", "getMany"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ApiKey", "create"),
                  createWithId: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ApiKey", "createWithId"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ApiKey", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "ApiKey", "delete")
                },
                appDefinition: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppDefinition", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppDefinition", "getMany"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppDefinition", "create"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppDefinition", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppDefinition", "delete"),
                  getInstallationsForOrg: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppDefinition", "getInstallationsForOrg")
                },
                appInstallation: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppInstallation", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppInstallation", "getMany"),
                  getForOrganization: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppInstallation", "getForOrganization"),
                  upsert: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppInstallation", "upsert"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "AppInstallation", "delete")
                },
                extension: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Extension", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Extension", "getMany"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Extension", "create"),
                  createWithId: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Extension", "createWithId"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Extension", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Extension", "delete")
                },
                webhook: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Webhook", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Webhook", "getMany"),
                  getHealthStatus: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Webhook", "getHealthStatus"),
                  getCallDetails: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Webhook", "getCallDetails"),
                  getManyCallDetails: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Webhook", "getManyCallDetails"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Webhook", "create"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Webhook", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Webhook", "delete")
                },
                snapshot: {
                  getManyForEntry: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Snapshot", "getManyForEntry"),
                  getForEntry: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Snapshot", "getForEntry"),
                  getManyForContentType: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Snapshot", "getManyForContentType"),
                  getForContentType: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Snapshot", "getForContentType")
                },
                tag: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Tag", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Tag", "getMany"),
                  createWithId: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Tag", "createWithId"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Tag", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Tag", "delete")
                },
                organization: {
                  getAll: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Organization", "getMany"),
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Organization", "get")
                },
                organizationInvitation: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "OrganizationInvitation", "get"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "OrganizationInvitation", "create")
                },
                organizationMembership: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "OrganizationMembership", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "OrganizationMembership", "getMany"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "OrganizationMembership", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "OrganizationMembership", "delete")
                },
                spaceMember: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "SpaceMember", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "SpaceMember", "getMany")
                },
                spaceMembership: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "SpaceMembership", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "SpaceMembership", "getMany"),
                  getForOrganization: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "SpaceMembership", "getForOrganization"),
                  getManyForOrganization: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "SpaceMembership", "getManyForOrganization"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "SpaceMembership", "create"),
                  createWithId: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "SpaceMembership", "createWithId"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "SpaceMembership", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "SpaceMembership", "delete")
                },
                team: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Team", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Team", "getMany"),
                  getManyForSpace: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Team", "getManyForSpace"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Team", "create"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Team", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Team", "delete")
                },
                teamMembership: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamMembership", "get"),
                  getManyForOrganization: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamMembership", "getManyForOrganization"),
                  getManyForTeam: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamMembership", "getManyForTeam"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamMembership", "create"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamMembership", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamMembership", "delete")
                },
                teamSpaceMembership: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamSpaceMembership", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamSpaceMembership", "getMany"),
                  getForOrganization: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamSpaceMembership", "getForOrganization"),
                  getManyForOrganization: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamSpaceMembership", "getManyForOrganization"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamSpaceMembership", "create"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamSpaceMembership", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "TeamSpaceMembership", "delete")
                },
                uiConfig: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "UIConfig", "get"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "UIConfig", "update")
                },
                userUIConfig: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "UserUIConfig", "get"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "UserUIConfig", "update")
                },
                workflowDefinition: {
                  get: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "WorkflowDefinition", "get"),
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "WorkflowDefinition", "getMany"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "WorkflowDefinition", "create"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "WorkflowDefinition", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "WorkflowDefinition", "delete")
                },
                workflow: {
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Workflow", "getMany"),
                  create: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Workflow", "create"),
                  update: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Workflow", "update"),
                  delete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Workflow", "delete"),
                  complete: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "Workflow", "complete")
                },
                workflowsChangelog: {
                  getMany: (0, _wrappers_wrap__WEBPACK_IMPORTED_MODULE_1__.wrap)(wrapParams, "WorkflowsChangelog", "getMany")
                }
              };
            };
          }
        ),
        /***/
        "./plain/wrappers/wrap.ts": (
          /*!********************************!*\
            !*** ./plain/wrappers/wrap.ts ***!
            \********************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              wrap: () => (
                /* binding */
                wrap
              )
              /* harmony export */
            });
            function ownKeys(e, r) {
              var t = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                r && (o = o.filter(function(r2) {
                  return Object.getOwnPropertyDescriptor(e, r2).enumerable;
                })), t.push.apply(t, o);
              }
              return t;
            }
            function _objectSpread(e) {
              for (var r = 1; r < arguments.length; r++) {
                var t = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
                  _defineProperty(e, r2, t[r2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
                  Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
                });
              }
              return e;
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            const wrap = ({
              makeRequest,
              defaults
            }, entityType, action) => {
              return (params, payload, headers) => (
                // @ts-expect-error
                makeRequest({
                  // @ts-expect-error
                  entityType,
                  // @ts-expect-error
                  action,
                  // @ts-expect-error
                  params: _objectSpread(_objectSpread({}, defaults), params),
                  payload,
                  // Required after adding optional headers to a delete method for the first time
                  // @ts-expect-error
                  headers
                })
              );
            };
          }
        ),
        /***/
        "./upload-http-client.ts": (
          /*!*******************************!*\
            !*** ./upload-http-client.ts ***!
            \*******************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              getUploadHttpClient: () => (
                /* binding */
                getUploadHttpClient
              )
              /* harmony export */
            });
            function getUploadHttpClient(http2, options2) {
              var _ref;
              const {
                hostUpload,
                defaultHostnameUpload,
                timeout
              } = http2.httpClientParams;
              const uploadHttp = http2.cloneWithNewParams({
                host: hostUpload || defaultHostnameUpload,
                // Using client presets, options or 5 minute default timeout
                timeout: (_ref = timeout !== null && timeout !== void 0 ? timeout : options2 === null || options2 === void 0 ? void 0 : options2.uploadTimeout) !== null && _ref !== void 0 ? _ref : 3e5
              });
              return uploadHttp;
            }
          }
        ),
        /***/
        "../node_modules/combined-stream/lib/combined_stream.js": (
          /*!**************************************************************!*\
            !*** ../node_modules/combined-stream/lib/combined_stream.js ***!
            \**************************************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            var util = __webpack_require__2(
              /*! util */
              "util"
            );
            var Stream = __webpack_require__2(
              /*! stream */
              "stream"
            ).Stream;
            var DelayedStream = __webpack_require__2(
              /*! delayed-stream */
              "../node_modules/delayed-stream/lib/delayed_stream.js"
            );
            module3.exports = CombinedStream;
            function CombinedStream() {
              this.writable = false;
              this.readable = true;
              this.dataSize = 0;
              this.maxDataSize = 2 * 1024 * 1024;
              this.pauseStreams = true;
              this._released = false;
              this._streams = [];
              this._currentStream = null;
              this._insideLoop = false;
              this._pendingNext = false;
            }
            util.inherits(CombinedStream, Stream);
            CombinedStream.create = function(options2) {
              var combinedStream = new this();
              options2 = options2 || {};
              for (var option in options2) {
                combinedStream[option] = options2[option];
              }
              return combinedStream;
            };
            CombinedStream.isStreamLike = function(stream) {
              return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
            };
            CombinedStream.prototype.append = function(stream) {
              var isStreamLike = CombinedStream.isStreamLike(stream);
              if (isStreamLike) {
                if (!(stream instanceof DelayedStream)) {
                  var newStream = DelayedStream.create(stream, {
                    maxDataSize: Infinity,
                    pauseStream: this.pauseStreams
                  });
                  stream.on("data", this._checkDataSize.bind(this));
                  stream = newStream;
                }
                this._handleErrors(stream);
                if (this.pauseStreams) {
                  stream.pause();
                }
              }
              this._streams.push(stream);
              return this;
            };
            CombinedStream.prototype.pipe = function(dest, options2) {
              Stream.prototype.pipe.call(this, dest, options2);
              this.resume();
              return dest;
            };
            CombinedStream.prototype._getNext = function() {
              this._currentStream = null;
              if (this._insideLoop) {
                this._pendingNext = true;
                return;
              }
              this._insideLoop = true;
              try {
                do {
                  this._pendingNext = false;
                  this._realGetNext();
                } while (this._pendingNext);
              } finally {
                this._insideLoop = false;
              }
            };
            CombinedStream.prototype._realGetNext = function() {
              var stream = this._streams.shift();
              if (typeof stream == "undefined") {
                this.end();
                return;
              }
              if (typeof stream !== "function") {
                this._pipeNext(stream);
                return;
              }
              var getStream = stream;
              getStream(function(stream2) {
                var isStreamLike = CombinedStream.isStreamLike(stream2);
                if (isStreamLike) {
                  stream2.on("data", this._checkDataSize.bind(this));
                  this._handleErrors(stream2);
                }
                this._pipeNext(stream2);
              }.bind(this));
            };
            CombinedStream.prototype._pipeNext = function(stream) {
              this._currentStream = stream;
              var isStreamLike = CombinedStream.isStreamLike(stream);
              if (isStreamLike) {
                stream.on("end", this._getNext.bind(this));
                stream.pipe(this, { end: false });
                return;
              }
              var value = stream;
              this.write(value);
              this._getNext();
            };
            CombinedStream.prototype._handleErrors = function(stream) {
              var self2 = this;
              stream.on("error", function(err) {
                self2._emitError(err);
              });
            };
            CombinedStream.prototype.write = function(data) {
              this.emit("data", data);
            };
            CombinedStream.prototype.pause = function() {
              if (!this.pauseStreams) {
                return;
              }
              if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function")
                this._currentStream.pause();
              this.emit("pause");
            };
            CombinedStream.prototype.resume = function() {
              if (!this._released) {
                this._released = true;
                this.writable = true;
                this._getNext();
              }
              if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function")
                this._currentStream.resume();
              this.emit("resume");
            };
            CombinedStream.prototype.end = function() {
              this._reset();
              this.emit("end");
            };
            CombinedStream.prototype.destroy = function() {
              this._reset();
              this.emit("close");
            };
            CombinedStream.prototype._reset = function() {
              this.writable = false;
              this._streams = [];
              this._currentStream = null;
            };
            CombinedStream.prototype._checkDataSize = function() {
              this._updateDataSize();
              if (this.dataSize <= this.maxDataSize) {
                return;
              }
              var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
              this._emitError(new Error(message));
            };
            CombinedStream.prototype._updateDataSize = function() {
              this.dataSize = 0;
              var self2 = this;
              this._streams.forEach(function(stream) {
                if (!stream.dataSize) {
                  return;
                }
                self2.dataSize += stream.dataSize;
              });
              if (this._currentStream && this._currentStream.dataSize) {
                this.dataSize += this._currentStream.dataSize;
              }
            };
            CombinedStream.prototype._emitError = function(err) {
              this._reset();
              this.emit("error", err);
            };
          }
        ),
        /***/
        "../node_modules/contentful-sdk-core/dist/index.es-modules.js": (
          /*!********************************************************************!*\
            !*** ../node_modules/contentful-sdk-core/dist/index.es-modules.js ***!
            \********************************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              createHttpClient: () => (
                /* binding */
                createHttpClient
              ),
              /* harmony export */
              createRequestConfig: () => (
                /* binding */
                createRequestConfig
              ),
              /* harmony export */
              enforceObjPath: () => (
                /* binding */
                enforceObjPath
              ),
              /* harmony export */
              errorHandler: () => (
                /* binding */
                errorHandler
              ),
              /* harmony export */
              freezeSys: () => (
                /* binding */
                freezeSys
              ),
              /* harmony export */
              getUserAgentHeader: () => (
                /* binding */
                getUserAgentHeader
              ),
              /* harmony export */
              toPlainObject: () => (
                /* binding */
                toPlainObject
              )
              /* harmony export */
            });
            var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! fast-copy */
              "../node_modules/contentful-sdk-core/node_modules/fast-copy/dist/fast-copy.esm.js"
            );
            var lodash_isstring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! lodash.isstring */
              "../node_modules/lodash.isstring/index.js"
            );
            var lodash_isstring__WEBPACK_IMPORTED_MODULE_1___default = /* @__PURE__ */ __webpack_require__2.n(lodash_isstring__WEBPACK_IMPORTED_MODULE_1__);
            var p_throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! p-throttle */
              "../node_modules/p-throttle/index.js"
            );
            var p_throttle__WEBPACK_IMPORTED_MODULE_2___default = /* @__PURE__ */ __webpack_require__2.n(p_throttle__WEBPACK_IMPORTED_MODULE_2__);
            var lodash_isplainobject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! lodash.isplainobject */
              "../node_modules/lodash.isplainobject/index.js"
            );
            var lodash_isplainobject__WEBPACK_IMPORTED_MODULE_3___default = /* @__PURE__ */ __webpack_require__2.n(lodash_isplainobject__WEBPACK_IMPORTED_MODULE_3__);
            function _iterableToArrayLimit(arr, i) {
              var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
              if (null != _i) {
                var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
                try {
                  if (_x = (_i = _i.call(arr)).next, 0 === i) {
                    if (Object(_i) !== _i)
                      return;
                    _n = false;
                  } else
                    for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
                      ;
                } catch (err) {
                  _d = true, _e = err;
                } finally {
                  try {
                    if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r))
                      return;
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
            }
            function ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                enumerableOnly && (symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                })), keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function _objectSpread2(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = null != arguments[i] ? arguments[i] : {};
                i % 2 ? ownKeys(Object(source), true).forEach(function(key2) {
                  _defineProperty(target, key2, source[key2]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key2) {
                  Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
                });
              }
              return target;
            }
            function _typeof(obj) {
              "@babel/helpers - typeof";
              return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                return typeof obj2;
              } : function(obj2) {
                return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              }, _typeof(obj);
            }
            function _wrapRegExp() {
              _wrapRegExp = function(re, groups) {
                return new BabelRegExp(re, void 0, groups);
              };
              var _super = RegExp.prototype, _groups = /* @__PURE__ */ new WeakMap();
              function BabelRegExp(re, flags, groups) {
                var _this = new RegExp(re, flags);
                return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);
              }
              function buildGroups(result, re) {
                var g = _groups.get(re);
                return Object.keys(g).reduce(function(groups, name) {
                  var i = g[name];
                  if ("number" == typeof i)
                    groups[name] = result[i];
                  else {
                    for (var k = 0; void 0 === result[i[k]] && k + 1 < i.length; )
                      k++;
                    groups[name] = result[i[k]];
                  }
                  return groups;
                }, /* @__PURE__ */ Object.create(null));
              }
              return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function(str) {
                var result = _super.exec.call(this, str);
                if (result) {
                  result.groups = buildGroups(result, this);
                  var indices = result.indices;
                  indices && (indices.groups = buildGroups(indices, this));
                }
                return result;
              }, BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {
                if ("string" == typeof substitution) {
                  var groups = _groups.get(this);
                  return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function(_, name) {
                    var group = groups[name];
                    return "$" + (Array.isArray(group) ? group.join("$") : group);
                  }));
                }
                if ("function" == typeof substitution) {
                  var _this = this;
                  return _super[Symbol.replace].call(this, str, function() {
                    var args = arguments;
                    return "object" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);
                  });
                }
                return _super[Symbol.replace].call(this, str, substitution);
              }, _wrapRegExp.apply(this, arguments);
            }
            function _defineProperty(obj, key2, value) {
              key2 = _toPropertyKey(key2);
              if (key2 in obj) {
                Object.defineProperty(obj, key2, {
                  value,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  writable: true,
                  configurable: true
                }
              });
              Object.defineProperty(subClass, "prototype", {
                writable: false
              });
              if (superClass)
                _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            function _slicedToArray(arr, i) {
              return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
            }
            function _arrayWithHoles(arr) {
              if (Array.isArray(arr))
                return arr;
            }
            function _unsupportedIterableToArray(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray(o, minLen);
            }
            function _arrayLikeToArray(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++)
                arr2[i] = arr[i];
              return arr2;
            }
            function _nonIterableRest() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _createForOfIteratorHelper(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function() {
                  };
                  return {
                    s: F,
                    n: function() {
                      if (i >= o.length)
                        return {
                          done: true
                        };
                      return {
                        done: false,
                        value: o[i++]
                      };
                    },
                    e: function(e) {
                      throw e;
                    },
                    f: F
                  };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return {
                s: function() {
                  it = it.call(o);
                },
                n: function() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                },
                e: function(e) {
                  didErr = true;
                  err = e;
                },
                f: function() {
                  try {
                    if (!normalCompletion && it.return != null)
                      it.return();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                }
              };
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function _toPropertyKey(arg) {
              var key2 = _toPrimitive(arg, "string");
              return typeof key2 === "symbol" ? key2 : String(key2);
            }
            function asyncToken(instance, getToken) {
              instance.interceptors.request.use(function(config) {
                return getToken().then(function(accessToken) {
                  config.headers.set("Authorization", "Bearer ".concat(accessToken));
                  return config;
                });
              });
            }
            function isNode() {
              return typeof process !== "undefined" && !process.browser;
            }
            function isReactNative() {
              return typeof window !== "undefined" && "navigator" in window && "product" in window.navigator && window.navigator.product === "ReactNative";
            }
            function getNodeVersion() {
              return process.versions && process.versions.node ? "v".concat(process.versions.node) : process.version;
            }
            function getWindow() {
              return window;
            }
            function noop2() {
              return void 0;
            }
            var delay = function delay2(ms) {
              return new Promise(function(resolve2) {
                setTimeout(resolve2, ms);
              });
            };
            var defaultWait = function defaultWait2(attempts) {
              return Math.pow(Math.SQRT2, attempts);
            };
            function rateLimit(instance) {
              var maxRetry = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
              var _instance$defaults = instance.defaults, _instance$defaults$re = _instance$defaults.responseLogger, responseLogger = _instance$defaults$re === void 0 ? noop2 : _instance$defaults$re, _instance$defaults$re2 = _instance$defaults.requestLogger, requestLogger = _instance$defaults$re2 === void 0 ? noop2 : _instance$defaults$re2;
              instance.interceptors.request.use(function(config) {
                requestLogger(config);
                return config;
              }, function(error3) {
                requestLogger(error3);
                return Promise.reject(error3);
              });
              instance.interceptors.response.use(function(response) {
                responseLogger(response);
                return response;
              }, function(error3) {
                var response = error3.response;
                var config = error3.config;
                responseLogger(error3);
                if (!config || !instance.defaults.retryOnError) {
                  return Promise.reject(error3);
                }
                var doneAttempts = config.attempts || 1;
                if (doneAttempts > maxRetry) {
                  error3.attempts = config.attempts;
                  return Promise.reject(error3);
                }
                var retryErrorType = null;
                var wait = defaultWait(doneAttempts);
                if (!response) {
                  retryErrorType = "Connection";
                } else if (response.status >= 500 && response.status < 600) {
                  retryErrorType = "Server ".concat(response.status);
                } else if (response.status === 429) {
                  retryErrorType = "Rate limit";
                  if (response.headers && error3.response.headers["x-contentful-ratelimit-reset"]) {
                    wait = response.headers["x-contentful-ratelimit-reset"];
                  }
                }
                if (retryErrorType) {
                  wait = Math.floor(wait * 1e3 + Math.random() * 200 + 500);
                  instance.defaults.logHandler("warning", "".concat(retryErrorType, " error occurred. Waiting for ").concat(wait, " ms before retrying..."));
                  config.attempts = doneAttempts + 1;
                  delete config.httpAgent;
                  delete config.httpsAgent;
                  return delay(wait).then(function() {
                    return instance(config);
                  });
                }
                return Promise.reject(error3);
              });
            }
            var PERCENTAGE_REGEX = /* @__PURE__ */ _wrapRegExp(/(\d+)(%)/, {
              value: 1
            });
            function calculateLimit(type) {
              var max = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 7;
              var limit = max;
              if (PERCENTAGE_REGEX.test(type)) {
                var _type$match;
                var groups = (_type$match = type.match(PERCENTAGE_REGEX)) === null || _type$match === void 0 ? void 0 : _type$match.groups;
                if (groups && groups.value) {
                  var percentage = parseInt(groups.value) / 100;
                  limit = Math.round(max * percentage);
                }
              }
              return Math.min(30, Math.max(1, limit));
            }
            function createThrottle(limit, logger) {
              logger("info", "Throttle request to ".concat(limit, "/s"));
              return p_throttle__WEBPACK_IMPORTED_MODULE_2___default()({
                limit,
                interval: 1e3,
                strict: false
              });
            }
            var rateLimitThrottle = function(axiosInstance) {
              var type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "auto";
              var _axiosInstance$defaul = axiosInstance.defaults.logHandler, logHandler = _axiosInstance$defaul === void 0 ? noop2 : _axiosInstance$defaul;
              var limit = lodash_isstring__WEBPACK_IMPORTED_MODULE_1___default()(type) ? calculateLimit(type) : calculateLimit("auto", type);
              var throttle = createThrottle(limit, logHandler);
              var isCalculated = false;
              var requestInterceptorId = axiosInstance.interceptors.request.use(function(config) {
                return throttle(function() {
                  return config;
                })();
              }, function(error3) {
                return Promise.reject(error3);
              });
              var responseInterceptorId = axiosInstance.interceptors.response.use(function(response) {
                if (!isCalculated && lodash_isstring__WEBPACK_IMPORTED_MODULE_1___default()(type) && (type === "auto" || PERCENTAGE_REGEX.test(type)) && response.headers && response.headers["x-contentful-ratelimit-second-limit"]) {
                  var rawLimit = parseInt(response.headers["x-contentful-ratelimit-second-limit"]);
                  var nextLimit = calculateLimit(type, rawLimit);
                  if (nextLimit !== limit) {
                    if (requestInterceptorId) {
                      axiosInstance.interceptors.request.eject(requestInterceptorId);
                    }
                    limit = nextLimit;
                    throttle = createThrottle(nextLimit, logHandler);
                    requestInterceptorId = axiosInstance.interceptors.request.use(function(config) {
                      return throttle(function() {
                        return config;
                      })();
                    }, function(error3) {
                      return Promise.reject(error3);
                    });
                  }
                  isCalculated = true;
                }
                return response;
              }, function(error3) {
                return Promise.reject(error3);
              });
              return function() {
                axiosInstance.interceptors.request.eject(requestInterceptorId);
                axiosInstance.interceptors.response.eject(responseInterceptorId);
              };
            };
            var HOST_REGEX = /^(?!\w+:\/\/)([^\s:]+\.?[^\s:]+)(?::(\d+))?(?!:)$/;
            function createHttpClient(axios, options2) {
              var defaultConfig = {
                insecure: false,
                retryOnError: true,
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                logHandler: function logHandler(level, data) {
                  if (level === "error" && data) {
                    var title = [data.name, data.message].filter(function(a) {
                      return a;
                    }).join(" - ");
                    console.error("[error] ".concat(title));
                    console.error(data);
                    return;
                  }
                  console.log("[".concat(level, "] ").concat(data));
                },
                // Passed to axios
                headers: {},
                httpAgent: false,
                httpsAgent: false,
                timeout: 3e4,
                throttle: 0,
                basePath: "",
                adapter: void 0,
                maxContentLength: 1073741824,
                // 1GB
                maxBodyLength: 1073741824
                // 1GB
              };
              var config = _objectSpread2(_objectSpread2({}, defaultConfig), options2);
              if (!config.accessToken) {
                var missingAccessTokenError = new TypeError("Expected parameter accessToken");
                config.logHandler("error", missingAccessTokenError);
                throw missingAccessTokenError;
              }
              var protocol = config.insecure ? "http" : "https";
              var space = config.space ? "".concat(config.space, "/") : "";
              var hostname = config.defaultHostname;
              var port = config.insecure ? 80 : 443;
              if (config.host && HOST_REGEX.test(config.host)) {
                var parsed = config.host.split(":");
                if (parsed.length === 2) {
                  var _parsed = _slicedToArray(parsed, 2);
                  hostname = _parsed[0];
                  port = _parsed[1];
                } else {
                  hostname = parsed[0];
                }
              }
              if (config.basePath) {
                config.basePath = "/".concat(config.basePath.split("/").filter(Boolean).join("/"));
              }
              var baseURL = options2.baseURL || "".concat(protocol, "://").concat(hostname, ":").concat(port).concat(config.basePath, "/spaces/").concat(space);
              if (!config.headers.Authorization && typeof config.accessToken !== "function") {
                config.headers.Authorization = "Bearer " + config.accessToken;
              }
              var axiosOptions = {
                // Axios
                baseURL,
                headers: config.headers,
                httpAgent: config.httpAgent,
                httpsAgent: config.httpsAgent,
                proxy: config.proxy,
                timeout: config.timeout,
                adapter: config.adapter,
                maxContentLength: config.maxContentLength,
                maxBodyLength: config.maxBodyLength,
                // Contentful
                logHandler: config.logHandler,
                responseLogger: config.responseLogger,
                requestLogger: config.requestLogger,
                retryOnError: config.retryOnError
              };
              var instance = axios.create(axiosOptions);
              instance.httpClientParams = options2;
              instance.cloneWithNewParams = function(newParams) {
                return createHttpClient(axios, _objectSpread2(_objectSpread2({}, (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(options2)), newParams));
              };
              if (config.onBeforeRequest) {
                instance.interceptors.request.use(config.onBeforeRequest);
              }
              if (typeof config.accessToken === "function") {
                asyncToken(instance, config.accessToken);
              }
              if (config.throttle) {
                rateLimitThrottle(instance, config.throttle);
              }
              rateLimit(instance, config.retryLimit);
              if (config.onError) {
                instance.interceptors.response.use(function(response) {
                  return response;
                }, config.onError);
              }
              return instance;
            }
            function createRequestConfig(_ref) {
              var query5 = _ref.query;
              var config = {};
              delete query5.resolveLinks;
              config.params = (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(query5);
              return config;
            }
            function enforceObjPath(obj, path2) {
              if (!(path2 in obj)) {
                var err = new Error();
                err.name = "PropertyMissing";
                err.message = "Required property ".concat(path2, " missing from:\n\n").concat(JSON.stringify(obj), "\n\n");
                throw err;
              }
              return true;
            }
            function deepFreeze(object) {
              var propNames = Object.getOwnPropertyNames(object);
              var _iterator = _createForOfIteratorHelper(propNames), _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var name = _step.value;
                  var value = object[name];
                  if (value && _typeof(value) === "object") {
                    deepFreeze(value);
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              return Object.freeze(object);
            }
            function freezeSys(obj) {
              deepFreeze(obj.sys || {});
              return obj;
            }
            function getBrowserOS() {
              var win = getWindow();
              if (!win) {
                return null;
              }
              var userAgent = win.navigator.userAgent;
              var platform = win.navigator.platform;
              var macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K"];
              var windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"];
              var iosPlatforms = ["iPhone", "iPad", "iPod"];
              if (macosPlatforms.indexOf(platform) !== -1) {
                return "macOS";
              } else if (iosPlatforms.indexOf(platform) !== -1) {
                return "iOS";
              } else if (windowsPlatforms.indexOf(platform) !== -1) {
                return "Windows";
              } else if (/Android/.test(userAgent)) {
                return "Android";
              } else if (/Linux/.test(platform)) {
                return "Linux";
              }
              return null;
            }
            function getNodeOS() {
              var platform = process.platform || "linux";
              var version = process.version || "0.0.0";
              var platformMap = {
                android: "Android",
                aix: "Linux",
                darwin: "macOS",
                freebsd: "Linux",
                linux: "Linux",
                openbsd: "Linux",
                sunos: "Linux",
                win32: "Windows"
              };
              if (platform in platformMap) {
                return "".concat(platformMap[platform] || "Linux", "/").concat(version);
              }
              return null;
            }
            function getUserAgentHeader(sdk, application, integration, feature) {
              var headerParts = [];
              if (application) {
                headerParts.push("app ".concat(application));
              }
              if (integration) {
                headerParts.push("integration ".concat(integration));
              }
              if (feature) {
                headerParts.push("feature " + feature);
              }
              headerParts.push("sdk ".concat(sdk));
              var platform = null;
              try {
                if (isReactNative()) {
                  platform = getBrowserOS();
                  headerParts.push("platform ReactNative");
                } else if (isNode()) {
                  platform = getNodeOS();
                  headerParts.push("platform node.js/".concat(getNodeVersion()));
                } else {
                  platform = getBrowserOS();
                  headerParts.push("platform browser");
                }
              } catch (e) {
                platform = null;
              }
              if (platform) {
                headerParts.push("os ".concat(platform));
              }
              return "".concat(headerParts.filter(function(item) {
                return item !== "";
              }).join("; "), ";");
            }
            function toPlainObject(data) {
              return Object.defineProperty(data, "toPlainObject", {
                enumerable: false,
                configurable: false,
                writable: false,
                value: function value() {
                  return (0, fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(this);
                }
              });
            }
            function errorHandler(errorResponse) {
              var config = errorResponse.config, response = errorResponse.response;
              var errorName;
              if (config && config.headers && config.headers["Authorization"]) {
                var token = "...".concat(config.headers["Authorization"].toString().substr(-5));
                config.headers["Authorization"] = "Bearer ".concat(token);
              }
              if (!lodash_isplainobject__WEBPACK_IMPORTED_MODULE_3___default()(response) || !lodash_isplainobject__WEBPACK_IMPORTED_MODULE_3___default()(config)) {
                throw errorResponse;
              }
              var data = response === null || response === void 0 ? void 0 : response.data;
              var errorData = {
                status: response === null || response === void 0 ? void 0 : response.status,
                statusText: response === null || response === void 0 ? void 0 : response.statusText,
                message: "",
                details: {}
              };
              if (config && lodash_isplainobject__WEBPACK_IMPORTED_MODULE_3___default()(config)) {
                errorData.request = {
                  url: config.url,
                  headers: config.headers,
                  method: config.method,
                  payloadData: config.data
                };
              }
              if (data && _typeof(data) === "object") {
                var _data$sys;
                if ("requestId" in data) {
                  errorData.requestId = data.requestId || "UNKNOWN";
                }
                if ("message" in data) {
                  errorData.message = data.message || "";
                }
                if ("details" in data) {
                  errorData.details = data.details || {};
                }
                errorName = (_data$sys = data.sys) === null || _data$sys === void 0 ? void 0 : _data$sys.id;
              }
              var error3 = new Error();
              error3.name = errorName && errorName !== "Unknown" ? errorName : "".concat(response === null || response === void 0 ? void 0 : response.status, " ").concat(response === null || response === void 0 ? void 0 : response.statusText);
              try {
                error3.message = JSON.stringify(errorData, null, "  ");
              } catch (_unused) {
                var _errorData$message;
                error3.message = (_errorData$message = errorData === null || errorData === void 0 ? void 0 : errorData.message) !== null && _errorData$message !== void 0 ? _errorData$message : "";
              }
              throw error3;
            }
          }
        ),
        /***/
        "../node_modules/contentful-sdk-core/node_modules/fast-copy/dist/fast-copy.esm.js": (
          /*!****************************************************************************************!*\
            !*** ../node_modules/contentful-sdk-core/node_modules/fast-copy/dist/fast-copy.esm.js ***!
            \****************************************************************************************/
          /***/
          (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                copy
              )
              /* harmony export */
            });
            var toStringFunction = Function.prototype.toString;
            var create = Object.create, defineProperty = Object.defineProperty, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols, getPrototypeOf$1 = Object.getPrototypeOf;
            var _a = Object.prototype, hasOwnProperty = _a.hasOwnProperty, propertyIsEnumerable = _a.propertyIsEnumerable;
            var SYMBOL_PROPERTIES = typeof getOwnPropertySymbols === "function";
            var WEAK_MAP = typeof WeakMap === "function";
            var createCache = function() {
              if (WEAK_MAP) {
                return function() {
                  return /* @__PURE__ */ new WeakMap();
                };
              }
              var Cache = (
                /** @class */
                function() {
                  function Cache2() {
                    this._keys = [];
                    this._values = [];
                  }
                  Cache2.prototype.has = function(key2) {
                    return !!~this._keys.indexOf(key2);
                  };
                  Cache2.prototype.get = function(key2) {
                    return this._values[this._keys.indexOf(key2)];
                  };
                  Cache2.prototype.set = function(key2, value) {
                    this._keys.push(key2);
                    this._values.push(value);
                  };
                  return Cache2;
                }()
              );
              return function() {
                return new Cache();
              };
            }();
            var getCleanClone = function(object, realm) {
              var prototype = object.__proto__ || getPrototypeOf$1(object);
              if (!prototype) {
                return create(null);
              }
              var Constructor = prototype.constructor;
              if (Constructor === realm.Object) {
                return prototype === realm.Object.prototype ? {} : create(prototype);
              }
              if (~toStringFunction.call(Constructor).indexOf("[native code]")) {
                try {
                  return new Constructor();
                } catch (_a2) {
                }
              }
              return create(prototype);
            };
            var getObjectCloneLoose = function(object, realm, handleCopy, cache) {
              var clone = getCleanClone(object, realm);
              cache.set(object, clone);
              for (var key2 in object) {
                if (hasOwnProperty.call(object, key2)) {
                  clone[key2] = handleCopy(object[key2], cache);
                }
              }
              if (SYMBOL_PROPERTIES) {
                var symbols = getOwnPropertySymbols(object);
                for (var index13 = 0, length_1 = symbols.length, symbol = void 0; index13 < length_1; ++index13) {
                  symbol = symbols[index13];
                  if (propertyIsEnumerable.call(object, symbol)) {
                    clone[symbol] = handleCopy(object[symbol], cache);
                  }
                }
              }
              return clone;
            };
            var getObjectCloneStrict = function(object, realm, handleCopy, cache) {
              var clone = getCleanClone(object, realm);
              cache.set(object, clone);
              var properties = SYMBOL_PROPERTIES ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object)) : getOwnPropertyNames(object);
              for (var index13 = 0, length_2 = properties.length, property = void 0, descriptor = void 0; index13 < length_2; ++index13) {
                property = properties[index13];
                if (property !== "callee" && property !== "caller") {
                  descriptor = getOwnPropertyDescriptor(object, property);
                  if (descriptor) {
                    if (!descriptor.get && !descriptor.set) {
                      descriptor.value = handleCopy(object[property], cache);
                    }
                    try {
                      defineProperty(clone, property, descriptor);
                    } catch (error3) {
                      clone[property] = descriptor.value;
                    }
                  } else {
                    clone[property] = handleCopy(object[property], cache);
                  }
                }
              }
              return clone;
            };
            var getRegExpFlags = function(regExp) {
              var flags = "";
              if (regExp.global) {
                flags += "g";
              }
              if (regExp.ignoreCase) {
                flags += "i";
              }
              if (regExp.multiline) {
                flags += "m";
              }
              if (regExp.unicode) {
                flags += "u";
              }
              if (regExp.sticky) {
                flags += "y";
              }
              return flags;
            };
            var isArray = Array.isArray;
            var getPrototypeOf = Object.getPrototypeOf;
            var GLOBAL_THIS = function() {
              if (typeof globalThis !== "undefined") {
                return globalThis;
              }
              if (typeof self !== "undefined") {
                return self;
              }
              if (typeof window !== "undefined") {
                return window;
              }
              if (typeof global !== "undefined") {
                return global;
              }
              if (console && console.error) {
                console.error('Unable to locate global object, returning "this".');
              }
              return this;
            }();
            function copy(value, options2) {
              var isStrict = !!(options2 && options2.isStrict);
              var realm = options2 && options2.realm || GLOBAL_THIS;
              var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;
              var handleCopy = function(value2, cache) {
                if (!value2 || typeof value2 !== "object") {
                  return value2;
                }
                if (cache.has(value2)) {
                  return cache.get(value2);
                }
                var prototype = value2.__proto__ || getPrototypeOf(value2);
                var Constructor = prototype && prototype.constructor;
                if (!Constructor || Constructor === realm.Object) {
                  return getObjectClone(value2, realm, handleCopy, cache);
                }
                var clone;
                if (isArray(value2)) {
                  if (isStrict) {
                    return getObjectCloneStrict(value2, realm, handleCopy, cache);
                  }
                  clone = new Constructor();
                  cache.set(value2, clone);
                  for (var index13 = 0, length_1 = value2.length; index13 < length_1; ++index13) {
                    clone[index13] = handleCopy(value2[index13], cache);
                  }
                  return clone;
                }
                if (value2 instanceof realm.Date) {
                  return new Constructor(value2.getTime());
                }
                if (value2 instanceof realm.RegExp) {
                  clone = new Constructor(value2.source, value2.flags || getRegExpFlags(value2));
                  clone.lastIndex = value2.lastIndex;
                  return clone;
                }
                if (realm.Map && value2 instanceof realm.Map) {
                  clone = new Constructor();
                  cache.set(value2, clone);
                  value2.forEach(function(value3, key2) {
                    clone.set(key2, handleCopy(value3, cache));
                  });
                  return clone;
                }
                if (realm.Set && value2 instanceof realm.Set) {
                  clone = new Constructor();
                  cache.set(value2, clone);
                  value2.forEach(function(value3) {
                    clone.add(handleCopy(value3, cache));
                  });
                  return clone;
                }
                if (realm.Blob && value2 instanceof realm.Blob) {
                  return value2.slice(0, value2.size, value2.type);
                }
                if (realm.Buffer && realm.Buffer.isBuffer(value2)) {
                  clone = realm.Buffer.allocUnsafe ? realm.Buffer.allocUnsafe(value2.length) : new Constructor(value2.length);
                  cache.set(value2, clone);
                  value2.copy(clone);
                  return clone;
                }
                if (realm.ArrayBuffer) {
                  if (realm.ArrayBuffer.isView(value2)) {
                    clone = new Constructor(value2.buffer.slice(0));
                    cache.set(value2, clone);
                    return clone;
                  }
                  if (value2 instanceof realm.ArrayBuffer) {
                    clone = value2.slice(0);
                    cache.set(value2, clone);
                    return clone;
                  }
                }
                if (
                  // promise-like
                  typeof value2.then === "function" || // errors
                  value2 instanceof Error || // weakmaps
                  realm.WeakMap && value2 instanceof realm.WeakMap || // weaksets
                  realm.WeakSet && value2 instanceof realm.WeakSet
                ) {
                  return value2;
                }
                return getObjectClone(value2, realm, handleCopy, cache);
              };
              return handleCopy(value, createCache());
            }
            copy.default = copy;
            copy.strict = function strictCopy(value, options2) {
              return copy(value, {
                isStrict: true,
                realm: options2 ? options2.realm : void 0
              });
            };
          }
        ),
        /***/
        "../node_modules/debug/node_modules/ms/index.js": (
          /*!******************************************************!*\
            !*** ../node_modules/debug/node_modules/ms/index.js ***!
            \******************************************************/
          /***/
          (module3) => {
            var s2 = 1e3;
            var m = s2 * 60;
            var h = m * 60;
            var d = h * 24;
            var w = d * 7;
            var y = d * 365.25;
            module3.exports = function(val, options2) {
              options2 = options2 || {};
              var type = typeof val;
              if (type === "string" && val.length > 0) {
                return parse5(val);
              } else if (type === "number" && isFinite(val)) {
                return options2.long ? fmtLong(val) : fmtShort(val);
              }
              throw new Error(
                "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
              );
            };
            function parse5(str) {
              str = String(str);
              if (str.length > 100) {
                return;
              }
              var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
                str
              );
              if (!match) {
                return;
              }
              var n = parseFloat(match[1]);
              var type = (match[2] || "ms").toLowerCase();
              switch (type) {
                case "years":
                case "year":
                case "yrs":
                case "yr":
                case "y":
                  return n * y;
                case "weeks":
                case "week":
                case "w":
                  return n * w;
                case "days":
                case "day":
                case "d":
                  return n * d;
                case "hours":
                case "hour":
                case "hrs":
                case "hr":
                case "h":
                  return n * h;
                case "minutes":
                case "minute":
                case "mins":
                case "min":
                case "m":
                  return n * m;
                case "seconds":
                case "second":
                case "secs":
                case "sec":
                case "s":
                  return n * s2;
                case "milliseconds":
                case "millisecond":
                case "msecs":
                case "msec":
                case "ms":
                  return n;
                default:
                  return void 0;
              }
            }
            function fmtShort(ms) {
              var msAbs = Math.abs(ms);
              if (msAbs >= d) {
                return Math.round(ms / d) + "d";
              }
              if (msAbs >= h) {
                return Math.round(ms / h) + "h";
              }
              if (msAbs >= m) {
                return Math.round(ms / m) + "m";
              }
              if (msAbs >= s2) {
                return Math.round(ms / s2) + "s";
              }
              return ms + "ms";
            }
            function fmtLong(ms) {
              var msAbs = Math.abs(ms);
              if (msAbs >= d) {
                return plural(ms, msAbs, d, "day");
              }
              if (msAbs >= h) {
                return plural(ms, msAbs, h, "hour");
              }
              if (msAbs >= m) {
                return plural(ms, msAbs, m, "minute");
              }
              if (msAbs >= s2) {
                return plural(ms, msAbs, s2, "second");
              }
              return ms + " ms";
            }
            function plural(ms, msAbs, n, name) {
              var isPlural = msAbs >= n * 1.5;
              return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
            }
          }
        ),
        /***/
        "../node_modules/debug/src/browser.js": (
          /*!********************************************!*\
            !*** ../node_modules/debug/src/browser.js ***!
            \********************************************/
          /***/
          (module3, exports2, __webpack_require__2) => {
            "use strict";
            function _typeof(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof2(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof = function _typeof2(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof(obj);
            }
            exports2.log = log;
            exports2.formatArgs = formatArgs;
            exports2.save = save;
            exports2.load = load12;
            exports2.useColors = useColors;
            exports2.storage = localstorage();
            exports2.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
            function useColors() {
              if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
                return true;
              }
              if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
                return false;
              }
              return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
              typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
              // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
              typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
              typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
            }
            function formatArgs(args) {
              args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module3.exports.humanize(this.diff);
              if (!this.useColors) {
                return;
              }
              var c = "color: " + this.color;
              args.splice(1, 0, c, "color: inherit");
              var index13 = 0;
              var lastC = 0;
              args[0].replace(/%[a-zA-Z%]/g, function(match) {
                if (match === "%%") {
                  return;
                }
                index13++;
                if (match === "%c") {
                  lastC = index13;
                }
              });
              args.splice(lastC, 0, c);
            }
            function log() {
              var _console;
              return (typeof console === "undefined" ? "undefined" : _typeof(console)) === "object" && console.log && (_console = console).log.apply(_console, arguments);
            }
            function save(namespaces) {
              try {
                if (namespaces) {
                  exports2.storage.setItem("debug", namespaces);
                } else {
                  exports2.storage.removeItem("debug");
                }
              } catch (error3) {
              }
            }
            function load12() {
              var r;
              try {
                r = exports2.storage.getItem("debug");
              } catch (error3) {
              }
              if (!r && typeof process !== "undefined" && "env" in process) {
                r = process.env.DEBUG;
              }
              return r;
            }
            function localstorage() {
              try {
                return localStorage;
              } catch (error3) {
              }
            }
            module3.exports = __webpack_require__2(
              /*! ./common */
              "../node_modules/debug/src/common.js"
            )(exports2);
            var formatters = module3.exports.formatters;
            formatters.j = function(v) {
              try {
                return JSON.stringify(v);
              } catch (error3) {
                return "[UnexpectedJSONParseError]: " + error3.message;
              }
            };
          }
        ),
        /***/
        "../node_modules/debug/src/common.js": (
          /*!*******************************************!*\
            !*** ../node_modules/debug/src/common.js ***!
            \*******************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            "use strict";
            function setup(env) {
              createDebug.debug = createDebug;
              createDebug.default = createDebug;
              createDebug.coerce = coerce;
              createDebug.disable = disable;
              createDebug.enable = enable;
              createDebug.enabled = enabled;
              createDebug.humanize = __webpack_require__2(
                /*! ms */
                "../node_modules/debug/node_modules/ms/index.js"
              );
              Object.keys(env).forEach(function(key2) {
                createDebug[key2] = env[key2];
              });
              createDebug.instances = [];
              createDebug.names = [];
              createDebug.skips = [];
              createDebug.formatters = {};
              function selectColor(namespace) {
                var hash2 = 0;
                for (var i = 0; i < namespace.length; i++) {
                  hash2 = (hash2 << 5) - hash2 + namespace.charCodeAt(i);
                  hash2 |= 0;
                }
                return createDebug.colors[Math.abs(hash2) % createDebug.colors.length];
              }
              createDebug.selectColor = selectColor;
              function createDebug(namespace) {
                var prevTime;
                function debug() {
                  if (!debug.enabled) {
                    return;
                  }
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }
                  var self2 = debug;
                  var curr = Number(/* @__PURE__ */ new Date());
                  var ms = curr - (prevTime || curr);
                  self2.diff = ms;
                  self2.prev = prevTime;
                  self2.curr = curr;
                  prevTime = curr;
                  args[0] = createDebug.coerce(args[0]);
                  if (typeof args[0] !== "string") {
                    args.unshift("%O");
                  }
                  var index13 = 0;
                  args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
                    if (match === "%%") {
                      return match;
                    }
                    index13++;
                    var formatter = createDebug.formatters[format];
                    if (typeof formatter === "function") {
                      var val = args[index13];
                      match = formatter.call(self2, val);
                      args.splice(index13, 1);
                      index13--;
                    }
                    return match;
                  });
                  createDebug.formatArgs.call(self2, args);
                  var logFn = self2.log || createDebug.log;
                  logFn.apply(self2, args);
                }
                debug.namespace = namespace;
                debug.enabled = createDebug.enabled(namespace);
                debug.useColors = createDebug.useColors();
                debug.color = selectColor(namespace);
                debug.destroy = destroy;
                debug.extend = extend;
                if (typeof createDebug.init === "function") {
                  createDebug.init(debug);
                }
                createDebug.instances.push(debug);
                return debug;
              }
              function destroy() {
                var index13 = createDebug.instances.indexOf(this);
                if (index13 !== -1) {
                  createDebug.instances.splice(index13, 1);
                  return true;
                }
                return false;
              }
              function extend(namespace, delimiter) {
                return createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
              }
              function enable(namespaces) {
                createDebug.save(namespaces);
                createDebug.names = [];
                createDebug.skips = [];
                var i;
                var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
                var len = split.length;
                for (i = 0; i < len; i++) {
                  if (!split[i]) {
                    continue;
                  }
                  namespaces = split[i].replace(/\*/g, ".*?");
                  if (namespaces[0] === "-") {
                    createDebug.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
                  } else {
                    createDebug.names.push(new RegExp("^" + namespaces + "$"));
                  }
                }
                for (i = 0; i < createDebug.instances.length; i++) {
                  var instance = createDebug.instances[i];
                  instance.enabled = createDebug.enabled(instance.namespace);
                }
              }
              function disable() {
                createDebug.enable("");
              }
              function enabled(name) {
                if (name[name.length - 1] === "*") {
                  return true;
                }
                var i;
                var len;
                for (i = 0, len = createDebug.skips.length; i < len; i++) {
                  if (createDebug.skips[i].test(name)) {
                    return false;
                  }
                }
                for (i = 0, len = createDebug.names.length; i < len; i++) {
                  if (createDebug.names[i].test(name)) {
                    return true;
                  }
                }
                return false;
              }
              function coerce(val) {
                if (val instanceof Error) {
                  return val.stack || val.message;
                }
                return val;
              }
              createDebug.enable(createDebug.load());
              return createDebug;
            }
            module3.exports = setup;
          }
        ),
        /***/
        "../node_modules/debug/src/index.js": (
          /*!******************************************!*\
            !*** ../node_modules/debug/src/index.js ***!
            \******************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            "use strict";
            if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
              module3.exports = __webpack_require__2(
                /*! ./browser.js */
                "../node_modules/debug/src/browser.js"
              );
            } else {
              module3.exports = __webpack_require__2(
                /*! ./node.js */
                "../node_modules/debug/src/node.js"
              );
            }
          }
        ),
        /***/
        "../node_modules/debug/src/node.js": (
          /*!*****************************************!*\
            !*** ../node_modules/debug/src/node.js ***!
            \*****************************************/
          /***/
          (module3, exports2, __webpack_require__2) => {
            "use strict";
            var tty = __webpack_require__2(
              /*! tty */
              "tty"
            );
            var util = __webpack_require__2(
              /*! util */
              "util"
            );
            exports2.init = init2;
            exports2.log = log;
            exports2.formatArgs = formatArgs;
            exports2.save = save;
            exports2.load = load12;
            exports2.useColors = useColors;
            exports2.colors = [6, 2, 3, 4, 5, 1];
            try {
              var supportsColor = __webpack_require__2(
                /*! supports-color */
                "../node_modules/supports-color/index.js"
              );
              if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
                exports2.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
              }
            } catch (error3) {
            }
            exports2.inspectOpts = Object.keys(process.env).filter(function(key2) {
              return /^debug_/i.test(key2);
            }).reduce(function(obj, key2) {
              var prop = key2.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
                return k.toUpperCase();
              });
              var val = process.env[key2];
              if (/^(yes|on|true|enabled)$/i.test(val)) {
                val = true;
              } else if (/^(no|off|false|disabled)$/i.test(val)) {
                val = false;
              } else if (val === "null") {
                val = null;
              } else {
                val = Number(val);
              }
              obj[prop] = val;
              return obj;
            }, {});
            function useColors() {
              return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
            }
            function formatArgs(args) {
              var name = this.namespace, useColors2 = this.useColors;
              if (useColors2) {
                var c = this.color;
                var colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
                var prefix = "  ".concat(colorCode, ";1m").concat(name, " \x1B[0m");
                args[0] = prefix + args[0].split("\n").join("\n" + prefix);
                args.push(colorCode + "m+" + module3.exports.humanize(this.diff) + "\x1B[0m");
              } else {
                args[0] = getDate() + name + " " + args[0];
              }
            }
            function getDate() {
              if (exports2.inspectOpts.hideDate) {
                return "";
              }
              return (/* @__PURE__ */ new Date()).toISOString() + " ";
            }
            function log() {
              return process.stderr.write(util.format.apply(util, arguments) + "\n");
            }
            function save(namespaces) {
              if (namespaces) {
                process.env.DEBUG = namespaces;
              } else {
                delete process.env.DEBUG;
              }
            }
            function load12() {
              return process.env.DEBUG;
            }
            function init2(debug) {
              debug.inspectOpts = {};
              var keys = Object.keys(exports2.inspectOpts);
              for (var i = 0; i < keys.length; i++) {
                debug.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
              }
            }
            module3.exports = __webpack_require__2(
              /*! ./common */
              "../node_modules/debug/src/common.js"
            )(exports2);
            var formatters = module3.exports.formatters;
            formatters.o = function(v) {
              this.inspectOpts.colors = this.useColors;
              return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
                return str.trim();
              }).join(" ");
            };
            formatters.O = function(v) {
              this.inspectOpts.colors = this.useColors;
              return util.inspect(v, this.inspectOpts);
            };
          }
        ),
        /***/
        "../node_modules/delayed-stream/lib/delayed_stream.js": (
          /*!************************************************************!*\
            !*** ../node_modules/delayed-stream/lib/delayed_stream.js ***!
            \************************************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            var Stream = __webpack_require__2(
              /*! stream */
              "stream"
            ).Stream;
            var util = __webpack_require__2(
              /*! util */
              "util"
            );
            module3.exports = DelayedStream;
            function DelayedStream() {
              this.source = null;
              this.dataSize = 0;
              this.maxDataSize = 1024 * 1024;
              this.pauseStream = true;
              this._maxDataSizeExceeded = false;
              this._released = false;
              this._bufferedEvents = [];
            }
            util.inherits(DelayedStream, Stream);
            DelayedStream.create = function(source, options2) {
              var delayedStream = new this();
              options2 = options2 || {};
              for (var option in options2) {
                delayedStream[option] = options2[option];
              }
              delayedStream.source = source;
              var realEmit = source.emit;
              source.emit = function() {
                delayedStream._handleEmit(arguments);
                return realEmit.apply(source, arguments);
              };
              source.on("error", function() {
              });
              if (delayedStream.pauseStream) {
                source.pause();
              }
              return delayedStream;
            };
            Object.defineProperty(DelayedStream.prototype, "readable", {
              configurable: true,
              enumerable: true,
              get: function() {
                return this.source.readable;
              }
            });
            DelayedStream.prototype.setEncoding = function() {
              return this.source.setEncoding.apply(this.source, arguments);
            };
            DelayedStream.prototype.resume = function() {
              if (!this._released) {
                this.release();
              }
              this.source.resume();
            };
            DelayedStream.prototype.pause = function() {
              this.source.pause();
            };
            DelayedStream.prototype.release = function() {
              this._released = true;
              this._bufferedEvents.forEach(function(args) {
                this.emit.apply(this, args);
              }.bind(this));
              this._bufferedEvents = [];
            };
            DelayedStream.prototype.pipe = function() {
              var r = Stream.prototype.pipe.apply(this, arguments);
              this.resume();
              return r;
            };
            DelayedStream.prototype._handleEmit = function(args) {
              if (this._released) {
                this.emit.apply(this, args);
                return;
              }
              if (args[0] === "data") {
                this.dataSize += args[1].length;
                this._checkIfMaxDataSizeExceeded();
              }
              this._bufferedEvents.push(args);
            };
            DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
              if (this._maxDataSizeExceeded) {
                return;
              }
              if (this.dataSize <= this.maxDataSize) {
                return;
              }
              this._maxDataSizeExceeded = true;
              var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
              this.emit("error", new Error(message));
            };
          }
        ),
        /***/
        "../node_modules/follow-redirects/debug.js": (
          /*!*************************************************!*\
            !*** ../node_modules/follow-redirects/debug.js ***!
            \*************************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            var debug;
            module3.exports = function() {
              if (!debug) {
                try {
                  debug = __webpack_require__2(
                    /*! debug */
                    "../node_modules/debug/src/index.js"
                  )("follow-redirects");
                } catch (error3) {
                }
                if (typeof debug !== "function") {
                  debug = function() {
                  };
                }
              }
              debug.apply(null, arguments);
            };
          }
        ),
        /***/
        "../node_modules/follow-redirects/index.js": (
          /*!*************************************************!*\
            !*** ../node_modules/follow-redirects/index.js ***!
            \*************************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            var url = __webpack_require__2(
              /*! url */
              "url"
            );
            var URL2 = url.URL;
            var http2 = __webpack_require__2(
              /*! http */
              "http"
            );
            var https = __webpack_require__2(
              /*! https */
              "https"
            );
            var Writable = __webpack_require__2(
              /*! stream */
              "stream"
            ).Writable;
            var assert = __webpack_require__2(
              /*! assert */
              "assert"
            );
            var debug = __webpack_require__2(
              /*! ./debug */
              "../node_modules/follow-redirects/debug.js"
            );
            var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
            var eventHandlers = /* @__PURE__ */ Object.create(null);
            events.forEach(function(event) {
              eventHandlers[event] = function(arg1, arg2, arg3) {
                this._redirectable.emit(event, arg1, arg2, arg3);
              };
            });
            var InvalidUrlError = createErrorType(
              "ERR_INVALID_URL",
              "Invalid URL",
              TypeError
            );
            var RedirectionError = createErrorType(
              "ERR_FR_REDIRECTION_FAILURE",
              "Redirected request failed"
            );
            var TooManyRedirectsError = createErrorType(
              "ERR_FR_TOO_MANY_REDIRECTS",
              "Maximum number of redirects exceeded"
            );
            var MaxBodyLengthExceededError = createErrorType(
              "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
              "Request body larger than maxBodyLength limit"
            );
            var WriteAfterEndError = createErrorType(
              "ERR_STREAM_WRITE_AFTER_END",
              "write after end"
            );
            function RedirectableRequest(options2, responseCallback) {
              Writable.call(this);
              this._sanitizeOptions(options2);
              this._options = options2;
              this._ended = false;
              this._ending = false;
              this._redirectCount = 0;
              this._redirects = [];
              this._requestBodyLength = 0;
              this._requestBodyBuffers = [];
              if (responseCallback) {
                this.on("response", responseCallback);
              }
              var self2 = this;
              this._onNativeResponse = function(response) {
                self2._processResponse(response);
              };
              this._performRequest();
            }
            RedirectableRequest.prototype = Object.create(Writable.prototype);
            RedirectableRequest.prototype.abort = function() {
              abortRequest(this._currentRequest);
              this.emit("abort");
            };
            RedirectableRequest.prototype.write = function(data, encoding, callback) {
              if (this._ending) {
                throw new WriteAfterEndError();
              }
              if (!isString(data) && !isBuffer(data)) {
                throw new TypeError("data should be a string, Buffer or Uint8Array");
              }
              if (isFunction(encoding)) {
                callback = encoding;
                encoding = null;
              }
              if (data.length === 0) {
                if (callback) {
                  callback();
                }
                return;
              }
              if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
                this._requestBodyLength += data.length;
                this._requestBodyBuffers.push({ data, encoding });
                this._currentRequest.write(data, encoding, callback);
              } else {
                this.emit("error", new MaxBodyLengthExceededError());
                this.abort();
              }
            };
            RedirectableRequest.prototype.end = function(data, encoding, callback) {
              if (isFunction(data)) {
                callback = data;
                data = encoding = null;
              } else if (isFunction(encoding)) {
                callback = encoding;
                encoding = null;
              }
              if (!data) {
                this._ended = this._ending = true;
                this._currentRequest.end(null, null, callback);
              } else {
                var self2 = this;
                var currentRequest = this._currentRequest;
                this.write(data, encoding, function() {
                  self2._ended = true;
                  currentRequest.end(null, null, callback);
                });
                this._ending = true;
              }
            };
            RedirectableRequest.prototype.setHeader = function(name, value) {
              this._options.headers[name] = value;
              this._currentRequest.setHeader(name, value);
            };
            RedirectableRequest.prototype.removeHeader = function(name) {
              delete this._options.headers[name];
              this._currentRequest.removeHeader(name);
            };
            RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
              var self2 = this;
              function destroyOnTimeout(socket) {
                socket.setTimeout(msecs);
                socket.removeListener("timeout", socket.destroy);
                socket.addListener("timeout", socket.destroy);
              }
              function startTimer(socket) {
                if (self2._timeout) {
                  clearTimeout(self2._timeout);
                }
                self2._timeout = setTimeout(function() {
                  self2.emit("timeout");
                  clearTimer();
                }, msecs);
                destroyOnTimeout(socket);
              }
              function clearTimer() {
                if (self2._timeout) {
                  clearTimeout(self2._timeout);
                  self2._timeout = null;
                }
                self2.removeListener("abort", clearTimer);
                self2.removeListener("error", clearTimer);
                self2.removeListener("response", clearTimer);
                if (callback) {
                  self2.removeListener("timeout", callback);
                }
                if (!self2.socket) {
                  self2._currentRequest.removeListener("socket", startTimer);
                }
              }
              if (callback) {
                this.on("timeout", callback);
              }
              if (this.socket) {
                startTimer(this.socket);
              } else {
                this._currentRequest.once("socket", startTimer);
              }
              this.on("socket", destroyOnTimeout);
              this.on("abort", clearTimer);
              this.on("error", clearTimer);
              this.on("response", clearTimer);
              return this;
            };
            [
              "flushHeaders",
              "getHeader",
              "setNoDelay",
              "setSocketKeepAlive"
            ].forEach(function(method) {
              RedirectableRequest.prototype[method] = function(a, b) {
                return this._currentRequest[method](a, b);
              };
            });
            ["aborted", "connection", "socket"].forEach(function(property) {
              Object.defineProperty(RedirectableRequest.prototype, property, {
                get: function() {
                  return this._currentRequest[property];
                }
              });
            });
            RedirectableRequest.prototype._sanitizeOptions = function(options2) {
              if (!options2.headers) {
                options2.headers = {};
              }
              if (options2.host) {
                if (!options2.hostname) {
                  options2.hostname = options2.host;
                }
                delete options2.host;
              }
              if (!options2.pathname && options2.path) {
                var searchPos = options2.path.indexOf("?");
                if (searchPos < 0) {
                  options2.pathname = options2.path;
                } else {
                  options2.pathname = options2.path.substring(0, searchPos);
                  options2.search = options2.path.substring(searchPos);
                }
              }
            };
            RedirectableRequest.prototype._performRequest = function() {
              var protocol = this._options.protocol;
              var nativeProtocol = this._options.nativeProtocols[protocol];
              if (!nativeProtocol) {
                this.emit("error", new TypeError("Unsupported protocol " + protocol));
                return;
              }
              if (this._options.agents) {
                var scheme = protocol.slice(0, -1);
                this._options.agent = this._options.agents[scheme];
              }
              var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
              request._redirectable = this;
              for (var event of events) {
                request.on(event, eventHandlers[event]);
              }
              this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : (
                // When making a request to a proxy, […]
                // a client MUST send the target URI in absolute-form […].
                this._options.path
              );
              if (this._isRedirect) {
                var i = 0;
                var self2 = this;
                var buffers = this._requestBodyBuffers;
                (function writeNext(error3) {
                  if (request === self2._currentRequest) {
                    if (error3) {
                      self2.emit("error", error3);
                    } else if (i < buffers.length) {
                      var buffer2 = buffers[i++];
                      if (!request.finished) {
                        request.write(buffer2.data, buffer2.encoding, writeNext);
                      }
                    } else if (self2._ended) {
                      request.end();
                    }
                  }
                })();
              }
            };
            RedirectableRequest.prototype._processResponse = function(response) {
              var statusCode = response.statusCode;
              if (this._options.trackRedirects) {
                this._redirects.push({
                  url: this._currentUrl,
                  headers: response.headers,
                  statusCode
                });
              }
              var location = response.headers.location;
              if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
                response.responseUrl = this._currentUrl;
                response.redirects = this._redirects;
                this.emit("response", response);
                this._requestBodyBuffers = [];
                return;
              }
              abortRequest(this._currentRequest);
              response.destroy();
              if (++this._redirectCount > this._options.maxRedirects) {
                this.emit("error", new TooManyRedirectsError());
                return;
              }
              var requestHeaders;
              var beforeRedirect = this._options.beforeRedirect;
              if (beforeRedirect) {
                requestHeaders = Object.assign({
                  // The Host header was set by nativeProtocol.request
                  Host: response.req.getHeader("host")
                }, this._options.headers);
              }
              var method = this._options.method;
              if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
              // the server is redirecting the user agent to a different resource […]
              // A user agent can perform a retrieval request targeting that URI
              // (a GET or HEAD request if using HTTP) […]
              statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
                this._options.method = "GET";
                this._requestBodyBuffers = [];
                removeMatchingHeaders(/^content-/i, this._options.headers);
              }
              var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
              var currentUrlParts = url.parse(this._currentUrl);
              var currentHost = currentHostHeader || currentUrlParts.host;
              var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, { host: currentHost }));
              var redirectUrl;
              try {
                redirectUrl = url.resolve(currentUrl, location);
              } catch (cause) {
                this.emit("error", new RedirectionError({ cause }));
                return;
              }
              debug("redirecting to", redirectUrl);
              this._isRedirect = true;
              var redirectUrlParts = url.parse(redirectUrl);
              Object.assign(this._options, redirectUrlParts);
              if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== "https:" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {
                removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
              }
              if (isFunction(beforeRedirect)) {
                var responseDetails = {
                  headers: response.headers,
                  statusCode
                };
                var requestDetails = {
                  url: currentUrl,
                  method,
                  headers: requestHeaders
                };
                try {
                  beforeRedirect(this._options, responseDetails, requestDetails);
                } catch (err) {
                  this.emit("error", err);
                  return;
                }
                this._sanitizeOptions(this._options);
              }
              try {
                this._performRequest();
              } catch (cause) {
                this.emit("error", new RedirectionError({ cause }));
              }
            };
            function wrap(protocols) {
              var exports2 = {
                maxRedirects: 21,
                maxBodyLength: 10 * 1024 * 1024
              };
              var nativeProtocols = {};
              Object.keys(protocols).forEach(function(scheme) {
                var protocol = scheme + ":";
                var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
                var wrappedProtocol = exports2[scheme] = Object.create(nativeProtocol);
                function request(input, options2, callback) {
                  if (isString(input)) {
                    var parsed;
                    try {
                      parsed = urlToOptions(new URL2(input));
                    } catch (err) {
                      parsed = url.parse(input);
                    }
                    if (!isString(parsed.protocol)) {
                      throw new InvalidUrlError({ input });
                    }
                    input = parsed;
                  } else if (URL2 && input instanceof URL2) {
                    input = urlToOptions(input);
                  } else {
                    callback = options2;
                    options2 = input;
                    input = { protocol };
                  }
                  if (isFunction(options2)) {
                    callback = options2;
                    options2 = null;
                  }
                  options2 = Object.assign({
                    maxRedirects: exports2.maxRedirects,
                    maxBodyLength: exports2.maxBodyLength
                  }, input, options2);
                  options2.nativeProtocols = nativeProtocols;
                  if (!isString(options2.host) && !isString(options2.hostname)) {
                    options2.hostname = "::1";
                  }
                  assert.equal(options2.protocol, protocol, "protocol mismatch");
                  debug("options", options2);
                  return new RedirectableRequest(options2, callback);
                }
                function get3(input, options2, callback) {
                  var wrappedRequest = wrappedProtocol.request(input, options2, callback);
                  wrappedRequest.end();
                  return wrappedRequest;
                }
                Object.defineProperties(wrappedProtocol, {
                  request: { value: request, configurable: true, enumerable: true, writable: true },
                  get: { value: get3, configurable: true, enumerable: true, writable: true }
                });
              });
              return exports2;
            }
            function noop2() {
            }
            function urlToOptions(urlObject) {
              var options2 = {
                protocol: urlObject.protocol,
                hostname: urlObject.hostname.startsWith("[") ? (
                  /* istanbul ignore next */
                  urlObject.hostname.slice(1, -1)
                ) : urlObject.hostname,
                hash: urlObject.hash,
                search: urlObject.search,
                pathname: urlObject.pathname,
                path: urlObject.pathname + urlObject.search,
                href: urlObject.href
              };
              if (urlObject.port !== "") {
                options2.port = Number(urlObject.port);
              }
              return options2;
            }
            function removeMatchingHeaders(regex, headers) {
              var lastValue;
              for (var header in headers) {
                if (regex.test(header)) {
                  lastValue = headers[header];
                  delete headers[header];
                }
              }
              return lastValue === null || typeof lastValue === "undefined" ? void 0 : String(lastValue).trim();
            }
            function createErrorType(code, message, baseClass) {
              function CustomError(properties) {
                Error.captureStackTrace(this, this.constructor);
                Object.assign(this, properties || {});
                this.code = code;
                this.message = this.cause ? message + ": " + this.cause.message : message;
              }
              CustomError.prototype = new (baseClass || Error)();
              CustomError.prototype.constructor = CustomError;
              CustomError.prototype.name = "Error [" + code + "]";
              return CustomError;
            }
            function abortRequest(request) {
              for (var event of events) {
                request.removeListener(event, eventHandlers[event]);
              }
              request.on("error", noop2);
              request.abort();
            }
            function isSubdomain(subdomain, domain) {
              assert(isString(subdomain) && isString(domain));
              var dot = subdomain.length - domain.length - 1;
              return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
            }
            function isString(value) {
              return typeof value === "string" || value instanceof String;
            }
            function isFunction(value) {
              return typeof value === "function";
            }
            function isBuffer(value) {
              return typeof value === "object" && "length" in value;
            }
            module3.exports = wrap({ http: http2, https });
            module3.exports.wrap = wrap;
          }
        ),
        /***/
        "../node_modules/form-data/lib/form_data.js": (
          /*!**************************************************!*\
            !*** ../node_modules/form-data/lib/form_data.js ***!
            \**************************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            var CombinedStream = __webpack_require__2(
              /*! combined-stream */
              "../node_modules/combined-stream/lib/combined_stream.js"
            );
            var util = __webpack_require__2(
              /*! util */
              "util"
            );
            var path2 = __webpack_require__2(
              /*! path */
              "path"
            );
            var http2 = __webpack_require__2(
              /*! http */
              "http"
            );
            var https = __webpack_require__2(
              /*! https */
              "https"
            );
            var parseUrl = __webpack_require__2(
              /*! url */
              "url"
            ).parse;
            var fs = __webpack_require__2(
              /*! fs */
              "fs"
            );
            var Stream = __webpack_require__2(
              /*! stream */
              "stream"
            ).Stream;
            var mime = __webpack_require__2(
              /*! mime-types */
              "../node_modules/mime-types/index.js"
            );
            var asynckit = __webpack_require__2(
              /*! asynckit */
              "../node_modules/asynckit/index.js"
            );
            var populate = __webpack_require__2(
              /*! ./populate.js */
              "../node_modules/form-data/lib/populate.js"
            );
            module3.exports = FormData3;
            util.inherits(FormData3, CombinedStream);
            function FormData3(options2) {
              if (!(this instanceof FormData3)) {
                return new FormData3(options2);
              }
              this._overheadLength = 0;
              this._valueLength = 0;
              this._valuesToMeasure = [];
              CombinedStream.call(this);
              options2 = options2 || {};
              for (var option in options2) {
                this[option] = options2[option];
              }
            }
            FormData3.LINE_BREAK = "\r\n";
            FormData3.DEFAULT_CONTENT_TYPE = "application/octet-stream";
            FormData3.prototype.append = function(field, value, options2) {
              options2 = options2 || {};
              if (typeof options2 == "string") {
                options2 = { filename: options2 };
              }
              var append = CombinedStream.prototype.append.bind(this);
              if (typeof value == "number") {
                value = "" + value;
              }
              if (util.isArray(value)) {
                this._error(new Error("Arrays are not supported."));
                return;
              }
              var header = this._multiPartHeader(field, value, options2);
              var footer = this._multiPartFooter();
              append(header);
              append(value);
              append(footer);
              this._trackLength(header, value, options2);
            };
            FormData3.prototype._trackLength = function(header, value, options2) {
              var valueLength = 0;
              if (options2.knownLength != null) {
                valueLength += +options2.knownLength;
              } else if (Buffer.isBuffer(value)) {
                valueLength = value.length;
              } else if (typeof value === "string") {
                valueLength = Buffer.byteLength(value);
              }
              this._valueLength += valueLength;
              this._overheadLength += Buffer.byteLength(header) + FormData3.LINE_BREAK.length;
              if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion")) && !(value instanceof Stream)) {
                return;
              }
              if (!options2.knownLength) {
                this._valuesToMeasure.push(value);
              }
            };
            FormData3.prototype._lengthRetriever = function(value, callback) {
              if (value.hasOwnProperty("fd")) {
                if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
                  callback(null, value.end + 1 - (value.start ? value.start : 0));
                } else {
                  fs.stat(value.path, function(err, stat) {
                    var fileSize;
                    if (err) {
                      callback(err);
                      return;
                    }
                    fileSize = stat.size - (value.start ? value.start : 0);
                    callback(null, fileSize);
                  });
                }
              } else if (value.hasOwnProperty("httpVersion")) {
                callback(null, +value.headers["content-length"]);
              } else if (value.hasOwnProperty("httpModule")) {
                value.on("response", function(response) {
                  value.pause();
                  callback(null, +response.headers["content-length"]);
                });
                value.resume();
              } else {
                callback("Unknown stream");
              }
            };
            FormData3.prototype._multiPartHeader = function(field, value, options2) {
              if (typeof options2.header == "string") {
                return options2.header;
              }
              var contentDisposition = this._getContentDisposition(value, options2);
              var contentType = this._getContentType(value, options2);
              var contents = "";
              var headers = {
                // add custom disposition as third element or keep it two elements if not
                "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
                // if no content type. allow it to be empty array
                "Content-Type": [].concat(contentType || [])
              };
              if (typeof options2.header == "object") {
                populate(headers, options2.header);
              }
              var header;
              for (var prop in headers) {
                if (!headers.hasOwnProperty(prop))
                  continue;
                header = headers[prop];
                if (header == null) {
                  continue;
                }
                if (!Array.isArray(header)) {
                  header = [header];
                }
                if (header.length) {
                  contents += prop + ": " + header.join("; ") + FormData3.LINE_BREAK;
                }
              }
              return "--" + this.getBoundary() + FormData3.LINE_BREAK + contents + FormData3.LINE_BREAK;
            };
            FormData3.prototype._getContentDisposition = function(value, options2) {
              var filename, contentDisposition;
              if (typeof options2.filepath === "string") {
                filename = path2.normalize(options2.filepath).replace(/\\/g, "/");
              } else if (options2.filename || value.name || value.path) {
                filename = path2.basename(options2.filename || value.name || value.path);
              } else if (value.readable && value.hasOwnProperty("httpVersion")) {
                filename = path2.basename(value.client._httpMessage.path || "");
              }
              if (filename) {
                contentDisposition = 'filename="' + filename + '"';
              }
              return contentDisposition;
            };
            FormData3.prototype._getContentType = function(value, options2) {
              var contentType = options2.contentType;
              if (!contentType && value.name) {
                contentType = mime.lookup(value.name);
              }
              if (!contentType && value.path) {
                contentType = mime.lookup(value.path);
              }
              if (!contentType && value.readable && value.hasOwnProperty("httpVersion")) {
                contentType = value.headers["content-type"];
              }
              if (!contentType && (options2.filepath || options2.filename)) {
                contentType = mime.lookup(options2.filepath || options2.filename);
              }
              if (!contentType && typeof value == "object") {
                contentType = FormData3.DEFAULT_CONTENT_TYPE;
              }
              return contentType;
            };
            FormData3.prototype._multiPartFooter = function() {
              return function(next) {
                var footer = FormData3.LINE_BREAK;
                var lastPart = this._streams.length === 0;
                if (lastPart) {
                  footer += this._lastBoundary();
                }
                next(footer);
              }.bind(this);
            };
            FormData3.prototype._lastBoundary = function() {
              return "--" + this.getBoundary() + "--" + FormData3.LINE_BREAK;
            };
            FormData3.prototype.getHeaders = function(userHeaders) {
              var header;
              var formHeaders = {
                "content-type": "multipart/form-data; boundary=" + this.getBoundary()
              };
              for (header in userHeaders) {
                if (userHeaders.hasOwnProperty(header)) {
                  formHeaders[header.toLowerCase()] = userHeaders[header];
                }
              }
              return formHeaders;
            };
            FormData3.prototype.setBoundary = function(boundary) {
              this._boundary = boundary;
            };
            FormData3.prototype.getBoundary = function() {
              if (!this._boundary) {
                this._generateBoundary();
              }
              return this._boundary;
            };
            FormData3.prototype.getBuffer = function() {
              var dataBuffer = new Buffer.alloc(0);
              var boundary = this.getBoundary();
              for (var i = 0, len = this._streams.length; i < len; i++) {
                if (typeof this._streams[i] !== "function") {
                  if (Buffer.isBuffer(this._streams[i])) {
                    dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
                  } else {
                    dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
                  }
                  if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
                    dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData3.LINE_BREAK)]);
                  }
                }
              }
              return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
            };
            FormData3.prototype._generateBoundary = function() {
              var boundary = "--------------------------";
              for (var i = 0; i < 24; i++) {
                boundary += Math.floor(Math.random() * 10).toString(16);
              }
              this._boundary = boundary;
            };
            FormData3.prototype.getLengthSync = function() {
              var knownLength = this._overheadLength + this._valueLength;
              if (this._streams.length) {
                knownLength += this._lastBoundary().length;
              }
              if (!this.hasKnownLength()) {
                this._error(new Error("Cannot calculate proper length in synchronous way."));
              }
              return knownLength;
            };
            FormData3.prototype.hasKnownLength = function() {
              var hasKnownLength = true;
              if (this._valuesToMeasure.length) {
                hasKnownLength = false;
              }
              return hasKnownLength;
            };
            FormData3.prototype.getLength = function(cb) {
              var knownLength = this._overheadLength + this._valueLength;
              if (this._streams.length) {
                knownLength += this._lastBoundary().length;
              }
              if (!this._valuesToMeasure.length) {
                process.nextTick(cb.bind(this, null, knownLength));
                return;
              }
              asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
                if (err) {
                  cb(err);
                  return;
                }
                values.forEach(function(length) {
                  knownLength += length;
                });
                cb(null, knownLength);
              });
            };
            FormData3.prototype.submit = function(params, cb) {
              var request, options2, defaults = { method: "post" };
              if (typeof params == "string") {
                params = parseUrl(params);
                options2 = populate({
                  port: params.port,
                  path: params.pathname,
                  host: params.hostname,
                  protocol: params.protocol
                }, defaults);
              } else {
                options2 = populate(params, defaults);
                if (!options2.port) {
                  options2.port = options2.protocol == "https:" ? 443 : 80;
                }
              }
              options2.headers = this.getHeaders(params.headers);
              if (options2.protocol == "https:") {
                request = https.request(options2);
              } else {
                request = http2.request(options2);
              }
              this.getLength(function(err, length) {
                if (err && err !== "Unknown stream") {
                  this._error(err);
                  return;
                }
                if (length) {
                  request.setHeader("Content-Length", length);
                }
                this.pipe(request);
                if (cb) {
                  var onResponse;
                  var callback = function(error3, responce) {
                    request.removeListener("error", callback);
                    request.removeListener("response", onResponse);
                    return cb.call(this, error3, responce);
                  };
                  onResponse = callback.bind(this, null);
                  request.on("error", callback);
                  request.on("response", onResponse);
                }
              }.bind(this));
              return request;
            };
            FormData3.prototype._error = function(err) {
              if (!this.error) {
                this.error = err;
                this.pause();
                this.emit("error", err);
              }
            };
            FormData3.prototype.toString = function() {
              return "[object FormData]";
            };
          }
        ),
        /***/
        "../node_modules/form-data/lib/populate.js": (
          /*!*************************************************!*\
            !*** ../node_modules/form-data/lib/populate.js ***!
            \*************************************************/
          /***/
          (module3) => {
            module3.exports = function(dst, src) {
              Object.keys(src).forEach(function(prop) {
                dst[prop] = dst[prop] || src[prop];
              });
              return dst;
            };
          }
        ),
        /***/
        "../node_modules/has-flag/index.js": (
          /*!*****************************************!*\
            !*** ../node_modules/has-flag/index.js ***!
            \*****************************************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = (flag, argv) => {
              argv = argv || process.argv;
              const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
              const pos = argv.indexOf(prefix + flag);
              const terminatorPos = argv.indexOf("--");
              return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
            };
          }
        ),
        /***/
        "../node_modules/lodash.isplainobject/index.js": (
          /*!*****************************************************!*\
            !*** ../node_modules/lodash.isplainobject/index.js ***!
            \*****************************************************/
          /***/
          (module3) => {
            var objectTag = "[object Object]";
            function isHostObject(value) {
              var result = false;
              if (value != null && typeof value.toString != "function") {
                try {
                  result = !!(value + "");
                } catch (e) {
                }
              }
              return result;
            }
            function overArg(func, transform) {
              return function(arg) {
                return func(transform(arg));
              };
            }
            var funcProto = Function.prototype, objectProto = Object.prototype;
            var funcToString = funcProto.toString;
            var hasOwnProperty = objectProto.hasOwnProperty;
            var objectCtorString = funcToString.call(Object);
            var objectToString = objectProto.toString;
            var getPrototype = overArg(Object.getPrototypeOf, Object);
            function isObjectLike(value) {
              return !!value && typeof value == "object";
            }
            function isPlainObject(value) {
              if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
                return false;
              }
              var proto = getPrototype(value);
              if (proto === null) {
                return true;
              }
              var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
              return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
            }
            module3.exports = isPlainObject;
          }
        ),
        /***/
        "../node_modules/lodash.isstring/index.js": (
          /*!************************************************!*\
            !*** ../node_modules/lodash.isstring/index.js ***!
            \************************************************/
          /***/
          (module3) => {
            var stringTag = "[object String]";
            var objectProto = Object.prototype;
            var objectToString = objectProto.toString;
            var isArray = Array.isArray;
            function isObjectLike(value) {
              return !!value && typeof value == "object";
            }
            function isString(value) {
              return typeof value == "string" || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
            }
            module3.exports = isString;
          }
        ),
        /***/
        "../node_modules/mime-db/index.js": (
          /*!****************************************!*\
            !*** ../node_modules/mime-db/index.js ***!
            \****************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            module3.exports = __webpack_require__2(
              /*! ./db.json */
              "../node_modules/mime-db/db.json"
            );
          }
        ),
        /***/
        "../node_modules/mime-types/index.js": (
          /*!*******************************************!*\
            !*** ../node_modules/mime-types/index.js ***!
            \*******************************************/
          /***/
          (__unused_webpack_module, exports2, __webpack_require__2) => {
            "use strict";
            var db = __webpack_require__2(
              /*! mime-db */
              "../node_modules/mime-db/index.js"
            );
            var extname = __webpack_require__2(
              /*! path */
              "path"
            ).extname;
            var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
            var TEXT_TYPE_REGEXP = /^text\//i;
            exports2.charset = charset;
            exports2.charsets = { lookup: charset };
            exports2.contentType = contentType;
            exports2.extension = extension;
            exports2.extensions = /* @__PURE__ */ Object.create(null);
            exports2.lookup = lookup;
            exports2.types = /* @__PURE__ */ Object.create(null);
            populateMaps(exports2.extensions, exports2.types);
            function charset(type) {
              if (!type || typeof type !== "string") {
                return false;
              }
              var match = EXTRACT_TYPE_REGEXP.exec(type);
              var mime = match && db[match[1].toLowerCase()];
              if (mime && mime.charset) {
                return mime.charset;
              }
              if (match && TEXT_TYPE_REGEXP.test(match[1])) {
                return "UTF-8";
              }
              return false;
            }
            function contentType(str) {
              if (!str || typeof str !== "string") {
                return false;
              }
              var mime = str.indexOf("/") === -1 ? exports2.lookup(str) : str;
              if (!mime) {
                return false;
              }
              if (mime.indexOf("charset") === -1) {
                var charset2 = exports2.charset(mime);
                if (charset2)
                  mime += "; charset=" + charset2.toLowerCase();
              }
              return mime;
            }
            function extension(type) {
              if (!type || typeof type !== "string") {
                return false;
              }
              var match = EXTRACT_TYPE_REGEXP.exec(type);
              var exts = match && exports2.extensions[match[1].toLowerCase()];
              if (!exts || !exts.length) {
                return false;
              }
              return exts[0];
            }
            function lookup(path2) {
              if (!path2 || typeof path2 !== "string") {
                return false;
              }
              var extension2 = extname("x." + path2).toLowerCase().substr(1);
              if (!extension2) {
                return false;
              }
              return exports2.types[extension2] || false;
            }
            function populateMaps(extensions, types) {
              var preference = ["nginx", "apache", void 0, "iana"];
              Object.keys(db).forEach(function forEachMimeType(type) {
                var mime = db[type];
                var exts = mime.extensions;
                if (!exts || !exts.length) {
                  return;
                }
                extensions[type] = exts;
                for (var i = 0; i < exts.length; i++) {
                  var extension2 = exts[i];
                  if (types[extension2]) {
                    var from = preference.indexOf(db[types[extension2]].source);
                    var to = preference.indexOf(mime.source);
                    if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
                      continue;
                    }
                  }
                  types[extension2] = type;
                }
              });
            }
          }
        ),
        /***/
        "../node_modules/p-throttle/index.js": (
          /*!*******************************************!*\
            !*** ../node_modules/p-throttle/index.js ***!
            \*******************************************/
          /***/
          (module3) => {
            "use strict";
            class AbortError extends Error {
              constructor() {
                super("Throttled function aborted");
                this.name = "AbortError";
              }
            }
            const pThrottle = ({ limit, interval, strict }) => {
              if (!Number.isFinite(limit)) {
                throw new TypeError("Expected `limit` to be a finite number");
              }
              if (!Number.isFinite(interval)) {
                throw new TypeError("Expected `interval` to be a finite number");
              }
              const queue = /* @__PURE__ */ new Map();
              let currentTick = 0;
              let activeCount = 0;
              function windowedDelay() {
                const now = Date.now();
                if (now - currentTick > interval) {
                  activeCount = 1;
                  currentTick = now;
                  return 0;
                }
                if (activeCount < limit) {
                  activeCount++;
                } else {
                  currentTick += interval;
                  activeCount = 1;
                }
                return currentTick - now;
              }
              const strictTicks = [];
              function strictDelay() {
                const now = Date.now();
                if (strictTicks.length < limit) {
                  strictTicks.push(now);
                  return 0;
                }
                const earliestTime = strictTicks.shift() + interval;
                if (now >= earliestTime) {
                  strictTicks.push(now);
                  return 0;
                }
                strictTicks.push(earliestTime);
                return earliestTime - now;
              }
              const getDelay = strict ? strictDelay : windowedDelay;
              return (function_) => {
                const throttled = function(...args) {
                  if (!throttled.isEnabled) {
                    return (async () => function_.apply(this, args))();
                  }
                  let timeout;
                  return new Promise((resolve2, reject) => {
                    const execute = () => {
                      resolve2(function_.apply(this, args));
                      queue.delete(timeout);
                    };
                    timeout = setTimeout(execute, getDelay());
                    queue.set(timeout, reject);
                  });
                };
                throttled.abort = () => {
                  for (const timeout of queue.keys()) {
                    clearTimeout(timeout);
                    queue.get(timeout)(new AbortError());
                  }
                  queue.clear();
                  strictTicks.splice(0, strictTicks.length);
                };
                throttled.isEnabled = true;
                return throttled;
              };
            };
            module3.exports = pThrottle;
            module3.exports.AbortError = AbortError;
          }
        ),
        /***/
        "../node_modules/proxy-from-env/index.js": (
          /*!***********************************************!*\
            !*** ../node_modules/proxy-from-env/index.js ***!
            \***********************************************/
          /***/
          (__unused_webpack_module, exports2, __webpack_require__2) => {
            "use strict";
            var parseUrl = __webpack_require__2(
              /*! url */
              "url"
            ).parse;
            var DEFAULT_PORTS = {
              ftp: 21,
              gopher: 70,
              http: 80,
              https: 443,
              ws: 80,
              wss: 443
            };
            var stringEndsWith = String.prototype.endsWith || function(s2) {
              return s2.length <= this.length && this.indexOf(s2, this.length - s2.length) !== -1;
            };
            function getProxyForUrl(url) {
              var parsedUrl = typeof url === "string" ? parseUrl(url) : url || {};
              var proto = parsedUrl.protocol;
              var hostname = parsedUrl.host;
              var port = parsedUrl.port;
              if (typeof hostname !== "string" || !hostname || typeof proto !== "string") {
                return "";
              }
              proto = proto.split(":", 1)[0];
              hostname = hostname.replace(/:\d*$/, "");
              port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
              if (!shouldProxy(hostname, port)) {
                return "";
              }
              var proxy = getEnv("npm_config_" + proto + "_proxy") || getEnv(proto + "_proxy") || getEnv("npm_config_proxy") || getEnv("all_proxy");
              if (proxy && proxy.indexOf("://") === -1) {
                proxy = proto + "://" + proxy;
              }
              return proxy;
            }
            function shouldProxy(hostname, port) {
              var NO_PROXY = (getEnv("npm_config_no_proxy") || getEnv("no_proxy")).toLowerCase();
              if (!NO_PROXY) {
                return true;
              }
              if (NO_PROXY === "*") {
                return false;
              }
              return NO_PROXY.split(/[,\s]/).every(function(proxy) {
                if (!proxy) {
                  return true;
                }
                var parsedProxy = proxy.match(/^(.+):(\d+)$/);
                var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
                var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
                if (parsedProxyPort && parsedProxyPort !== port) {
                  return true;
                }
                if (!/^[.*]/.test(parsedProxyHostname)) {
                  return hostname !== parsedProxyHostname;
                }
                if (parsedProxyHostname.charAt(0) === "*") {
                  parsedProxyHostname = parsedProxyHostname.slice(1);
                }
                return !stringEndsWith.call(hostname, parsedProxyHostname);
              });
            }
            function getEnv(key2) {
              return process.env[key2.toLowerCase()] || process.env[key2.toUpperCase()] || "";
            }
            exports2.getProxyForUrl = getProxyForUrl;
          }
        ),
        /***/
        "../node_modules/supports-color/index.js": (
          /*!***********************************************!*\
            !*** ../node_modules/supports-color/index.js ***!
            \***********************************************/
          /***/
          (module3, __unused_webpack_exports, __webpack_require__2) => {
            "use strict";
            const os = __webpack_require__2(
              /*! os */
              "os"
            );
            const hasFlag = __webpack_require__2(
              /*! has-flag */
              "../node_modules/has-flag/index.js"
            );
            const env = process.env;
            let forceColor;
            if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
              forceColor = false;
            } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
              forceColor = true;
            }
            if ("FORCE_COLOR" in env) {
              forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
            }
            function translateLevel(level) {
              if (level === 0) {
                return false;
              }
              return {
                level,
                hasBasic: true,
                has256: level >= 2,
                has16m: level >= 3
              };
            }
            function supportsColor(stream) {
              if (forceColor === false) {
                return 0;
              }
              if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
                return 3;
              }
              if (hasFlag("color=256")) {
                return 2;
              }
              if (stream && !stream.isTTY && forceColor !== true) {
                return 0;
              }
              const min = forceColor ? 1 : 0;
              if (process.platform === "win32") {
                const osRelease = os.release().split(".");
                if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
                  return Number(osRelease[2]) >= 14931 ? 3 : 2;
                }
                return 1;
              }
              if ("CI" in env) {
                if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
                  return 1;
                }
                return min;
              }
              if ("TEAMCITY_VERSION" in env) {
                return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
              }
              if (env.COLORTERM === "truecolor") {
                return 3;
              }
              if ("TERM_PROGRAM" in env) {
                const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
                switch (env.TERM_PROGRAM) {
                  case "iTerm.app":
                    return version >= 3 ? 3 : 2;
                  case "Apple_Terminal":
                    return 2;
                }
              }
              if (/-256(color)?$/i.test(env.TERM)) {
                return 2;
              }
              if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
                return 1;
              }
              if ("COLORTERM" in env) {
                return 1;
              }
              if (env.TERM === "dumb") {
                return min;
              }
              return min;
            }
            function getSupportLevel(stream) {
              const level = supportsColor(stream);
              return translateLevel(level);
            }
            module3.exports = {
              supportsColor: getSupportLevel,
              stdout: getSupportLevel(process.stdout),
              stderr: getSupportLevel(process.stderr)
            };
          }
        ),
        /***/
        "assert": (
          /*!*************************!*\
            !*** external "assert" ***!
            \*************************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = require("assert");
          }
        ),
        /***/
        "events": (
          /*!*************************!*\
            !*** external "events" ***!
            \*************************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = require("events");
          }
        ),
        /***/
        "fs": (
          /*!*********************!*\
            !*** external "fs" ***!
            \*********************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = require("fs");
          }
        ),
        /***/
        "http": (
          /*!***********************!*\
            !*** external "http" ***!
            \***********************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = require("http");
          }
        ),
        /***/
        "https": (
          /*!************************!*\
            !*** external "https" ***!
            \************************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = require("https");
          }
        ),
        /***/
        "os": (
          /*!*********************!*\
            !*** external "os" ***!
            \*********************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = require("os");
          }
        ),
        /***/
        "path": (
          /*!***********************!*\
            !*** external "path" ***!
            \***********************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = require("path");
          }
        ),
        /***/
        "stream": (
          /*!*************************!*\
            !*** external "stream" ***!
            \*************************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = require("stream");
          }
        ),
        /***/
        "tty": (
          /*!**********************!*\
            !*** external "tty" ***!
            \**********************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = require("tty");
          }
        ),
        /***/
        "url": (
          /*!**********************!*\
            !*** external "url" ***!
            \**********************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = require("url");
          }
        ),
        /***/
        "util": (
          /*!***********************!*\
            !*** external "util" ***!
            \***********************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = require("util");
          }
        ),
        /***/
        "zlib": (
          /*!***********************!*\
            !*** external "zlib" ***!
            \***********************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = require("zlib");
          }
        ),
        /***/
        "../node_modules/axios/lib/adapters/adapters.js": (
          /*!******************************************************!*\
            !*** ../node_modules/axios/lib/adapters/adapters.js ***!
            \******************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _http_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./http.js */
              "../node_modules/axios/lib/adapters/http.js"
            );
            var _xhr_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./xhr.js */
              "../node_modules/axios/lib/adapters/xhr.js"
            );
            var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../core/AxiosError.js */
              "../node_modules/axios/lib/core/AxiosError.js"
            );
            const knownAdapters = {
              http: _http_js__WEBPACK_IMPORTED_MODULE_0__["default"],
              xhr: _xhr_js__WEBPACK_IMPORTED_MODULE_1__["default"]
            };
            _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(knownAdapters, (fn, value) => {
              if (fn) {
                try {
                  Object.defineProperty(fn, "name", { value });
                } catch (e) {
                }
                Object.defineProperty(fn, "adapterName", { value });
              }
            });
            const renderReason = (reason) => `- ${reason}`;
            const isResolvedHandle = (adapter) => _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isFunction(adapter) || adapter === null || adapter === false;
            const __WEBPACK_DEFAULT_EXPORT__ = {
              getAdapter: (adapters) => {
                adapters = _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isArray(adapters) ? adapters : [adapters];
                const { length } = adapters;
                let nameOrAdapter;
                let adapter;
                const rejectedReasons = {};
                for (let i = 0; i < length; i++) {
                  nameOrAdapter = adapters[i];
                  let id;
                  adapter = nameOrAdapter;
                  if (!isResolvedHandle(nameOrAdapter)) {
                    adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
                    if (adapter === void 0) {
                      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"](`Unknown adapter '${id}'`);
                    }
                  }
                  if (adapter) {
                    break;
                  }
                  rejectedReasons[id || "#" + i] = adapter;
                }
                if (!adapter) {
                  const reasons = Object.entries(rejectedReasons).map(
                    ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
                  );
                  let s2 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
                  throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"](
                    `There is no suitable adapter to dispatch the request ` + s2,
                    "ERR_NOT_SUPPORT"
                  );
                }
                return adapter;
              },
              adapters: knownAdapters
            };
          }
        ),
        /***/
        "../node_modules/axios/lib/adapters/http.js": (
          /*!**************************************************!*\
            !*** ../node_modules/axios/lib/adapters/http.js ***!
            \**************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              __setProxy: () => (
                /* binding */
                __setProxy
              ),
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
              /*! ./../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _core_settle_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(
              /*! ./../core/settle.js */
              "../node_modules/axios/lib/core/settle.js"
            );
            var _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
              /*! ../core/buildFullPath.js */
              "../node_modules/axios/lib/core/buildFullPath.js"
            );
            var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__2(
              /*! ./../helpers/buildURL.js */
              "../node_modules/axios/lib/helpers/buildURL.js"
            );
            var proxy_from_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! proxy-from-env */
              "../node_modules/proxy-from-env/index.js"
            );
            var http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! http */
              "http"
            );
            var https__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! https */
              "https"
            );
            var util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! util */
              "util"
            );
            var follow_redirects__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! follow-redirects */
              "../node_modules/follow-redirects/index.js"
            );
            var zlib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
              /*! zlib */
              "zlib"
            );
            var _env_data_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__2(
              /*! ../env/data.js */
              "../node_modules/axios/lib/env/data.js"
            );
            var _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__2(
              /*! ../defaults/transitional.js */
              "../node_modules/axios/lib/defaults/transitional.js"
            );
            var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(
              /*! ../core/AxiosError.js */
              "../node_modules/axios/lib/core/AxiosError.js"
            );
            var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(
              /*! ../cancel/CanceledError.js */
              "../node_modules/axios/lib/cancel/CanceledError.js"
            );
            var _platform_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
              /*! ../platform/index.js */
              "../node_modules/axios/lib/platform/node/index.js"
            );
            var _helpers_fromDataURI_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(
              /*! ../helpers/fromDataURI.js */
              "../node_modules/axios/lib/helpers/fromDataURI.js"
            );
            var stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
              /*! stream */
              "stream"
            );
            var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__2(
              /*! ../core/AxiosHeaders.js */
              "../node_modules/axios/lib/core/AxiosHeaders.js"
            );
            var _helpers_AxiosTransformStream_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__2(
              /*! ../helpers/AxiosTransformStream.js */
              "../node_modules/axios/lib/helpers/AxiosTransformStream.js"
            );
            var events__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
              /*! events */
              "events"
            );
            var _helpers_formDataToStream_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__2(
              /*! ../helpers/formDataToStream.js */
              "../node_modules/axios/lib/helpers/formDataToStream.js"
            );
            var _helpers_readBlob_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__2(
              /*! ../helpers/readBlob.js */
              "../node_modules/axios/lib/helpers/readBlob.js"
            );
            var _helpers_ZlibHeaderTransformStream_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__2(
              /*! ../helpers/ZlibHeaderTransformStream.js */
              "../node_modules/axios/lib/helpers/ZlibHeaderTransformStream.js"
            );
            var _helpers_callbackify_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
              /*! ../helpers/callbackify.js */
              "../node_modules/axios/lib/helpers/callbackify.js"
            );
            const zlibOptions = {
              flush: zlib__WEBPACK_IMPORTED_MODULE_5__.constants.Z_SYNC_FLUSH,
              finishFlush: zlib__WEBPACK_IMPORTED_MODULE_5__.constants.Z_SYNC_FLUSH
            };
            const brotliOptions = {
              flush: zlib__WEBPACK_IMPORTED_MODULE_5__.constants.BROTLI_OPERATION_FLUSH,
              finishFlush: zlib__WEBPACK_IMPORTED_MODULE_5__.constants.BROTLI_OPERATION_FLUSH
            };
            const isBrotliSupported = _utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isFunction(zlib__WEBPACK_IMPORTED_MODULE_5__.createBrotliDecompress);
            const { http: httpFollow, https: httpsFollow } = follow_redirects__WEBPACK_IMPORTED_MODULE_4__;
            const isHttps = /https:?/;
            const supportedProtocols = _platform_index_js__WEBPACK_IMPORTED_MODULE_9__["default"].protocols.map((protocol) => {
              return protocol + ":";
            });
            function dispatchBeforeRedirect(options2) {
              if (options2.beforeRedirects.proxy) {
                options2.beforeRedirects.proxy(options2);
              }
              if (options2.beforeRedirects.config) {
                options2.beforeRedirects.config(options2);
              }
            }
            function setProxy(options2, configProxy, location) {
              let proxy = configProxy;
              if (!proxy && proxy !== false) {
                const proxyUrl = (0, proxy_from_env__WEBPACK_IMPORTED_MODULE_0__.getProxyForUrl)(location);
                if (proxyUrl) {
                  proxy = new URL(proxyUrl);
                }
              }
              if (proxy) {
                if (proxy.username) {
                  proxy.auth = (proxy.username || "") + ":" + (proxy.password || "");
                }
                if (proxy.auth) {
                  if (proxy.auth.username || proxy.auth.password) {
                    proxy.auth = (proxy.auth.username || "") + ":" + (proxy.auth.password || "");
                  }
                  const base642 = Buffer.from(proxy.auth, "utf8").toString("base64");
                  options2.headers["Proxy-Authorization"] = "Basic " + base642;
                }
                options2.headers.host = options2.hostname + (options2.port ? ":" + options2.port : "");
                const proxyHost = proxy.hostname || proxy.host;
                options2.hostname = proxyHost;
                options2.host = proxyHost;
                options2.port = proxy.port;
                options2.path = location;
                if (proxy.protocol) {
                  options2.protocol = proxy.protocol.includes(":") ? proxy.protocol : `${proxy.protocol}:`;
                }
              }
              options2.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
                setProxy(redirectOptions, configProxy, redirectOptions.href);
              };
            }
            const isHttpAdapterSupported = typeof process !== "undefined" && _utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].kindOf(process) === "process";
            const wrapAsync = (asyncExecutor) => {
              return new Promise((resolve2, reject) => {
                let onDone;
                let isDone;
                const done = (value, isRejected) => {
                  if (isDone)
                    return;
                  isDone = true;
                  onDone && onDone(value, isRejected);
                };
                const _resolve = (value) => {
                  done(value);
                  resolve2(value);
                };
                const _reject = (reason) => {
                  done(reason, true);
                  reject(reason);
                };
                asyncExecutor(_resolve, _reject, (onDoneHandler) => onDone = onDoneHandler).catch(_reject);
              });
            };
            const __WEBPACK_DEFAULT_EXPORT__ = isHttpAdapterSupported && function httpAdapter(config) {
              return wrapAsync(async function dispatchHttpRequest(resolve2, reject, onDone) {
                let { data, lookup, family } = config;
                const { responseType, responseEncoding } = config;
                const method = config.method.toUpperCase();
                let isDone;
                let rejected = false;
                let req;
                if (lookup && _utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isAsyncFn(lookup)) {
                  lookup = (0, _helpers_callbackify_js__WEBPACK_IMPORTED_MODULE_10__["default"])(lookup, (entry) => {
                    if (_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isString(entry)) {
                      entry = [entry, entry.indexOf(".") < 0 ? 6 : 4];
                    } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isArray(entry)) {
                      throw new TypeError("lookup async function must return an array [ip: string, family: number]]");
                    }
                    return entry;
                  });
                }
                const emitter = new events__WEBPACK_IMPORTED_MODULE_7__();
                const onFinished = () => {
                  if (config.cancelToken) {
                    config.cancelToken.unsubscribe(abort);
                  }
                  if (config.signal) {
                    config.signal.removeEventListener("abort", abort);
                  }
                  emitter.removeAllListeners();
                };
                onDone((value, isRejected) => {
                  isDone = true;
                  if (isRejected) {
                    rejected = true;
                    onFinished();
                  }
                });
                function abort(reason) {
                  emitter.emit("abort", !reason || reason.type ? new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_11__["default"](null, config, req) : reason);
                }
                emitter.once("abort", reject);
                if (config.cancelToken || config.signal) {
                  config.cancelToken && config.cancelToken.subscribe(abort);
                  if (config.signal) {
                    config.signal.aborted ? abort() : config.signal.addEventListener("abort", abort);
                  }
                }
                const fullPath = (0, _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_12__["default"])(config.baseURL, config.url);
                const parsed = new URL(fullPath, "http://localhost");
                const protocol = parsed.protocol || supportedProtocols[0];
                if (protocol === "data:") {
                  let convertedData;
                  if (method !== "GET") {
                    return (0, _core_settle_js__WEBPACK_IMPORTED_MODULE_13__["default"])(resolve2, reject, {
                      status: 405,
                      statusText: "method not allowed",
                      headers: {},
                      config
                    });
                  }
                  try {
                    convertedData = (0, _helpers_fromDataURI_js__WEBPACK_IMPORTED_MODULE_14__["default"])(config.url, responseType === "blob", {
                      Blob: config.env && config.env.Blob
                    });
                  } catch (err) {
                    throw _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].from(err, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].ERR_BAD_REQUEST, config);
                  }
                  if (responseType === "text") {
                    convertedData = convertedData.toString(responseEncoding);
                    if (!responseEncoding || responseEncoding === "utf8") {
                      convertedData = _utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].stripBOM(convertedData);
                    }
                  } else if (responseType === "stream") {
                    convertedData = stream__WEBPACK_IMPORTED_MODULE_6__.Readable.from(convertedData);
                  }
                  return (0, _core_settle_js__WEBPACK_IMPORTED_MODULE_13__["default"])(resolve2, reject, {
                    data: convertedData,
                    status: 200,
                    statusText: "OK",
                    headers: new _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_16__["default"](),
                    config
                  });
                }
                if (supportedProtocols.indexOf(protocol) === -1) {
                  return reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"](
                    "Unsupported protocol " + protocol,
                    _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].ERR_BAD_REQUEST,
                    config
                  ));
                }
                const headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_16__["default"].from(config.headers).normalize();
                headers.set("User-Agent", "axios/" + _env_data_js__WEBPACK_IMPORTED_MODULE_17__.VERSION, false);
                const onDownloadProgress = config.onDownloadProgress;
                const onUploadProgress = config.onUploadProgress;
                const maxRate = config.maxRate;
                let maxUploadRate = void 0;
                let maxDownloadRate = void 0;
                if (_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isSpecCompliantForm(data)) {
                  const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);
                  data = (0, _helpers_formDataToStream_js__WEBPACK_IMPORTED_MODULE_18__["default"])(data, (formHeaders) => {
                    headers.set(formHeaders);
                  }, {
                    tag: `axios-${_env_data_js__WEBPACK_IMPORTED_MODULE_17__.VERSION}-boundary`,
                    boundary: userBoundary && userBoundary[1] || void 0
                  });
                } else if (_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isFormData(data) && _utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isFunction(data.getHeaders)) {
                  headers.set(data.getHeaders());
                  if (!headers.hasContentLength()) {
                    try {
                      const knownLength = await util__WEBPACK_IMPORTED_MODULE_3__.promisify(data.getLength).call(data);
                      Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
                    } catch (e) {
                    }
                  }
                } else if (_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isBlob(data)) {
                  data.size && headers.setContentType(data.type || "application/octet-stream");
                  headers.setContentLength(data.size || 0);
                  data = stream__WEBPACK_IMPORTED_MODULE_6__.Readable.from((0, _helpers_readBlob_js__WEBPACK_IMPORTED_MODULE_19__["default"])(data));
                } else if (data && !_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isStream(data)) {
                  if (Buffer.isBuffer(data)) {
                  } else if (_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isArrayBuffer(data)) {
                    data = Buffer.from(new Uint8Array(data));
                  } else if (_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isString(data)) {
                    data = Buffer.from(data, "utf-8");
                  } else {
                    return reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"](
                      "Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",
                      _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].ERR_BAD_REQUEST,
                      config
                    ));
                  }
                  headers.setContentLength(data.length, false);
                  if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
                    return reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"](
                      "Request body larger than maxBodyLength limit",
                      _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].ERR_BAD_REQUEST,
                      config
                    ));
                  }
                }
                const contentLength = _utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].toFiniteNumber(headers.getContentLength());
                if (_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isArray(maxRate)) {
                  maxUploadRate = maxRate[0];
                  maxDownloadRate = maxRate[1];
                } else {
                  maxUploadRate = maxDownloadRate = maxRate;
                }
                if (data && (onUploadProgress || maxUploadRate)) {
                  if (!_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isStream(data)) {
                    data = stream__WEBPACK_IMPORTED_MODULE_6__.Readable.from(data, { objectMode: false });
                  }
                  data = stream__WEBPACK_IMPORTED_MODULE_6__.pipeline([data, new _helpers_AxiosTransformStream_js__WEBPACK_IMPORTED_MODULE_20__["default"]({
                    length: contentLength,
                    maxRate: _utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].toFiniteNumber(maxUploadRate)
                  })], _utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].noop);
                  onUploadProgress && data.on("progress", (progress) => {
                    onUploadProgress(Object.assign(progress, {
                      upload: true
                    }));
                  });
                }
                let auth = void 0;
                if (config.auth) {
                  const username = config.auth.username || "";
                  const password = config.auth.password || "";
                  auth = username + ":" + password;
                }
                if (!auth && parsed.username) {
                  const urlUsername = parsed.username;
                  const urlPassword = parsed.password;
                  auth = urlUsername + ":" + urlPassword;
                }
                auth && headers.delete("authorization");
                let path2;
                try {
                  path2 = (0, _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_21__["default"])(
                    parsed.pathname + parsed.search,
                    config.params,
                    config.paramsSerializer
                  ).replace(/^\?/, "");
                } catch (err) {
                  const customErr = new Error(err.message);
                  customErr.config = config;
                  customErr.url = config.url;
                  customErr.exists = true;
                  return reject(customErr);
                }
                headers.set(
                  "Accept-Encoding",
                  "gzip, compress, deflate" + (isBrotliSupported ? ", br" : ""),
                  false
                );
                const options2 = {
                  path: path2,
                  method,
                  headers: headers.toJSON(),
                  agents: { http: config.httpAgent, https: config.httpsAgent },
                  auth,
                  protocol,
                  family,
                  beforeRedirect: dispatchBeforeRedirect,
                  beforeRedirects: {}
                };
                !_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isUndefined(lookup) && (options2.lookup = lookup);
                if (config.socketPath) {
                  options2.socketPath = config.socketPath;
                } else {
                  options2.hostname = parsed.hostname;
                  options2.port = parsed.port;
                  setProxy(options2, config.proxy, protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options2.path);
                }
                let transport;
                const isHttpsRequest = isHttps.test(options2.protocol);
                options2.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
                if (config.transport) {
                  transport = config.transport;
                } else if (config.maxRedirects === 0) {
                  transport = isHttpsRequest ? https__WEBPACK_IMPORTED_MODULE_2__ : http__WEBPACK_IMPORTED_MODULE_1__;
                } else {
                  if (config.maxRedirects) {
                    options2.maxRedirects = config.maxRedirects;
                  }
                  if (config.beforeRedirect) {
                    options2.beforeRedirects.config = config.beforeRedirect;
                  }
                  transport = isHttpsRequest ? httpsFollow : httpFollow;
                }
                if (config.maxBodyLength > -1) {
                  options2.maxBodyLength = config.maxBodyLength;
                } else {
                  options2.maxBodyLength = Infinity;
                }
                if (config.insecureHTTPParser) {
                  options2.insecureHTTPParser = config.insecureHTTPParser;
                }
                req = transport.request(options2, function handleResponse(res) {
                  if (req.destroyed)
                    return;
                  const streams = [res];
                  const responseLength = +res.headers["content-length"];
                  if (onDownloadProgress) {
                    const transformStream = new _helpers_AxiosTransformStream_js__WEBPACK_IMPORTED_MODULE_20__["default"]({
                      length: _utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].toFiniteNumber(responseLength),
                      maxRate: _utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].toFiniteNumber(maxDownloadRate)
                    });
                    onDownloadProgress && transformStream.on("progress", (progress) => {
                      onDownloadProgress(Object.assign(progress, {
                        download: true
                      }));
                    });
                    streams.push(transformStream);
                  }
                  let responseStream = res;
                  const lastRequest = res.req || req;
                  if (config.decompress !== false && res.headers["content-encoding"]) {
                    if (method === "HEAD" || res.statusCode === 204) {
                      delete res.headers["content-encoding"];
                    }
                    switch ((res.headers["content-encoding"] || "").toLowerCase()) {
                      case "gzip":
                      case "x-gzip":
                      case "compress":
                      case "x-compress":
                        streams.push(zlib__WEBPACK_IMPORTED_MODULE_5__.createUnzip(zlibOptions));
                        delete res.headers["content-encoding"];
                        break;
                      case "deflate":
                        streams.push(new _helpers_ZlibHeaderTransformStream_js__WEBPACK_IMPORTED_MODULE_22__["default"]());
                        streams.push(zlib__WEBPACK_IMPORTED_MODULE_5__.createUnzip(zlibOptions));
                        delete res.headers["content-encoding"];
                        break;
                      case "br":
                        if (isBrotliSupported) {
                          streams.push(zlib__WEBPACK_IMPORTED_MODULE_5__.createBrotliDecompress(brotliOptions));
                          delete res.headers["content-encoding"];
                        }
                    }
                  }
                  responseStream = streams.length > 1 ? stream__WEBPACK_IMPORTED_MODULE_6__.pipeline(streams, _utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].noop) : streams[0];
                  const offListeners = stream__WEBPACK_IMPORTED_MODULE_6__.finished(responseStream, () => {
                    offListeners();
                    onFinished();
                  });
                  const response = {
                    status: res.statusCode,
                    statusText: res.statusMessage,
                    headers: new _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_16__["default"](res.headers),
                    config,
                    request: lastRequest
                  };
                  if (responseType === "stream") {
                    response.data = responseStream;
                    (0, _core_settle_js__WEBPACK_IMPORTED_MODULE_13__["default"])(resolve2, reject, response);
                  } else {
                    const responseBuffer = [];
                    let totalResponseBytes = 0;
                    responseStream.on("data", function handleStreamData(chunk) {
                      responseBuffer.push(chunk);
                      totalResponseBytes += chunk.length;
                      if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
                        rejected = true;
                        responseStream.destroy();
                        reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"](
                          "maxContentLength size of " + config.maxContentLength + " exceeded",
                          _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].ERR_BAD_RESPONSE,
                          config,
                          lastRequest
                        ));
                      }
                    });
                    responseStream.on("aborted", function handlerStreamAborted() {
                      if (rejected) {
                        return;
                      }
                      const err = new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"](
                        "maxContentLength size of " + config.maxContentLength + " exceeded",
                        _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].ERR_BAD_RESPONSE,
                        config,
                        lastRequest
                      );
                      responseStream.destroy(err);
                      reject(err);
                    });
                    responseStream.on("error", function handleStreamError(err) {
                      if (req.destroyed)
                        return;
                      reject(_core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].from(err, null, config, lastRequest));
                    });
                    responseStream.on("end", function handleStreamEnd() {
                      try {
                        let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
                        if (responseType !== "arraybuffer") {
                          responseData = responseData.toString(responseEncoding);
                          if (!responseEncoding || responseEncoding === "utf8") {
                            responseData = _utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].stripBOM(responseData);
                          }
                        }
                        response.data = responseData;
                      } catch (err) {
                        reject(_core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].from(err, null, config, response.request, response));
                      }
                      (0, _core_settle_js__WEBPACK_IMPORTED_MODULE_13__["default"])(resolve2, reject, response);
                    });
                  }
                  emitter.once("abort", (err) => {
                    if (!responseStream.destroyed) {
                      responseStream.emit("error", err);
                      responseStream.destroy();
                    }
                  });
                });
                emitter.once("abort", (err) => {
                  reject(err);
                  req.destroy(err);
                });
                req.on("error", function handleRequestError(err) {
                  reject(_core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].from(err, null, config, req));
                });
                req.on("socket", function handleRequestSocket(socket) {
                  socket.setKeepAlive(true, 1e3 * 60);
                });
                if (config.timeout) {
                  const timeout = parseInt(config.timeout, 10);
                  if (Number.isNaN(timeout)) {
                    reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"](
                      "error trying to parse `config.timeout` to int",
                      _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].ERR_BAD_OPTION_VALUE,
                      config,
                      req
                    ));
                    return;
                  }
                  req.setTimeout(timeout, function handleRequestTimeout() {
                    if (isDone)
                      return;
                    let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
                    const transitional = config.transitional || _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_23__["default"];
                    if (config.timeoutErrorMessage) {
                      timeoutErrorMessage = config.timeoutErrorMessage;
                    }
                    reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"](
                      timeoutErrorMessage,
                      transitional.clarifyTimeoutError ? _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].ETIMEDOUT : _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_15__["default"].ECONNABORTED,
                      config,
                      req
                    ));
                    abort();
                  });
                }
                if (_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"].isStream(data)) {
                  let ended = false;
                  let errored = false;
                  data.on("end", () => {
                    ended = true;
                  });
                  data.once("error", (err) => {
                    errored = true;
                    req.destroy(err);
                  });
                  data.on("close", () => {
                    if (!ended && !errored) {
                      abort(new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_11__["default"]("Request stream has been aborted", config, req));
                    }
                  });
                  data.pipe(req);
                } else {
                  req.end(data);
                }
              });
            };
            const __setProxy = setProxy;
          }
        ),
        /***/
        "../node_modules/axios/lib/adapters/xhr.js": (
          /*!*************************************************!*\
            !*** ../node_modules/axios/lib/adapters/xhr.js ***!
            \*************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _core_settle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
              /*! ./../core/settle.js */
              "../node_modules/axios/lib/core/settle.js"
            );
            var _helpers_cookies_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
              /*! ./../helpers/cookies.js */
              "../node_modules/axios/lib/helpers/cookies.js"
            );
            var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
              /*! ./../helpers/buildURL.js */
              "../node_modules/axios/lib/helpers/buildURL.js"
            );
            var _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../core/buildFullPath.js */
              "../node_modules/axios/lib/core/buildFullPath.js"
            );
            var _helpers_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
              /*! ./../helpers/isURLSameOrigin.js */
              "../node_modules/axios/lib/helpers/isURLSameOrigin.js"
            );
            var _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
              /*! ../defaults/transitional.js */
              "../node_modules/axios/lib/defaults/transitional.js"
            );
            var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
              /*! ../core/AxiosError.js */
              "../node_modules/axios/lib/core/AxiosError.js"
            );
            var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(
              /*! ../cancel/CanceledError.js */
              "../node_modules/axios/lib/cancel/CanceledError.js"
            );
            var _helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
              /*! ../helpers/parseProtocol.js */
              "../node_modules/axios/lib/helpers/parseProtocol.js"
            );
            var _platform_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../platform/index.js */
              "../node_modules/axios/lib/platform/node/index.js"
            );
            var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../core/AxiosHeaders.js */
              "../node_modules/axios/lib/core/AxiosHeaders.js"
            );
            var _helpers_speedometer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../helpers/speedometer.js */
              "../node_modules/axios/lib/helpers/speedometer.js"
            );
            function progressEventReducer(listener, isDownloadStream) {
              let bytesNotified = 0;
              const _speedometer = (0, _helpers_speedometer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(50, 250);
              return (e) => {
                const loaded = e.loaded;
                const total = e.lengthComputable ? e.total : void 0;
                const progressBytes = loaded - bytesNotified;
                const rate = _speedometer(progressBytes);
                const inRange = loaded <= total;
                bytesNotified = loaded;
                const data = {
                  loaded,
                  total,
                  progress: total ? loaded / total : void 0,
                  bytes: progressBytes,
                  rate: rate ? rate : void 0,
                  estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
                  event: e
                };
                data[isDownloadStream ? "download" : "upload"] = true;
                listener(data);
              };
            }
            const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
            const __WEBPACK_DEFAULT_EXPORT__ = isXHRAdapterSupported && function(config) {
              return new Promise(function dispatchXhrRequest(resolve2, reject) {
                let requestData = config.data;
                const requestHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(config.headers).normalize();
                const responseType = config.responseType;
                let onCanceled;
                function done() {
                  if (config.cancelToken) {
                    config.cancelToken.unsubscribe(onCanceled);
                  }
                  if (config.signal) {
                    config.signal.removeEventListener("abort", onCanceled);
                  }
                }
                let contentType;
                if (_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isFormData(requestData)) {
                  if (_platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].isStandardBrowserEnv || _platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].isStandardBrowserWebWorkerEnv) {
                    requestHeaders.setContentType(false);
                  } else if (!requestHeaders.getContentType(/^\s*multipart\/form-data/)) {
                    requestHeaders.setContentType("multipart/form-data");
                  } else if (_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isString(contentType = requestHeaders.getContentType())) {
                    requestHeaders.setContentType(contentType.replace(/^\s*(multipart\/form-data);+/, "$1"));
                  }
                }
                let request = new XMLHttpRequest();
                if (config.auth) {
                  const username = config.auth.username || "";
                  const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
                  requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
                }
                const fullPath = (0, _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__["default"])(config.baseURL, config.url);
                request.open(config.method.toUpperCase(), (0, _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_5__["default"])(fullPath, config.params, config.paramsSerializer), true);
                request.timeout = config.timeout;
                function onloadend() {
                  if (!request) {
                    return;
                  }
                  const responseHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(
                    "getAllResponseHeaders" in request && request.getAllResponseHeaders()
                  );
                  const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
                  const response = {
                    data: responseData,
                    status: request.status,
                    statusText: request.statusText,
                    headers: responseHeaders,
                    config,
                    request
                  };
                  (0, _core_settle_js__WEBPACK_IMPORTED_MODULE_6__["default"])(function _resolve(value) {
                    resolve2(value);
                    done();
                  }, function _reject(err) {
                    reject(err);
                    done();
                  }, response);
                  request = null;
                }
                if ("onloadend" in request) {
                  request.onloadend = onloadend;
                } else {
                  request.onreadystatechange = function handleLoad() {
                    if (!request || request.readyState !== 4) {
                      return;
                    }
                    if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
                      return;
                    }
                    setTimeout(onloadend);
                  };
                }
                request.onabort = function handleAbort() {
                  if (!request) {
                    return;
                  }
                  reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"]("Request aborted", _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ECONNABORTED, config, request));
                  request = null;
                };
                request.onerror = function handleError() {
                  reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"]("Network Error", _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ERR_NETWORK, config, request));
                  request = null;
                };
                request.ontimeout = function handleTimeout() {
                  let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
                  const transitional = config.transitional || _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_8__["default"];
                  if (config.timeoutErrorMessage) {
                    timeoutErrorMessage = config.timeoutErrorMessage;
                  }
                  reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"](
                    timeoutErrorMessage,
                    transitional.clarifyTimeoutError ? _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ETIMEDOUT : _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ECONNABORTED,
                    config,
                    request
                  ));
                  request = null;
                };
                if (_platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].isStandardBrowserEnv) {
                  const xsrfValue = (config.withCredentials || (0, _helpers_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_9__["default"])(fullPath)) && config.xsrfCookieName && _helpers_cookies_js__WEBPACK_IMPORTED_MODULE_10__["default"].read(config.xsrfCookieName);
                  if (xsrfValue) {
                    requestHeaders.set(config.xsrfHeaderName, xsrfValue);
                  }
                }
                requestData === void 0 && requestHeaders.setContentType(null);
                if ("setRequestHeader" in request) {
                  _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(requestHeaders.toJSON(), function setRequestHeader(val, key2) {
                    request.setRequestHeader(key2, val);
                  });
                }
                if (!_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isUndefined(config.withCredentials)) {
                  request.withCredentials = !!config.withCredentials;
                }
                if (responseType && responseType !== "json") {
                  request.responseType = config.responseType;
                }
                if (typeof config.onDownloadProgress === "function") {
                  request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
                }
                if (typeof config.onUploadProgress === "function" && request.upload) {
                  request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
                }
                if (config.cancelToken || config.signal) {
                  onCanceled = (cancel) => {
                    if (!request) {
                      return;
                    }
                    reject(!cancel || cancel.type ? new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_11__["default"](null, config, request) : cancel);
                    request.abort();
                    request = null;
                  };
                  config.cancelToken && config.cancelToken.subscribe(onCanceled);
                  if (config.signal) {
                    config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
                  }
                }
                const protocol = (0, _helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_12__["default"])(fullPath);
                if (protocol && _platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].protocols.indexOf(protocol) === -1) {
                  reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"]("Unsupported protocol " + protocol + ":", _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ERR_BAD_REQUEST, config));
                  return;
                }
                request.send(requestData || null);
              });
            };
          }
        ),
        /***/
        "../node_modules/axios/lib/axios.js": (
          /*!******************************************!*\
            !*** ../node_modules/axios/lib/axios.js ***!
            \******************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./helpers/bind.js */
              "../node_modules/axios/lib/helpers/bind.js"
            );
            var _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./core/Axios.js */
              "../node_modules/axios/lib/core/Axios.js"
            );
            var _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ./core/mergeConfig.js */
              "../node_modules/axios/lib/core/mergeConfig.js"
            );
            var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ./defaults/index.js */
              "../node_modules/axios/lib/defaults/index.js"
            );
            var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(
              /*! ./helpers/formDataToJSON.js */
              "../node_modules/axios/lib/helpers/formDataToJSON.js"
            );
            var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
              /*! ./cancel/CanceledError.js */
              "../node_modules/axios/lib/cancel/CanceledError.js"
            );
            var _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
              /*! ./cancel/CancelToken.js */
              "../node_modules/axios/lib/cancel/CancelToken.js"
            );
            var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
              /*! ./cancel/isCancel.js */
              "../node_modules/axios/lib/cancel/isCancel.js"
            );
            var _env_data_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
              /*! ./env/data.js */
              "../node_modules/axios/lib/env/data.js"
            );
            var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
              /*! ./helpers/toFormData.js */
              "../node_modules/axios/lib/helpers/toFormData.js"
            );
            var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
              /*! ./core/AxiosError.js */
              "../node_modules/axios/lib/core/AxiosError.js"
            );
            var _helpers_spread_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(
              /*! ./helpers/spread.js */
              "../node_modules/axios/lib/helpers/spread.js"
            );
            var _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
              /*! ./helpers/isAxiosError.js */
              "../node_modules/axios/lib/helpers/isAxiosError.js"
            );
            var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(
              /*! ./core/AxiosHeaders.js */
              "../node_modules/axios/lib/core/AxiosHeaders.js"
            );
            var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(
              /*! ./adapters/adapters.js */
              "../node_modules/axios/lib/adapters/adapters.js"
            );
            var _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__2(
              /*! ./helpers/HttpStatusCode.js */
              "../node_modules/axios/lib/helpers/HttpStatusCode.js"
            );
            function createInstance(defaultConfig) {
              const context = new _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"](defaultConfig);
              const instance = (0, _helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__["default"])(_core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.request, context);
              _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(instance, _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype, context, { allOwnKeys: true });
              _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(instance, context, null, { allOwnKeys: true });
              instance.create = function create(instanceConfig) {
                return createInstance((0, _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"])(defaultConfig, instanceConfig));
              };
              return instance;
            }
            const axios = createInstance(_defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"]);
            axios.Axios = _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"];
            axios.CanceledError = _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_5__["default"];
            axios.CancelToken = _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_6__["default"];
            axios.isCancel = _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_7__["default"];
            axios.VERSION = _env_data_js__WEBPACK_IMPORTED_MODULE_8__.VERSION;
            axios.toFormData = _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_9__["default"];
            axios.AxiosError = _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_10__["default"];
            axios.Cancel = axios.CanceledError;
            axios.all = function all(promises) {
              return Promise.all(promises);
            };
            axios.spread = _helpers_spread_js__WEBPACK_IMPORTED_MODULE_11__["default"];
            axios.isAxiosError = _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_12__["default"];
            axios.mergeConfig = _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"];
            axios.AxiosHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_13__["default"];
            axios.formToJSON = (thing) => (0, _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_14__["default"])(_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isHTMLForm(thing) ? new FormData(thing) : thing);
            axios.getAdapter = _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_15__["default"].getAdapter;
            axios.HttpStatusCode = _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_16__["default"];
            axios.default = axios;
            const __WEBPACK_DEFAULT_EXPORT__ = axios;
          }
        ),
        /***/
        "../node_modules/axios/lib/cancel/CancelToken.js": (
          /*!*******************************************************!*\
            !*** ../node_modules/axios/lib/cancel/CancelToken.js ***!
            \*******************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./CanceledError.js */
              "../node_modules/axios/lib/cancel/CanceledError.js"
            );
            class CancelToken {
              constructor(executor) {
                if (typeof executor !== "function") {
                  throw new TypeError("executor must be a function.");
                }
                let resolvePromise;
                this.promise = new Promise(function promiseExecutor(resolve2) {
                  resolvePromise = resolve2;
                });
                const token = this;
                this.promise.then((cancel) => {
                  if (!token._listeners)
                    return;
                  let i = token._listeners.length;
                  while (i-- > 0) {
                    token._listeners[i](cancel);
                  }
                  token._listeners = null;
                });
                this.promise.then = (onfulfilled) => {
                  let _resolve;
                  const promise = new Promise((resolve2) => {
                    token.subscribe(resolve2);
                    _resolve = resolve2;
                  }).then(onfulfilled);
                  promise.cancel = function reject() {
                    token.unsubscribe(_resolve);
                  };
                  return promise;
                };
                executor(function cancel(message, config, request) {
                  if (token.reason) {
                    return;
                  }
                  token.reason = new _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__["default"](message, config, request);
                  resolvePromise(token.reason);
                });
              }
              /**
               * Throws a `CanceledError` if cancellation has been requested.
               */
              throwIfRequested() {
                if (this.reason) {
                  throw this.reason;
                }
              }
              /**
               * Subscribe to the cancel signal
               */
              subscribe(listener) {
                if (this.reason) {
                  listener(this.reason);
                  return;
                }
                if (this._listeners) {
                  this._listeners.push(listener);
                } else {
                  this._listeners = [listener];
                }
              }
              /**
               * Unsubscribe from the cancel signal
               */
              unsubscribe(listener) {
                if (!this._listeners) {
                  return;
                }
                const index13 = this._listeners.indexOf(listener);
                if (index13 !== -1) {
                  this._listeners.splice(index13, 1);
                }
              }
              /**
               * Returns an object that contains a new `CancelToken` and a function that, when called,
               * cancels the `CancelToken`.
               */
              static source() {
                let cancel;
                const token = new CancelToken(function executor(c) {
                  cancel = c;
                });
                return {
                  token,
                  cancel
                };
              }
            }
            const __WEBPACK_DEFAULT_EXPORT__ = CancelToken;
          }
        ),
        /***/
        "../node_modules/axios/lib/cancel/CanceledError.js": (
          /*!*********************************************************!*\
            !*** ../node_modules/axios/lib/cancel/CanceledError.js ***!
            \*********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../core/AxiosError.js */
              "../node_modules/axios/lib/core/AxiosError.js"
            );
            var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            function CanceledError(message, config, request) {
              _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(this, message == null ? "canceled" : message, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_CANCELED, config, request);
              this.name = "CanceledError";
            }
            _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].inherits(CanceledError, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"], {
              __CANCEL__: true
            });
            const __WEBPACK_DEFAULT_EXPORT__ = CanceledError;
          }
        ),
        /***/
        "../node_modules/axios/lib/cancel/isCancel.js": (
          /*!****************************************************!*\
            !*** ../node_modules/axios/lib/cancel/isCancel.js ***!
            \****************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                isCancel
              )
              /* harmony export */
            });
            function isCancel(value) {
              return !!(value && value.__CANCEL__);
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/core/Axios.js": (
          /*!***********************************************!*\
            !*** ../node_modules/axios/lib/core/Axios.js ***!
            \***********************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ./../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
              /*! ../helpers/buildURL.js */
              "../node_modules/axios/lib/helpers/buildURL.js"
            );
            var _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./InterceptorManager.js */
              "../node_modules/axios/lib/core/InterceptorManager.js"
            );
            var _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
              /*! ./dispatchRequest.js */
              "../node_modules/axios/lib/core/dispatchRequest.js"
            );
            var _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./mergeConfig.js */
              "../node_modules/axios/lib/core/mergeConfig.js"
            );
            var _buildFullPath_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
              /*! ./buildFullPath.js */
              "../node_modules/axios/lib/core/buildFullPath.js"
            );
            var _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../helpers/validator.js */
              "../node_modules/axios/lib/helpers/validator.js"
            );
            var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ./AxiosHeaders.js */
              "../node_modules/axios/lib/core/AxiosHeaders.js"
            );
            const validators = _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].validators;
            class Axios {
              constructor(instanceConfig) {
                this.defaults = instanceConfig;
                this.interceptors = {
                  request: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__["default"](),
                  response: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]()
                };
              }
              /**
               * Dispatch a request
               *
               * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
               * @param {?Object} config
               *
               * @returns {Promise} The Promise to be fulfilled
               */
              request(configOrUrl, config) {
                if (typeof configOrUrl === "string") {
                  config = config || {};
                  config.url = configOrUrl;
                } else {
                  config = configOrUrl || {};
                }
                config = (0, _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this.defaults, config);
                const { transitional, paramsSerializer, headers } = config;
                if (transitional !== void 0) {
                  _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].assertOptions(transitional, {
                    silentJSONParsing: validators.transitional(validators.boolean),
                    forcedJSONParsing: validators.transitional(validators.boolean),
                    clarifyTimeoutError: validators.transitional(validators.boolean)
                  }, false);
                }
                if (paramsSerializer != null) {
                  if (_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].isFunction(paramsSerializer)) {
                    config.paramsSerializer = {
                      serialize: paramsSerializer
                    };
                  } else {
                    _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].assertOptions(paramsSerializer, {
                      encode: validators.function,
                      serialize: validators.function
                    }, true);
                  }
                }
                config.method = (config.method || this.defaults.method || "get").toLowerCase();
                let contextHeaders = headers && _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].merge(
                  headers.common,
                  headers[config.method]
                );
                headers && _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(
                  ["delete", "get", "head", "post", "put", "patch", "common"],
                  (method) => {
                    delete headers[method];
                  }
                );
                config.headers = _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__["default"].concat(contextHeaders, headers);
                const requestInterceptorChain = [];
                let synchronousRequestInterceptors = true;
                this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                  if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
                    return;
                  }
                  synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
                  requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
                });
                const responseInterceptorChain = [];
                this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                  responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
                });
                let promise;
                let i = 0;
                let len;
                if (!synchronousRequestInterceptors) {
                  const chain = [_dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__["default"].bind(this), void 0];
                  chain.unshift.apply(chain, requestInterceptorChain);
                  chain.push.apply(chain, responseInterceptorChain);
                  len = chain.length;
                  promise = Promise.resolve(config);
                  while (i < len) {
                    promise = promise.then(chain[i++], chain[i++]);
                  }
                  return promise;
                }
                len = requestInterceptorChain.length;
                let newConfig = config;
                i = 0;
                while (i < len) {
                  const onFulfilled = requestInterceptorChain[i++];
                  const onRejected = requestInterceptorChain[i++];
                  try {
                    newConfig = onFulfilled(newConfig);
                  } catch (error3) {
                    onRejected.call(this, error3);
                    break;
                  }
                }
                try {
                  promise = _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__["default"].call(this, newConfig);
                } catch (error3) {
                  return Promise.reject(error3);
                }
                i = 0;
                len = responseInterceptorChain.length;
                while (i < len) {
                  promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
                }
                return promise;
              }
              getUri(config) {
                config = (0, _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this.defaults, config);
                const fullPath = (0, _buildFullPath_js__WEBPACK_IMPORTED_MODULE_6__["default"])(config.baseURL, config.url);
                return (0, _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_7__["default"])(fullPath, config.params, config.paramsSerializer);
              }
            }
            _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
              Axios.prototype[method] = function(url, config) {
                return this.request((0, _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(config || {}, {
                  method,
                  url,
                  data: (config || {}).data
                }));
              };
            });
            _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
              function generateHTTPMethod(isForm) {
                return function httpMethod(url, data, config) {
                  return this.request((0, _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(config || {}, {
                    method,
                    headers: isForm ? {
                      "Content-Type": "multipart/form-data"
                    } : {},
                    url,
                    data
                  }));
                };
              }
              Axios.prototype[method] = generateHTTPMethod();
              Axios.prototype[method + "Form"] = generateHTTPMethod(true);
            });
            const __WEBPACK_DEFAULT_EXPORT__ = Axios;
          }
        ),
        /***/
        "../node_modules/axios/lib/core/AxiosError.js": (
          /*!****************************************************!*\
            !*** ../node_modules/axios/lib/core/AxiosError.js ***!
            \****************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            function AxiosError(message, code, config, request, response) {
              Error.call(this);
              if (Error.captureStackTrace) {
                Error.captureStackTrace(this, this.constructor);
              } else {
                this.stack = new Error().stack;
              }
              this.message = message;
              this.name = "AxiosError";
              code && (this.code = code);
              config && (this.config = config);
              request && (this.request = request);
              response && (this.response = response);
            }
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].inherits(AxiosError, Error, {
              toJSON: function toJSON() {
                return {
                  // Standard
                  message: this.message,
                  name: this.name,
                  // Microsoft
                  description: this.description,
                  number: this.number,
                  // Mozilla
                  fileName: this.fileName,
                  lineNumber: this.lineNumber,
                  columnNumber: this.columnNumber,
                  stack: this.stack,
                  // Axios
                  config: _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toJSONObject(this.config),
                  code: this.code,
                  status: this.response && this.response.status ? this.response.status : null
                };
              }
            });
            const prototype = AxiosError.prototype;
            const descriptors = {};
            [
              "ERR_BAD_OPTION_VALUE",
              "ERR_BAD_OPTION",
              "ECONNABORTED",
              "ETIMEDOUT",
              "ERR_NETWORK",
              "ERR_FR_TOO_MANY_REDIRECTS",
              "ERR_DEPRECATED",
              "ERR_BAD_RESPONSE",
              "ERR_BAD_REQUEST",
              "ERR_CANCELED",
              "ERR_NOT_SUPPORT",
              "ERR_INVALID_URL"
              // eslint-disable-next-line func-names
            ].forEach((code) => {
              descriptors[code] = { value: code };
            });
            Object.defineProperties(AxiosError, descriptors);
            Object.defineProperty(prototype, "isAxiosError", { value: true });
            AxiosError.from = (error3, code, config, request, response, customProps) => {
              const axiosError = Object.create(prototype);
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(error3, axiosError, function filter(obj) {
                return obj !== Error.prototype;
              }, (prop) => {
                return prop !== "isAxiosError";
              });
              AxiosError.call(axiosError, error3.message, code, config, request, response);
              axiosError.cause = error3;
              axiosError.name = error3.name;
              customProps && Object.assign(axiosError, customProps);
              return axiosError;
            };
            const __WEBPACK_DEFAULT_EXPORT__ = AxiosError;
          }
        ),
        /***/
        "../node_modules/axios/lib/core/AxiosHeaders.js": (
          /*!******************************************************!*\
            !*** ../node_modules/axios/lib/core/AxiosHeaders.js ***!
            \******************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../helpers/parseHeaders.js */
              "../node_modules/axios/lib/helpers/parseHeaders.js"
            );
            const $internals = Symbol("internals");
            function normalizeHeader(header) {
              return header && String(header).trim().toLowerCase();
            }
            function normalizeValue(value) {
              if (value === false || value == null) {
                return value;
              }
              return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.map(normalizeValue) : String(value);
            }
            function parseTokens(str) {
              const tokens = /* @__PURE__ */ Object.create(null);
              const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
              let match;
              while (match = tokensRE.exec(str)) {
                tokens[match[1]] = match[2];
              }
              return tokens;
            }
            const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
            function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
              if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(filter)) {
                return filter.call(this, value, header);
              }
              if (isHeaderNameFilter) {
                value = header;
              }
              if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(value))
                return;
              if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(filter)) {
                return value.indexOf(filter) !== -1;
              }
              if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(filter)) {
                return filter.test(value);
              }
            }
            function formatHeader(header) {
              return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
                return char.toUpperCase() + str;
              });
            }
            function buildAccessors(obj, header) {
              const accessorName = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toCamelCase(" " + header);
              ["get", "set", "has"].forEach((methodName) => {
                Object.defineProperty(obj, methodName + accessorName, {
                  value: function(arg1, arg2, arg3) {
                    return this[methodName].call(this, header, arg1, arg2, arg3);
                  },
                  configurable: true
                });
              });
            }
            class AxiosHeaders {
              constructor(headers) {
                headers && this.set(headers);
              }
              set(header, valueOrRewrite, rewrite) {
                const self2 = this;
                function setHeader(_value, _header, _rewrite) {
                  const lHeader = normalizeHeader(_header);
                  if (!lHeader) {
                    throw new Error("header name must be a non-empty string");
                  }
                  const key2 = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(self2, lHeader);
                  if (!key2 || self2[key2] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key2] !== false) {
                    self2[key2 || _header] = normalizeValue(_value);
                  }
                }
                const setHeaders = (headers, _rewrite) => _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
                if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(header) || header instanceof this.constructor) {
                  setHeaders(header, valueOrRewrite);
                } else if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
                  setHeaders((0, _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"])(header), valueOrRewrite);
                } else {
                  header != null && setHeader(valueOrRewrite, header, rewrite);
                }
                return this;
              }
              get(header, parser) {
                header = normalizeHeader(header);
                if (header) {
                  const key2 = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(this, header);
                  if (key2) {
                    const value = this[key2];
                    if (!parser) {
                      return value;
                    }
                    if (parser === true) {
                      return parseTokens(value);
                    }
                    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(parser)) {
                      return parser.call(this, value, key2);
                    }
                    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(parser)) {
                      return parser.exec(value);
                    }
                    throw new TypeError("parser must be boolean|regexp|function");
                  }
                }
              }
              has(header, matcher) {
                header = normalizeHeader(header);
                if (header) {
                  const key2 = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(this, header);
                  return !!(key2 && this[key2] !== void 0 && (!matcher || matchHeaderValue(this, this[key2], key2, matcher)));
                }
                return false;
              }
              delete(header, matcher) {
                const self2 = this;
                let deleted = false;
                function deleteHeader(_header) {
                  _header = normalizeHeader(_header);
                  if (_header) {
                    const key2 = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(self2, _header);
                    if (key2 && (!matcher || matchHeaderValue(self2, self2[key2], key2, matcher))) {
                      delete self2[key2];
                      deleted = true;
                    }
                  }
                }
                if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header)) {
                  header.forEach(deleteHeader);
                } else {
                  deleteHeader(header);
                }
                return deleted;
              }
              clear(matcher) {
                const keys = Object.keys(this);
                let i = keys.length;
                let deleted = false;
                while (i--) {
                  const key2 = keys[i];
                  if (!matcher || matchHeaderValue(this, this[key2], key2, matcher, true)) {
                    delete this[key2];
                    deleted = true;
                  }
                }
                return deleted;
              }
              normalize(format) {
                const self2 = this;
                const headers = {};
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this, (value, header) => {
                  const key2 = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(headers, header);
                  if (key2) {
                    self2[key2] = normalizeValue(value);
                    delete self2[header];
                    return;
                  }
                  const normalized = format ? formatHeader(header) : String(header).trim();
                  if (normalized !== header) {
                    delete self2[header];
                  }
                  self2[normalized] = normalizeValue(value);
                  headers[normalized] = true;
                });
                return this;
              }
              concat(...targets) {
                return this.constructor.concat(this, ...targets);
              }
              toJSON(asStrings) {
                const obj = /* @__PURE__ */ Object.create(null);
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this, (value, header) => {
                  value != null && value !== false && (obj[header] = asStrings && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.join(", ") : value);
                });
                return obj;
              }
              [Symbol.iterator]() {
                return Object.entries(this.toJSON())[Symbol.iterator]();
              }
              toString() {
                return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
              }
              get [Symbol.toStringTag]() {
                return "AxiosHeaders";
              }
              static from(thing) {
                return thing instanceof this ? thing : new this(thing);
              }
              static concat(first, ...targets) {
                const computed = new this(first);
                targets.forEach((target) => computed.set(target));
                return computed;
              }
              static accessor(header) {
                const internals = this[$internals] = this[$internals] = {
                  accessors: {}
                };
                const accessors = internals.accessors;
                const prototype = this.prototype;
                function defineAccessor(_header) {
                  const lHeader = normalizeHeader(_header);
                  if (!accessors[lHeader]) {
                    buildAccessors(prototype, _header);
                    accessors[lHeader] = true;
                  }
                }
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
                return this;
              }
            }
            AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].reduceDescriptors(AxiosHeaders.prototype, ({ value }, key2) => {
              let mapped = key2[0].toUpperCase() + key2.slice(1);
              return {
                get: () => value,
                set(headerValue) {
                  this[mapped] = headerValue;
                }
              };
            });
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].freezeMethods(AxiosHeaders);
            const __WEBPACK_DEFAULT_EXPORT__ = AxiosHeaders;
          }
        ),
        /***/
        "../node_modules/axios/lib/core/InterceptorManager.js": (
          /*!************************************************************!*\
            !*** ../node_modules/axios/lib/core/InterceptorManager.js ***!
            \************************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            class InterceptorManager {
              constructor() {
                this.handlers = [];
              }
              /**
               * Add a new interceptor to the stack
               *
               * @param {Function} fulfilled The function to handle `then` for a `Promise`
               * @param {Function} rejected The function to handle `reject` for a `Promise`
               *
               * @return {Number} An ID used to remove interceptor later
               */
              use(fulfilled, rejected, options2) {
                this.handlers.push({
                  fulfilled,
                  rejected,
                  synchronous: options2 ? options2.synchronous : false,
                  runWhen: options2 ? options2.runWhen : null
                });
                return this.handlers.length - 1;
              }
              /**
               * Remove an interceptor from the stack
               *
               * @param {Number} id The ID that was returned by `use`
               *
               * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
               */
              eject(id) {
                if (this.handlers[id]) {
                  this.handlers[id] = null;
                }
              }
              /**
               * Clear all interceptors from the stack
               *
               * @returns {void}
               */
              clear() {
                if (this.handlers) {
                  this.handlers = [];
                }
              }
              /**
               * Iterate over all the registered interceptors
               *
               * This method is particularly useful for skipping over any
               * interceptors that may have become `null` calling `eject`.
               *
               * @param {Function} fn The function to call for each interceptor
               *
               * @returns {void}
               */
              forEach(fn) {
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this.handlers, function forEachHandler(h) {
                  if (h !== null) {
                    fn(h);
                  }
                });
              }
            }
            const __WEBPACK_DEFAULT_EXPORT__ = InterceptorManager;
          }
        ),
        /***/
        "../node_modules/axios/lib/core/buildFullPath.js": (
          /*!*******************************************************!*\
            !*** ../node_modules/axios/lib/core/buildFullPath.js ***!
            \*******************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                buildFullPath
              )
              /* harmony export */
            });
            var _helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../helpers/isAbsoluteURL.js */
              "../node_modules/axios/lib/helpers/isAbsoluteURL.js"
            );
            var _helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../helpers/combineURLs.js */
              "../node_modules/axios/lib/helpers/combineURLs.js"
            );
            function buildFullPath(baseURL, requestedURL) {
              if (baseURL && !(0, _helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__["default"])(requestedURL)) {
                return (0, _helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__["default"])(baseURL, requestedURL);
              }
              return requestedURL;
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/core/dispatchRequest.js": (
          /*!*********************************************************!*\
            !*** ../node_modules/axios/lib/core/dispatchRequest.js ***!
            \*********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                dispatchRequest
              )
              /* harmony export */
            });
            var _transformData_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./transformData.js */
              "../node_modules/axios/lib/core/transformData.js"
            );
            var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
              /*! ../cancel/isCancel.js */
              "../node_modules/axios/lib/cancel/isCancel.js"
            );
            var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../defaults/index.js */
              "../node_modules/axios/lib/defaults/index.js"
            );
            var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../cancel/CanceledError.js */
              "../node_modules/axios/lib/cancel/CanceledError.js"
            );
            var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../core/AxiosHeaders.js */
              "../node_modules/axios/lib/core/AxiosHeaders.js"
            );
            var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../adapters/adapters.js */
              "../node_modules/axios/lib/adapters/adapters.js"
            );
            function throwIfCancellationRequested(config) {
              if (config.cancelToken) {
                config.cancelToken.throwIfRequested();
              }
              if (config.signal && config.signal.aborted) {
                throw new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_0__["default"](null, config);
              }
            }
            function dispatchRequest(config) {
              throwIfCancellationRequested(config);
              config.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(config.headers);
              config.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__["default"].call(
                config,
                config.transformRequest
              );
              if (["post", "put", "patch"].indexOf(config.method) !== -1) {
                config.headers.setContentType("application/x-www-form-urlencoded", false);
              }
              const adapter = _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_3__["default"].getAdapter(config.adapter || _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].adapter);
              return adapter(config).then(function onAdapterResolution(response) {
                throwIfCancellationRequested(config);
                response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__["default"].call(
                  config,
                  config.transformResponse,
                  response
                );
                response.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(response.headers);
                return response;
              }, function onAdapterRejection(reason) {
                if (!(0, _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_5__["default"])(reason)) {
                  throwIfCancellationRequested(config);
                  if (reason && reason.response) {
                    reason.response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__["default"].call(
                      config,
                      config.transformResponse,
                      reason.response
                    );
                    reason.response.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(reason.response.headers);
                  }
                }
                return Promise.reject(reason);
              });
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/core/mergeConfig.js": (
          /*!*****************************************************!*\
            !*** ../node_modules/axios/lib/core/mergeConfig.js ***!
            \*****************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                mergeConfig
              )
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./AxiosHeaders.js */
              "../node_modules/axios/lib/core/AxiosHeaders.js"
            );
            const headersToObject = (thing) => thing instanceof _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? thing.toJSON() : thing;
            function mergeConfig(config1, config2) {
              config2 = config2 || {};
              const config = {};
              function getMergedValue(target, source, caseless) {
                if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(target) && _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(source)) {
                  return _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].merge.call({ caseless }, target, source);
                } else if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(source)) {
                  return _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].merge({}, source);
                } else if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isArray(source)) {
                  return source.slice();
                }
                return source;
              }
              function mergeDeepProperties(a, b, caseless) {
                if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)) {
                  return getMergedValue(a, b, caseless);
                } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(a)) {
                  return getMergedValue(void 0, a, caseless);
                }
              }
              function valueFromConfig2(a, b) {
                if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)) {
                  return getMergedValue(void 0, b);
                }
              }
              function defaultToConfig2(a, b) {
                if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)) {
                  return getMergedValue(void 0, b);
                } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(a)) {
                  return getMergedValue(void 0, a);
                }
              }
              function mergeDirectKeys(a, b, prop) {
                if (prop in config2) {
                  return getMergedValue(a, b);
                } else if (prop in config1) {
                  return getMergedValue(void 0, a);
                }
              }
              const mergeMap = {
                url: valueFromConfig2,
                method: valueFromConfig2,
                data: valueFromConfig2,
                baseURL: defaultToConfig2,
                transformRequest: defaultToConfig2,
                transformResponse: defaultToConfig2,
                paramsSerializer: defaultToConfig2,
                timeout: defaultToConfig2,
                timeoutMessage: defaultToConfig2,
                withCredentials: defaultToConfig2,
                adapter: defaultToConfig2,
                responseType: defaultToConfig2,
                xsrfCookieName: defaultToConfig2,
                xsrfHeaderName: defaultToConfig2,
                onUploadProgress: defaultToConfig2,
                onDownloadProgress: defaultToConfig2,
                decompress: defaultToConfig2,
                maxContentLength: defaultToConfig2,
                maxBodyLength: defaultToConfig2,
                beforeRedirect: defaultToConfig2,
                transport: defaultToConfig2,
                httpAgent: defaultToConfig2,
                httpsAgent: defaultToConfig2,
                cancelToken: defaultToConfig2,
                socketPath: defaultToConfig2,
                responseEncoding: defaultToConfig2,
                validateStatus: mergeDirectKeys,
                headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
              };
              _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
                const merge = mergeMap[prop] || mergeDeepProperties;
                const configValue = merge(config1[prop], config2[prop], prop);
                _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
              });
              return config;
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/core/settle.js": (
          /*!************************************************!*\
            !*** ../node_modules/axios/lib/core/settle.js ***!
            \************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                settle
              )
              /* harmony export */
            });
            var _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./AxiosError.js */
              "../node_modules/axios/lib/core/AxiosError.js"
            );
            function settle(resolve2, reject, response) {
              const validateStatus = response.config.validateStatus;
              if (!response.status || !validateStatus || validateStatus(response.status)) {
                resolve2(response);
              } else {
                reject(new _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"](
                  "Request failed with status code " + response.status,
                  [_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_BAD_REQUEST, _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
                  response.config,
                  response.request,
                  response
                ));
              }
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/core/transformData.js": (
          /*!*******************************************************!*\
            !*** ../node_modules/axios/lib/core/transformData.js ***!
            \*******************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                transformData
              )
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _defaults_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../defaults/index.js */
              "../node_modules/axios/lib/defaults/index.js"
            );
            var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../core/AxiosHeaders.js */
              "../node_modules/axios/lib/core/AxiosHeaders.js"
            );
            function transformData(fns, response) {
              const config = this || _defaults_index_js__WEBPACK_IMPORTED_MODULE_0__["default"];
              const context = response || config;
              const headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(context.headers);
              let data = context.data;
              _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(fns, function transform(fn) {
                data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
              });
              headers.normalize();
              return data;
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/defaults/index.js": (
          /*!***************************************************!*\
            !*** ../node_modules/axios/lib/defaults/index.js ***!
            \***************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
              /*! ../core/AxiosError.js */
              "../node_modules/axios/lib/core/AxiosError.js"
            );
            var _transitional_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./transitional.js */
              "../node_modules/axios/lib/defaults/transitional.js"
            );
            var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
              /*! ../helpers/toFormData.js */
              "../node_modules/axios/lib/helpers/toFormData.js"
            );
            var _helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ../helpers/toURLEncodedForm.js */
              "../node_modules/axios/lib/helpers/toURLEncodedForm.js"
            );
            var _platform_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
              /*! ../platform/index.js */
              "../node_modules/axios/lib/platform/node/index.js"
            );
            var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../helpers/formDataToJSON.js */
              "../node_modules/axios/lib/helpers/formDataToJSON.js"
            );
            function stringifySafely(rawValue, parser, encoder4) {
              if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(rawValue)) {
                try {
                  (parser || JSON.parse)(rawValue);
                  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].trim(rawValue);
                } catch (e) {
                  if (e.name !== "SyntaxError") {
                    throw e;
                  }
                }
              }
              return (encoder4 || JSON.stringify)(rawValue);
            }
            const defaults = {
              transitional: _transitional_js__WEBPACK_IMPORTED_MODULE_1__["default"],
              adapter: ["xhr", "http"],
              transformRequest: [function transformRequest(data, headers) {
                const contentType = headers.getContentType() || "";
                const hasJSONContentType = contentType.indexOf("application/json") > -1;
                const isObjectPayload = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(data);
                if (isObjectPayload && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHTMLForm(data)) {
                  data = new FormData(data);
                }
                const isFormData = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(data);
                if (isFormData) {
                  if (!hasJSONContentType) {
                    return data;
                  }
                  return hasJSONContentType ? JSON.stringify((0, _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_2__["default"])(data)) : data;
                }
                if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(data) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBuffer(data) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isStream(data) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFile(data) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(data)) {
                  return data;
                }
                if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBufferView(data)) {
                  return data.buffer;
                }
                if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isURLSearchParams(data)) {
                  headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
                  return data.toString();
                }
                let isFileList;
                if (isObjectPayload) {
                  if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
                    return (0, _helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_3__["default"])(data, this.formSerializer).toString();
                  }
                  if ((isFileList = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
                    const _FormData = this.env && this.env.FormData;
                    return (0, _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_4__["default"])(
                      isFileList ? { "files[]": data } : data,
                      _FormData && new _FormData(),
                      this.formSerializer
                    );
                  }
                }
                if (isObjectPayload || hasJSONContentType) {
                  headers.setContentType("application/json", false);
                  return stringifySafely(data);
                }
                return data;
              }],
              transformResponse: [function transformResponse(data) {
                const transitional = this.transitional || defaults.transitional;
                const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
                const JSONRequested = this.responseType === "json";
                if (data && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
                  const silentJSONParsing = transitional && transitional.silentJSONParsing;
                  const strictJSONParsing = !silentJSONParsing && JSONRequested;
                  try {
                    return JSON.parse(data);
                  } catch (e) {
                    if (strictJSONParsing) {
                      if (e.name === "SyntaxError") {
                        throw _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__["default"].from(e, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__["default"].ERR_BAD_RESPONSE, this, null, this.response);
                      }
                      throw e;
                    }
                  }
                }
                return data;
              }],
              /**
               * A timeout in milliseconds to abort a request. If set to 0 (default) a
               * timeout is not created.
               */
              timeout: 0,
              xsrfCookieName: "XSRF-TOKEN",
              xsrfHeaderName: "X-XSRF-TOKEN",
              maxContentLength: -1,
              maxBodyLength: -1,
              env: {
                FormData: _platform_index_js__WEBPACK_IMPORTED_MODULE_6__["default"].classes.FormData,
                Blob: _platform_index_js__WEBPACK_IMPORTED_MODULE_6__["default"].classes.Blob
              },
              validateStatus: function validateStatus(status) {
                return status >= 200 && status < 300;
              },
              headers: {
                common: {
                  "Accept": "application/json, text/plain, */*",
                  "Content-Type": void 0
                }
              }
            };
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
              defaults.headers[method] = {};
            });
            const __WEBPACK_DEFAULT_EXPORT__ = defaults;
          }
        ),
        /***/
        "../node_modules/axios/lib/defaults/transitional.js": (
          /*!**********************************************************!*\
            !*** ../node_modules/axios/lib/defaults/transitional.js ***!
            \**********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            const __WEBPACK_DEFAULT_EXPORT__ = {
              silentJSONParsing: true,
              forcedJSONParsing: true,
              clarifyTimeoutError: false
            };
          }
        ),
        /***/
        "../node_modules/axios/lib/env/data.js": (
          /*!*********************************************!*\
            !*** ../node_modules/axios/lib/env/data.js ***!
            \*********************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              VERSION: () => (
                /* binding */
                VERSION2
              )
              /* harmony export */
            });
            const VERSION2 = "1.5.1";
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/AxiosTransformStream.js": (
          /*!*****************************************************************!*\
            !*** ../node_modules/axios/lib/helpers/AxiosTransformStream.js ***!
            \*****************************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! stream */
              "stream"
            );
            var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _throttle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ./throttle.js */
              "../node_modules/axios/lib/helpers/throttle.js"
            );
            var _speedometer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ./speedometer.js */
              "../node_modules/axios/lib/helpers/speedometer.js"
            );
            const kInternals = Symbol("internals");
            class AxiosTransformStream extends stream__WEBPACK_IMPORTED_MODULE_0__.Transform {
              constructor(options2) {
                options2 = _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].toFlatObject(options2, {
                  maxRate: 0,
                  chunkSize: 64 * 1024,
                  minChunkSize: 100,
                  timeWindow: 500,
                  ticksRate: 2,
                  samplesCount: 15
                }, null, (prop, source) => {
                  return !_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(source[prop]);
                });
                super({
                  readableHighWaterMark: options2.chunkSize
                });
                const self2 = this;
                const internals = this[kInternals] = {
                  length: options2.length,
                  timeWindow: options2.timeWindow,
                  ticksRate: options2.ticksRate,
                  chunkSize: options2.chunkSize,
                  maxRate: options2.maxRate,
                  minChunkSize: options2.minChunkSize,
                  bytesSeen: 0,
                  isCaptured: false,
                  notifiedBytesLoaded: 0,
                  ts: Date.now(),
                  bytes: 0,
                  onReadCallback: null
                };
                const _speedometer = (0, _speedometer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(internals.ticksRate * options2.samplesCount, internals.timeWindow);
                this.on("newListener", (event) => {
                  if (event === "progress") {
                    if (!internals.isCaptured) {
                      internals.isCaptured = true;
                    }
                  }
                });
                let bytesNotified = 0;
                internals.updateProgress = (0, _throttle_js__WEBPACK_IMPORTED_MODULE_3__["default"])(function throttledHandler() {
                  const totalBytes = internals.length;
                  const bytesTransferred = internals.bytesSeen;
                  const progressBytes = bytesTransferred - bytesNotified;
                  if (!progressBytes || self2.destroyed)
                    return;
                  const rate = _speedometer(progressBytes);
                  bytesNotified = bytesTransferred;
                  process.nextTick(() => {
                    self2.emit("progress", {
                      "loaded": bytesTransferred,
                      "total": totalBytes,
                      "progress": totalBytes ? bytesTransferred / totalBytes : void 0,
                      "bytes": progressBytes,
                      "rate": rate ? rate : void 0,
                      "estimated": rate && totalBytes && bytesTransferred <= totalBytes ? (totalBytes - bytesTransferred) / rate : void 0
                    });
                  });
                }, internals.ticksRate);
                const onFinish = () => {
                  internals.updateProgress(true);
                };
                this.once("end", onFinish);
                this.once("error", onFinish);
              }
              _read(size) {
                const internals = this[kInternals];
                if (internals.onReadCallback) {
                  internals.onReadCallback();
                }
                return super._read(size);
              }
              _transform(chunk, encoding, callback) {
                const self2 = this;
                const internals = this[kInternals];
                const maxRate = internals.maxRate;
                const readableHighWaterMark = this.readableHighWaterMark;
                const timeWindow = internals.timeWindow;
                const divider = 1e3 / timeWindow;
                const bytesThreshold = maxRate / divider;
                const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
                function pushChunk(_chunk, _callback) {
                  const bytes = Buffer.byteLength(_chunk);
                  internals.bytesSeen += bytes;
                  internals.bytes += bytes;
                  if (internals.isCaptured) {
                    internals.updateProgress();
                  }
                  if (self2.push(_chunk)) {
                    process.nextTick(_callback);
                  } else {
                    internals.onReadCallback = () => {
                      internals.onReadCallback = null;
                      process.nextTick(_callback);
                    };
                  }
                }
                const transformChunk = (_chunk, _callback) => {
                  const chunkSize = Buffer.byteLength(_chunk);
                  let chunkRemainder = null;
                  let maxChunkSize = readableHighWaterMark;
                  let bytesLeft;
                  let passed = 0;
                  if (maxRate) {
                    const now = Date.now();
                    if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
                      internals.ts = now;
                      bytesLeft = bytesThreshold - internals.bytes;
                      internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
                      passed = 0;
                    }
                    bytesLeft = bytesThreshold - internals.bytes;
                  }
                  if (maxRate) {
                    if (bytesLeft <= 0) {
                      return setTimeout(() => {
                        _callback(null, _chunk);
                      }, timeWindow - passed);
                    }
                    if (bytesLeft < maxChunkSize) {
                      maxChunkSize = bytesLeft;
                    }
                  }
                  if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
                    chunkRemainder = _chunk.subarray(maxChunkSize);
                    _chunk = _chunk.subarray(0, maxChunkSize);
                  }
                  pushChunk(_chunk, chunkRemainder ? () => {
                    process.nextTick(_callback, null, chunkRemainder);
                  } : _callback);
                };
                transformChunk(chunk, function transformNextChunk(err, _chunk) {
                  if (err) {
                    return callback(err);
                  }
                  if (_chunk) {
                    transformChunk(_chunk, transformNextChunk);
                  } else {
                    callback(null);
                  }
                });
              }
              setLength(length) {
                this[kInternals].length = +length;
                return this;
              }
            }
            const __WEBPACK_DEFAULT_EXPORT__ = AxiosTransformStream;
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/AxiosURLSearchParams.js": (
          /*!*****************************************************************!*\
            !*** ../node_modules/axios/lib/helpers/AxiosURLSearchParams.js ***!
            \*****************************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./toFormData.js */
              "../node_modules/axios/lib/helpers/toFormData.js"
            );
            function encode2(str) {
              const charMap = {
                "!": "%21",
                "'": "%27",
                "(": "%28",
                ")": "%29",
                "~": "%7E",
                "%20": "+",
                "%00": "\0"
              };
              return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
                return charMap[match];
              });
            }
            function AxiosURLSearchParams(params, options2) {
              this._pairs = [];
              params && (0, _toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(params, this, options2);
            }
            const prototype = AxiosURLSearchParams.prototype;
            prototype.append = function append(name, value) {
              this._pairs.push([name, value]);
            };
            prototype.toString = function toString(encoder4) {
              const _encode = encoder4 ? function(value) {
                return encoder4.call(this, value, encode2);
              } : encode2;
              return this._pairs.map(function each2(pair) {
                return _encode(pair[0]) + "=" + _encode(pair[1]);
              }, "").join("&");
            };
            const __WEBPACK_DEFAULT_EXPORT__ = AxiosURLSearchParams;
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/HttpStatusCode.js": (
          /*!***********************************************************!*\
            !*** ../node_modules/axios/lib/helpers/HttpStatusCode.js ***!
            \***********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            const HttpStatusCode = {
              Continue: 100,
              SwitchingProtocols: 101,
              Processing: 102,
              EarlyHints: 103,
              Ok: 200,
              Created: 201,
              Accepted: 202,
              NonAuthoritativeInformation: 203,
              NoContent: 204,
              ResetContent: 205,
              PartialContent: 206,
              MultiStatus: 207,
              AlreadyReported: 208,
              ImUsed: 226,
              MultipleChoices: 300,
              MovedPermanently: 301,
              Found: 302,
              SeeOther: 303,
              NotModified: 304,
              UseProxy: 305,
              Unused: 306,
              TemporaryRedirect: 307,
              PermanentRedirect: 308,
              BadRequest: 400,
              Unauthorized: 401,
              PaymentRequired: 402,
              Forbidden: 403,
              NotFound: 404,
              MethodNotAllowed: 405,
              NotAcceptable: 406,
              ProxyAuthenticationRequired: 407,
              RequestTimeout: 408,
              Conflict: 409,
              Gone: 410,
              LengthRequired: 411,
              PreconditionFailed: 412,
              PayloadTooLarge: 413,
              UriTooLong: 414,
              UnsupportedMediaType: 415,
              RangeNotSatisfiable: 416,
              ExpectationFailed: 417,
              ImATeapot: 418,
              MisdirectedRequest: 421,
              UnprocessableEntity: 422,
              Locked: 423,
              FailedDependency: 424,
              TooEarly: 425,
              UpgradeRequired: 426,
              PreconditionRequired: 428,
              TooManyRequests: 429,
              RequestHeaderFieldsTooLarge: 431,
              UnavailableForLegalReasons: 451,
              InternalServerError: 500,
              NotImplemented: 501,
              BadGateway: 502,
              ServiceUnavailable: 503,
              GatewayTimeout: 504,
              HttpVersionNotSupported: 505,
              VariantAlsoNegotiates: 506,
              InsufficientStorage: 507,
              LoopDetected: 508,
              NotExtended: 510,
              NetworkAuthenticationRequired: 511
            };
            Object.entries(HttpStatusCode).forEach(([key2, value]) => {
              HttpStatusCode[value] = key2;
            });
            const __WEBPACK_DEFAULT_EXPORT__ = HttpStatusCode;
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/ZlibHeaderTransformStream.js": (
          /*!**********************************************************************!*\
            !*** ../node_modules/axios/lib/helpers/ZlibHeaderTransformStream.js ***!
            \**********************************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! stream */
              "stream"
            );
            class ZlibHeaderTransformStream extends stream__WEBPACK_IMPORTED_MODULE_0__.Transform {
              __transform(chunk, encoding, callback) {
                this.push(chunk);
                callback();
              }
              _transform(chunk, encoding, callback) {
                if (chunk.length !== 0) {
                  this._transform = this.__transform;
                  if (chunk[0] !== 120) {
                    const header = Buffer.alloc(2);
                    header[0] = 120;
                    header[1] = 156;
                    this.push(header, encoding);
                  }
                }
                this.__transform(chunk, encoding, callback);
              }
            }
            const __WEBPACK_DEFAULT_EXPORT__ = ZlibHeaderTransformStream;
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/bind.js": (
          /*!*************************************************!*\
            !*** ../node_modules/axios/lib/helpers/bind.js ***!
            \*************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                bind
              )
              /* harmony export */
            });
            function bind(fn, thisArg) {
              return function wrap() {
                return fn.apply(thisArg, arguments);
              };
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/buildURL.js": (
          /*!*****************************************************!*\
            !*** ../node_modules/axios/lib/helpers/buildURL.js ***!
            \*****************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                buildURL
              )
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../helpers/AxiosURLSearchParams.js */
              "../node_modules/axios/lib/helpers/AxiosURLSearchParams.js"
            );
            function encode2(val) {
              return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
            }
            function buildURL(url, params, options2) {
              if (!params) {
                return url;
              }
              const _encode = options2 && options2.encode || encode2;
              const serializeFn = options2 && options2.serialize;
              let serializedParams;
              if (serializeFn) {
                serializedParams = serializeFn(params, options2);
              } else {
                serializedParams = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isURLSearchParams(params) ? params.toString() : new _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__["default"](params, options2).toString(_encode);
              }
              if (serializedParams) {
                const hashmarkIndex = url.indexOf("#");
                if (hashmarkIndex !== -1) {
                  url = url.slice(0, hashmarkIndex);
                }
                url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
              }
              return url;
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/callbackify.js": (
          /*!********************************************************!*\
            !*** ../node_modules/axios/lib/helpers/callbackify.js ***!
            \********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            const callbackify = (fn, reducer) => {
              return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isAsyncFn(fn) ? function(...args) {
                const cb = args.pop();
                fn.apply(this, args).then((value) => {
                  try {
                    reducer ? cb(null, ...reducer(value)) : cb(null, value);
                  } catch (err) {
                    cb(err);
                  }
                }, cb);
              } : fn;
            };
            const __WEBPACK_DEFAULT_EXPORT__ = callbackify;
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/combineURLs.js": (
          /*!********************************************************!*\
            !*** ../node_modules/axios/lib/helpers/combineURLs.js ***!
            \********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                combineURLs
              )
              /* harmony export */
            });
            function combineURLs(baseURL, relativeURL) {
              return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/cookies.js": (
          /*!****************************************************!*\
            !*** ../node_modules/axios/lib/helpers/cookies.js ***!
            \****************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../platform/index.js */
              "../node_modules/axios/lib/platform/node/index.js"
            );
            const __WEBPACK_DEFAULT_EXPORT__ = _platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].isStandardBrowserEnv ? (
              // Standard browser envs support document.cookie
              function standardBrowserEnv() {
                return {
                  write: function write(name, value, expires, path2, domain, secure) {
                    const cookie = [];
                    cookie.push(name + "=" + encodeURIComponent(value));
                    if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isNumber(expires)) {
                      cookie.push("expires=" + new Date(expires).toGMTString());
                    }
                    if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(path2)) {
                      cookie.push("path=" + path2);
                    }
                    if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(domain)) {
                      cookie.push("domain=" + domain);
                    }
                    if (secure === true) {
                      cookie.push("secure");
                    }
                    document.cookie = cookie.join("; ");
                  },
                  read: function read(name) {
                    const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
                    return match ? decodeURIComponent(match[3]) : null;
                  },
                  remove: function remove(name) {
                    this.write(name, "", Date.now() - 864e5);
                  }
                };
              }()
            ) : (
              // Non standard browser env (web workers, react-native) lack needed support.
              function nonStandardBrowserEnv() {
                return {
                  write: function write() {
                  },
                  read: function read() {
                    return null;
                  },
                  remove: function remove() {
                  }
                };
              }()
            );
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/formDataToJSON.js": (
          /*!***********************************************************!*\
            !*** ../node_modules/axios/lib/helpers/formDataToJSON.js ***!
            \***********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            function parsePropPath(name) {
              return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
                return match[0] === "[]" ? "" : match[1] || match[0];
              });
            }
            function arrayToObject(arr) {
              const obj = {};
              const keys = Object.keys(arr);
              let i;
              const len = keys.length;
              let key2;
              for (i = 0; i < len; i++) {
                key2 = keys[i];
                obj[key2] = arr[key2];
              }
              return obj;
            }
            function formDataToJSON(formData) {
              function buildPath(path2, value, target, index13) {
                let name = path2[index13++];
                const isNumericKey = Number.isFinite(+name);
                const isLast = index13 >= path2.length;
                name = !name && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target) ? target.length : name;
                if (isLast) {
                  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProp(target, name)) {
                    target[name] = [target[name], value];
                  } else {
                    target[name] = value;
                  }
                  return !isNumericKey;
                }
                if (!target[name] || !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(target[name])) {
                  target[name] = [];
                }
                const result = buildPath(path2, value, target[name], index13);
                if (result && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target[name])) {
                  target[name] = arrayToObject(target[name]);
                }
                return !isNumericKey;
              }
              if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(formData) && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(formData.entries)) {
                const obj = {};
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEachEntry(formData, (name, value) => {
                  buildPath(parsePropPath(name), value, obj, 0);
                });
                return obj;
              }
              return null;
            }
            const __WEBPACK_DEFAULT_EXPORT__ = formDataToJSON;
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/formDataToStream.js": (
          /*!*************************************************************!*\
            !*** ../node_modules/axios/lib/helpers/formDataToStream.js ***!
            \*************************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! util */
              "util"
            );
            var stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! stream */
              "stream"
            );
            var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _readBlob_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
              /*! ./readBlob.js */
              "../node_modules/axios/lib/helpers/readBlob.js"
            );
            const BOUNDARY_ALPHABET = _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].ALPHABET.ALPHA_DIGIT + "-_";
            const textEncoder = new util__WEBPACK_IMPORTED_MODULE_0__.TextEncoder();
            const CRLF = "\r\n";
            const CRLF_BYTES = textEncoder.encode(CRLF);
            const CRLF_BYTES_COUNT = 2;
            class FormDataPart {
              constructor(name, value) {
                const { escapeName } = this.constructor;
                const isStringValue = _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isString(value);
                let headers = `Content-Disposition: form-data; name="${escapeName(name)}"${!isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ""}${CRLF}`;
                if (isStringValue) {
                  value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
                } else {
                  headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
                }
                this.headers = textEncoder.encode(headers + CRLF);
                this.contentLength = isStringValue ? value.byteLength : value.size;
                this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
                this.name = name;
                this.value = value;
              }
              async *encode() {
                yield this.headers;
                const { value } = this;
                if (_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isTypedArray(value)) {
                  yield value;
                } else {
                  yield* (0, _readBlob_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value);
                }
                yield CRLF_BYTES;
              }
              static escapeName(name) {
                return String(name).replace(/[\r\n"]/g, (match) => ({
                  "\r": "%0D",
                  "\n": "%0A",
                  '"': "%22"
                })[match]);
              }
            }
            const formDataToStream = (form, headersHandler, options2) => {
              const {
                tag = "form-data-boundary",
                size = 25,
                boundary = tag + "-" + _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].generateString(size, BOUNDARY_ALPHABET)
              } = options2 || {};
              if (!_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isFormData(form)) {
                throw TypeError("FormData instance required");
              }
              if (boundary.length < 1 || boundary.length > 70) {
                throw Error("boundary must be 10-70 characters long");
              }
              const boundaryBytes = textEncoder.encode("--" + boundary + CRLF);
              const footerBytes = textEncoder.encode("--" + boundary + "--" + CRLF + CRLF);
              let contentLength = footerBytes.byteLength;
              const parts = Array.from(form.entries()).map(([name, value]) => {
                const part = new FormDataPart(name, value);
                contentLength += part.size;
                return part;
              });
              contentLength += boundaryBytes.byteLength * parts.length;
              contentLength = _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].toFiniteNumber(contentLength);
              const computedHeaders = {
                "Content-Type": `multipart/form-data; boundary=${boundary}`
              };
              if (Number.isFinite(contentLength)) {
                computedHeaders["Content-Length"] = contentLength;
              }
              headersHandler && headersHandler(computedHeaders);
              return stream__WEBPACK_IMPORTED_MODULE_1__.Readable.from(async function* () {
                for (const part of parts) {
                  yield boundaryBytes;
                  yield* part.encode();
                }
                yield footerBytes;
              }());
            };
            const __WEBPACK_DEFAULT_EXPORT__ = formDataToStream;
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/fromDataURI.js": (
          /*!********************************************************!*\
            !*** ../node_modules/axios/lib/helpers/fromDataURI.js ***!
            \********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                fromDataURI
              )
              /* harmony export */
            });
            var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../core/AxiosError.js */
              "../node_modules/axios/lib/core/AxiosError.js"
            );
            var _parseProtocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./parseProtocol.js */
              "../node_modules/axios/lib/helpers/parseProtocol.js"
            );
            var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../platform/index.js */
              "../node_modules/axios/lib/platform/node/index.js"
            );
            const DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;
            function fromDataURI(uri, asBlob, options2) {
              const _Blob = options2 && options2.Blob || _platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].classes.Blob;
              const protocol = (0, _parseProtocol_js__WEBPACK_IMPORTED_MODULE_1__["default"])(uri);
              if (asBlob === void 0 && _Blob) {
                asBlob = true;
              }
              if (protocol === "data") {
                uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
                const match = DATA_URL_PATTERN.exec(uri);
                if (!match) {
                  throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"]("Invalid URL", _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"].ERR_INVALID_URL);
                }
                const mime = match[1];
                const isBase64 = match[2];
                const body = match[3];
                const buffer2 = Buffer.from(decodeURIComponent(body), isBase64 ? "base64" : "utf8");
                if (asBlob) {
                  if (!_Blob) {
                    throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"]("Blob is not supported", _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"].ERR_NOT_SUPPORT);
                  }
                  return new _Blob([buffer2], { type: mime });
                }
                return buffer2;
              }
              throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"]("Unsupported protocol " + protocol, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"].ERR_NOT_SUPPORT);
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/isAbsoluteURL.js": (
          /*!**********************************************************!*\
            !*** ../node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
            \**********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                isAbsoluteURL
              )
              /* harmony export */
            });
            function isAbsoluteURL(url) {
              return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/isAxiosError.js": (
          /*!*********************************************************!*\
            !*** ../node_modules/axios/lib/helpers/isAxiosError.js ***!
            \*********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                isAxiosError
              )
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            function isAxiosError(payload) {
              return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(payload) && payload.isAxiosError === true;
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/isURLSameOrigin.js": (
          /*!************************************************************!*\
            !*** ../node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
            \************************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../platform/index.js */
              "../node_modules/axios/lib/platform/node/index.js"
            );
            const __WEBPACK_DEFAULT_EXPORT__ = _platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].isStandardBrowserEnv ? (
              // Standard browser envs have full support of the APIs needed to test
              // whether the request URL is of the same origin as current location.
              function standardBrowserEnv() {
                const msie = /(msie|trident)/i.test(navigator.userAgent);
                const urlParsingNode = document.createElement("a");
                let originURL;
                function resolveURL(url) {
                  let href = url;
                  if (msie) {
                    urlParsingNode.setAttribute("href", href);
                    href = urlParsingNode.href;
                  }
                  urlParsingNode.setAttribute("href", href);
                  return {
                    href: urlParsingNode.href,
                    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
                    host: urlParsingNode.host,
                    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
                    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
                    hostname: urlParsingNode.hostname,
                    port: urlParsingNode.port,
                    pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
                  };
                }
                originURL = resolveURL(window.location.href);
                return function isURLSameOrigin(requestURL) {
                  const parsed = _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(requestURL) ? resolveURL(requestURL) : requestURL;
                  return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
                };
              }()
            ) : (
              // Non standard browser envs (web workers, react-native) lack needed support.
              function nonStandardBrowserEnv() {
                return function isURLSameOrigin() {
                  return true;
                };
              }()
            );
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/parseHeaders.js": (
          /*!*********************************************************!*\
            !*** ../node_modules/axios/lib/helpers/parseHeaders.js ***!
            \*********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            const ignoreDuplicateOf = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toObjectSet([
              "age",
              "authorization",
              "content-length",
              "content-type",
              "etag",
              "expires",
              "from",
              "host",
              "if-modified-since",
              "if-unmodified-since",
              "last-modified",
              "location",
              "max-forwards",
              "proxy-authorization",
              "referer",
              "retry-after",
              "user-agent"
            ]);
            const __WEBPACK_DEFAULT_EXPORT__ = (rawHeaders) => {
              const parsed = {};
              let key2;
              let val;
              let i;
              rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
                i = line.indexOf(":");
                key2 = line.substring(0, i).trim().toLowerCase();
                val = line.substring(i + 1).trim();
                if (!key2 || parsed[key2] && ignoreDuplicateOf[key2]) {
                  return;
                }
                if (key2 === "set-cookie") {
                  if (parsed[key2]) {
                    parsed[key2].push(val);
                  } else {
                    parsed[key2] = [val];
                  }
                } else {
                  parsed[key2] = parsed[key2] ? parsed[key2] + ", " + val : val;
                }
              });
              return parsed;
            };
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/parseProtocol.js": (
          /*!**********************************************************!*\
            !*** ../node_modules/axios/lib/helpers/parseProtocol.js ***!
            \**********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                parseProtocol
              )
              /* harmony export */
            });
            function parseProtocol(url) {
              const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
              return match && match[1] || "";
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/readBlob.js": (
          /*!*****************************************************!*\
            !*** ../node_modules/axios/lib/helpers/readBlob.js ***!
            \*****************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            const { asyncIterator } = Symbol;
            const readBlob = async function* (blob) {
              if (blob.stream) {
                yield* blob.stream();
              } else if (blob.arrayBuffer) {
                yield await blob.arrayBuffer();
              } else if (blob[asyncIterator]) {
                yield* blob[asyncIterator]();
              } else {
                yield blob;
              }
            };
            const __WEBPACK_DEFAULT_EXPORT__ = readBlob;
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/speedometer.js": (
          /*!********************************************************!*\
            !*** ../node_modules/axios/lib/helpers/speedometer.js ***!
            \********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            function speedometer(samplesCount, min) {
              samplesCount = samplesCount || 10;
              const bytes = new Array(samplesCount);
              const timestamps = new Array(samplesCount);
              let head = 0;
              let tail = 0;
              let firstSampleTS;
              min = min !== void 0 ? min : 1e3;
              return function push(chunkLength) {
                const now = Date.now();
                const startedAt = timestamps[tail];
                if (!firstSampleTS) {
                  firstSampleTS = now;
                }
                bytes[head] = chunkLength;
                timestamps[head] = now;
                let i = tail;
                let bytesCount = 0;
                while (i !== head) {
                  bytesCount += bytes[i++];
                  i = i % samplesCount;
                }
                head = (head + 1) % samplesCount;
                if (head === tail) {
                  tail = (tail + 1) % samplesCount;
                }
                if (now - firstSampleTS < min) {
                  return;
                }
                const passed = startedAt && now - startedAt;
                return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
              };
            }
            const __WEBPACK_DEFAULT_EXPORT__ = speedometer;
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/spread.js": (
          /*!***************************************************!*\
            !*** ../node_modules/axios/lib/helpers/spread.js ***!
            \***************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                spread2
              )
              /* harmony export */
            });
            function spread2(callback) {
              return function wrap(arr) {
                return callback.apply(null, arr);
              };
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/throttle.js": (
          /*!*****************************************************!*\
            !*** ../node_modules/axios/lib/helpers/throttle.js ***!
            \*****************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            function throttle(fn, freq) {
              let timestamp = 0;
              const threshold = 1e3 / freq;
              let timer = null;
              return function throttled(force, args) {
                const now = Date.now();
                if (force || now - timestamp > threshold) {
                  if (timer) {
                    clearTimeout(timer);
                    timer = null;
                  }
                  timestamp = now;
                  return fn.apply(null, args);
                }
                if (!timer) {
                  timer = setTimeout(() => {
                    timer = null;
                    timestamp = Date.now();
                    return fn.apply(null, args);
                  }, threshold - (now - timestamp));
                }
              };
            }
            const __WEBPACK_DEFAULT_EXPORT__ = throttle;
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/toFormData.js": (
          /*!*******************************************************!*\
            !*** ../node_modules/axios/lib/helpers/toFormData.js ***!
            \*******************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../core/AxiosError.js */
              "../node_modules/axios/lib/core/AxiosError.js"
            );
            var _platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../platform/node/classes/FormData.js */
              "../node_modules/axios/lib/platform/node/classes/FormData.js"
            );
            function isVisitable(thing) {
              return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(thing) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(thing);
            }
            function removeBrackets(key2) {
              return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key2, "[]") ? key2.slice(0, -2) : key2;
            }
            function renderKey(path2, key2, dots) {
              if (!path2)
                return key2;
              return path2.concat(key2).map(function each2(token, i) {
                token = removeBrackets(token);
                return !dots && i ? "[" + token + "]" : token;
              }).join(dots ? "." : "");
            }
            function isFlatArray(arr) {
              return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(arr) && !arr.some(isVisitable);
            }
            const predicates = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"], {}, null, function filter(prop) {
              return /^is[A-Z]/.test(prop);
            });
            function toFormData(obj, formData, options2) {
              if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)) {
                throw new TypeError("target must be an object");
              }
              formData = formData || new (_platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__["default"] || FormData)();
              options2 = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(options2, {
                metaTokens: true,
                dots: false,
                indexes: false
              }, false, function defined(option, source) {
                return !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(source[option]);
              });
              const metaTokens = options2.metaTokens;
              const visitor = options2.visitor || defaultVisitor;
              const dots = options2.dots;
              const indexes = options2.indexes;
              const _Blob = options2.Blob || typeof Blob !== "undefined" && Blob;
              const useBlob = _Blob && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isSpecCompliantForm(formData);
              if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(visitor)) {
                throw new TypeError("visitor must be a function");
              }
              function convertValue(value) {
                if (value === null)
                  return "";
                if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isDate(value)) {
                  return value.toISOString();
                }
                if (!useBlob && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(value)) {
                  throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"]("Blob is not supported. Use a Buffer instead.");
                }
                if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isTypedArray(value)) {
                  return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
                }
                return value;
              }
              function defaultVisitor(value, key2, path2) {
                let arr = value;
                if (value && !path2 && typeof value === "object") {
                  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key2, "{}")) {
                    key2 = metaTokens ? key2 : key2.slice(0, -2);
                    value = JSON.stringify(value);
                  } else if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) && isFlatArray(value) || (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key2, "[]")) && (arr = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toArray(value))) {
                    key2 = removeBrackets(key2);
                    arr.forEach(function each2(el, index13) {
                      !(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(el) || el === null) && formData.append(
                        // eslint-disable-next-line no-nested-ternary
                        indexes === true ? renderKey([key2], index13, dots) : indexes === null ? key2 : key2 + "[]",
                        convertValue(el)
                      );
                    });
                    return false;
                  }
                }
                if (isVisitable(value)) {
                  return true;
                }
                formData.append(renderKey(path2, key2, dots), convertValue(value));
                return false;
              }
              const stack = [];
              const exposedHelpers = Object.assign(predicates, {
                defaultVisitor,
                convertValue,
                isVisitable
              });
              function build(value, path2) {
                if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(value))
                  return;
                if (stack.indexOf(value) !== -1) {
                  throw Error("Circular reference detected in " + path2.join("."));
                }
                stack.push(value);
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(value, function each2(el, key2) {
                  const result = !(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(el) || el === null) && visitor.call(
                    formData,
                    el,
                    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(key2) ? key2.trim() : key2,
                    path2,
                    exposedHelpers
                  );
                  if (result === true) {
                    build(el, path2 ? path2.concat(key2) : [key2]);
                  }
                });
                stack.pop();
              }
              if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)) {
                throw new TypeError("data must be an object");
              }
              build(obj);
              return formData;
            }
            const __WEBPACK_DEFAULT_EXPORT__ = toFormData;
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/toURLEncodedForm.js": (
          /*!*************************************************************!*\
            !*** ../node_modules/axios/lib/helpers/toURLEncodedForm.js ***!
            \*************************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => (
                /* binding */
                toURLEncodedForm
              )
              /* harmony export */
            });
            var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
              /*! ../utils.js */
              "../node_modules/axios/lib/utils.js"
            );
            var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./toFormData.js */
              "../node_modules/axios/lib/helpers/toFormData.js"
            );
            var _platform_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../platform/index.js */
              "../node_modules/axios/lib/platform/node/index.js"
            );
            function toURLEncodedForm(data, options2) {
              return (0, _toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, new _platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].classes.URLSearchParams(), Object.assign({
                visitor: function(value, key2, path2, helpers) {
                  if (_platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].isNode && _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isBuffer(value)) {
                    this.append(key2, value.toString("base64"));
                    return false;
                  }
                  return helpers.defaultVisitor.apply(this, arguments);
                }
              }, options2));
            }
          }
        ),
        /***/
        "../node_modules/axios/lib/helpers/validator.js": (
          /*!******************************************************!*\
            !*** ../node_modules/axios/lib/helpers/validator.js ***!
            \******************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _env_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ../env/data.js */
              "../node_modules/axios/lib/env/data.js"
            );
            var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ../core/AxiosError.js */
              "../node_modules/axios/lib/core/AxiosError.js"
            );
            const validators = {};
            ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
              validators[type] = function validator2(thing) {
                return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
              };
            });
            const deprecatedWarnings = {};
            validators.transitional = function transitional(validator2, version, message) {
              function formatMessage(opt, desc) {
                return "[Axios v" + _env_data_js__WEBPACK_IMPORTED_MODULE_0__.VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
              }
              return (value, opt, opts) => {
                if (validator2 === false) {
                  throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"](
                    formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
                    _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_DEPRECATED
                  );
                }
                if (version && !deprecatedWarnings[opt]) {
                  deprecatedWarnings[opt] = true;
                  console.warn(
                    formatMessage(
                      opt,
                      " has been deprecated since v" + version + " and will be removed in the near future"
                    )
                  );
                }
                return validator2 ? validator2(value, opt, opts) : true;
              };
            };
            function assertOptions(options2, schema, allowUnknown) {
              if (typeof options2 !== "object") {
                throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]("options must be an object", _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION_VALUE);
              }
              const keys = Object.keys(options2);
              let i = keys.length;
              while (i-- > 0) {
                const opt = keys[i];
                const validator2 = schema[opt];
                if (validator2) {
                  const value = options2[opt];
                  const result = value === void 0 || validator2(value, opt, options2);
                  if (result !== true) {
                    throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]("option " + opt + " must be " + result, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION_VALUE);
                  }
                  continue;
                }
                if (allowUnknown !== true) {
                  throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]("Unknown option " + opt, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION);
                }
              }
            }
            const __WEBPACK_DEFAULT_EXPORT__ = {
              assertOptions,
              validators
            };
          }
        ),
        /***/
        "../node_modules/axios/lib/platform/node/classes/FormData.js": (
          /*!*******************************************************************!*\
            !*** ../node_modules/axios/lib/platform/node/classes/FormData.js ***!
            \*******************************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var form_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! form-data */
              "../node_modules/form-data/lib/form_data.js"
            );
            const __WEBPACK_DEFAULT_EXPORT__ = form_data__WEBPACK_IMPORTED_MODULE_0__;
          }
        ),
        /***/
        "../node_modules/axios/lib/platform/node/classes/URLSearchParams.js": (
          /*!**************************************************************************!*\
            !*** ../node_modules/axios/lib/platform/node/classes/URLSearchParams.js ***!
            \**************************************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! url */
              "url"
            );
            const __WEBPACK_DEFAULT_EXPORT__ = url__WEBPACK_IMPORTED_MODULE_0__.URLSearchParams;
          }
        ),
        /***/
        "../node_modules/axios/lib/platform/node/index.js": (
          /*!********************************************************!*\
            !*** ../node_modules/axios/lib/platform/node/index.js ***!
            \********************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./classes/URLSearchParams.js */
              "../node_modules/axios/lib/platform/node/classes/URLSearchParams.js"
            );
            var _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
              /*! ./classes/FormData.js */
              "../node_modules/axios/lib/platform/node/classes/FormData.js"
            );
            const __WEBPACK_DEFAULT_EXPORT__ = {
              isNode: true,
              classes: {
                URLSearchParams: _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__["default"],
                FormData: _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__["default"],
                Blob: typeof Blob !== "undefined" && Blob || null
              },
              protocols: ["http", "https", "file", "data"]
            };
          }
        ),
        /***/
        "../node_modules/axios/lib/utils.js": (
          /*!******************************************!*\
            !*** ../node_modules/axios/lib/utils.js ***!
            \******************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__
              /* harmony export */
            });
            var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
              /*! ./helpers/bind.js */
              "../node_modules/axios/lib/helpers/bind.js"
            );
            const { toString } = Object.prototype;
            const { getPrototypeOf } = Object;
            const kindOf = ((cache) => (thing) => {
              const str = toString.call(thing);
              return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
            })(/* @__PURE__ */ Object.create(null));
            const kindOfTest = (type) => {
              type = type.toLowerCase();
              return (thing) => kindOf(thing) === type;
            };
            const typeOfTest = (type) => (thing) => typeof thing === type;
            const { isArray } = Array;
            const isUndefined = typeOfTest("undefined");
            function isBuffer(val) {
              return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
            }
            const isArrayBuffer = kindOfTest("ArrayBuffer");
            function isArrayBufferView(val) {
              let result;
              if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
                result = ArrayBuffer.isView(val);
              } else {
                result = val && val.buffer && isArrayBuffer(val.buffer);
              }
              return result;
            }
            const isString = typeOfTest("string");
            const isFunction = typeOfTest("function");
            const isNumber = typeOfTest("number");
            const isObject2 = (thing) => thing !== null && typeof thing === "object";
            const isBoolean = (thing) => thing === true || thing === false;
            const isPlainObject = (val) => {
              if (kindOf(val) !== "object") {
                return false;
              }
              const prototype = getPrototypeOf(val);
              return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
            };
            const isDate = kindOfTest("Date");
            const isFile = kindOfTest("File");
            const isBlob = kindOfTest("Blob");
            const isFileList = kindOfTest("FileList");
            const isStream = (val) => isObject2(val) && isFunction(val.pipe);
            const isFormData = (thing) => {
              let kind;
              return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
              kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
            };
            const isURLSearchParams = kindOfTest("URLSearchParams");
            const trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
            function forEach(obj, fn, { allOwnKeys = false } = {}) {
              if (obj === null || typeof obj === "undefined") {
                return;
              }
              let i;
              let l;
              if (typeof obj !== "object") {
                obj = [obj];
              }
              if (isArray(obj)) {
                for (i = 0, l = obj.length; i < l; i++) {
                  fn.call(null, obj[i], i, obj);
                }
              } else {
                const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
                const len = keys.length;
                let key2;
                for (i = 0; i < len; i++) {
                  key2 = keys[i];
                  fn.call(null, obj[key2], key2, obj);
                }
              }
            }
            function findKey(obj, key2) {
              key2 = key2.toLowerCase();
              const keys = Object.keys(obj);
              let i = keys.length;
              let _key;
              while (i-- > 0) {
                _key = keys[i];
                if (key2 === _key.toLowerCase()) {
                  return _key;
                }
              }
              return null;
            }
            const _global = (() => {
              if (typeof globalThis !== "undefined")
                return globalThis;
              return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
            })();
            const isContextDefined = (context) => !isUndefined(context) && context !== _global;
            function merge() {
              const { caseless } = isContextDefined(this) && this || {};
              const result = {};
              const assignValue = (val, key2) => {
                const targetKey = caseless && findKey(result, key2) || key2;
                if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
                  result[targetKey] = merge(result[targetKey], val);
                } else if (isPlainObject(val)) {
                  result[targetKey] = merge({}, val);
                } else if (isArray(val)) {
                  result[targetKey] = val.slice();
                } else {
                  result[targetKey] = val;
                }
              };
              for (let i = 0, l = arguments.length; i < l; i++) {
                arguments[i] && forEach(arguments[i], assignValue);
              }
              return result;
            }
            const extend = (a, b, thisArg, { allOwnKeys } = {}) => {
              forEach(b, (val, key2) => {
                if (thisArg && isFunction(val)) {
                  a[key2] = (0, _helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__["default"])(val, thisArg);
                } else {
                  a[key2] = val;
                }
              }, { allOwnKeys });
              return a;
            };
            const stripBOM = (content) => {
              if (content.charCodeAt(0) === 65279) {
                content = content.slice(1);
              }
              return content;
            };
            const inherits = (constructor, superConstructor, props, descriptors) => {
              constructor.prototype = Object.create(superConstructor.prototype, descriptors);
              constructor.prototype.constructor = constructor;
              Object.defineProperty(constructor, "super", {
                value: superConstructor.prototype
              });
              props && Object.assign(constructor.prototype, props);
            };
            const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
              let props;
              let i;
              let prop;
              const merged = {};
              destObj = destObj || {};
              if (sourceObj == null)
                return destObj;
              do {
                props = Object.getOwnPropertyNames(sourceObj);
                i = props.length;
                while (i-- > 0) {
                  prop = props[i];
                  if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
                    destObj[prop] = sourceObj[prop];
                    merged[prop] = true;
                  }
                }
                sourceObj = filter !== false && getPrototypeOf(sourceObj);
              } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
              return destObj;
            };
            const endsWith = (str, searchString, position) => {
              str = String(str);
              if (position === void 0 || position > str.length) {
                position = str.length;
              }
              position -= searchString.length;
              const lastIndex = str.indexOf(searchString, position);
              return lastIndex !== -1 && lastIndex === position;
            };
            const toArray = (thing) => {
              if (!thing)
                return null;
              if (isArray(thing))
                return thing;
              let i = thing.length;
              if (!isNumber(i))
                return null;
              const arr = new Array(i);
              while (i-- > 0) {
                arr[i] = thing[i];
              }
              return arr;
            };
            const isTypedArray = ((TypedArray) => {
              return (thing) => {
                return TypedArray && thing instanceof TypedArray;
              };
            })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
            const forEachEntry = (obj, fn) => {
              const generator = obj && obj[Symbol.iterator];
              const iterator = generator.call(obj);
              let result;
              while ((result = iterator.next()) && !result.done) {
                const pair = result.value;
                fn.call(obj, pair[0], pair[1]);
              }
            };
            const matchAll = (regExp, str) => {
              let matches;
              const arr = [];
              while ((matches = regExp.exec(str)) !== null) {
                arr.push(matches);
              }
              return arr;
            };
            const isHTMLForm = kindOfTest("HTMLFormElement");
            const toCamelCase = (str) => {
              return str.toLowerCase().replace(
                /[-_\s]([a-z\d])(\w*)/g,
                function replacer(m, p1, p2) {
                  return p1.toUpperCase() + p2;
                }
              );
            };
            const hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
            const isRegExp = kindOfTest("RegExp");
            const reduceDescriptors = (obj, reducer) => {
              const descriptors = Object.getOwnPropertyDescriptors(obj);
              const reducedDescriptors = {};
              forEach(descriptors, (descriptor, name) => {
                let ret;
                if ((ret = reducer(descriptor, name, obj)) !== false) {
                  reducedDescriptors[name] = ret || descriptor;
                }
              });
              Object.defineProperties(obj, reducedDescriptors);
            };
            const freezeMethods = (obj) => {
              reduceDescriptors(obj, (descriptor, name) => {
                if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
                  return false;
                }
                const value = obj[name];
                if (!isFunction(value))
                  return;
                descriptor.enumerable = false;
                if ("writable" in descriptor) {
                  descriptor.writable = false;
                  return;
                }
                if (!descriptor.set) {
                  descriptor.set = () => {
                    throw Error("Can not rewrite read-only method '" + name + "'");
                  };
                }
              });
            };
            const toObjectSet = (arrayOrString, delimiter) => {
              const obj = {};
              const define = (arr) => {
                arr.forEach((value) => {
                  obj[value] = true;
                });
              };
              isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
              return obj;
            };
            const noop2 = () => {
            };
            const toFiniteNumber = (value, defaultValue) => {
              value = +value;
              return Number.isFinite(value) ? value : defaultValue;
            };
            const ALPHA = "abcdefghijklmnopqrstuvwxyz";
            const DIGIT = "0123456789";
            const ALPHABET = {
              DIGIT,
              ALPHA,
              ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
            };
            const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
              let str = "";
              const { length } = alphabet;
              while (size--) {
                str += alphabet[Math.random() * length | 0];
              }
              return str;
            };
            function isSpecCompliantForm(thing) {
              return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
            }
            const toJSONObject = (obj) => {
              const stack = new Array(10);
              const visit = (source, i) => {
                if (isObject2(source)) {
                  if (stack.indexOf(source) >= 0) {
                    return;
                  }
                  if (!("toJSON" in source)) {
                    stack[i] = source;
                    const target = isArray(source) ? [] : {};
                    forEach(source, (value, key2) => {
                      const reducedValue = visit(value, i + 1);
                      !isUndefined(reducedValue) && (target[key2] = reducedValue);
                    });
                    stack[i] = void 0;
                    return target;
                  }
                }
                return source;
              };
              return visit(obj, 0);
            };
            const isAsyncFn = kindOfTest("AsyncFunction");
            const isThenable = (thing) => thing && (isObject2(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
            const __WEBPACK_DEFAULT_EXPORT__ = {
              isArray,
              isArrayBuffer,
              isBuffer,
              isFormData,
              isArrayBufferView,
              isString,
              isNumber,
              isBoolean,
              isObject: isObject2,
              isPlainObject,
              isUndefined,
              isDate,
              isFile,
              isBlob,
              isRegExp,
              isFunction,
              isStream,
              isURLSearchParams,
              isTypedArray,
              isFileList,
              forEach,
              merge,
              extend,
              trim,
              stripBOM,
              inherits,
              toFlatObject,
              kindOf,
              kindOfTest,
              endsWith,
              toArray,
              forEachEntry,
              matchAll,
              isHTMLForm,
              hasOwnProperty,
              hasOwnProp: hasOwnProperty,
              // an alias to avoid ESLint no-prototype-builtins detection
              reduceDescriptors,
              freezeMethods,
              toObjectSet,
              toCamelCase,
              noop: noop2,
              toFiniteNumber,
              findKey,
              global: _global,
              isContextDefined,
              ALPHABET,
              generateString,
              isSpecCompliantForm,
              toJSONObject,
              isAsyncFn,
              isThenable
            };
          }
        ),
        /***/
        "../node_modules/fast-copy/dist/esm/index.mjs": (
          /*!****************************************************!*\
            !*** ../node_modules/fast-copy/dist/esm/index.mjs ***!
            \****************************************************/
          /***/
          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
            "use strict";
            __webpack_require__2.r(__webpack_exports__2);
            __webpack_require__2.d(__webpack_exports__2, {
              /* harmony export */
              copyStrict: () => (
                /* binding */
                copyStrict
              ),
              /* harmony export */
              createCopier: () => (
                /* binding */
                createCopier
              ),
              /* harmony export */
              createStrictCopier: () => (
                /* binding */
                createStrictCopier
              ),
              /* harmony export */
              "default": () => (
                /* binding */
                index13
              )
              /* harmony export */
            });
            var toStringFunction = Function.prototype.toString;
            var create = Object.create;
            var toStringObject = Object.prototype.toString;
            var LegacyCache = (
              /** @class */
              function() {
                function LegacyCache2() {
                  this._keys = [];
                  this._values = [];
                }
                LegacyCache2.prototype.has = function(key2) {
                  return !!~this._keys.indexOf(key2);
                };
                LegacyCache2.prototype.get = function(key2) {
                  return this._values[this._keys.indexOf(key2)];
                };
                LegacyCache2.prototype.set = function(key2, value) {
                  this._keys.push(key2);
                  this._values.push(value);
                };
                return LegacyCache2;
              }()
            );
            function createCacheLegacy() {
              return new LegacyCache();
            }
            function createCacheModern() {
              return /* @__PURE__ */ new WeakMap();
            }
            var createCache = typeof WeakMap !== "undefined" ? createCacheModern : createCacheLegacy;
            function getCleanClone(prototype) {
              if (!prototype) {
                return create(null);
              }
              var Constructor = prototype.constructor;
              if (Constructor === Object) {
                return prototype === Object.prototype ? {} : create(prototype);
              }
              if (~toStringFunction.call(Constructor).indexOf("[native code]")) {
                try {
                  return new Constructor();
                } catch (_a2) {
                }
              }
              return create(prototype);
            }
            function getRegExpFlagsLegacy(regExp) {
              var flags = "";
              if (regExp.global) {
                flags += "g";
              }
              if (regExp.ignoreCase) {
                flags += "i";
              }
              if (regExp.multiline) {
                flags += "m";
              }
              if (regExp.unicode) {
                flags += "u";
              }
              if (regExp.sticky) {
                flags += "y";
              }
              return flags;
            }
            function getRegExpFlagsModern(regExp) {
              return regExp.flags;
            }
            var getRegExpFlags = /test/g.flags === "g" ? getRegExpFlagsModern : getRegExpFlagsLegacy;
            function getTagLegacy(value) {
              var type = toStringObject.call(value);
              return type.substring(8, type.length - 1);
            }
            function getTagModern(value) {
              return value[Symbol.toStringTag] || getTagLegacy(value);
            }
            var getTag = typeof Symbol !== "undefined" ? getTagModern : getTagLegacy;
            var defineProperty = Object.defineProperty, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols;
            var _a = Object.prototype, hasOwnProperty = _a.hasOwnProperty, propertyIsEnumerable = _a.propertyIsEnumerable;
            var SUPPORTS_SYMBOL = typeof getOwnPropertySymbols === "function";
            function getStrictPropertiesModern(object) {
              return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));
            }
            var getStrictProperties = SUPPORTS_SYMBOL ? getStrictPropertiesModern : getOwnPropertyNames;
            function copyOwnPropertiesStrict(value, clone, state) {
              var properties = getStrictProperties(value);
              for (var index14 = 0, length_1 = properties.length, property = void 0, descriptor = void 0; index14 < length_1; ++index14) {
                property = properties[index14];
                if (property === "callee" || property === "caller") {
                  continue;
                }
                descriptor = getOwnPropertyDescriptor(value, property);
                if (!descriptor) {
                  clone[property] = state.copier(value[property], state);
                  continue;
                }
                if (!descriptor.get && !descriptor.set) {
                  descriptor.value = state.copier(descriptor.value, state);
                }
                try {
                  defineProperty(clone, property, descriptor);
                } catch (error3) {
                  clone[property] = descriptor.value;
                }
              }
              return clone;
            }
            function copyArrayLoose(array2, state) {
              var clone = new state.Constructor();
              state.cache.set(array2, clone);
              for (var index14 = 0, length_2 = array2.length; index14 < length_2; ++index14) {
                clone[index14] = state.copier(array2[index14], state);
              }
              return clone;
            }
            function copyArrayStrict(array2, state) {
              var clone = new state.Constructor();
              state.cache.set(array2, clone);
              return copyOwnPropertiesStrict(array2, clone, state);
            }
            function copyArrayBuffer(arrayBuffer, _state) {
              return arrayBuffer.slice(0);
            }
            function copyBlob(blob, _state) {
              return blob.slice(0, blob.size, blob.type);
            }
            function copyDataView(dataView, state) {
              return new state.Constructor(copyArrayBuffer(dataView.buffer));
            }
            function copyDate(date, state) {
              return new state.Constructor(date.getTime());
            }
            function copyMapLoose(map, state) {
              var clone = new state.Constructor();
              state.cache.set(map, clone);
              map.forEach(function(value, key2) {
                clone.set(key2, state.copier(value, state));
              });
              return clone;
            }
            function copyMapStrict(map, state) {
              return copyOwnPropertiesStrict(map, copyMapLoose(map, state), state);
            }
            function copyObjectLooseLegacy(object, state) {
              var clone = getCleanClone(state.prototype);
              state.cache.set(object, clone);
              for (var key2 in object) {
                if (hasOwnProperty.call(object, key2)) {
                  clone[key2] = state.copier(object[key2], state);
                }
              }
              return clone;
            }
            function copyObjectLooseModern(object, state) {
              var clone = getCleanClone(state.prototype);
              state.cache.set(object, clone);
              for (var key2 in object) {
                if (hasOwnProperty.call(object, key2)) {
                  clone[key2] = state.copier(object[key2], state);
                }
              }
              var symbols = getOwnPropertySymbols(object);
              for (var index14 = 0, length_3 = symbols.length, symbol = void 0; index14 < length_3; ++index14) {
                symbol = symbols[index14];
                if (propertyIsEnumerable.call(object, symbol)) {
                  clone[symbol] = state.copier(object[symbol], state);
                }
              }
              return clone;
            }
            var copyObjectLoose = SUPPORTS_SYMBOL ? copyObjectLooseModern : copyObjectLooseLegacy;
            function copyObjectStrict(object, state) {
              var clone = getCleanClone(state.prototype);
              state.cache.set(object, clone);
              return copyOwnPropertiesStrict(object, clone, state);
            }
            function copyPrimitiveWrapper(primitiveObject, state) {
              return new state.Constructor(primitiveObject.valueOf());
            }
            function copyRegExp(regExp, state) {
              var clone = new state.Constructor(regExp.source, getRegExpFlags(regExp));
              clone.lastIndex = regExp.lastIndex;
              return clone;
            }
            function copySelf(value, _state) {
              return value;
            }
            function copySetLoose(set, state) {
              var clone = new state.Constructor();
              state.cache.set(set, clone);
              set.forEach(function(value) {
                clone.add(state.copier(value, state));
              });
              return clone;
            }
            function copySetStrict(set, state) {
              return copyOwnPropertiesStrict(set, copySetLoose(set, state), state);
            }
            var isArray = Array.isArray;
            var assign = Object.assign;
            var getPrototypeOf = Object.getPrototypeOf || function(obj) {
              return obj.__proto__;
            };
            var DEFAULT_LOOSE_OPTIONS = {
              array: copyArrayLoose,
              arrayBuffer: copyArrayBuffer,
              blob: copyBlob,
              dataView: copyDataView,
              date: copyDate,
              error: copySelf,
              map: copyMapLoose,
              object: copyObjectLoose,
              regExp: copyRegExp,
              set: copySetLoose
            };
            var DEFAULT_STRICT_OPTIONS = assign({}, DEFAULT_LOOSE_OPTIONS, {
              array: copyArrayStrict,
              map: copyMapStrict,
              object: copyObjectStrict,
              set: copySetStrict
            });
            function getTagSpecificCopiers(options2) {
              return {
                Arguments: options2.object,
                Array: options2.array,
                ArrayBuffer: options2.arrayBuffer,
                Blob: options2.blob,
                Boolean: copyPrimitiveWrapper,
                DataView: options2.dataView,
                Date: options2.date,
                Error: options2.error,
                Float32Array: options2.arrayBuffer,
                Float64Array: options2.arrayBuffer,
                Int8Array: options2.arrayBuffer,
                Int16Array: options2.arrayBuffer,
                Int32Array: options2.arrayBuffer,
                Map: options2.map,
                Number: copyPrimitiveWrapper,
                Object: options2.object,
                Promise: copySelf,
                RegExp: options2.regExp,
                Set: options2.set,
                String: copyPrimitiveWrapper,
                WeakMap: copySelf,
                WeakSet: copySelf,
                Uint8Array: options2.arrayBuffer,
                Uint8ClampedArray: options2.arrayBuffer,
                Uint16Array: options2.arrayBuffer,
                Uint32Array: options2.arrayBuffer,
                Uint64Array: options2.arrayBuffer
              };
            }
            function createCopier(options2) {
              var normalizedOptions = assign({}, DEFAULT_LOOSE_OPTIONS, options2);
              var tagSpecificCopiers = getTagSpecificCopiers(normalizedOptions);
              var array2 = tagSpecificCopiers.Array, object = tagSpecificCopiers.Object;
              function copier(value, state) {
                state.prototype = state.Constructor = void 0;
                if (!value || typeof value !== "object") {
                  return value;
                }
                if (state.cache.has(value)) {
                  return state.cache.get(value);
                }
                state.prototype = getPrototypeOf(value);
                state.Constructor = state.prototype && state.prototype.constructor;
                if (!state.Constructor || state.Constructor === Object) {
                  return object(value, state);
                }
                if (isArray(value)) {
                  return array2(value, state);
                }
                var tagSpecificCopier = tagSpecificCopiers[getTag(value)];
                if (tagSpecificCopier) {
                  return tagSpecificCopier(value, state);
                }
                return typeof value.then === "function" ? value : object(value, state);
              }
              return function copy(value) {
                return copier(value, {
                  Constructor: void 0,
                  cache: createCache(),
                  copier,
                  prototype: void 0
                });
              };
            }
            function createStrictCopier(options2) {
              return createCopier(assign({}, DEFAULT_STRICT_OPTIONS, options2));
            }
            var copyStrict = createStrictCopier({});
            var index13 = createCopier({});
          }
        ),
        /***/
        "../node_modules/mime-db/db.json": (
          /*!***************************************!*\
            !*** ../node_modules/mime-db/db.json ***!
            \***************************************/
          /***/
          (module3) => {
            "use strict";
            module3.exports = JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/3gpphal+json":{"source":"iana","compressible":true},"application/3gpphalforms+json":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/ace+cbor":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/alto-updatestreamcontrol+json":{"source":"iana","compressible":true},"application/alto-updatestreamparams+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/at+jwt":{"source":"iana"},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-dynamic-event-message":{"source":"iana"},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/captive+json":{"source":"iana","compressible":true},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/city+json":{"source":"iana","compressible":true},"application/clr":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true,"extensions":["cpl"]},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dash-patch+xml":{"source":"iana","compressible":true,"extensions":["mpp"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dots+cbor":{"source":"iana"},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["es","ecma"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/elm+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/elm+xml":{"source":"iana","compressible":true},"application/emergencycalldata.cap+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/express":{"source":"iana","extensions":["exp"]},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/fhir+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/jscalendar+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lpf+zip":{"source":"iana","compressible":false},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true,"extensions":["mpf"]},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/missing-blocks+cbor-seq":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true},"application/mrb-publish+xml":{"source":"iana","compressible":true},"application/msc-ivr+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msc-mixer+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana","charset":"US-ASCII"},"application/news-groupinfo":{"source":"iana","charset":"US-ASCII"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana","extensions":["cjs"]},"application/nss":{"source":"iana"},"application/oauth-authz-req+jwt":{"source":"iana"},"application/oblivious-dns-message":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{"source":"iana","compressible":true},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p21":{"source":"iana"},"application/p21+zip":{"source":"iana","compressible":false},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana","extensions":["asc"]},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pidf-diff+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.cyn":{"source":"iana","charset":"7-BIT"},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/pvd+json":{"source":"iana","compressible":true},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sarif+json":{"source":"iana","compressible":true},"application/sarif-external-properties+json":{"source":"iana","compressible":true},"application/sbe":{"source":"iana"},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-etch+cbor":{"source":"iana"},"application/senml-etch+json":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spdx+json":{"source":"iana","compressible":true},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/td+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/token-introspection+jwt":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana","extensions":["trig"]},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ubjson":{"compressible":false,"extensions":["ubj"]},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true,"extensions":["td"]},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.5gnas":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gtpc":{"source":"iana"},"application/vnd.3gpp.interworking-data":{"source":"iana"},"application/vnd.3gpp.lpp":{"source":"iana"},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ngap":{"source":"iana"},"application/vnd.3gpp.pfcp":{"source":"iana"},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.s1ap":{"source":"iana"},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.cmoca-cmresource":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-cmtable":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.age":{"source":"iana","extensions":["age"]},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.arrow.file":{"source":"iana"},"application/vnd.apache.arrow.stream":{"source":"iana"},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["key"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.cryptomator.encrypted":{"source":"iana"},"application/vnd.cryptomator.vault":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.cyclonedx+json":{"source":"iana","compressible":true},"application/vnd.cyclonedx+xml":{"source":"iana","compressible":true},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.d3m-dataset":{"source":"iana"},"application/vnd.d3m-problem":{"source":"iana"},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.dbf":{"source":"iana","extensions":["dbf"]},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbisl+xml":{"source":"iana","compressible":true},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.eclipse.ditto+json":{"source":"iana","compressible":true},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eu.kasparian.car+json":{"source":"iana","compressible":true},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.familysearch.gedcom+zip":{"source":"iana","compressible":false},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujifilm.fb.docuworks":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.container":{"source":"iana"},"application/vnd.fujifilm.fb.jfi+xml":{"source":"iana","compressible":true},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.slides":{"source":"iana"},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hl7cda+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hl7v2+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana","extensions":["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxar.archive.3tz+zip":{"source":"iana","compressible":false},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.nacamar.ybrid+json":{"source":"iana","compressible":true},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nebumind.line":{"source":"iana"},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oci.image.manifest.v1+json":{"source":"iana","compressible":true},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+cbor":{"source":"iana"},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.opentimestamps.ots":{"source":"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana","extensions":["rar"]},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.resilient.logic":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sar":{"source":"iana"},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.seis+json":{"source":"iana","compressible":true},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.shp":{"source":"iana"},"application/vnd.shx":{"source":"iana"},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.snesdev-page-table":{"source":"iana"},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.sycle+xml":{"source":"iana","compressible":true},"application/vnd.syft+json":{"source":"iana","compressible":true},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","charset":"UTF-8","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veritone.aion+json":{"source":"iana","compressible":true},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","charset":"UTF-8","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.dpp":{"source":"iana"},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"source":"iana","compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true,"extensions":["wif"]},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-iwork-keynote-sffkey":{"extensions":["key"]},"application/x-iwork-numbers-sffnumbers":{"extensions":["numbers"]},"application/x-iwork-pages-sffpages":{"extensions":["pages"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-pki-message":{"source":"iana"},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"iana","extensions":["der","crt","pem"]},"application/x-x509-ca-ra-cert":{"source":"iana"},"application/x-x509-next-ca-cert":{"source":"iana"},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xsl","xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana","extensions":["amr"]},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/mhas":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx","opus"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/scip":{"source":"iana"},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sofa":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tetra_acelp_bb":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/tsvcis":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana","extensions":["avci"]},"image/avcs":{"source":"iana","extensions":["avcs"]},"image/avif":{"source":"iana","compressible":false,"extensions":["avif"]},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/ktx2":{"source":"iana","extensions":["ktx2"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","compressible":true,"extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"compressible":true,"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.pco.b16":{"source":"iana","extensions":["b16"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/e57":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/mtl":{"source":"iana","extensions":["mtl"]},"model/obj":{"source":"iana","extensions":["obj"]},"model/step":{"source":"iana"},"model/step+xml":{"source":"iana","compressible":true,"extensions":["stpx"]},"model/step+zip":{"source":"iana","compressible":false,"extensions":["stpz"]},"model/step-xml+zip":{"source":"iana","compressible":false,"extensions":["stpxz"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.pytha.pyox":{"source":"iana"},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.sap.vds":{"source":"iana","extensions":["vds"]},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/cql":{"source":"iana"},"text/cql-expression":{"source":"iana"},"text/cql-identifier":{"source":"iana"},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fhirpath":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/gff3":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana","charset":"UTF-8"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana","charset":"UTF-8"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shaclc":{"source":"iana"},"text/shex":{"source":"iana","extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/spdx":{"source":"iana","extensions":["spdx"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana","charset":"UTF-8"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana","charset":"UTF-8"},"text/vnd.familysearch.gedcom":{"source":"iana","extensions":["ged"]},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hans":{"source":"iana"},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","charset":"UTF-8","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana","charset":"UTF-8"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"compressible":true,"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/av1":{"source":"iana"},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/ffv1":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana","extensions":["m4s"]},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/jxsv":{"source":"iana"},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/scip":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/vp9":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}');
          }
        )
        /******/
      };
      var __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (cachedModule !== void 0) {
          return cachedModule.exports;
        }
        var module3 = __webpack_module_cache__[moduleId] = {
          /******/
          // no module.id needed
          /******/
          // no module.loaded needed
          /******/
          exports: {}
          /******/
        };
        __webpack_modules__[moduleId](module3, module3.exports, __webpack_require__);
        return module3.exports;
      }
      (() => {
        __webpack_require__.n = (module3) => {
          var getter = module3 && module3.__esModule ? (
            /******/
            () => module3["default"]
          ) : (
            /******/
            () => module3
          );
          __webpack_require__.d(getter, { a: getter });
          return getter;
        };
      })();
      (() => {
        __webpack_require__.d = (exports2, definition) => {
          for (var key2 in definition) {
            if (__webpack_require__.o(definition, key2) && !__webpack_require__.o(exports2, key2)) {
              Object.defineProperty(exports2, key2, { enumerable: true, get: definition[key2] });
            }
          }
        };
      })();
      (() => {
        __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
      })();
      (() => {
        __webpack_require__.r = (exports2) => {
          if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
          }
          Object.defineProperty(exports2, "__esModule", { value: true });
        };
      })();
      var __webpack_exports__ = {};
      (() => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        __webpack_require__.d(__webpack_exports__, {
          /* harmony export */
          RestAdapter: () => (
            /* reexport safe */
            _adapters_REST_rest_adapter__WEBPACK_IMPORTED_MODULE_7__.RestAdapter
          ),
          /* harmony export */
          ScheduledActionReferenceFilters: () => (
            /* reexport safe */
            _export_types__WEBPACK_IMPORTED_MODULE_8__.ScheduledActionReferenceFilters
          ),
          /* harmony export */
          asIterator: () => (
            /* reexport safe */
            _plain_as_iterator__WEBPACK_IMPORTED_MODULE_5__.asIterator
          ),
          /* harmony export */
          createClient: () => (
            /* binding */
            createClient4
          ),
          /* harmony export */
          editorInterfaceDefaults: () => (
            /* reexport module object */
            _constants_editor_interface_defaults__WEBPACK_IMPORTED_MODULE_4__
          ),
          /* harmony export */
          isDraft: () => (
            /* reexport safe */
            _plain_checks__WEBPACK_IMPORTED_MODULE_6__.isDraft
          ),
          /* harmony export */
          isPublished: () => (
            /* reexport safe */
            _plain_checks__WEBPACK_IMPORTED_MODULE_6__.isPublished
          ),
          /* harmony export */
          isUpdated: () => (
            /* reexport safe */
            _plain_checks__WEBPACK_IMPORTED_MODULE_6__.isUpdated
          )
          /* harmony export */
        });
        var contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! contentful-sdk-core */
          "../node_modules/contentful-sdk-core/dist/index.es-modules.js"
        );
        var _create_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! ./create-adapter */
          "./create-adapter.ts"
        );
        var _create_contentful_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! ./create-contentful-api */
          "./create-contentful-api.ts"
        );
        var _plain_plain_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! ./plain/plain-client */
          "./plain/plain-client.ts"
        );
        var _constants_editor_interface_defaults__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! ./constants/editor-interface-defaults */
          "./constants/editor-interface-defaults/index.ts"
        );
        var _plain_as_iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! ./plain/as-iterator */
          "./plain/as-iterator.ts"
        );
        var _plain_checks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          /*! ./plain/checks */
          "./plain/checks.ts"
        );
        var _adapters_REST_rest_adapter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
          /*! ./adapters/REST/rest-adapter */
          "./adapters/REST/rest-adapter.ts"
        );
        var _export_types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
          /*! ./export-types */
          "./export-types.ts"
        );
        function ownKeys(e, r) {
          var t = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var o = Object.getOwnPropertySymbols(e);
            r && (o = o.filter(function(r2) {
              return Object.getOwnPropertyDescriptor(e, r2).enumerable;
            })), t.push.apply(t, o);
          }
          return t;
        }
        function _objectSpread(e) {
          for (var r = 1; r < arguments.length; r++) {
            var t = null != arguments[r] ? arguments[r] : {};
            r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
              _defineProperty(e, r2, t[r2]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
              Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
            });
          }
          return e;
        }
        function _defineProperty(obj, key2, value) {
          key2 = _toPropertyKey(key2);
          if (key2 in obj) {
            Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key2] = value;
          }
          return obj;
        }
        function _toPropertyKey(arg) {
          var key2 = _toPrimitive(arg, "string");
          return typeof key2 === "symbol" ? key2 : String(key2);
        }
        function _toPrimitive(input, hint) {
          if (typeof input !== "object" || input === null)
            return input;
          var prim = input[Symbol.toPrimitive];
          if (prim !== void 0) {
            var res = prim.call(input, hint || "default");
            if (typeof res !== "object")
              return res;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return (hint === "string" ? String : Number)(input);
        }
        function createClient4(params, opts = {}) {
          const sdkMain = opts.type === "plain" ? "contentful-management-plain.js" : "contentful-management.js";
          const userAgent = (0, contentful_sdk_core__WEBPACK_IMPORTED_MODULE_0__.getUserAgentHeader)(
            // @ts-expect-error
            `${sdkMain}/${"0.0.0-determined-by-semantic-release"}`,
            params.application,
            params.integration,
            params.feature
          );
          const adapter = (0, _create_adapter__WEBPACK_IMPORTED_MODULE_1__.createAdapter)(params);
          const makeRequest = (options2) => adapter.makeRequest(_objectSpread(_objectSpread({}, options2), {}, {
            userAgent
          }));
          if (opts.type === "plain") {
            return (0, _plain_plain_client__WEBPACK_IMPORTED_MODULE_3__.createPlainClient)(makeRequest, opts.defaults);
          } else {
            return (0, _create_contentful_api__WEBPACK_IMPORTED_MODULE_2__["default"])(makeRequest);
          }
        }
      })();
      module2.exports = __webpack_exports__;
    })();
  }
});

// .svelte-kit/output/server/chunks/private.js
var CONTENTFUL_SPACE_ID, CONTENTFUL_MANAGEMENT_TOKEN, POSTMARK_ACCESS_TOKEN, CONTENTFUL_ACCESS_TOKEN, CONTENTFUL_ENVIRONMENT;
var init_private = __esm({
  ".svelte-kit/output/server/chunks/private.js"() {
    CONTENTFUL_SPACE_ID = "edlwcd8ay884";
    CONTENTFUL_MANAGEMENT_TOKEN = "CFPAT-fohe1v0JE6QRsJ4-3eTsti5jLUKKQBtKZ6wN7NY31eQ";
    POSTMARK_ACCESS_TOKEN = "ab9a0bd6-4e94-4577-8878-92f5f6209d06";
    CONTENTFUL_ACCESS_TOKEN = "jVUfZQF7dFVfRkeZTdbbSBIhAk4aHYtDSecgvIW09hE";
    CONTENTFUL_ENVIRONMENT = "master";
  }
});

// .svelte-kit/output/server/chunks/contentful-fetch.js
var import_contentful_management, createClient, client, getEnvironment, contentfulFetch;
var init_contentful_fetch = __esm({
  ".svelte-kit/output/server/chunks/contentful-fetch.js"() {
    import_contentful_management = __toESM(require_contentful_management_node(), 1);
    init_private();
    ({ createClient } = import_contentful_management.default);
    client = createClient({
      accessToken: CONTENTFUL_MANAGEMENT_TOKEN
    });
    getEnvironment = async () => {
      const space = await client.getSpace(CONTENTFUL_SPACE_ID);
      const environment = await space.getEnvironment(CONTENTFUL_ENVIRONMENT);
      return environment;
    };
    contentfulFetch = async (query5) => {
      const environment = await getEnvironment();
      if (environment.sys.id !== CONTENTFUL_ENVIRONMENT) {
        throw new Error(`Invalid environment. CONTENTFUL_ENVIRONMENT should be "${CONTENTFUL_ENVIRONMENT}".`);
      }
      const url = "https://graphql.contentful.com/content/v1/spaces/" + CONTENTFUL_SPACE_ID;
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + CONTENTFUL_ACCESS_TOKEN
        },
        body: JSON.stringify({ query: query5 })
      });
      return response;
    };
  }
});

// .svelte-kit/output/server/entries/pages/_layout.server.js
var layout_server_exports = {};
__export(layout_server_exports, {
  load: () => load
});
async function load() {
  const query5 = `
  query {
    navigationMenu(id: "4Vtc0yrr7IsXwAdeoJBqzm") {
      menuItemsCollection {
        items {
          ... on MenuItem {
            path
            internalName
            childItemsCollection {
              items {
                ... on MenuItem {
                  path
                  internalName
                }
              }
            }
          }
        }
      }
    }
  }
  `;
  const response = await contentfulFetch(query5);
  if (!response.ok) {
    throw error2(404, {
      message: `Mistakes were made: Error ${response.status} - ${response.statusText} 
        ${response.url}`
    });
  }
  const { data } = await response.json();
  const { items: nav_items } = data.navigationMenu.menuItemsCollection;
  return {
    nav_items: nav_items.map((e) => {
      return {
        ...e
      };
    })
  };
}
var init_layout_server = __esm({
  ".svelte-kit/output/server/entries/pages/_layout.server.js"() {
    init_chunks();
    init_contentful_fetch();
  }
});

// .svelte-kit/output/server/chunks/index3.js
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function compute_rest_props(props, keys) {
  const rest = {};
  keys = new Set(keys);
  for (const k in props)
    if (!keys.has(k) && k[0] !== "$")
      rest[k] = props[k];
  return rest;
}
function compute_slots(slots) {
  const result = {};
  for (const key2 in slots) {
    result[key2] = true;
  }
  return result;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, bubbles, cancelable, detail);
  return e;
}
function set_current_component(component13) {
  current_component = component13;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
  const component13 = get_current_component();
  return (type, detail, { cancelable = false } = {}) => {
    const callbacks = component13.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail, { cancelable });
      callbacks.slice().forEach((fn) => {
        fn.call(component13, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}
function setContext(key2, context) {
  get_current_component().$$.context.set(key2, context);
  return context;
}
function getContext(key2) {
  return get_current_component().$$.context.get(key2);
}
function spread(args, attrs_to_add) {
  const attributes = Object.assign({}, ...args);
  if (attrs_to_add) {
    const classes_to_add = attrs_to_add.classes;
    const styles_to_add = attrs_to_add.styles;
    if (classes_to_add) {
      if (attributes.class == null) {
        attributes.class = classes_to_add;
      } else {
        attributes.class += " " + classes_to_add;
      }
    }
    if (styles_to_add) {
      if (attributes.style == null) {
        attributes.style = style_object_to_string(styles_to_add);
      } else {
        attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));
      }
    }
  }
  let str = "";
  Object.keys(attributes).forEach((name) => {
    if (invalid_attribute_name_character.test(name))
      return;
    const value = attributes[name];
    if (value === true)
      str += " " + name;
    else if (boolean_attributes.has(name.toLowerCase())) {
      if (value)
        str += " " + name;
    } else if (value != null) {
      str += ` ${name}="${value}"`;
    }
  });
  return str;
}
function merge_ssr_styles(style_attribute, style_directive) {
  const style_object = {};
  for (const individual_style of style_attribute.split(";")) {
    const colon_index = individual_style.indexOf(":");
    const name = individual_style.slice(0, colon_index).trim();
    const value = individual_style.slice(colon_index + 1).trim();
    if (!name)
      continue;
    style_object[name] = value;
  }
  for (const name in style_directive) {
    const value = style_directive[name];
    if (value) {
      style_object[name] = value;
    } else {
      delete style_object[name];
    }
  }
  return style_object;
}
function escape(value, is_attr = false) {
  const str = String(value);
  const pattern2 = is_attr ? ATTR_REGEX : CONTENT_REGEX;
  pattern2.lastIndex = 0;
  let escaped2 = "";
  let last = 0;
  while (pattern2.test(str)) {
    const i = pattern2.lastIndex - 1;
    const ch = str[i];
    escaped2 += str.substring(last, i) + (ch === "&" ? "&amp;" : ch === '"' ? "&quot;" : "&lt;");
    last = i + 1;
  }
  return escaped2 + str.substring(last);
}
function escape_attribute_value(value) {
  const should_escape = typeof value === "string" || value && typeof value === "object";
  return should_escape ? escape(value, true) : value;
}
function escape_object(obj) {
  const result = {};
  for (const key2 in obj) {
    result[key2] = escape_attribute_value(obj[key2]);
  }
  return result;
}
function each(items, fn) {
  let str = "";
  for (let i = 0; i < items.length; i += 1) {
    str += fn(items[i], i);
  }
  return str;
}
function validate_component(component13, name) {
  if (!component13 || !component13.$$render) {
    if (name === "svelte:component")
      name += " this={...}";
    throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);
  }
  return component13;
}
function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots, context) {
    const parent_component = current_component;
    const $$ = {
      on_destroy,
      context: new Map(context || (parent_component ? parent_component.$$.context : [])),
      // these will be immediately discarded
      on_mount: [],
      before_update: [],
      after_update: [],
      callbacks: blank_object()
    };
    set_current_component({ $$ });
    const html = fn(result, props, bindings, slots);
    set_current_component(parent_component);
    return html;
  }
  return {
    render: (props = {}, { $$slots = {}, context = /* @__PURE__ */ new Map() } = {}) => {
      on_destroy = [];
      const result = { title: "", head: "", css: /* @__PURE__ */ new Set() };
      const html = $$render(result, props, {}, $$slots, context);
      run_all(on_destroy);
      return {
        html,
        css: {
          code: Array.from(result.css).map((css18) => css18.code).join("\n"),
          map: null
          // TODO
        },
        head: result.title + result.head
      };
    },
    $$render
  };
}
function add_attribute(name, value, boolean) {
  if (value == null || boolean && !value)
    return "";
  const assignment = boolean && value === true ? "" : `="${escape(value, true)}"`;
  return ` ${name}${assignment}`;
}
function add_classes(classes) {
  return classes ? ` class="${classes}"` : "";
}
function style_object_to_string(style_object) {
  return Object.keys(style_object).filter((key2) => style_object[key2]).map((key2) => `${key2}: ${escape_attribute_value(style_object[key2])};`).join(" ");
}
function add_styles(style_object) {
  const styles = style_object_to_string(style_object);
  return styles ? ` style="${styles}"` : "";
}
var current_component, _boolean_attributes, boolean_attributes, invalid_attribute_name_character, ATTR_REGEX, CONTENT_REGEX, missing_component, on_destroy;
var init_index3 = __esm({
  ".svelte-kit/output/server/chunks/index3.js"() {
    _boolean_attributes = [
      "allowfullscreen",
      "allowpaymentrequest",
      "async",
      "autofocus",
      "autoplay",
      "checked",
      "controls",
      "default",
      "defer",
      "disabled",
      "formnovalidate",
      "hidden",
      "inert",
      "ismap",
      "loop",
      "multiple",
      "muted",
      "nomodule",
      "novalidate",
      "open",
      "playsinline",
      "readonly",
      "required",
      "reversed",
      "selected"
    ];
    boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);
    invalid_attribute_name_character = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
    ATTR_REGEX = /[&"]/g;
    CONTENT_REGEX = /[&<]/g;
    missing_component = {
      $$render: () => ""
    };
  }
});

// .svelte-kit/output/server/chunks/IconBase.js
var css, IconBase;
var init_IconBase = __esm({
  ".svelte-kit/output/server/chunks/IconBase.js"() {
    init_index3();
    css = {
      code: "svg.svelte-c8tyih{stroke:currentColor;fill:currentColor;stroke-width:0;width:100%;height:auto;max-height:100%}",
      map: null
    };
    IconBase = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { title = null } = $$props;
      let { viewBox } = $$props;
      if ($$props.title === void 0 && $$bindings.title && title !== void 0)
        $$bindings.title(title);
      if ($$props.viewBox === void 0 && $$bindings.viewBox && viewBox !== void 0)
        $$bindings.viewBox(viewBox);
      $$result.css.add(css);
      return `<svg xmlns="http://www.w3.org/2000/svg"${add_attribute("viewBox", viewBox, 0)} class="svelte-c8tyih">${title ? `<title>${escape(title)}</title>` : ``}${slots.default ? slots.default({}) : ``}</svg>`;
    });
  }
});

// .svelte-kit/output/server/chunks/stores.js
var getStores, page, navigating;
var init_stores = __esm({
  ".svelte-kit/output/server/chunks/stores.js"() {
    init_index3();
    getStores = () => {
      const stores = getContext("__svelte__");
      return {
        /** @type {typeof page} */
        page: {
          subscribe: stores.page.subscribe
        },
        /** @type {typeof navigating} */
        navigating: {
          subscribe: stores.navigating.subscribe
        },
        /** @type {typeof updated} */
        updated: stores.updated
      };
    };
    page = {
      subscribe(fn) {
        const store = getStores().page;
        return store.subscribe(fn);
      }
    };
    navigating = {
      subscribe(fn) {
        const store = getStores().navigating;
        return store.subscribe(fn);
      }
    };
  }
});

// .svelte-kit/output/server/entries/pages/_layout.svelte.js
var layout_svelte_exports = {};
__export(layout_svelte_exports, {
  default: () => Layout,
  load: () => load2
});
async function getPersonCollection() {
  const response = await fetch("/api/personCollection");
  const personCollections = await response.json();
  return personCollections;
}
async function getHeroBanner() {
  const response = await fetch("/api/heroBanner");
  const heroBanners = await response.json();
  return heroBanners;
}
async function load2() {
  const heroBanners = await getHeroBanner();
  const personCollections = await getPersonCollection();
  return {
    props: { heroBanners, personCollections }
  };
}
var css$7, Circle3, css$6, Backdrop, FaChevronDown, css$5, LinkItem, css$4, SideDrawer, css$3, DrawerToggleButton, css$2, logoLight$1, logoDark, Nav, FaFacebookF, FaTwitter, FaLinkedinIn, css$1, logoLight, Footer, css2, Layout;
var init_layout_svelte = __esm({
  ".svelte-kit/output/server/entries/pages/_layout.svelte.js"() {
    init_index3();
    init_IconBase();
    init_stores();
    css$7 = {
      code: ".wrapper.svelte-7wj78d{width:var(--size);height:var(--size);display:flex;justify-content:center;align-items:center;line-height:0;box-sizing:border-box}.inner.svelte-7wj78d{transform:scale(calc(var(--floatSize) / 52))}.ball-container.svelte-7wj78d{animation:svelte-7wj78d-ballTwo var(--duration) infinite;width:44px;height:44px;flex-shrink:0;position:relative}.single-ball.svelte-7wj78d{width:44px;height:44px;position:absolute}.ball.svelte-7wj78d{width:20px;height:20px;border-radius:50%;position:absolute;animation:svelte-7wj78d-ballOne var(--duration) infinite ease}.pause-animation.svelte-7wj78d{animation-play-state:paused}.ball-top-left.svelte-7wj78d{background-color:var(--ballTopLeftColor);top:0;left:0}.ball-top-right.svelte-7wj78d{background-color:var(--ballTopRightColor);top:0;left:24px}.ball-bottom-left.svelte-7wj78d{background-color:var(--ballBottomLeftColor);top:24px;left:0}.ball-bottom-right.svelte-7wj78d{background-color:var(--ballBottomRightColor);top:24px;left:24px}@keyframes svelte-7wj78d-ballOne{0%{position:absolute}50%{top:12px;left:12px;position:absolute;opacity:0.5}100%{position:absolute}}@keyframes svelte-7wj78d-ballTwo{0%{transform:rotate(0deg) scale(1)}50%{transform:rotate(360deg) scale(1.3)}100%{transform:rotate(720deg) scale(1)}}",
      map: null
    };
    Circle3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { size = "60" } = $$props;
      let { unit = "px" } = $$props;
      let { pause = false } = $$props;
      let { ballTopLeft = "#FF3E00" } = $$props;
      let { ballTopRight = "#F8B334" } = $$props;
      let { ballBottomLeft = "#40B3FF" } = $$props;
      let { ballBottomRight = "#676778" } = $$props;
      let { duration = "1.5s" } = $$props;
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.unit === void 0 && $$bindings.unit && unit !== void 0)
        $$bindings.unit(unit);
      if ($$props.pause === void 0 && $$bindings.pause && pause !== void 0)
        $$bindings.pause(pause);
      if ($$props.ballTopLeft === void 0 && $$bindings.ballTopLeft && ballTopLeft !== void 0)
        $$bindings.ballTopLeft(ballTopLeft);
      if ($$props.ballTopRight === void 0 && $$bindings.ballTopRight && ballTopRight !== void 0)
        $$bindings.ballTopRight(ballTopRight);
      if ($$props.ballBottomLeft === void 0 && $$bindings.ballBottomLeft && ballBottomLeft !== void 0)
        $$bindings.ballBottomLeft(ballBottomLeft);
      if ($$props.ballBottomRight === void 0 && $$bindings.ballBottomRight && ballBottomRight !== void 0)
        $$bindings.ballBottomRight(ballBottomRight);
      if ($$props.duration === void 0 && $$bindings.duration && duration !== void 0)
        $$bindings.duration(duration);
      $$result.css.add(css$7);
      return `<div class="wrapper svelte-7wj78d" style="${"--size: " + escape(size, true) + escape(unit, true) + "; --floatSize: " + escape(size, true) + "; --ballTopLeftColor: " + escape(ballTopLeft, true) + "; --ballTopRightColor: " + escape(ballTopRight, true) + "; --ballBottomLeftColor: " + escape(ballBottomLeft, true) + "; --ballBottomRightColor: " + escape(ballBottomRight, true) + "; --duration: " + escape(duration, true) + ";"}"><div class="inner svelte-7wj78d"><div class="${["ball-container svelte-7wj78d", pause ? "pause-animation" : ""].join(" ").trim()}"><div class="single-ball svelte-7wj78d"><div class="${["ball ball-top-left svelte-7wj78d", pause ? "pause-animation" : ""].join(" ").trim()}">\xA0</div></div>
			<div class="contener_mixte"><div class="${["ball ball-top-right svelte-7wj78d", pause ? "pause-animation" : ""].join(" ").trim()}">\xA0</div></div>
			<div class="contener_mixte"><div class="${["ball ball-bottom-left svelte-7wj78d", pause ? "pause-animation" : ""].join(" ").trim()}">\xA0</div></div>
			<div class="contener_mixte"><div class="${["ball ball-bottom-right svelte-7wj78d", pause ? "pause-animation" : ""].join(" ").trim()}">\xA0</div></div></div></div>
</div>`;
    });
    css$6 = {
      code: ".backdrop.svelte-ckei2y.svelte-ckei2y{position:fixed;width:100%;height:100%;background:#202d64;z-index:100;top:0;left:0}.backdrop.svelte-ckei2y div.svelte-ckei2y{display:flex;justify-content:center;margin-top:45vh}",
      map: null
    };
    Backdrop = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      $$result.css.add(css$6);
      return `<div class="backdrop svelte-ckei2y"><div class="svelte-ckei2y">${validate_component(Circle3, "Circle3").$$render(
        $$result,
        {
          size: "180",
          ballTopLeft: "#ADEBEF",
          ballTopRight: "#DA2F5C",
          ballBottomLeft: "#FFC126",
          ballBottomRight: "#FBF6E2",
          unit: "px",
          duration: "4s"
        },
        {},
        {}
      )}</div>
</div>`;
    });
    FaChevronDown = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return `${validate_component(IconBase, "IconBase").$$render($$result, Object.assign({}, { viewBox: "0 0 448 512" }, $$props), {}, {
        default: () => {
          return `<path d="M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"></path>`;
        }
      })}`;
    });
    css$5 = {
      code: ".linkItem.svelte-z3mwrh.svelte-z3mwrh{display:grid}li.svelte-z3mwrh.svelte-z3mwrh{padding:1rem 0;list-style-type:none}li.svelte-z3mwrh a.svelte-z3mwrh{font-family:'PolySans Slim', Arial, sans-serif;font-weight:500;text-decoration:none;padding:2rem 1rem;color:#fff;letter-spacing:0.5px}li.svelte-z3mwrh a.svelte-z3mwrh:hover{text-decoration:underline;cursor:pointer}.icon.svelte-z3mwrh.svelte-z3mwrh{width:0.7rem;display:inline-block;transition:all 0.25s ease-out;transform:translate(2px, 2px)}.icon.svelte-z3mwrh svg{margin-top:-0.4rem}.rotated.svelte-z3mwrh.svelte-z3mwrh{transform:rotate(-180deg);transform-origin:center center}.linkItem.svelte-z3mwrh ul.svelte-z3mwrh{padding:0}.linkItem.svelte-z3mwrh .dropdown.svelte-z3mwrh{display:grid}.dropdown.svelte-z3mwrh .dropbtn.svelte-z3mwrh{border:none;outline:none;color:#fff;font-weight:700;box-shadow:none;background-color:inherit;font-family:inherit;margin:0;padding:0}.dropdown-content.svelte-z3mwrh.svelte-z3mwrh{position:absolute;top:3.5rem;background-color:#fff;min-width:10rem;box-shadow:0px 8px 16px 0px rgba(0, 0, 0, 0.2);z-index:1}.dropdown-content.svelte-z3mwrh a.svelte-z3mwrh{color:#29397a;display:block;background:#fff;padding:0.75rem 1rem;text-decoration:none;text-align:left;font-size:0.95rem;letter-spacing:0.5px;font-weight:lighter}.dropdown-content.svelte-z3mwrh a.svelte-z3mwrh:hover{color:#29397a;background-color:#adebef}.bgwhite.svelte-z3mwrh.svelte-z3mwrh{background:#fff;color:#29397a}@media(max-width: 768px){.dropdown-content.svelte-z3mwrh a.svelte-z3mwrh{color:#29397a;display:block;background:#fff;border-bottom:2px solid #6d6d6d}.dropdown-content.svelte-z3mwrh a.svelte-z3mwrh:first-child{border-top:2px solid #6d6d6d}.dropdown-content.svelte-z3mwrh a.svelte-z3mwrh:hover{background-color:#fff;color:#000}.linkItem.svelte-z3mwrh.svelte-z3mwrh{border-top:2px solid black}.linkItem.svelte-z3mwrh.svelte-z3mwrh:first-child{border-top:0px solid black}.linkItem.svelte-z3mwrh a.svelte-z3mwrh{color:black}.dropdown-content.svelte-z3mwrh.svelte-z3mwrh{position:relative;min-width:100%;box-shadow:none;z-index:1}li.svelte-z3mwrh.svelte-z3mwrh{height:100%}.linkItem.svelte-z3mwrh li.svelte-z3mwrh{margin:auto}.dropdown.svelte-z3mwrh .dropbtn a.svelte-z3mwrh,li.svelte-z3mwrh a.svelte-z3mwrh{display:flex;align-items:center;text-align:left;height:100%;font-size:2rem;padding-left:5rem}.dropdown-content.svelte-z3mwrh.svelte-z3mwrh{top:0.5rem}.icon.svelte-z3mwrh.svelte-z3mwrh{width:1.1rem;margin-left:0.33rem}.dropdown.svelte-z3mwrh .dropdown-content a.svelte-z3mwrh{display:flex;text-align:center;padding-left:6rem;font-size:1.5rem;font-weight:lighter}.dropdown.svelte-z3mwrh .dropdown-content:first-child a.svelte-z3mwrh:hover{background:#fff !important;color:#fff !important}}",
      map: null
    };
    LinkItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { nav_item } = $$props;
      let { isDropdownOpen } = $$props;
      let { dropdownClick } = $$props;
      let { drawerToggle } = $$props;
      let { id } = $$props;
      if ($$props.nav_item === void 0 && $$bindings.nav_item && nav_item !== void 0)
        $$bindings.nav_item(nav_item);
      if ($$props.isDropdownOpen === void 0 && $$bindings.isDropdownOpen && isDropdownOpen !== void 0)
        $$bindings.isDropdownOpen(isDropdownOpen);
      if ($$props.dropdownClick === void 0 && $$bindings.dropdownClick && dropdownClick !== void 0)
        $$bindings.dropdownClick(dropdownClick);
      if ($$props.drawerToggle === void 0 && $$bindings.drawerToggle && drawerToggle !== void 0)
        $$bindings.drawerToggle(drawerToggle);
      if ($$props.id === void 0 && $$bindings.id && id !== void 0)
        $$bindings.id(id);
      $$result.css.add(css$5);
      return `<li class="linkItem svelte-z3mwrh"${add_attribute("id", id, 0)}><ul class="svelte-z3mwrh">${nav_item.childItemsCollection.items.length >= 1 ? `<li class="dropdown dropbtnWrapper svelte-z3mwrh"><div class="dropbtn svelte-z3mwrh"><a${add_attribute("href", nav_item.path, 0)} class="${["dropdownlink svelte-z3mwrh", isDropdownOpen[id] ? "bgwhite" : ""].join(" ").trim()}" aria-label="${"Link to the " + escape(nav_item.internalName, true) + " page."}">${escape(nav_item.internalName)}
            <div class="${["icon svelte-z3mwrh", isDropdownOpen[id] ? "rotated" : ""].join(" ").trim()}">${validate_component(FaChevronDown, "FaChevronDown").$$render($$result, {}, {}, {})}</div></a></div>
        <div class="dropdown-content svelte-z3mwrh"${add_styles({
        "display": isDropdownOpen[id] ? "block" : "none"
      })}>${each(nav_item.childItemsCollection.items, (child_item) => {
        return `<a${add_attribute("href", child_item.path, 0)} class="submenu-link svelte-z3mwrh" aria-label="${"Link to the " + escape(child_item.internalName, true) + " page."}">${escape(child_item.internalName)}</a>`;
      })}</div></li>` : `<li class="svelte-z3mwrh"><a${add_attribute("href", nav_item.path, 0)} aria-label="${"Link to the " + escape(nav_item.internalName, true) + " page."}" class="svelte-z3mwrh">${escape(nav_item.internalName)}</a></li>`}</ul>
</li>`;
    });
    css$4 = {
      code: ".sideDrawer.svelte-9glfll.svelte-9glfll{height:100%;background:#fff;box-shadow:1px 0px 7px rgba(0, 0, 0, 0.5);position:fixed;top:0;left:0;width:100%;z-index:1000;transform:translateX(-100%);transition:transform 0.3s ease-out;overflow-y:scroll}.sideDrawer.open.svelte-9glfll.svelte-9glfll{transform:translateX(0)}.sideDrawer.svelte-9glfll ul.svelte-9glfll{display:grid;grid-template-rows:repeat(5, 1fr);width:100%;height:100%;list-style:none;padding:0}@media(min-width: 769px){.sideDrawer.svelte-9glfll.svelte-9glfll{display:none}}",
      map: null
    };
    SideDrawer = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { show } = $$props;
      let { data } = $$props;
      let { isDropdownOpen } = $$props;
      let { dropdownClick } = $$props;
      let { drawerToggle } = $$props;
      if ($$props.show === void 0 && $$bindings.show && show !== void 0)
        $$bindings.show(show);
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      if ($$props.isDropdownOpen === void 0 && $$bindings.isDropdownOpen && isDropdownOpen !== void 0)
        $$bindings.isDropdownOpen(isDropdownOpen);
      if ($$props.dropdownClick === void 0 && $$bindings.dropdownClick && dropdownClick !== void 0)
        $$bindings.dropdownClick(dropdownClick);
      if ($$props.drawerToggle === void 0 && $$bindings.drawerToggle && drawerToggle !== void 0)
        $$bindings.drawerToggle(drawerToggle);
      $$result.css.add(css$4);
      return `<nav class="${escape(null_to_empty(show), true) + " svelte-9glfll"}"><ul class="svelte-9glfll">${each(data.nav_items, (nav_item, index13) => {
        return `${validate_component(LinkItem, "LinkItem").$$render(
          $$result,
          {
            nav_item,
            isDropdownOpen,
            drawerToggle,
            dropdownClick,
            id: index13
          },
          {},
          {}
        )}`;
      })}</ul>
</nav>`;
    });
    css$3 = {
      code: ".toggle-button.svelte-dcltgg.svelte-dcltgg{display:flex;flex-direction:column;justify-content:space-around;height:24px;width:30px;background:transparent;border:none;cursor:pointer;margin:1em 0 1em 0.75em;padding:0;box-sizing:border-box;box-shadow:none;z-index:10001\n  }.toggle-button.svelte-dcltgg.svelte-dcltgg:focus{outline:none}.toggle-button.svelte-dcltgg div.svelte-dcltgg{position:relative;width:2em;height:4px;background-color:#fff;transition:all 0.3s ease-in-out}.navbar.white .toggle-button div{background:#29397a}.navbar.scrolled:not(.white) .toggle-button div{background-color:#fff}.navbar.open .toggle-button div{background-color:red}.navbar.open .toggle-button-line:nth-child(1){transform:translateY(11px) rotate(45deg)}.navbar.open .toggle-button-line:nth-child(2){opacity:0}.navbar.open .toggle-button-line:nth-child(3){transform:translateY(-5px) rotate(-45deg)}.navbar.open.scrolled .toggle-button div{background-color:red !important}@media(min-width: 768px){.toggle-button.svelte-dcltgg.svelte-dcltgg{display:none}}",
      map: null
    };
    DrawerToggleButton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { isOpen } = $$props;
      if ($$props.isOpen === void 0 && $$bindings.isOpen && isOpen !== void 0)
        $$bindings.isOpen(isOpen);
      $$result.css.add(css$3);
      return `<button class="${["toggle-button svelte-dcltgg", isOpen ? "open" : ""].join(" ").trim()}" aria-label="Button to Open and Close the mobile menu"><div class="toggle-button-line svelte-dcltgg"></div>
  <div class="toggle-button-line svelte-dcltgg"></div>
  <div class="toggle-button-line svelte-dcltgg"></div>
</button>`;
    });
    css$2 = {
      code: ".logo.svelte-p9s28g.svelte-p9s28g{max-height:3em;max-width:10rem}.navbar.svelte-p9s28g.svelte-p9s28g{position:fixed;width:100%;max-width:2300px;background-color:transparent;transition:all 0.5s ease-out;align-content:center;padding:1rem 2rem;opacity:1;z-index:10001}.navbar.open.svelte-p9s28g .logo_wrapper.svelte-p9s28g{opacity:0}.navbar.white.svelte-p9s28g.svelte-p9s28g{position:static;background-color:#fff}.navbar.white .navbar_nav_right a{color:black;letter-spacing:0.5px}.navbar.white .navbar_nav_right a:hover{color:black}.scrolled.svelte-p9s28g.svelte-p9s28g{background-color:#29397a;box-shadow:0 3px 5px rgba(0, 0, 0, 0.2)}.scrolled.open.svelte-p9s28g.svelte-p9s28g{background:transparent;box-shadow:none}.navbar_nav_right.svelte-p9s28g.svelte-p9s28g{list-style:none;margin:0;padding:0;display:flex}.spacer.svelte-p9s28g.svelte-p9s28g{flex:1}.logo_wrapper.svelte-p9s28g.svelte-p9s28g{margin-left:0.75em}@media(max-width: 768px){.navbar_nav_right.svelte-p9s28g.svelte-p9s28g{display:none}.logo.svelte-p9s28g.svelte-p9s28g{max-height:2em}}@media(max-width: 820px){.navbar.svelte-p9s28g.svelte-p9s28g{padding:1rem 2rem}}@media(max-width: 1440px){.logo.svelte-p9s28g.svelte-p9s28g{max-height:3em;max-width:10rem}.navbar.svelte-p9s28g.svelte-p9s28g{padding:1rem}}",
      map: null
    };
    logoLight$1 = "/pluto_logo.svg";
    logoDark = "/pluto_logoDark.svg";
    Nav = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $page, $$unsubscribe_page;
      $$unsubscribe_page = subscribe(page, (value) => $page = value);
      let { data } = $$props;
      let { isDropdownOpen } = $$props;
      let { drawerToggle } = $$props;
      let { dropdownClick } = $$props;
      let { show } = $$props;
      let isNewsPage;
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      if ($$props.isDropdownOpen === void 0 && $$bindings.isDropdownOpen && isDropdownOpen !== void 0)
        $$bindings.isDropdownOpen(isDropdownOpen);
      if ($$props.drawerToggle === void 0 && $$bindings.drawerToggle && drawerToggle !== void 0)
        $$bindings.drawerToggle(drawerToggle);
      if ($$props.dropdownClick === void 0 && $$bindings.dropdownClick && dropdownClick !== void 0)
        $$bindings.dropdownClick(dropdownClick);
      if ($$props.show === void 0 && $$bindings.show && show !== void 0)
        $$bindings.show(show);
      $$result.css.add(css$2);
      isNewsPage = $page.url.pathname.startsWith("/news");
      $$unsubscribe_page();
      return `

<nav class="${[
        "navbar svelte-p9s28g",
        " " + (isNewsPage ? "white" : "") + " " + (show ? "open" : "")
      ].join(" ").trim()}" id="navbar_nav"><div class="logo_wrapper svelte-p9s28g"><a href="/" aria-label="A link back to the home page"><img class="${escape(isNewsPage ? "logoDark" : "logoLight", true) + " logo svelte-p9s28g"}"${add_attribute("src", isNewsPage ? logoDark : logoLight$1, 0)} alt="The Paul Health logo."></a></div>

  <div class="spacer svelte-p9s28g"></div>

  <div><ul class="navbar_nav_right svelte-p9s28g">${each(data.nav_items, (nav_item, index13) => {
        return `${validate_component(LinkItem, "LinkItem").$$render(
          $$result,
          {
            nav_item,
            isDropdownOpen,
            drawerToggle,
            dropdownClick,
            id: index13
          },
          {},
          {}
        )}`;
      })}</ul></div>
  ${validate_component(DrawerToggleButton, "DrawerToggleButton").$$render($$result, { isOpen: isDropdownOpen }, {}, {})}
</nav>`;
    });
    FaFacebookF = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return `${validate_component(IconBase, "IconBase").$$render($$result, Object.assign({}, { viewBox: "0 0 320 512" }, $$props), {}, {
        default: () => {
          return `<path d="M279.14 288l14.22-92.66h-88.91v-60.13c0-25.35 12.42-50.06 52.24-50.06h40.42V6.26S260.43 0 225.36 0c-73.22 0-121.08 44.38-121.08 124.72v70.62H22.89V288h81.39v224h100.17V288z"></path>`;
        }
      })}`;
    });
    FaTwitter = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return `${validate_component(IconBase, "IconBase").$$render($$result, Object.assign({}, { viewBox: "0 0 512 512" }, $$props), {}, {
        default: () => {
          return `<path d="M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z"></path>`;
        }
      })}`;
    });
    FaLinkedinIn = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return `${validate_component(IconBase, "IconBase").$$render($$result, Object.assign({}, { viewBox: "0 0 448 512" }, $$props), {}, {
        default: () => {
          return `<path d="M100.28 448H7.4V148.9h92.88zM53.79 108.1C24.09 108.1 0 83.5 0 53.8a53.79 53.79 0 0 1 107.58 0c0 29.7-24.1 54.3-53.79 54.3zM447.9 448h-92.68V302.4c0-34.7-.7-79.2-48.29-79.2-48.29 0-55.69 37.7-55.69 76.7V448h-92.78V148.9h89.08v40.8h1.3c12.4-23.5 42.69-48.3 87.88-48.3 94 0 111.28 61.9 111.28 142.3V448z"></path>`;
        }
      })}`;
    });
    css$1 = {
      code: ".footer.svelte-15o1vvh.svelte-15o1vvh{display:flex;justify-content:space-between;padding:4rem;background-color:#29397a;color:#fff}small.svelte-15o1vvh.svelte-15o1vvh{font-size:14px;margin-top:4rem;text-transform:none}.left-section.svelte-15o1vvh.svelte-15o1vvh{display:flex;flex-direction:column;justify-content:space-between;max-width:500px;padding-right:2rem;order:1}.left-section.svelte-15o1vvh p.svelte-15o1vvh{font-family:'PolySans Neutral', Arial, sans-serif}.right-section.svelte-15o1vvh.svelte-15o1vvh{display:flex;justify-content:space-between;position:relative;order:2}.column.svelte-15o1vvh.svelte-15o1vvh{display:flex;flex-direction:column;margin-right:2rem}.column.svelte-15o1vvh a.svelte-15o1vvh{font-family:'PolySans Neutral', Arial, sans-serif;font-weight:400;text-decoration:none;margin-bottom:0.5rem;color:#fff}.column.svelte-15o1vvh a.svelte-15o1vvh:hover{text-decoration:underline}.social-icon.svelte-15o1vvh.svelte-15o1vvh{color:#fff}.logo.svelte-15o1vvh.svelte-15o1vvh{background-position:center;background-repeat:no-repeat;background-size:contain;height:3em;width:5rem}.social-media-container.svelte-15o1vvh.svelte-15o1vvh{display:flex;justify-content:space-between;position:absolute;bottom:0;right:0;margin-top:1rem;margin-bottom:8px;margin-right:5px}.social-icon.svelte-15o1vvh.svelte-15o1vvh{text-decoration:none;max-height:20px;max-width:30px}.social-icon.svelte-15o1vvh.svelte-15o1vvh:hover{opacity:0.7}@media screen and (max-width: 1000px){.footer.svelte-15o1vvh.svelte-15o1vvh{padding:4rem 2rem}}@media screen and (max-width: 767px){.footer.svelte-15o1vvh.svelte-15o1vvh{flex-direction:column-reverse;padding:3rem 2rem;text-align:center}.left-section.svelte-15o1vvh.svelte-15o1vvh{max-width:100%}.left-section.svelte-15o1vvh p.svelte-15o1vvh{margin:3rem 0}.right-section.svelte-15o1vvh.svelte-15o1vvh{flex-direction:column;align-items:flex-start}.column.svelte-15o1vvh.svelte-15o1vvh{margin-bottom:1rem;width:100%}.social-media-container.svelte-15o1vvh.svelte-15o1vvh{visibility:hidden}small.svelte-15o1vvh.svelte-15o1vvh{margin-top:0}.logo.svelte-15o1vvh.svelte-15o1vvh{margin-left:calc(50% - 20px);margin-right:calc(-50%)}}",
      map: null
    };
    logoLight = "/pluto_logo.svg";
    Footer = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      $$result.css.add(css$1);
      return `<footer class="footer svelte-15o1vvh"><div class="left-section svelte-15o1vvh"><div class="column svelte-15o1vvh"><div class="logo_wrapper"><a href="/" aria-label="Lorem ipsum logo that works as a link back to the home page." class="svelte-15o1vvh"><div class="logo svelte-15o1vvh" style="${"background-image: url(" + escape(logoLight, true) + ")"}"></div></a></div>
       <p class="svelte-15o1vvh">Lorem ipsum dolor sit amet, consectetur adipiscing elit. <br>
       Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\u200B</p>
       <small class="svelte-15o1vvh"><span>1234 Lorem Ipsum Street, Suite 5678, Lorem City, LR 90001</span>
         <br>
         <span>\xA9 2024 Lorem Ipsum Inc. All rights reserved.</span></small></div></div>
  <div class="right-section svelte-15o1vvh"><div class="column svelte-15o1vvh"><a href="/how-it-works" aria-label="Link to Lorem Ipsum's how it works page." class="svelte-15o1vvh">How it works</a>
       <a href="/services/patients" aria-label="Link to Lorem Ipsum's patients page." class="svelte-15o1vvh">Patients</a>
       <a href="/services/clinicians" aria-label="Link to Lorem Ipsum's clinicians page." class="svelte-15o1vvh">Clinicians</a>
       <a href="/services/researchers" aria-label="Link to Lorem Ipsum's researchers page." class="svelte-15o1vvh">Researchers</a></div>
     <div class="column svelte-15o1vvh"><a href="/contact" aria-label="Link to Lorem Ipsum's contact page." class="svelte-15o1vvh">Contact</a>
       <a href="https://loremipsum.zendesk.com/hc/en-us" aria-label="Link to Lorem Ipsum's help center." class="svelte-15o1vvh">Help Center</a>
       <a href="/legal" aria-label="Link to Lorem Ipsum's privacy and terms of use page." class="svelte-15o1vvh">Privacy &amp; <br> Terms of Use</a></div>
     <div class="social-media-container svelte-15o1vvh"><a href="https://twitter.com" class="social-icon svelte-15o1vvh" target="_blank" rel="noopener noreferrer" aria-label="Link to Lorem Ipsum's Twitter">${validate_component(FaTwitter, "FaTwitter").$$render($$result, {}, {}, {})}</a>
       <a href="https://facebook.com" class="social-icon svelte-15o1vvh" target="_blank" rel="noopener noreferrer" aria-label="Link to Lorem Ipsum's Facebook">${validate_component(FaFacebookF, "FaFacebookF").$$render($$result, {}, {}, {})}</a>
       <a href="https://linkedin.com" class="social-icon svelte-15o1vvh" target="_blank" rel="noopener noreferrer" aria-label="Link to Lorem Ipsum's LinkedIn">${validate_component(FaLinkedinIn, "FaLinkedinIn").$$render($$result, {}, {}, {})}</a></div></div>
 </footer>`;
    });
    css2 = {
      code: "@import './global.css';",
      map: null
    };
    Layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$unsubscribe_page;
      let $navigating, $$unsubscribe_navigating;
      $$unsubscribe_page = subscribe(page, (value) => value);
      $$unsubscribe_navigating = subscribe(navigating, (value) => $navigating = value);
      let { data } = $$props;
      let container;
      let show = false;
      let isLoading = true;
      let drawerClasses = "sideDrawer";
      function drawerToggleHandler() {
        show = !show;
        if (show) {
          drawerClasses = "sideDrawer open";
        } else {
          drawerClasses = "sideDrawer";
        }
      }
      let isDropdownOpen = {};
      const handleDropdownClick = (id, nav_item, e) => {
        e.preventDefault();
        if (nav_item.childItemsCollection.items.length >= 1) {
          isDropdownOpen[id] = !isDropdownOpen[id];
        } else {
          drawerToggleHandler();
        }
      };
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css2);
      {
        show = false;
      }
      $$unsubscribe_page();
      $$unsubscribe_navigating();
      return `
${$navigating || isLoading ? `${validate_component(Backdrop, "Backdrop").$$render($$result, {}, {}, {})}` : `<div${add_attribute("this", container, 0)}><div${add_classes((show ? "open" : "").trim())}>${validate_component(Nav, "Nav").$$render(
        $$result,
        {
          data,
          drawerToggle: drawerToggleHandler,
          dropdownClick: handleDropdownClick,
          isDropdownOpen,
          show
        },
        {},
        {}
      )}</div>
    ${validate_component(SideDrawer, "SideDrawer").$$render(
        $$result,
        {
          data,
          show: drawerClasses,
          drawerToggle: drawerToggleHandler,
          dropdownClick: handleDropdownClick,
          isDropdownOpen
        },
        {},
        {}
      )}
    <main>${slots.default ? slots.default({}) : ``}
      ${validate_component(Footer, "Footer").$$render($$result, {}, {}, {})}</main></div>`}`;
    });
  }
});

// .svelte-kit/output/server/nodes/0.js
var __exports = {};
__export(__exports, {
  component: () => component,
  fonts: () => fonts,
  imports: () => imports,
  index: () => index,
  server: () => layout_server_exports,
  server_id: () => server_id,
  stylesheets: () => stylesheets
});
var index, component_cache, component, server_id, imports, stylesheets, fonts;
var init__ = __esm({
  ".svelte-kit/output/server/nodes/0.js"() {
    init_layout_server();
    index = 0;
    component = async () => component_cache ??= (await Promise.resolve().then(() => (init_layout_svelte(), layout_svelte_exports))).default;
    server_id = "src/routes/+layout.server.js";
    imports = ["_app/immutable/nodes/0.7372f8ab.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/IconBase.b7ed1dc6.js", "_app/immutable/chunks/stores.483a6c70.js", "_app/immutable/chunks/singletons.0e91b02d.js", "_app/immutable/chunks/paths.85fe2585.js"];
    stylesheets = ["_app/immutable/assets/0.c0095674.css", "_app/immutable/assets/IconBase.6bf551a2.css"];
    fonts = [];
  }
});

// .svelte-kit/output/server/chunks/ButtonLink.js
var css3, ButtonLink;
var init_ButtonLink = __esm({
  ".svelte-kit/output/server/chunks/ButtonLink.js"() {
    init_index3();
    css3 = {
      code: `a.svelte-5r4rcn{position:relative;display:inline-block;padding:1rem 3rem;background:var(--background-color);border:none;border-radius:30px;font-family:'PolySans Neutral', Arial, sans-serif;color:var(--link-color);font-size:1.1rem;line-height:1.1rem;text-align:center;text-decoration:none;transition:all 0.25s ease-out;z-index:1;margin:1.5rem 0;width:fit-content;align-self:self-start}a.svelte-5r4rcn:hover{cursor:pointer;box-shadow:#444444 0.2rem 0.3rem 0.3rem;color:#fff}a.svelte-5r4rcn::before{position:absolute;content:"";top:0;right:0;bottom:0;left:0;background:linear-gradient(90deg,rgba(173,235,239,1) 0%, rgba(41,57,122,1) 30%, rgba(218,47,92,1) 70%, rgba(255,193,38,1) 100%);z-index:-1;transition:opacity 0.5s linear;opacity:0;border-radius:30px}a.svelte-5r4rcn:hover::before{opacity:1}`,
      map: null
    };
    ButtonLink = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { path: path2 } = $$props;
      let { text: text2 } = $$props;
      let { background_color } = $$props;
      let { color = "" } = $$props;
      let { ariaText } = $$props;
      let { ariaLink } = $$props;
      if (background_color === "") {
        background_color = "#fff";
      }
      if (color === "") {
        color = "#29397a";
      }
      ariaText = ariaText.toLowerCase();
      ariaLink = ariaLink.replace(/\//g, " ").replace(/-/g, " ").trim();
      if ($$props.path === void 0 && $$bindings.path && path2 !== void 0)
        $$bindings.path(path2);
      if ($$props.text === void 0 && $$bindings.text && text2 !== void 0)
        $$bindings.text(text2);
      if ($$props.background_color === void 0 && $$bindings.background_color && background_color !== void 0)
        $$bindings.background_color(background_color);
      if ($$props.color === void 0 && $$bindings.color && color !== void 0)
        $$bindings.color(color);
      if ($$props.ariaText === void 0 && $$bindings.ariaText && ariaText !== void 0)
        $$bindings.ariaText(ariaText);
      if ($$props.ariaLink === void 0 && $$bindings.ariaLink && ariaLink !== void 0)
        $$bindings.ariaLink(ariaLink);
      $$result.css.add(css3);
      return `<a${add_attribute("href", path2, 0)} style="${"--link-color: " + escape(color, true) + "; --background-color: " + escape(background_color, true) + ";"}" aria-label="${"A call to action button inviting the user to " + escape(ariaText, true) + " by visiting the " + escape(ariaLink, true) + " page."}" class="svelte-5r4rcn">${escape(text2)}
  </a>`;
    });
  }
});

// .svelte-kit/output/server/entries/pages/_error.svelte.js
var error_svelte_exports = {};
__export(error_svelte_exports, {
  default: () => Error2
});
var css4, Error2;
var init_error_svelte = __esm({
  ".svelte-kit/output/server/entries/pages/_error.svelte.js"() {
    init_index3();
    init_ButtonLink();
    css4 = {
      code: "@-moz-keyframes svelte-vxogw6-rocket-movement{100%{-moz-transform:translate(1200px, -600px)}}@-webkit-keyframes svelte-vxogw6-rocket-movement{100%{-webkit-transform:translate(1200px, -600px)}}@keyframes svelte-vxogw6-rocket-movement{100%{transform:translate(1200px, -600px)}}@-moz-keyframes svelte-vxogw6-spin-earth{100%{-moz-transform:rotate(-360deg);transition:transform 20s}}@-webkit-keyframes svelte-vxogw6-spin-earth{100%{-webkit-transform:rotate(-360deg);transition:transform 20s}}@keyframes svelte-vxogw6-spin-earth{100%{-webkit-transform:rotate(-360deg);transform:rotate(-360deg);transition:transform 20s}}@-moz-keyframes svelte-vxogw6-move-astronaut{100%{-moz-transform:translate(-160px, -160px)}}@-webkit-keyframes svelte-vxogw6-move-astronaut{100%{-webkit-transform:translate(-160px, -160px)}}@keyframes svelte-vxogw6-move-astronaut{100%{-webkit-transform:translate(-160px, -160px);transform:translate(-160px, -160px)}}@-moz-keyframes svelte-vxogw6-rotate-astronaut{100%{-moz-transform:rotate(-720deg)}}@-webkit-keyframes svelte-vxogw6-rotate-astronaut{100%{-webkit-transform:rotate(-720deg)}}@keyframes svelte-vxogw6-rotate-astronaut{100%{-webkit-transform:rotate(-720deg);transform:rotate(-720deg)}}@-moz-keyframes svelte-vxogw6-glow-star{40%{-moz-opacity:0.3}90%,100%{-moz-opacity:1;-moz-transform:scale(1.2)}}@-webkit-keyframes svelte-vxogw6-glow-star{40%{-webkit-opacity:0.3}90%,100%{-webkit-opacity:1;-webkit-transform:scale(1.2)}}@keyframes svelte-vxogw6-glow-star{40%{-webkit-opacity:0.3;opacity:0.3}90%,100%{-webkit-opacity:1;opacity:1;-webkit-transform:scale(1.2);transform:scale(1.2);border-radius:999999px}}.error.svelte-vxogw6.svelte-vxogw6{height:100%;width:100%;z-index:2;display:flex;position:relative;flex-direction:column;justify-content:center;align-items:center;font-family:'PolySans Slim', Arial, Helvetica, sans-serif;color:#fff}.error__title.svelte-vxogw6.svelte-vxogw6{font-size:10em}.error__subtitle.svelte-vxogw6.svelte-vxogw6{font-size:2em}.space.svelte-vxogw6.svelte-vxogw6{display:flex;position:relative;height:calc(100vh - 21.9rem);min-height:500px;background:radial-gradient(circle at center bottom, #70376f, #3d2f62);align-items:center;justify-content:center}.content.svelte-vxogw6.svelte-vxogw6{height:100%;width:100%;text-align:center}.objects.svelte-vxogw6 img.svelte-vxogw6{z-index:90;pointer-events:none}.space__button.svelte-vxogw6.svelte-vxogw6{margin-top:2rem}.object_rocket.svelte-vxogw6.svelte-vxogw6{z-index:95;position:absolute;transform:translateX(-50px);top:75%;pointer-events:none;animation:svelte-vxogw6-rocket-movement 100s linear infinite both running}.object_earth.svelte-vxogw6.svelte-vxogw6{position:absolute;top:20%;left:15%;z-index:90}.object_moon.svelte-vxogw6.svelte-vxogw6{position:absolute;top:12%;left:25%}.object_astronaut.svelte-vxogw6.svelte-vxogw6{animation:svelte-vxogw6-rotate-astronaut 200s infinite linear both alternate}.box_astronaut.svelte-vxogw6.svelte-vxogw6{position:absolute;top:60%;right:20%;will-change:transform;animation:svelte-vxogw6-move-astronaut 50s infinite linear both alternate}.stars.svelte-vxogw6.svelte-vxogw6{height:100%;width:100%;background:url(/overlay_stars.svg);background-repeat:repeat;background-size:contain;background-position:left top}.glowing_stars.svelte-vxogw6 .star.svelte-vxogw6{position:absolute;border-radius:100%;background-color:#fff;width:3px;height:3px;opacity:0.3;will-change:opacity}.glowing_stars.svelte-vxogw6 .star.svelte-vxogw6:nth-child(1){top:80%;left:25%;animation:svelte-vxogw6-glow-star 2s infinite ease-in-out alternate 1s}.glowing_stars.svelte-vxogw6 .star.svelte-vxogw6:nth-child(2){top:20%;left:40%;animation:svelte-vxogw6-glow-star 2s infinite ease-in-out alternate 3s}.glowing_stars.svelte-vxogw6 .star.svelte-vxogw6:nth-child(3){top:25%;left:25%;animation:svelte-vxogw6-glow-star 2s infinite ease-in-out alternate 5s}.glowing_stars.svelte-vxogw6 .star.svelte-vxogw6:nth-child(4){top:75%;left:80%;animation:svelte-vxogw6-glow-star 2s infinite ease-in-out alternate 7s}.glowing_stars.svelte-vxogw6 .star.svelte-vxogw6:nth-child(5){top:90%;left:50%;animation:svelte-vxogw6-glow-star 2s infinite ease-in-out alternate 9s}@media only screen and (max-width: 768px){.box_astronaut.svelte-vxogw6.svelte-vxogw6{top:70%}.space.svelte-vxogw6.svelte-vxogw6{height:calc(100vh - 39.4rem)}.error.svelte-vxogw6.svelte-vxogw6{backdrop-filter:brightness(70%)}}",
      map: null
    };
    Error2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      console.log("%cShoutout to %cSaleh Riaz%c for their lovely SVGs & design: %chttps://www.salehriaz.com/", "font-size: 16px; color: white;", "font-size: 16px; color: red; font-weight: bold;", "font-size: 16px; color: white;", "font-size: 16px; color: green; text-decoration: underline;");
      $$result.css.add(css4);
      return `<div class="space svelte-vxogw6"><div class="stars svelte-vxogw6"><div class="content svelte-vxogw6"><div class="error svelte-vxogw6"><div class="error__title svelte-vxogw6">404</div>
        <div class="error__subtitle svelte-vxogw6">Hmmm...</div>
        <div class="error__description">It looks like one of the developers fell asleep</div>
        <span class="space__button svelte-vxogw6">${validate_component(ButtonLink, "ButtonLink").$$render(
        $$result,
        {
          text: "Report An Error-oid \u2604\uFE0F",
          path: "/contact",
          color: "#FFF",
          background_color: "#D93561",
          ariaText: "A button that links to the contact page",
          ariaLink: "/contact"
        },
        {},
        {}
      )}</span></div></div>
    <div class="objects svelte-vxogw6"><img class="object_rocket svelte-vxogw6" src="/rocket.svg" width="50px" alt="A red rocket.">
      <div class="earth-moon"><img class="object_earth svelte-vxogw6" src="/earth.svg" width="100px" alt="A blue Earth.">
        <img class="object_moon svelte-vxogw6" src="/moon.svg" width="80px" alt="A grey moon."></div>
      <div class="box_astronaut svelte-vxogw6"><img class="object_astronaut svelte-vxogw6" src="/astronaut.svg" width="70px" alt="A lost astronaut."></div></div>
    <div class="glowing_stars svelte-vxogw6"><div class="star svelte-vxogw6"></div>
      <div class="star svelte-vxogw6"></div>
      <div class="star svelte-vxogw6"></div>
      <div class="star svelte-vxogw6"></div>
      <div class="star svelte-vxogw6"></div></div></div>
</div>`;
    });
  }
});

// .svelte-kit/output/server/nodes/1.js
var __exports2 = {};
__export(__exports2, {
  component: () => component2,
  fonts: () => fonts2,
  imports: () => imports2,
  index: () => index2,
  stylesheets: () => stylesheets2
});
var index2, component_cache2, component2, imports2, stylesheets2, fonts2;
var init__2 = __esm({
  ".svelte-kit/output/server/nodes/1.js"() {
    index2 = 1;
    component2 = async () => component_cache2 ??= (await Promise.resolve().then(() => (init_error_svelte(), error_svelte_exports))).default;
    imports2 = ["_app/immutable/nodes/1.9eec193f.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/ButtonLink.2b86eb1a.js"];
    stylesheets2 = ["_app/immutable/assets/1.6b9275b8.css", "_app/immutable/assets/ButtonLink.e5fc3fc9.css"];
    fonts2 = [];
  }
});

// .svelte-kit/output/server/entries/pages/_page.svelte.js
var page_svelte_exports = {};
__export(page_svelte_exports, {
  default: () => Page
});
var Page;
var init_page_svelte = __esm({
  ".svelte-kit/output/server/entries/pages/_page.svelte.js"() {
    init_index3();
    Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return ``;
    });
  }
});

// .svelte-kit/output/server/nodes/2.js
var __exports3 = {};
__export(__exports3, {
  component: () => component3,
  fonts: () => fonts3,
  imports: () => imports3,
  index: () => index3,
  stylesheets: () => stylesheets3
});
var index3, component_cache3, component3, imports3, stylesheets3, fonts3;
var init__3 = __esm({
  ".svelte-kit/output/server/nodes/2.js"() {
    index3 = 2;
    component3 = async () => component_cache3 ??= (await Promise.resolve().then(() => (init_page_svelte(), page_svelte_exports))).default;
    imports3 = ["_app/immutable/nodes/2.6f5bda88.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/singletons.0e91b02d.js", "_app/immutable/chunks/paths.85fe2585.js"];
    stylesheets3 = [];
    fonts3 = [];
  }
});

// node_modules/@contentful/rich-text-html-renderer/dist/rich-text-html-renderer.es5.js
var require_rich_text_html_renderer_es5 = __commonJS({
  "node_modules/@contentful/rich-text-html-renderer/dist/rich-text-html-renderer.es5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p))
              t[p] = s2[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var matchHtmlRegExp = /["'&<>]/;
    var escapeHtml_1 = escapeHtml;
    function escapeHtml(string) {
      var str = "" + string;
      var match = matchHtmlRegExp.exec(str);
      if (!match) {
        return str;
      }
      var escape2;
      var html = "";
      var index13 = 0;
      var lastIndex = 0;
      for (index13 = match.index; index13 < str.length; index13++) {
        switch (str.charCodeAt(index13)) {
          case 34:
            escape2 = "&quot;";
            break;
          case 38:
            escape2 = "&amp;";
            break;
          case 39:
            escape2 = "&#39;";
            break;
          case 60:
            escape2 = "&lt;";
            break;
          case 62:
            escape2 = "&gt;";
            break;
          default:
            continue;
        }
        if (lastIndex !== index13) {
          html += str.substring(lastIndex, index13);
        }
        lastIndex = index13 + 1;
        html += escape2;
      }
      return lastIndex !== index13 ? html + str.substring(lastIndex, index13) : html;
    }
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function unwrapExports(x) {
      return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
    }
    function createCommonjsModule(fn, module3) {
      return module3 = { exports: {} }, fn(module3, module3.exports), module3.exports;
    }
    var blocks = createCommonjsModule(function(module3, exports2) {
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BLOCKS = void 0;
      var BLOCKS2;
      (function(BLOCKS3) {
        BLOCKS3["DOCUMENT"] = "document";
        BLOCKS3["PARAGRAPH"] = "paragraph";
        BLOCKS3["HEADING_1"] = "heading-1";
        BLOCKS3["HEADING_2"] = "heading-2";
        BLOCKS3["HEADING_3"] = "heading-3";
        BLOCKS3["HEADING_4"] = "heading-4";
        BLOCKS3["HEADING_5"] = "heading-5";
        BLOCKS3["HEADING_6"] = "heading-6";
        BLOCKS3["OL_LIST"] = "ordered-list";
        BLOCKS3["UL_LIST"] = "unordered-list";
        BLOCKS3["LIST_ITEM"] = "list-item";
        BLOCKS3["HR"] = "hr";
        BLOCKS3["QUOTE"] = "blockquote";
        BLOCKS3["EMBEDDED_ENTRY"] = "embedded-entry-block";
        BLOCKS3["EMBEDDED_ASSET"] = "embedded-asset-block";
        BLOCKS3["EMBEDDED_RESOURCE"] = "embedded-resource-block";
        BLOCKS3["TABLE"] = "table";
        BLOCKS3["TABLE_ROW"] = "table-row";
        BLOCKS3["TABLE_CELL"] = "table-cell";
        BLOCKS3["TABLE_HEADER_CELL"] = "table-header-cell";
      })(BLOCKS2 = exports2.BLOCKS || (exports2.BLOCKS = {}));
    });
    unwrapExports(blocks);
    var blocks_1 = blocks.BLOCKS;
    var inlines = createCommonjsModule(function(module3, exports2) {
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.INLINES = void 0;
      var INLINES;
      (function(INLINES2) {
        INLINES2["HYPERLINK"] = "hyperlink";
        INLINES2["ENTRY_HYPERLINK"] = "entry-hyperlink";
        INLINES2["ASSET_HYPERLINK"] = "asset-hyperlink";
        INLINES2["EMBEDDED_ENTRY"] = "embedded-entry-inline";
      })(INLINES = exports2.INLINES || (exports2.INLINES = {}));
    });
    unwrapExports(inlines);
    var inlines_1 = inlines.INLINES;
    var marks = createCommonjsModule(function(module3, exports2) {
      Object.defineProperty(exports2, "__esModule", { value: true });
      var MARKS;
      (function(MARKS2) {
        MARKS2["BOLD"] = "bold";
        MARKS2["ITALIC"] = "italic";
        MARKS2["UNDERLINE"] = "underline";
        MARKS2["CODE"] = "code";
        MARKS2["SUPERSCRIPT"] = "superscript";
        MARKS2["SUBSCRIPT"] = "subscript";
      })(MARKS || (MARKS = {}));
      exports2.default = MARKS;
    });
    unwrapExports(marks);
    var schemaConstraints = createCommonjsModule(function(module3, exports2) {
      var __spreadArray = commonjsGlobal && commonjsGlobal.__spreadArray || function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      var _a2;
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.V1_MARKS = exports2.V1_NODE_TYPES = exports2.TEXT_CONTAINERS = exports2.HEADINGS = exports2.CONTAINERS = exports2.VOID_BLOCKS = exports2.TABLE_BLOCKS = exports2.LIST_ITEM_BLOCKS = exports2.TOP_LEVEL_BLOCKS = void 0;
      var marks_1 = __importDefault(marks);
      exports2.TOP_LEVEL_BLOCKS = [
        blocks.BLOCKS.PARAGRAPH,
        blocks.BLOCKS.HEADING_1,
        blocks.BLOCKS.HEADING_2,
        blocks.BLOCKS.HEADING_3,
        blocks.BLOCKS.HEADING_4,
        blocks.BLOCKS.HEADING_5,
        blocks.BLOCKS.HEADING_6,
        blocks.BLOCKS.OL_LIST,
        blocks.BLOCKS.UL_LIST,
        blocks.BLOCKS.HR,
        blocks.BLOCKS.QUOTE,
        blocks.BLOCKS.EMBEDDED_ENTRY,
        blocks.BLOCKS.EMBEDDED_ASSET,
        blocks.BLOCKS.EMBEDDED_RESOURCE,
        blocks.BLOCKS.TABLE
      ];
      exports2.LIST_ITEM_BLOCKS = [
        blocks.BLOCKS.PARAGRAPH,
        blocks.BLOCKS.HEADING_1,
        blocks.BLOCKS.HEADING_2,
        blocks.BLOCKS.HEADING_3,
        blocks.BLOCKS.HEADING_4,
        blocks.BLOCKS.HEADING_5,
        blocks.BLOCKS.HEADING_6,
        blocks.BLOCKS.OL_LIST,
        blocks.BLOCKS.UL_LIST,
        blocks.BLOCKS.HR,
        blocks.BLOCKS.QUOTE,
        blocks.BLOCKS.EMBEDDED_ENTRY,
        blocks.BLOCKS.EMBEDDED_ASSET,
        blocks.BLOCKS.EMBEDDED_RESOURCE
      ];
      exports2.TABLE_BLOCKS = [
        blocks.BLOCKS.TABLE,
        blocks.BLOCKS.TABLE_ROW,
        blocks.BLOCKS.TABLE_CELL,
        blocks.BLOCKS.TABLE_HEADER_CELL
      ];
      exports2.VOID_BLOCKS = [
        blocks.BLOCKS.HR,
        blocks.BLOCKS.EMBEDDED_ENTRY,
        blocks.BLOCKS.EMBEDDED_ASSET,
        blocks.BLOCKS.EMBEDDED_RESOURCE
      ];
      exports2.CONTAINERS = (_a2 = {}, _a2[blocks.BLOCKS.OL_LIST] = [blocks.BLOCKS.LIST_ITEM], _a2[blocks.BLOCKS.UL_LIST] = [blocks.BLOCKS.LIST_ITEM], _a2[blocks.BLOCKS.LIST_ITEM] = exports2.LIST_ITEM_BLOCKS, _a2[blocks.BLOCKS.QUOTE] = [blocks.BLOCKS.PARAGRAPH], _a2[blocks.BLOCKS.TABLE] = [blocks.BLOCKS.TABLE_ROW], _a2[blocks.BLOCKS.TABLE_ROW] = [blocks.BLOCKS.TABLE_CELL, blocks.BLOCKS.TABLE_HEADER_CELL], _a2[blocks.BLOCKS.TABLE_CELL] = [blocks.BLOCKS.PARAGRAPH], _a2[blocks.BLOCKS.TABLE_HEADER_CELL] = [blocks.BLOCKS.PARAGRAPH], _a2);
      exports2.HEADINGS = [
        blocks.BLOCKS.HEADING_1,
        blocks.BLOCKS.HEADING_2,
        blocks.BLOCKS.HEADING_3,
        blocks.BLOCKS.HEADING_4,
        blocks.BLOCKS.HEADING_5,
        blocks.BLOCKS.HEADING_6
      ];
      exports2.TEXT_CONTAINERS = __spreadArray([blocks.BLOCKS.PARAGRAPH], exports2.HEADINGS, true);
      exports2.V1_NODE_TYPES = [
        blocks.BLOCKS.DOCUMENT,
        blocks.BLOCKS.PARAGRAPH,
        blocks.BLOCKS.HEADING_1,
        blocks.BLOCKS.HEADING_2,
        blocks.BLOCKS.HEADING_3,
        blocks.BLOCKS.HEADING_4,
        blocks.BLOCKS.HEADING_5,
        blocks.BLOCKS.HEADING_6,
        blocks.BLOCKS.OL_LIST,
        blocks.BLOCKS.UL_LIST,
        blocks.BLOCKS.LIST_ITEM,
        blocks.BLOCKS.HR,
        blocks.BLOCKS.QUOTE,
        blocks.BLOCKS.EMBEDDED_ENTRY,
        blocks.BLOCKS.EMBEDDED_ASSET,
        inlines.INLINES.HYPERLINK,
        inlines.INLINES.ENTRY_HYPERLINK,
        inlines.INLINES.ASSET_HYPERLINK,
        inlines.INLINES.EMBEDDED_ENTRY,
        "text"
      ];
      exports2.V1_MARKS = [marks_1.default.BOLD, marks_1.default.CODE, marks_1.default.ITALIC, marks_1.default.UNDERLINE];
    });
    unwrapExports(schemaConstraints);
    var schemaConstraints_1 = schemaConstraints.V1_MARKS;
    var schemaConstraints_2 = schemaConstraints.V1_NODE_TYPES;
    var schemaConstraints_3 = schemaConstraints.TEXT_CONTAINERS;
    var schemaConstraints_4 = schemaConstraints.HEADINGS;
    var schemaConstraints_5 = schemaConstraints.CONTAINERS;
    var schemaConstraints_6 = schemaConstraints.VOID_BLOCKS;
    var schemaConstraints_7 = schemaConstraints.TABLE_BLOCKS;
    var schemaConstraints_8 = schemaConstraints.LIST_ITEM_BLOCKS;
    var schemaConstraints_9 = schemaConstraints.TOP_LEVEL_BLOCKS;
    var types = createCommonjsModule(function(module3, exports2) {
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
    unwrapExports(types);
    var nodeTypes = createCommonjsModule(function(module3, exports2) {
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
    unwrapExports(nodeTypes);
    var emptyDocument = createCommonjsModule(function(module3, exports2) {
      Object.defineProperty(exports2, "__esModule", { value: true });
      var EMPTY_DOCUMENT = {
        nodeType: blocks.BLOCKS.DOCUMENT,
        data: {},
        content: [
          {
            nodeType: blocks.BLOCKS.PARAGRAPH,
            data: {},
            content: [
              {
                nodeType: "text",
                value: "",
                marks: [],
                data: {}
              }
            ]
          }
        ]
      };
      exports2.default = EMPTY_DOCUMENT;
    });
    unwrapExports(emptyDocument);
    var helpers = createCommonjsModule(function(module3, exports2) {
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isText = exports2.isBlock = exports2.isInline = void 0;
      function hasValue(obj, value) {
        for (var _i = 0, _a2 = Object.keys(obj); _i < _a2.length; _i++) {
          var key2 = _a2[_i];
          if (value === obj[key2]) {
            return true;
          }
        }
        return false;
      }
      function isInline(node) {
        return hasValue(inlines.INLINES, node.nodeType);
      }
      exports2.isInline = isInline;
      function isBlock(node) {
        return hasValue(blocks.BLOCKS, node.nodeType);
      }
      exports2.isBlock = isBlock;
      function isText(node) {
        return node.nodeType === "text";
      }
      exports2.isText = isText;
    });
    unwrapExports(helpers);
    var helpers_1 = helpers.isText;
    var helpers_2 = helpers.isBlock;
    var helpers_3 = helpers.isInline;
    var dist = createCommonjsModule(function(module3, exports2) {
      var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports3) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
            __createBinding(exports3, m, p);
      };
      var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.helpers = exports2.EMPTY_DOCUMENT = exports2.MARKS = exports2.INLINES = exports2.BLOCKS = void 0;
      Object.defineProperty(exports2, "BLOCKS", { enumerable: true, get: function() {
        return blocks.BLOCKS;
      } });
      Object.defineProperty(exports2, "INLINES", { enumerable: true, get: function() {
        return inlines.INLINES;
      } });
      Object.defineProperty(exports2, "MARKS", { enumerable: true, get: function() {
        return __importDefault(marks).default;
      } });
      __exportStar(schemaConstraints, exports2);
      __exportStar(types, exports2);
      __exportStar(nodeTypes, exports2);
      Object.defineProperty(exports2, "EMPTY_DOCUMENT", { enumerable: true, get: function() {
        return __importDefault(emptyDocument).default;
      } });
      var helpers$1 = __importStar(helpers);
      exports2.helpers = helpers$1;
    });
    unwrapExports(dist);
    var dist_1 = dist.helpers;
    var dist_2 = dist.EMPTY_DOCUMENT;
    var dist_3 = dist.MARKS;
    var dist_4 = dist.INLINES;
    var dist_5 = dist.BLOCKS;
    var _a;
    var _b;
    var attributeValue = function(value) {
      return '"'.concat(value.replace(/"/g, "&quot;"), '"');
    };
    var defaultNodeRenderers = (_a = {}, _a[dist_5.PARAGRAPH] = function(node, next) {
      return "<p>".concat(next(node.content), "</p>");
    }, _a[dist_5.HEADING_1] = function(node, next) {
      return "<h1>".concat(next(node.content), "</h1>");
    }, _a[dist_5.HEADING_2] = function(node, next) {
      return "<h2>".concat(next(node.content), "</h2>");
    }, _a[dist_5.HEADING_3] = function(node, next) {
      return "<h3>".concat(next(node.content), "</h3>");
    }, _a[dist_5.HEADING_4] = function(node, next) {
      return "<h4>".concat(next(node.content), "</h4>");
    }, _a[dist_5.HEADING_5] = function(node, next) {
      return "<h5>".concat(next(node.content), "</h5>");
    }, _a[dist_5.HEADING_6] = function(node, next) {
      return "<h6>".concat(next(node.content), "</h6>");
    }, _a[dist_5.EMBEDDED_ENTRY] = function(node, next) {
      return "<div>".concat(next(node.content), "</div>");
    }, _a[dist_5.EMBEDDED_RESOURCE] = function(node, next) {
      return "<div>".concat(next(node.content), "</div>");
    }, _a[dist_5.UL_LIST] = function(node, next) {
      return "<ul>".concat(next(node.content), "</ul>");
    }, _a[dist_5.OL_LIST] = function(node, next) {
      return "<ol>".concat(next(node.content), "</ol>");
    }, _a[dist_5.LIST_ITEM] = function(node, next) {
      return "<li>".concat(next(node.content), "</li>");
    }, _a[dist_5.QUOTE] = function(node, next) {
      return "<blockquote>".concat(next(node.content), "</blockquote>");
    }, _a[dist_5.HR] = function() {
      return "<hr/>";
    }, _a[dist_5.TABLE] = function(node, next) {
      return "<table>".concat(next(node.content), "</table>");
    }, _a[dist_5.TABLE_ROW] = function(node, next) {
      return "<tr>".concat(next(node.content), "</tr>");
    }, _a[dist_5.TABLE_HEADER_CELL] = function(node, next) {
      return "<th>".concat(next(node.content), "</th>");
    }, _a[dist_5.TABLE_CELL] = function(node, next) {
      return "<td>".concat(next(node.content), "</td>");
    }, _a[dist_4.ASSET_HYPERLINK] = function(node) {
      return defaultInline(dist_4.ASSET_HYPERLINK, node);
    }, _a[dist_4.ENTRY_HYPERLINK] = function(node) {
      return defaultInline(dist_4.ENTRY_HYPERLINK, node);
    }, _a[dist_4.EMBEDDED_ENTRY] = function(node) {
      return defaultInline(dist_4.EMBEDDED_ENTRY, node);
    }, _a[dist_4.HYPERLINK] = function(node, next) {
      var href = typeof node.data.uri === "string" ? node.data.uri : "";
      return "<a href=".concat(attributeValue(href), ">").concat(next(node.content), "</a>");
    }, _a);
    var defaultMarkRenderers = (_b = {}, _b[dist_3.BOLD] = function(text2) {
      return "<b>".concat(text2, "</b>");
    }, _b[dist_3.ITALIC] = function(text2) {
      return "<i>".concat(text2, "</i>");
    }, _b[dist_3.UNDERLINE] = function(text2) {
      return "<u>".concat(text2, "</u>");
    }, _b[dist_3.CODE] = function(text2) {
      return "<code>".concat(text2, "</code>");
    }, _b[dist_3.SUPERSCRIPT] = function(text2) {
      return "<sup>".concat(text2, "</sup>");
    }, _b[dist_3.SUBSCRIPT] = function(text2) {
      return "<sub>".concat(text2, "</sub>");
    }, _b);
    var defaultInline = function(type, node) {
      return "<span>type: ".concat(escapeHtml_1(type), " id: ").concat(escapeHtml_1(node.data.target.sys.id), "</span>");
    };
    function documentToHtmlString10(richTextDocument, options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      if (!richTextDocument || !richTextDocument.content) {
        return "";
      }
      return nodeListToHtmlString(richTextDocument.content, {
        renderNode: __assign(__assign({}, defaultNodeRenderers), options2.renderNode),
        renderMark: __assign(__assign({}, defaultMarkRenderers), options2.renderMark)
      });
    }
    function nodeListToHtmlString(nodes, _a2) {
      var renderNode = _a2.renderNode, renderMark = _a2.renderMark;
      return nodes.map(function(node) {
        return nodeToHtmlString(node, { renderNode, renderMark });
      }).join("");
    }
    function nodeToHtmlString(node, _a2) {
      var renderNode = _a2.renderNode, renderMark = _a2.renderMark;
      if (dist_1.isText(node)) {
        var nodeValue = escapeHtml_1(node.value);
        if (node.marks.length > 0) {
          return node.marks.reduce(function(value, mark) {
            if (!renderMark[mark.type]) {
              return value;
            }
            return renderMark[mark.type](value);
          }, nodeValue);
        }
        return nodeValue;
      } else {
        var nextNode = function(nodes) {
          return nodeListToHtmlString(nodes, { renderMark, renderNode });
        };
        if (!node.nodeType || !renderNode[node.nodeType]) {
          return "";
        }
        return renderNode[node.nodeType](node, nextNode);
      }
    }
    exports.documentToHtmlString = documentToHtmlString10;
  }
});

// .svelte-kit/output/server/entries/pages/about/_page.server.js
var page_server_exports = {};
__export(page_server_exports, {
  load: () => load3
});
async function load3() {
  const response = await contentfulFetch(query);
  if (!response.ok) {
    throw error2(404, {
      message: `Mistakes were made: Error ${response.status} - ${response.statusText} 
      ${response.url}`
    });
  }
  const { data } = await response.json();
  const { items: pageContentItems } = data.aboutPageCollection.items[0].pageContentCollection;
  const processedItems = pageContentItems.map((item) => {
    if (item) {
      const processingFunction = processingFunctions[item.__typename];
      return processingFunction ? { ...processingFunction(item), componentType: item.__typename } : item;
    } else {
      return {};
    }
  });
  const pageContent = processedItems.map((item) => {
    return {
      type: item.componentType,
      data: {
        heroBanners: item.componentType === "ComponentHeroBanner" ? [item] : [],
        dynamicDuplexes: item.componentType === "ComponentDynamicDuplex" ? [item] : [],
        duplexes: item.componentType === "ComponentDuplex" ? [item] : [],
        infoBlocks: item.componentType === "ComponentInfoBlock" && item.infoBlockConfig ? [item] : [],
        logoRacks: item.componentType === "ComponentLogoRack" ? [item] : [],
        bioCards: item.componentType === "BioCards" ? [item] : [],
        faqs: item.componentType === "ComponentFaq" ? [item] : []
      }
    };
  });
  const seoData = processSEOTags(data.aboutPageCollection.items[0].seoMetadata);
  return {
    pageContent,
    seoData
  };
}
var import_rich_text_html_renderer, query, processHeroBanner, processDuplex, processLogoRack, processInfoBlock, processSEOTags, processBioCards, processFaq, processingFunctions;
var init_page_server = __esm({
  ".svelte-kit/output/server/entries/pages/about/_page.server.js"() {
    init_chunks();
    import_rich_text_html_renderer = __toESM(require_rich_text_html_renderer_es5(), 1);
    init_contentful_fetch();
    query = `
{
  aboutPageCollection(limit: 1) {
    items {
      pageContentCollection{
        items {
          __typename
          ... on ComponentHeroBanner {
            page
            headline
            subline
            ctaText
            contentStyle
            bodyText {
              json
            }
            image {
              url
              description
            }
            targetPage {
              path
            }
          }
          ... on ComponentLogoRack {
            logoHeadline1
            logoHeadline2
            logoHeadline3
            logoHeadline4
            logoHeadline5
            logoText1 { json }
            logoText2 { json }
            logoText3 { json }
            logoText4 { json }
            logoText5 { json }
            logoImage1 { url, description }
            logoImage2 { url, description }
            logoImage3 { url, description }
            logoImage4 { url, description }
            logoImage5 { url, description }
            tagline
            header
            divider
            logoSize
            logosPerRow
            paddingOptions
            backgroundColor
          }
          ... on ComponentFaq {
            question0
            question1
            question2
            question3
            question4
            question5
            question6
            question7
            question8
            question9
            answer0 { json }
            answer1 { json }
            answer2 { json }
            answer3 { json }
            answer4 { json }
            answer5 { json }
            answer6 { json }
            answer7 { json }
            answer8 { json }
            answer9 { json }
          }
          ... on ComponentDuplex {
            tagline
            headline
            ctaText
            containerLayout
            containerSize
            bodyText {
              json
            }
            image{
              url
              description
            }
            targetPage{
              __typename
              ... on Page {
                slug
              }
              ... on HowItWorks {
                slug
              }
              ... on AboutPage {
                slug
              }
              ... on NewsPage {
                slug
              }
              ... on ContactPage {
                slug
              }
              ... on ServicesPage {
                slug
              }
            }
          }
          ... on ComponentInfoBlock {
            tagline
            headline
            subline
            ctaText
            infoBlockConfig
            copyBackground
            paddingOptions
            divider
            block1Body {
              json
            }
            block2Body {
              json
            }
            block1Image {
              url
              description
            }
            block2Image {
              url
              description
            }
            ctaLink {
              ... on Page {
                slug
              }
              ... on HowItWorks {
                slug
              }
              ... on AboutPage {
                slug
              }
              ... on NewsPage {
                slug
              }
              ... on ContactPage {
                slug
              }
              ... on ServicesPage {
                slug
              }
            }
          }
          ... on BioCards {
            headerImage {
              url
              description
            }
            headline
            headlineCopy
            subline
            bioCardsDataCollection(limit: 10) {
              items {
                name
                bio {
                  json
                }
                jobTitle
                cardStyle
                avatar {
                  url
                }
              }
            }
          }
        }
      }
      seoMetadata {
        __typename
        title
        metaDescription
        ogTitle
        ogDescription	
        ogImage {
          url
        }
      }
    }
  }
}
`;
    processHeroBanner = (item) => {
      var _a, _b;
      return {
        ...item,
        bodyText: (0, import_rich_text_html_renderer.documentToHtmlString)(((_a = item.bodyText) == null ? void 0 : _a.json) ?? ""),
        targetPage: ((_b = item.targetPage) == null ? void 0 : _b.path) ?? ""
      };
    };
    processDuplex = (item) => {
      var _a, _b, _c;
      let targetPageSlug = ((_a = item.targetPage) == null ? void 0 : _a.slug) ?? "";
      if (((_b = item.targetPage) == null ? void 0 : _b.__typename) === "ServicesPage") {
        targetPageSlug = "/services/" + targetPageSlug;
      }
      return {
        ...item,
        bodyText: (0, import_rich_text_html_renderer.documentToHtmlString)(((_c = item.bodyText) == null ? void 0 : _c.json) ?? ""),
        targetPage: targetPageSlug,
        layoutSize: item.containerSize ?? ""
      };
    };
    processLogoRack = (item) => {
      var _a, _b, _c, _d, _e, _f;
      return {
        ...item,
        logoText1: (0, import_rich_text_html_renderer.documentToHtmlString)(((_a = item.logoText1) == null ? void 0 : _a.json) ?? ""),
        logoText2: (0, import_rich_text_html_renderer.documentToHtmlString)(((_b = item.logoText2) == null ? void 0 : _b.json) ?? ""),
        logoText3: (0, import_rich_text_html_renderer.documentToHtmlString)(((_c = item.logoText3) == null ? void 0 : _c.json) ?? ""),
        logoText4: (0, import_rich_text_html_renderer.documentToHtmlString)(((_d = item.logoText4) == null ? void 0 : _d.json) ?? ""),
        logoText5: (0, import_rich_text_html_renderer.documentToHtmlString)(((_e = item.logoText5) == null ? void 0 : _e.json) ?? ""),
        logoText6: (0, import_rich_text_html_renderer.documentToHtmlString)(((_f = item.logoText6) == null ? void 0 : _f.json) ?? "")
      };
    };
    processInfoBlock = (item) => {
      var _a, _b;
      return {
        ...item,
        content1: (0, import_rich_text_html_renderer.documentToHtmlString)(((_a = item.block1Body) == null ? void 0 : _a.json) ?? ""),
        content2: (0, import_rich_text_html_renderer.documentToHtmlString)(((_b = item.block2Body) == null ? void 0 : _b.json) ?? "")
      };
    };
    processSEOTags = (item) => {
      return { ...item };
    };
    processBioCards = (item) => {
      var _a;
      return {
        ...item,
        bioCardsDataCollection: {
          ...item.bioCardsDataCollection,
          items: (_a = item.bioCardsDataCollection) == null ? void 0 : _a.items.map((bioCard) => {
            var _a2;
            return {
              ...bioCard,
              bio: (0, import_rich_text_html_renderer.documentToHtmlString)(((_a2 = bioCard.bio) == null ? void 0 : _a2.json) ?? "")
            };
          })
        }
      };
    };
    processFaq = (item) => {
      return { ...item };
    };
    processingFunctions = {
      "ComponentHeroBanner": processHeroBanner,
      "ComponentDuplex": processDuplex,
      "ComponentInfoBlock": processInfoBlock,
      "ComponentLogoRack": processLogoRack,
      "ComponentFaq": processFaq,
      "BioCards": processBioCards
    };
  }
});

// .svelte-kit/output/server/chunks/TextWithLineBreaks.js
var TextWithLineBreaks;
var init_TextWithLineBreaks = __esm({
  ".svelte-kit/output/server/chunks/TextWithLineBreaks.js"() {
    init_index3();
    TextWithLineBreaks = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { inputText = "" } = $$props;
      let segments = inputText.split("<br/>");
      if ($$props.inputText === void 0 && $$bindings.inputText && inputText !== void 0)
        $$bindings.inputText(inputText);
      return `${each(segments, (segment, i) => {
        return `<span${add_attribute("key", i, 0)} style="display: block; min-height: 24px;"><!-- HTML_TAG_START -->${segment}<!-- HTML_TAG_END -->
  </span>`;
      })}`;
    });
  }
});

// .svelte-kit/output/server/chunks/Hero.js
var css5, Hero;
var init_Hero = __esm({
  ".svelte-kit/output/server/chunks/Hero.js"() {
    init_index3();
    init_ButtonLink();
    init_TextWithLineBreaks();
    css5 = {
      code: ".headline.svelte-l9uojd.svelte-l9uojd{font-family:'PolySans Slim', Arial, Helvetica, sans-serif;font-size:72px;line-height:72px;font-weight:500}.subline.svelte-l9uojd.svelte-l9uojd{color:#adebef;font-family:'PolySans Bulky', Arial, Helvetica, sans-serif;font-size:1rem;line-height:1.5;margin-left:3px;margin-top:1rem;margin-bottom:1rem;letter-spacing:1.4px}.content.svelte-l9uojd.svelte-l9uojd{margin-bottom:1rem}.heroBanner.svelte-l9uojd a{align-self:auto}.heroBanner.svelte-l9uojd.svelte-l9uojd{height:clamp(40rem, 60vw, 60vh);position:relative;background-size:cover;color:white}.heroImage.svelte-l9uojd.svelte-l9uojd{width:100%;height:100%;object-fit:cover;position:absolute;z-index:-1}.content-left.svelte-l9uojd.svelte-l9uojd,.content-right.svelte-l9uojd.svelte-l9uojd{display:flex;flex-direction:column;width:100%;height:100%;backdrop-filter:brightness(80%)}.content-left.svelte-l9uojd.svelte-l9uojd{align-items:flex-end;justify-content:center;padding-right:calc(50% + 1rem);padding-left:2rem}.content-left.svelte-l9uojd .content.svelte-l9uojd{margin-bottom:3rem}.content-left.svelte-l9uojd .headline.svelte-l9uojd,.content-left.svelte-l9uojd .subline.svelte-l9uojd,.content-left.svelte-l9uojd .content.svelte-l9uojd{text-align:right}.content-left.svelte-l9uojd .headline.svelte-l9uojd{font-size:clamp(3rem, -0.875rem + 8.333vw, 4.5rem)}.content-right.svelte-l9uojd.svelte-l9uojd{align-items:flex-start;justify-content:center;padding-left:calc(50% + 1rem);padding-right:2rem}.content-right.svelte-l9uojd .headline.svelte-l9uojd{text-align:left}.content-right.svelte-l9uojd .headline.svelte-l9uojd{font-size:clamp(3rem, -0.875rem + 8.333vw, 4.5rem);max-width:50rem}.heroBanner .content p{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-size:1.2rem;line-height:1.5rem;font-weight:500;padding-left:5px;margin-top:0}.content-right .content p{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-size:1.2rem;line-height:1.5rem;font-weight:500;padding-left:5px;margin-top:0}@media(max-width: 768px){.content-left.svelte-l9uojd.svelte-l9uojd{justify-content:center;align-items:center;padding:2rem}.content-left.svelte-l9uojd p{text-align:center}.content-right.svelte-l9uojd.svelte-l9uojd{align-items:center;padding-left:1rem}.content-right.svelte-l9uojd .headline.svelte-l9uojd,.content-right.svelte-l9uojd .content.svelte-l9uojd,.content-left.svelte-l9uojd .headline.svelte-l9uojd,.content-left.svelte-l9uojd .content.svelte-l9uojd{text-align:center;padding:0 2rem}.content-left.svelte-l9uojd.svelte-l9uojd,.content-right.svelte-l9uojd.svelte-l9uojd{backdrop-filter:brightness(50%)}}@media(max-width: 500px){.content-left.svelte-l9uojd h1.svelte-l9uojd,.content-left.svelte-l9uojd .content.svelte-l9uojd{padding:0 1rem}}",
      map: null
    };
    Hero = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { data } = $$props;
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css5);
      return `${data ? `<section class="heroBanner svelte-l9uojd"><img class="heroImage svelte-l9uojd" src="${escape(data.image.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", data.image.description, 0)}>
    <div class="${escape(null_to_empty(data.contentStyle ? "content-left" : "content-right"), true) + " svelte-l9uojd"}">${data.tagline ? `<span class="subline svelte-l9uojd">${escape(data.tagline)}</span>` : ``}
      <h1 class="headline svelte-l9uojd">${validate_component(TextWithLineBreaks, "TextWithLineBreaks").$$render($$result, { inputText: data.headline }, {}, {})}</h1>
      <div class="content svelte-l9uojd"><!-- HTML_TAG_START -->${data.bodyText}<!-- HTML_TAG_END --></div>
      ${data.targetPage ? `${validate_component(ButtonLink, "ButtonLink").$$render(
        $$result,
        {
          path: data.targetPage,
          text: data.ctaText,
          background_color: "#fff",
          ariaText: data.ctaText,
          ariaLink: data.targetPage
        },
        {},
        {}
      )}` : ``}</div></section>` : ``}`;
    });
  }
});

// .svelte-kit/output/server/chunks/Row.js
function isObject(value) {
  const type = typeof value;
  return value != null && (type == "object" || type == "function");
}
function getColumnSizeClass(isXs, colWidth, colSize) {
  if (colSize === true || colSize === "") {
    return isXs ? "col" : `col-${colWidth}`;
  } else if (colSize === "auto") {
    return isXs ? "col-auto" : `col-${colWidth}-auto`;
  }
  return isXs ? `col-${colSize}` : `col-${colWidth}-${colSize}`;
}
function toClassName(value) {
  let result = "";
  if (typeof value === "string" || typeof value === "number") {
    result += value;
  } else if (typeof value === "object") {
    if (Array.isArray(value)) {
      result = value.map(toClassName).filter(Boolean).join(" ");
    } else {
      for (let key2 in value) {
        if (value[key2]) {
          result && (result += " ");
          result += key2;
        }
      }
    }
  }
  return result;
}
function classnames(...args) {
  return args.map(toClassName).filter(Boolean).join(" ");
}
function getCols(cols) {
  const colsValue = parseInt(cols);
  if (!isNaN(colsValue)) {
    if (colsValue > 0) {
      return [`row-cols-${colsValue}`];
    }
  } else if (typeof cols === "object") {
    return ["xs", "sm", "md", "lg", "xl"].map((colWidth) => {
      const isXs = colWidth === "xs";
      const colSizeInterfix = isXs ? "-" : `-${colWidth}-`;
      const value = cols[colWidth];
      if (typeof value === "number" && value > 0) {
        return `row-cols${colSizeInterfix}${value}`;
      }
      return null;
    }).filter((value) => !!value);
  }
  return [];
}
var Container, Row;
var init_Row = __esm({
  ".svelte-kit/output/server/chunks/Row.js"() {
    init_index3();
    Container = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let classes;
      let $$restProps = compute_rest_props($$props, ["class", "sm", "md", "lg", "xl", "xxl", "fluid"]);
      let { class: className = "" } = $$props;
      let { sm = void 0 } = $$props;
      let { md = void 0 } = $$props;
      let { lg = void 0 } = $$props;
      let { xl = void 0 } = $$props;
      let { xxl = void 0 } = $$props;
      let { fluid = false } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0)
        $$bindings.class(className);
      if ($$props.sm === void 0 && $$bindings.sm && sm !== void 0)
        $$bindings.sm(sm);
      if ($$props.md === void 0 && $$bindings.md && md !== void 0)
        $$bindings.md(md);
      if ($$props.lg === void 0 && $$bindings.lg && lg !== void 0)
        $$bindings.lg(lg);
      if ($$props.xl === void 0 && $$bindings.xl && xl !== void 0)
        $$bindings.xl(xl);
      if ($$props.xxl === void 0 && $$bindings.xxl && xxl !== void 0)
        $$bindings.xxl(xxl);
      if ($$props.fluid === void 0 && $$bindings.fluid && fluid !== void 0)
        $$bindings.fluid(fluid);
      classes = classnames(className, {
        "container-sm": sm,
        "container-md": md,
        "container-lg": lg,
        "container-xl": xl,
        "container-xxl": xxl,
        "container-fluid": fluid,
        container: !sm && !md && !lg && !xl && !xxl && !fluid
      });
      return `<div${spread([escape_object($$restProps), { class: escape_attribute_value(classes) }], {})}>${slots.default ? slots.default({}) : ``}</div>`;
    });
    Row = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let classes;
      let $$restProps = compute_rest_props($$props, ["class", "noGutters", "form", "cols", "inner"]);
      let { class: className = "" } = $$props;
      let { noGutters = false } = $$props;
      let { form = false } = $$props;
      let { cols = 0 } = $$props;
      let { inner = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0)
        $$bindings.class(className);
      if ($$props.noGutters === void 0 && $$bindings.noGutters && noGutters !== void 0)
        $$bindings.noGutters(noGutters);
      if ($$props.form === void 0 && $$bindings.form && form !== void 0)
        $$bindings.form(form);
      if ($$props.cols === void 0 && $$bindings.cols && cols !== void 0)
        $$bindings.cols(cols);
      if ($$props.inner === void 0 && $$bindings.inner && inner !== void 0)
        $$bindings.inner(inner);
      classes = classnames(className, noGutters ? "gx-0" : null, form ? "form-row" : "row", ...getCols(cols));
      return `<div${spread([escape_object($$restProps), { class: escape_attribute_value(classes) }], {})}${add_attribute("this", inner, 0)}>${slots.default ? slots.default({}) : ``}</div>`;
    });
  }
});

// .svelte-kit/output/server/chunks/Faq.js
var css$52, InfoBlockItem, css$42, InfoBlock, css$32, LogoRackItem, css$22, LogoRack, css$12, FaqItem, css6, Faq;
var init_Faq = __esm({
  ".svelte-kit/output/server/chunks/Faq.js"() {
    init_index3();
    init_ButtonLink();
    init_stores();
    init_Row();
    init_TextWithLineBreaks();
    css$52 = {
      code: `.copy-container.blue.svelte-h8evwa.svelte-h8evwa{background-color:#29397a}.copy-container.blue.svelte-h8evwa .content.svelte-h8evwa,.copy-container.blue.svelte-h8evwa .subline.svelte-h8evwa{color:#fff}.copy-container.svelte-h8evwa.svelte-h8evwa{padding:6rem 0}.left.svelte-h8evwa .content.svelte-h8evwa{text-align:left}.content.svelte-h8evwa.svelte-h8evwa{width:100%;margin:0 auto;text-align:center}.subline.svelte-h8evwa.svelte-h8evwa,.content1.svelte-h8evwa.svelte-h8evwa{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif}.subline.svelte-h8evwa.svelte-h8evwa{font-size:2.25rem;line-height:2.75rem;margin:auto auto 2rem}.tagline.svelte-h8evwa.svelte-h8evwa{font-family:'PolySans Median', Arial, Helvetica, sans-serif;color:#D93561;text-transform:uppercase}.left.svelte-h8evwa .content1.svelte-h8evwa p{font-size:1.125rem;line-height:1.5rem;margin:2rem auto}.copy-container.svelte-h8evwa:not(.left) .content1.svelte-h8evwa p{font-size:1.125rem;line-height:1.5rem;max-width:42.825rem;margin:2rem auto}.copy-container.svelte-h8evwa .content1.svelte-h8evwa p b{font-family:'PolySans Bulky', Arial, Helvetica, sans-serif;color:#FF80A8;letter-spacing:.25px
  }.copy-container.blue.svelte-h8evwa .content1.svelte-h8evwa p b{color:#adebef}.bg-color-primary.svelte-h8evwa .item .svelte-h8evwa{color:#fff;margin:1rem 0}.item h2{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-weight:400;margin-top:2rem;margin-bottom:0.5rem}.item.svelte-h8evwa h3.svelte-h8evwa{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-weight:400;text-align:center;margin:2rem auto;font-size:4.20rem}.item.svelte-h8evwa.svelte-h8evwa{margin:0 auto}.ol-container.svelte-h8evwa .headline.svelte-h8evwa{max-width:41rem;margin:1rem auto 4rem;font-size:2.25rem;text-align:center}.ol-container.svelte-h8evwa .list ol > li:nth-child(1){margin-bottom:0}.ol-container.svelte-h8evwa .list ol > li:nth-child(2){margin:0 auto}.ol-container.svelte-h8evwa .list ol > li:nth-child(3){margin-bottom:0}.letter-avatar.svelte-h8evwa.svelte-h8evwa{height:2.5rem;width:2.5rem;margin:0 auto;border-radius:100%;background-position:center;background-repeat:no-repeat;background-size:contain;display:inline-block}.letter-name.svelte-h8evwa h4{font-size:0.9rem;margin:0}.letter div.svelte-h8evwa.svelte-h8evwa{margin:1.5rem 0}.list-wrapper.svelte-h8evwa.svelte-h8evwa{height:100%;padding:6rem 4rem;background-position:left center;background-repeat:no-repeat;background-size:contain}.list-wrapper.svelte-h8evwa .list.svelte-h8evwa{max-width:50rem;margin:0 auto}.list-wrapper.svelte-h8evwa .list.svelte-h8evwa>ol:first-of-type{margin:0 auto}.list-wrapper.svelte-h8evwa ol,.list-wrapper.svelte-h8evwa ul{list-style:none;counter-reset:numList;color:#29397a;font-size:2rem}.list-wrapper.svelte-h8evwa ol > li,.list-wrapper.svelte-h8evwa ul > li{margin:0 auto 4rem;position:relative;max-width:37rem}.list-wrapper.svelte-h8evwa ol > li:before,.list-wrapper.svelte-h8evwa ul > li:before{counter-increment:numList;content:counter(numList);float:left;position:absolute;left:-40px;top:0;font:bold 1rem sans-serif;text-align:center;color:#fff;line-height:2rem;width:2rem;height:2rem;background:#29397a;-moz-border-radius:100%;border-radius:100%
  }.list-wrapper.svelte-h8evwa ol li h3,.list-wrapper.svelte-h8evwa ul li h3,.list-wrapper.svelte-h8evwa ul li h3{font-family:'PolySans Neutral', Arial, sans-serif;font-weight:500;font-size:2rem;margin:0
  }.list-wrapper.svelte-h8evwa ol li ol,.list-wrapper.svelte-h8evwa ul li ul{padding-left:0}.list-wrapper.svelte-h8evwa ol li ol li p,.list-wrapper.svelte-h8evwa ul li ul li p{font-family:'PolySans Slim', Arial, Helvetica, sans-serif;list-style-type:none;font-size:1rem;color:#29397a;padding:.5rem 5px 2rem;padding-top:.5rem;padding-bottom:2rem;margin:0}.list-wrapper.svelte-h8evwa ol li ol li:before,.list-wrapper.svelte-h8evwa ul li ul li:before{content:"";height:0;width:0}.divider-before.svelte-h8evwa.svelte-h8evwa::before{content:'';display:block;height:1px;background-color:#e8e8e8;width:80%;margin:0 auto 6rem}.divider-after.svelte-h8evwa.svelte-h8evwa::after{content:'';display:block;height:1px;background-color:#e8e8e8;width:80%;margin:6rem 0rem auto}@media(max-width: 650px){.divider.svelte-h8evwa.svelte-h8evwa::after{margin:1rem auto}}@media(max-width: 768px){.divider.svelte-h8evwa.svelte-h8evwa::after{margin:2rem auto}.logo-rack-wrapper.svelte-h8evwa.svelte-h8evwa{padding:4rem 0}.list-wrapper.svelte-h8evwa ol > li,.list-wrapper.svelte-h8evwa ul > li{margin:0 auto 2rem}.list-wrapper.svelte-h8evwa.svelte-h8evwa{padding:2rem;background-image:none !important
    }.copy-container.svelte-h8evwa.svelte-h8evwa{padding:4rem 2rem}.copy-container.svelte-h8evwa .content.svelte-h8evwa{text-align:left}.copy-container.svelte-h8evwa *{text-align:center}.subline.svelte-h8evwa.svelte-h8evwa{text-align:center;margin:0 auto 2rem
    }}`,
      map: null
    };
    InfoBlockItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      var _a, _b, _c, _d;
      let isLegalPage;
      let $page, $$unsubscribe_page;
      $$unsubscribe_page = subscribe(page, (value) => $page = value);
      let paddingClasses = "";
      let background_color;
      let color;
      let taglineColor;
      let copyBackground;
      let alignment = "";
      let dividerClasses = "";
      let { data } = $$props;
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css$52);
      isLegalPage = $page.url.pathname.startsWith("/legal");
      {
        {
          paddingClasses = "";
          alignment += (data == null ? void 0 : data.copyAlignment) ? "left" : "center";
          if ((_a = data == null ? void 0 : data.paddingOptions) == null ? void 0 : _a.includes("No Padding Top")) {
            paddingClasses += " pt-0";
          }
          if ((_b = data == null ? void 0 : data.paddingOptions) == null ? void 0 : _b.includes("No Padding Bottom")) {
            paddingClasses += " pb-0";
          }
          if ((_c = data == null ? void 0 : data.divider) == null ? void 0 : _c.includes("Top")) {
            dividerClasses += " divider-before";
          }
          if ((_d = data == null ? void 0 : data.divider) == null ? void 0 : _d.includes("Bottom")) {
            dividerClasses += " divider-after";
          }
          if (data == null ? void 0 : data.copyBackground) {
            background_color = "#fff";
            color = "#29397a";
            taglineColor = "#D93561";
            copyBackground = "white";
          } else {
            background_color = "#29397a";
            color = "#fff";
            taglineColor = "#adebef";
            copyBackground = "blue";
          }
        }
      }
      $$unsubscribe_page();
      return `${data.infoBlockConfig === "Copy" ? `<div class="${[
        "copy-container " + escape(paddingClasses, true) + " " + escape(dividerClasses, true) + " " + escape(alignment, true) + " svelte-h8evwa",
        !copyBackground ? "blue" : ""
      ].join(" ").trim()}" style="${"background-color: " + escape(background_color, true) + ";"}"><div class="${[
        "content svelte-h8evwa",
        (isLegalPage ? "legal" : "") + " " + (alignment ? "container" : "")
      ].join(" ").trim()}" style="${"color: " + escape(color, true)}"><div class="item svelte-h8evwa">${data.tagline ? `<p class="tagline svelte-h8evwa" style="${"color: " + escape(taglineColor, true)}">${escape(data.tagline)}</p>` : ``}
          ${data.headline ? `<h3 class="headline svelte-h8evwa">${escape(data.headline)}</h3>` : ``}
          ${data.subline ? `<h4 class="subline svelte-h8evwa">${escape(data.subline)}</h4>` : ``}
          ${data.content1 ? `<div class="content1 svelte-h8evwa"><!-- HTML_TAG_START -->${data.content1}<!-- HTML_TAG_END --></div>` : ``}
          ${data.ctaLink ? `${validate_component(ButtonLink, "ButtonLink").$$render(
        $$result,
        {
          path: data.ctaLink.slug,
          text: "Learn More",
          background_color: "#ADEBEF",
          ariaText: "learn more",
          ariaLink: data.ctaLink.slug
        },
        {},
        {}
      )}` : ``}</div></div></div>` : `${data.infoBlockConfig === "Ordered List" ? `<div class="ol-container svelte-h8evwa"><div class="list-wrapper svelte-h8evwa" style="${"background-image: url(" + escape(data.block1Image.url, true) + ")"}">${data.headline ? `<h3 class="headline svelte-h8evwa">${escape(data.headline)}</h3>` : ``}
        <div class="list svelte-h8evwa"><!-- HTML_TAG_START -->${data.content1}<!-- HTML_TAG_END --></div></div></div>` : `${data.infoBlockConfig === "Letter" ? `<div class="letter_container svelte-h8evwa"><!-- HTML_TAG_START -->${data.content1}<!-- HTML_TAG_END -->
      <div class="svelte-h8evwa"><span class="letter-avatar svelte-h8evwa" style="${"background-image: url(" + escape(data.block1Image.url, true) + ")"}"${add_attribute("alt", data.block1Image.description, 0)}></span>
        <span class="letter-avatar svelte-h8evwa" style="${"background-image: url(" + escape(data.block2Image.url, true) + ")"}"${add_attribute("alt", data.block2Image.description, 0)}></span></div>
      <div class="letter-name svelte-h8evwa"><!-- HTML_TAG_START -->${data.content2}<!-- HTML_TAG_END --></div></div>` : ``}`}`}`;
    });
    css$42 = {
      code: ".infoBlock-wrapper.svelte-14ddgjz{display:grid;grid-template-columns:repeat(1, 1fr);grid-template-rows:repeat(1, 1fr);height:100%;margin:0 auto}",
      map: null
    };
    InfoBlock = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { data } = $$props;
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css$42);
      return `<div class="infoBlock-wrapper svelte-14ddgjz">${validate_component(InfoBlockItem, "InfoBlockItem").$$render($$result, { data }, {}, {})}
</div>`;
    });
    css$32 = {
      code: ".small-logo.svelte-8xhu7z.svelte-8xhu7z{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:center;grid-gap:3rem;color:#29397a}.small-logo.svelte-8xhu7z h2.svelte-8xhu7z,.small-logo.svelte-8xhu7z h4.svelte-8xhu7z{width:100%}h2.svelte-8xhu7z.svelte-8xhu7z{display:flex;font-family:'PolySans Slim', Arial, Helvetica, sans-serif;font-size:3rem;font-weight:500;letter-spacing:0.875px;align-items:center;justify-content:center;margin:0 auto}h4.svelte-8xhu7z.svelte-8xhu7z{display:flex;font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-size:2rem;font-weight:500;letter-spacing:0.875px;align-items:center;justify-content:center;margin:0 auto}p.svelte-8xhu7z.svelte-8xhu7z{font-family:'PolySans Slim', Arial, Helvetica, sans-serif;padding:.5rem}.logo-body.svelte-8xhu7z.svelte-8xhu7z{padding:0;max-width:800px}.logo-body.svelte-8xhu7z.svelte-8xhu7z{margin:0;color:#29397a}.logo-body.svelte-8xhu7z p b{font-family:'PolySans Median', Arial, Helvetica, sans-serif}.logo-wrapper.svelte-8xhu7z.svelte-8xhu7z{display:flex;flex-direction:column;justify-content:center;align-items:center;align-self:flex-start;max-width:12rem}.logo-wrapper.svelte-8xhu7z img.svelte-8xhu7z{height:5.5rem;margin:1.5rem auto}.logo-wrapper.svelte-8xhu7z h2.svelte-8xhu7z{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-size:3.75rem;font-weight:500}.logo-rack-wrapper .small-logo.blocks-1 .logo-wrapper{max-width:100%;width:100%}.logo-rack-wrapper .small-logo.blocks-3 .logo-wrapper{max-width:calc(33% - 3rem);width:100%\n  }.logo-rack-wrapper .small-logo.blocks-2 .logo-wrapper{max-width:30rem}@media(max-width: 768px){.logo-rack-wrapper .small-logo.blocks-3 .logo-wrapper{max-width:100%}}",
      map: null
    };
    LogoRackItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
      let { data } = $$props;
      let { color } = $$props;
      let logos = [
        {
          header: data.header,
          headline: data.logoHeadline1,
          body: data.logoText1,
          image: (_a = data.logoImage1) == null ? void 0 : _a.url,
          alt: (_b = data.logoImage1) == null ? void 0 : _b.description
        },
        {
          headline: data.logoHeadline2,
          body: data.logoText2,
          image: (_c = data.logoImage2) == null ? void 0 : _c.url,
          alt: (_d = data.logoImage2) == null ? void 0 : _d.description
        },
        {
          headline: data.logoHeadline3,
          body: data.logoText3,
          image: (_e = data.logoImage3) == null ? void 0 : _e.url,
          alt: (_f = data.logoImage3) == null ? void 0 : _f.description
        },
        {
          headline: data.logoHeadline4,
          body: data.logoText4,
          image: (_g = data.logoImage4) == null ? void 0 : _g.url,
          alt: (_h = data.logoImage4) == null ? void 0 : _h.description
        },
        {
          headline: data.logoHeadline5,
          body: data.logoText5,
          image: (_i = data.logoImage5) == null ? void 0 : _i.url,
          alt: (_j = data.logoImage5) == null ? void 0 : _j.description
        },
        {
          headline: data.logoHeadline6,
          body: data.logoText6,
          image: (_k = data.logoImage6) == null ? void 0 : _k.url,
          alt: (_l = data.logoImage6) == null ? void 0 : _l.description
        }
      ].filter((logo) => logo.headline || logo.body || logo.image);
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      if ($$props.color === void 0 && $$bindings.color && color !== void 0)
        $$bindings.color(color);
      $$result.css.add(css$32);
      return `<div class="${"text-center small-logo blocks-" + escape(data.logosPerRow, true) + " svelte-8xhu7z"}">${logos[0].header ? `<h2 style="${"color: " + escape(color, true)}" class="svelte-8xhu7z">${validate_component(TextWithLineBreaks, "TextWithLineBreaks").$$render($$result, { inputText: logos[0].header }, {}, {})}</h2>` : ``}
  ${each(logos, (logo, index13) => {
        return `<div class="logo-wrapper svelte-8xhu7z"><img src="${escape(logo.image, true) + "?fm=webp&q=80"}"${add_attribute("alt", logo.alt, 0)} class="svelte-8xhu7z">
      ${logo.headline ? `<h4 style="${"color: " + escape(color, true)}" class="headline svelte-8xhu7z">${validate_component(TextWithLineBreaks, "TextWithLineBreaks").$$render($$result, { inputText: logo.headline }, {}, {})}</h4>` : ``}
      ${logo.body ? `<p style="${"color: " + escape(color, true)}" class="logo-body svelte-8xhu7z"><!-- HTML_TAG_START -->${logo.body}<!-- HTML_TAG_END --></p>` : ``}
    </div>`;
      })}
</div>`;
    });
    css$22 = {
      code: ".logo-rack-wrapper.svelte-172r10c{padding:6rem 0}.tagline.svelte-172r10c{font-family:'PolySans Median', Arial, Helvetica, sans-serif;color:#D93561;text-transform:uppercase;text-align:center}.divider-before.svelte-172r10c::before{content:'';display:block;height:1px;background-color:#e8e8e8;width:80%;margin:0 auto 6rem}.divider-after.svelte-172r10c::after{content:'';display:block;height:1px;background-color:#e8e8e8;width:80%;margin:6rem 0rem auto}@media(max-width: 650px){.divider.svelte-172r10c::after{margin:1rem auto}}@media(max-width: 768px){.divider.svelte-172r10c::after{margin:2rem auto}.logo-rack-wrapper.svelte-172r10c{padding:4rem 0}}",
      map: null
    };
    LogoRack = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      var _a, _b, _c, _d;
      let { data } = $$props;
      let { background_color } = $$props;
      let { color } = $$props;
      let taglineColor;
      let paddingClasses = "";
      let dividerClasses = "";
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      if ($$props.background_color === void 0 && $$bindings.background_color && background_color !== void 0)
        $$bindings.background_color(background_color);
      if ($$props.color === void 0 && $$bindings.color && color !== void 0)
        $$bindings.color(color);
      $$result.css.add(css$22);
      {
        {
          paddingClasses = "";
          if ((_a = data == null ? void 0 : data.paddingOptions) == null ? void 0 : _a.includes("No Padding Top")) {
            paddingClasses += " pt-0";
          }
          if ((_b = data == null ? void 0 : data.paddingOptions) == null ? void 0 : _b.includes("No Padding Bottom")) {
            paddingClasses += " pb-0";
          }
          if ((_c = data == null ? void 0 : data.divider) == null ? void 0 : _c.includes("Top")) {
            dividerClasses += " divider-before";
          }
          if ((_d = data == null ? void 0 : data.divider) == null ? void 0 : _d.includes("Bottom")) {
            dividerClasses += " divider-after";
          }
          if (data == null ? void 0 : data.backgroundColor) {
            background_color = "#29397a";
            color = "#fff";
            taglineColor = "#adebef";
          } else {
            background_color = "#fff";
            color = "#29397a;";
            taglineColor = "#D93561";
          }
        }
      }
      return `<div class="${"logo-rack-wrapper" + escape(paddingClasses, true) + " " + escape(dividerClasses, true) + " svelte-172r10c"}" style="${"background-color: " + escape(background_color, true) + ";"}">${validate_component(Container, "Container").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Row, "Row").$$render(
            $$result,
            {
              class: "justify-content-center align-items-center"
            },
            {},
            {
              default: () => {
                return `${data.tagline ? `<p class="tagline svelte-172r10c" style="${"color: " + escape(taglineColor, true)}">${escape(data.tagline)}</p>` : ``}
      ${data.headline ? `<h3 class="headline">${escape(data.headline)}</h3>` : ``}
      ${data.logoSize ? `${validate_component(LogoRackItem, "LogoRackItem").$$render($$result, { data, color }, {}, {})}` : ``}`;
              }
            }
          )}`;
        }
      })}
</div>`;
    });
    css$12 = {
      code: "button.svelte-1phxj0l.svelte-1phxj0l{border:none;border-bottom:1px solid rgba(255, 255, 255, 0.2);border-radius:0;background:none;display:flex;justify-content:space-between;color:inherit;font-size:1rem;font-family:'PolySans Neutral', arial, sans-serif;cursor:pointer;width:100%;margin:0 auto;padding:1.75em 0 0.5rem}.answer.svelte-1phxj0l.svelte-1phxj0l{padding:1rem;background:#fff;color:#000;font-size:.95rem}.answer.svelte-1phxj0l ul{background-color:#e6e9de;color:#000;margin:0;padding:1rem 2rem;border-bottom:2px solid #fff;border-radius:0.2rem}svg.svelte-1phxj0l.svelte-1phxj0l{transition:transform 0.2s ease-in}[aria-expanded='true'].svelte-1phxj0l svg.svelte-1phxj0l{transform:rotate(0.25turn)}",
      map: null
    };
    FaqItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
      let { entry } = $$props;
      let faqs = [
        {
          question: entry.question0,
          answer: (_a = entry.answer0) == null ? void 0 : _a.json.content[0].content[0].value
        },
        {
          question: entry.question1,
          answer: (_b = entry.answer1) == null ? void 0 : _b.json.content[0].content[0].value
        },
        {
          question: entry.question2,
          answer: (_c = entry.answer2) == null ? void 0 : _c.json.content[0].content[0].value
        },
        {
          question: entry.question3,
          answer: (_d = entry.answer3) == null ? void 0 : _d.json.content[0].content[0].value
        },
        {
          question: entry.question4,
          answer: (_e = entry.answer4) == null ? void 0 : _e.json.content[0].content[0].value
        },
        {
          question: entry.question5,
          answer: (_f = entry.answer5) == null ? void 0 : _f.json.content[0].content[0].value
        },
        {
          question: entry.question6,
          answer: (_g = entry.answer6) == null ? void 0 : _g.json.content[0].content[0].value
        },
        {
          question: entry.question7,
          answer: (_h = entry.answer7) == null ? void 0 : _h.json.content[0].content[0].value
        },
        {
          question: entry.question8,
          answer: (_i = entry.answer8) == null ? void 0 : _i.json.content[0].content[0].value
        },
        {
          question: entry.question9,
          answer: (_j = entry.answer9) == null ? void 0 : _j.json.content[0].content[0].value
        }
      ].filter((faq) => faq.question || faq.answer).map((faq) => ({ ...faq, isOpen: false }));
      if ($$props.entry === void 0 && $$bindings.entry && entry !== void 0)
        $$bindings.entry(entry);
      $$result.css.add(css$12);
      return `${each(faqs, (faq, index13) => {
        return `<button${add_attribute("aria-expanded", faq.isOpen, 0)} class="svelte-1phxj0l">${faq.question ? `${escape(faq.question)}` : ``}
    <svg style="tran" width="20" height="20" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" stroke="currentColor" class="svelte-1phxj0l"><path d="M9 5l7 7-7 7"></path></svg></button>
  ${faq.isOpen ? `<div class="answer svelte-1phxj0l">${faq.answer ? `<!-- HTML_TAG_START -->${faq.answer}<!-- HTML_TAG_END -->` : ``}
    </div>` : ``}`;
      })}`;
    });
    css6 = {
      code: ".faq-wrapper.svelte-1wi849r.svelte-1wi849r{padding:6rem 0 3rem 0;background-color:#29397a;color:#fff;text-align:left}.faq-wrapper.svelte-1wi849r div.svelte-1wi849r{width:50%;margin:0 auto}h2.svelte-1wi849r.svelte-1wi849r{font-weight:400;text-align:left}@media(max-width: 1300px){.faq-wrapper.svelte-1wi849r div.svelte-1wi849r{width:65%}}@media(max-width: 1024px){.faq-wrapper.svelte-1wi849r div.svelte-1wi849r{width:80%}}@media(max-width: 768px){h2.svelte-1wi849r.svelte-1wi849r{text-align:center}}",
      map: null
    };
    Faq = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { data } = $$props;
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css6);
      return `<div class="faq-wrapper svelte-1wi849r"><div class="svelte-1wi849r"><h2 class="svelte-1wi849r">Frequently Asked Questions</h2>

    ${each(data, (entry) => {
        return `${validate_component(FaqItem, "FaqItem").$$render($$result, { entry }, {}, {})}`;
      })}</div>
  
</div>`;
    });
  }
});

// .svelte-kit/output/server/chunks/index2.js
function readable(value, start) {
  return {
    subscribe: writable(value, start).subscribe
  };
}
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update, subscribe: subscribe2 };
}
var subscriber_queue;
var init_index2 = __esm({
  ".svelte-kit/output/server/chunks/index2.js"() {
    init_index3();
    subscriber_queue = [];
  }
});

// .svelte-kit/output/server/chunks/DynamicDuplex.js
var css$23, Accordion, css$13, AccordionItem, css7, DynamicDuplex;
var init_DynamicDuplex = __esm({
  ".svelte-kit/output/server/chunks/DynamicDuplex.js"() {
    init_index3();
    init_index2();
    init_ButtonLink();
    css$23 = {
      code: "ul.svelte-da9j5z{list-style:none;padding-left:0}",
      map: null
    };
    Accordion = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { duration = 0.2 } = $$props;
      let { easing = "ease" } = $$props;
      let { key: key2 = null } = $$props;
      const dispatch = createEventDispatcher();
      const store = writable({ key: key2, duration, easing });
      const unsubscribe = store.subscribe((s2) => {
        key2 = s2.key;
        dispatch("change", { key: key2 });
      });
      setContext("svelte-collapsible-accordion", store);
      onDestroy(unsubscribe);
      if ($$props.duration === void 0 && $$bindings.duration && duration !== void 0)
        $$bindings.duration(duration);
      if ($$props.easing === void 0 && $$bindings.easing && easing !== void 0)
        $$bindings.easing(easing);
      if ($$props.key === void 0 && $$bindings.key && key2 !== void 0)
        $$bindings.key(key2);
      $$result.css.add(css$23);
      {
        store.update((s2) => Object.assign(s2, { key: key2 }));
      }
      return `<ul class="accordion svelte-da9j5z">${slots.default ? slots.default({}) : ``}
</ul>`;
    });
    css$13 = {
      code: ".accordion-item-header.svelte-c582kf{user-select:none;cursor:pointer}button.svelte-c582kf{background:transparent;border:none !important}",
      map: null
    };
    AccordionItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let params;
      let $store, $$unsubscribe_store;
      let { key: key2 } = $$props;
      const store = getContext("svelte-collapsible-accordion");
      $$unsubscribe_store = subscribe(store, (value) => $store = value);
      if ($$props.key === void 0 && $$bindings.key && key2 !== void 0)
        $$bindings.key(key2);
      $$result.css.add(css$13);
      params = {
        open: $store.key === key2,
        duration: $store.duration,
        easing: $store.easing
      };
      $$unsubscribe_store();
      return `<li class="accordion-item"${add_attribute("aria-expanded", params.open, 0)}><button type="button" class="accordion-item-header svelte-c582kf">${slots.header ? slots.header({}) : ``}</button>

    <div class="accordion-item-body">${slots.body ? slots.body({}) : ``}</div>

    ${slots.default ? slots.default({}) : ``}

</li>`;
    });
    css7 = {
      code: `.container .accordion{width:100%;max-width:100%
}.cta.svelte-13q8uc4.svelte-13q8uc4,.cta.svelte-13q8uc4 a{text-align:center}.cta.svelte-13q8uc4.svelte-13q8uc4{margin-top:2rem}.accordion-container.svelte-13q8uc4.svelte-13q8uc4{display:grid;grid-template-columns:1fr 1fr;position:relative}.accordion-container.svelte-13q8uc4 img.svelte-13q8uc4{position:absolute;right:0;top:0;padding:2rem;height:100%;max-width:calc(50% - 2rem);object-fit:contain;aspect-ratio:3/2;opacity:0;transition:opacity 0.5s ease-in-out}.container.svelte-13q8uc4 .accordion-container.svelte-13q8uc4 .active{opacity:1;transition:opacity 0.5s ease-in-out}.left-container.svelte-13q8uc4.svelte-13q8uc4{display:grid;max-width:800px;margin:0 auto}.right-container.svelte-13q8uc4.svelte-13q8uc4{padding:0}.accordion-container.svelte-13q8uc4 h3{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-weight:500;font-size:2.3rem;margin-bottom:0.25rem;align-self:self-end}.accordion-container.svelte-13q8uc4 p{font-family:'PolySans Slim', Arial, Helvetica, sans-serif;font-size:1.125rem;line-height:1.5rem;letter-spacing:0.25px;margin:0.5rem;text-align:left;align-self:center}.accordion-container.svelte-13q8uc4 .accordion-item-header{width:100%;margin-bottom:-1.375rem}.accordion-container.svelte-13q8uc4 .accordion-item button *{text-align:left}.accordion-container.svelte-13q8uc4 .header{color:#29397A}.accordion-container.svelte-13q8uc4 .header *{font-size:4.5rem}.dynamic-duplex.svelte-13q8uc4.svelte-13q8uc4{padding:3rem 0}.dynamic-duplex.svelte-13q8uc4 .right-container.svelte-13q8uc4{max-height:440px;margin:0 auto}.accordion-item img{display:none}.accordion-item .header h2.svelte-13q8uc4.svelte-13q8uc4:before{float:left;position:absolute;left:-40px;top:55px;font:bold 1rem sans-serif;text-align:center;color:#fff;line-height:2rem;width:2rem;height:2rem;background:#29397a;-moz-border-radius:100%;border-radius:100%}.accordion-item:first-child .header h2:before{content:"1"}.accordion-item:nth-child(2) .header h2:before{content:"2"}.accordion-item:nth-child(3) .header h2:before{content:"3"}
  .container .accordion, 
  .container .accordion-item,
  .container .accordion-item-header{border:none;box-shadow:none;position:relative}.accordion{width:100%;max-width:450px;margin:0 auto}.accordion-item{border-bottom:1px solid rgb(100, 120, 140)}@media only screen and (max-width: 768px){.accordion-container.svelte-13q8uc4 img.svelte-13q8uc4{grid-template-columns:1fr;grid-template-rows:1fr}.left-container.svelte-13q8uc4.svelte-13q8uc4{width:100%;padding:3rem}.left-container.svelte-13q8uc4.svelte-13q8uc4{margin:4rem auto;text-align:center}.left-container.svelte-13q8uc4 h3{font-size:2rem;margin:1rem auto}.left-container.svelte-13q8uc4 p{max-width:97.5%;margin:0 auto}.left-container.svelte-13q8uc4 a{margin:1rem auto 0 auto}}@media only screen and (max-width: 991px){.accordion-container.svelte-13q8uc4.svelte-13q8uc4{grid-template-columns:1fr}.dynamic-duplex.svelte-13q8uc4 .right-container.svelte-13q8uc4{display:none}.accordion-item img{display:block}.accordion-container.svelte-13q8uc4 .accordion-item img.svelte-13q8uc4{display:block;position:relative !important;opacity:1;width:100%;max-width:100%;margin:0 auto;padding:1rem}.accordion-item-body{height:auto !important}}@media only screen and (max-width: 1250px){.left-container.svelte-13q8uc4.svelte-13q8uc4{padding:2rem 1rem}}@media only screen and (max-width: 1680px){.left-container.svelte-13q8uc4.svelte-13q8uc4{max-width:640px;margin:0 auto;padding:2rem}}`,
      map: null
    };
    DynamicDuplex = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { data } = $$props;
      let key2 = 0;
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css7);
      let $$settled;
      let $$rendered;
      do {
        $$settled = true;
        $$rendered = `<div class="dynamic-duplex container svelte-13q8uc4"><div class="accordion-container svelte-13q8uc4"><div class="left-container svelte-13q8uc4">${validate_component(Accordion, "Accordion").$$render(
          $$result,
          { key: key2 },
          {
            key: ($$value) => {
              key2 = $$value;
              $$settled = false;
            }
          },
          {
            default: () => {
              return `${validate_component(AccordionItem, "AccordionItem").$$render($$result, { key: 0 }, {}, {
                body: () => {
                  return `<div slot="body" class="body"><p><!-- HTML_TAG_START -->${data.bodyText}<!-- HTML_TAG_END --></p></div>`;
                },
                header: () => {
                  return `<div slot="header" class="header"><h2 class="svelte-13q8uc4">${escape(data.headline)}</h2></div>`;
                },
                default: () => {
                  return `<img src="${escape(data.image.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", data.image.description, 0)} class="${"content " + escape(key2 === 0 ? "active" : "", true) + " svelte-13q8uc4"}">`;
                }
              })}
        ${validate_component(AccordionItem, "AccordionItem").$$render($$result, { key: 1 }, {}, {
                body: () => {
                  return `<div slot="body" class="body"><p><!-- HTML_TAG_START -->${data.bodyText2}<!-- HTML_TAG_END --></p></div>`;
                },
                header: () => {
                  return `<div slot="header" class="header"><h2 class="svelte-13q8uc4">${escape(data.headline2)}</h2></div>`;
                },
                default: () => {
                  return `<img src="${escape(data.image2.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", data.image2.description, 0)} class="${escape(null_to_empty(key2 === 1 ? "active" : ""), true) + " svelte-13q8uc4"}">`;
                }
              })}
        ${validate_component(AccordionItem, "AccordionItem").$$render($$result, { key: 2 }, {}, {
                body: () => {
                  return `<div slot="body" class="body"><p><!-- HTML_TAG_START -->${data.bodyText3}<!-- HTML_TAG_END --></p></div>`;
                },
                header: () => {
                  return `<div slot="header" class="header"><h2 class="svelte-13q8uc4">${escape(data.headline3)}</h2></div>`;
                },
                default: () => {
                  return `<img src="${escape(data.image3.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", data.image3.description, 0)} class="${escape(null_to_empty(key2 === 2 ? "active" : ""), true) + " svelte-13q8uc4"}">`;
                }
              })}`;
            }
          }
        )}</div>
    <div class="right-container svelte-13q8uc4"><img src="${escape(data.image.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", data.image.description, 0)} class="${escape(null_to_empty(key2 === 0 ? "active" : ""), true) + " svelte-13q8uc4"}">
      <img src="${escape(data.image2.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", data.image2.description, 0)} class="${escape(null_to_empty(key2 === 1 ? "active" : ""), true) + " svelte-13q8uc4"}">
      <img src="${escape(data.image3.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", data.image3.description, 0)} class="${escape(null_to_empty(key2 === 2 ? "active" : ""), true) + " svelte-13q8uc4"}"></div></div>
  <div class="cta svelte-13q8uc4">${validate_component(ButtonLink, "ButtonLink").$$render(
          $$result,
          {
            text: data.ctaText || "Learn More",
            path: data.targetPage ? `${data.targetPage}` : "/contact",
            color: "#FFF",
            background_color: "#D93561",
            ariaText: data.ctaText,
            ariaLink: data.targetPage
          },
          {},
          {}
        )}</div>
</div>`;
      } while (!$$settled);
      return $$rendered;
    });
  }
});

// .svelte-kit/output/server/chunks/Duplex.js
var css$14, NewsletterInput, css8, Duplex;
var init_Duplex = __esm({
  ".svelte-kit/output/server/chunks/Duplex.js"() {
    init_index3();
    init_ButtonLink();
    init_TextWithLineBreaks();
    css$14 = {
      code: ".form-control.svelte-10mahkx{max-width:800px;border:2px solid #6e6f70}button.svelte-10mahkx{position:relative;display:inline-block;padding:1rem 3rem;background:#29397a;border:none;border-radius:10px;color:#fff;line-height:1.1rem;font-size:1.1rem;text-align:center;text-decoration:none;transition:all 0.25s ease-out;z-index:1;margin:.75rem 0 0;width:fit-content}",
      map: null
    };
    NewsletterInput = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let email = "";
      $$result.css.add(css$14);
      return `<form><label for="exampleInputEmail1">Email address:</label>
  <input type="email" class="form-control svelte-10mahkx" required${add_attribute("value", email, 0)}>
  <button type="submit" class="svelte-10mahkx">Subscribe</button>
</form>`;
    });
    css8 = {
      code: "img.svelte-desdkp.svelte-desdkp.svelte-desdkp{height:100%;object-fit:contain;object-position:center}.tagline.svelte-desdkp.svelte-desdkp.svelte-desdkp{font-family:'PolySans Median', Arial, Helvetica, sans-serif;color:#D93561;text-transform:uppercase}.duplex-container.svelte-desdkp.svelte-desdkp.svelte-desdkp{display:grid;grid-template-columns:1fr 2fr}.right-container.svelte-desdkp.svelte-desdkp.svelte-desdkp{display:grid;margin:0 auto 0 6rem;padding:4rem 0}.large-image.svelte-desdkp .right-container.svelte-desdkp.svelte-desdkp{padding:4rem 4rem 4rem 1rem}.news-duplex-wrapper-wide .duplex-container.svelte-desdkp.svelte-desdkp.svelte-desdkp{grid-template-columns:.6fr 1fr}.left-container.svelte-desdkp.svelte-desdkp.svelte-desdkp{padding:0}.row-reverse.svelte-desdkp.svelte-desdkp.svelte-desdkp,.row-reverse.svelte-desdkp .right-container.svelte-desdkp.svelte-desdkp,.row-reverse.svelte-desdkp .left-container img.svelte-desdkp.svelte-desdkp{transform:scaleX(-1)}.row-reverse.svelte-desdkp .right-container.svelte-desdkp.svelte-desdkp{grid-template-rows:1fr auto;padding:4rem;align-self:center}.row-reverse.small-image.svelte-desdkp .right-container.svelte-desdkp.svelte-desdkp{grid-template-rows:1fr auto}.row-reverse.small-image.svelte-desdkp .right-container.svelte-desdkp .svelte-desdkp{text-align:right;align-self:self-end;margin-left:auto}.duplex-container.row-reverse.small-image.svelte-desdkp p,.duplex-container.row-reverse.small-image.svelte-desdkp h3,.duplex-container.row-reverse.small-image.svelte-desdkp a{text-align:right;margin-left:auto}.row-reverse.small-image.svelte-desdkp .right-container.svelte-desdkp a{margin-left:auto}.duplex-container.svelte-desdkp h3.big{font-size:4.5rem;color:#29397a;margin-bottom:2rem}.duplex-container.svelte-desdkp h3{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-weight:500;font-size:4rem;margin-bottom:0.25rem;align-self:self-end}.duplex-container.svelte-desdkp h3.small{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-weight:500;font-size:3rem;margin-bottom:0.25rem;align-self:self-end}.duplex-container.small-image.svelte-desdkp h3{max-width:30rem}.duplex-container.svelte-desdkp p{font-family:'PolySans Slim', Arial, Helvetica, sans-serif;font-size:1.125rem;line-height:1.5rem;letter-spacing:0.25px;margin:1rem 0;text-align:left;align-self:center}.duplex-container.svelte-desdkp ol:first-of-type > li > p:not(ol li ol li p){font-family:'PolySans Slim', Arial, Helvetica, sans-serif;font-size:4.5rem}.duplex-container.svelte-desdkp p b{font-family:'PolySans Median', Arial, Helvetica, sans-serif}.duplex-container.svelte-desdkp ul li p{margin:.5rem 0}.duplex-container.svelte-desdkp h5 b{color:#D93561}.small-image.svelte-desdkp.svelte-desdkp.svelte-desdkp{max-width:1052px;padding:4rem 0;margin:auto}.small-image.svelte-desdkp .right-container.svelte-desdkp.svelte-desdkp{padding:0 2rem;max-width:800px;margin:0 0 0 2rem}.normal-image.svelte-desdkp.svelte-desdkp.svelte-desdkp{padding:3rem 0}.normal-image.svelte-desdkp .left-container.svelte-desdkp.svelte-desdkp{margin:0 auto}.large-image.svelte-desdkp.svelte-desdkp.svelte-desdkp{min-height:455px}.large-image.svelte-desdkp img.svelte-desdkp.svelte-desdkp{height:100%;width:100%;object-fit:cover}.duplex-container.svelte-desdkp ol{list-style:none;counter-reset:numList}.duplex-container.svelte-desdkp ol li{position:relative\n  }.duplex-container.svelte-desdkp ol:first-child > li::before{counter-increment:numList;content:counter(numList);float:left;position:absolute;left:-50px;top:.5rem;font:bold 1rem sans-serif;text-align:center;color:#fff;line-height:2rem;width:2rem;height:2rem;background:#29397a;-moz-border-radius:100%;border-radius:100%\n  }@media only screen and (max-width: 768px){img.svelte-desdkp.svelte-desdkp.svelte-desdkp{margin:0 auto}.large-image.svelte-desdkp img.svelte-desdkp.svelte-desdkp{max-height:300px}.duplex-container.large-image.svelte-desdkp.svelte-desdkp.svelte-desdkp,.duplex-container.normal-image.svelte-desdkp.svelte-desdkp.svelte-desdkp,.duplex-container.small-image.svelte-desdkp.svelte-desdkp.svelte-desdkp{grid-template-columns:1fr;grid-template-rows:1fr}.duplex-container.svelte-desdkp p{text-align:center;align-self:normal}.row-reverse.small-image.svelte-desdkp .right-container.svelte-desdkp .svelte-desdkp{text-align:center;align-self:auto;margin:1rem auto}.duplex-container.row-reverse.small-image.svelte-desdkp p,.duplex-container.row-reverse.small-image.svelte-desdkp h3,.duplex-container.row-reverse.small-image.svelte-desdkp a{text-align:center;align-items:normal}.row-reverse.svelte-desdkp .right-container.svelte-desdkp.svelte-desdkp,.right-container.svelte-desdkp.svelte-desdkp.svelte-desdkp{width:100%;padding:3rem}.right-container.svelte-desdkp.svelte-desdkp.svelte-desdkp{margin:4rem auto;text-align:center}.right-container.svelte-desdkp h3{font-size:3.5rem;margin:1rem auto}.right-container.svelte-desdkp p{max-width:97.5%;margin:.5rem auto}.right-container.svelte-desdkp a{margin:2rem auto}}@media only screen and (max-width: 991px){.small-container.svelte-desdkp .container,.normal-container.svelte-desdkp .container{max-width:100%}.small-image.svelte-desdkp .right-container.svelte-desdkp.svelte-desdkp{padding:0 2rem;max-width:800px;margin:0}}@media only screen and (max-width: 1250px){.duplex-container.large-image.svelte-desdkp.svelte-desdkp.svelte-desdkp{grid-template-columns:.75fr 1fr}.duplex-container.svelte-desdkp .right-container.svelte-desdkp.svelte-desdkp{padding:2rem 1rem}}@media only screen and (max-width: 1680px){.right-container.svelte-desdkp.svelte-desdkp.svelte-desdkp{margin:0 auto;padding:2rem}}",
      map: null
    };
    Duplex = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      var _a, _b, _c, _d, _e, _f;
      let { data } = $$props;
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css8);
      return `${data.containerSize === "Small" ? `<div class="small-container container svelte-desdkp"><div class="${"duplex-container small-image " + escape(data.containerLayout ? "" : "row-reverse", true) + " svelte-desdkp"}"><div class="left-container svelte-desdkp"><img src="${escape((_a = data.image) == null ? void 0 : _a.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", (_b = data.image) == null ? void 0 : _b.description, 0)} class="svelte-desdkp"></div>
        <div class="right-container svelte-desdkp">${data.tagline ? `<p class="tagline svelte-desdkp">${escape(data.tagline)}</p>` : ``}
          ${data.headline ? `<h3 class="small svelte-desdkp">${validate_component(TextWithLineBreaks, "TextWithLineBreaks").$$render($$result, { inputText: data.headline }, {}, {})}</h3>` : ``}
          ${data.bodyText ? `<p class="svelte-desdkp"><!-- HTML_TAG_START -->${data.bodyText}<!-- HTML_TAG_END --></p>` : ``}
          ${data.newsletterInput ? `${validate_component(NewsletterInput, "NewsletterInput").$$render($$result, {}, {}, {})}` : ``}
          ${data.ctaText != null ? `${validate_component(ButtonLink, "ButtonLink").$$render(
        $$result,
        {
          text: data.ctaText || "Learn More",
          path: data.targetPage ? `${data.targetPage}` : "/contact",
          color: "#FFF",
          background_color: "#D93561",
          ariaText: data.ctaText,
          ariaLink: data.targetPage
        },
        {},
        {}
      )}` : ``}</div></div></div>` : `${data.containerSize === "Normal" ? `<div class="normal-container container svelte-desdkp"><div class="${"duplex-container normal-image " + escape(data.containerLayout ? "" : "row-reverse", true) + " svelte-desdkp"}"><div class="left-container svelte-desdkp"><img src="${escape((_c = data.image) == null ? void 0 : _c.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", (_d = data.image) == null ? void 0 : _d.description, 0)} class="svelte-desdkp"></div>
        <div class="right-container svelte-desdkp">${data.tagline ? `<p class="tagline svelte-desdkp">${escape(data.tagline)}</p>` : ``}
          ${data.headline ? `<h3 class="svelte-desdkp">${validate_component(TextWithLineBreaks, "TextWithLineBreaks").$$render($$result, { inputText: data.headline }, {}, {})}</h3>` : ``}
          ${data.bodyText ? `<p class="svelte-desdkp"><!-- HTML_TAG_START -->${data.bodyText}<!-- HTML_TAG_END --></p>` : ``}
          ${data.newsletterInput ? `${validate_component(NewsletterInput, "NewsletterInput").$$render($$result, {}, {}, {})}` : ``}
          ${data.ctaText != null ? `${validate_component(ButtonLink, "ButtonLink").$$render(
        $$result,
        {
          text: data.ctaText || "Learn More",
          path: data.targetPage ? `${data.targetPage}` : "/contact",
          color: "#FFF",
          background_color: "#D93561",
          ariaText: data.ctaText,
          ariaLink: data.targetPage
        },
        {},
        {}
      )}` : ``}</div></div></div>` : `${data.containerSize == "Large" ? `<div class="${"duplex-container large-image " + escape(data.containerLayout ? "" : "row-reverse", true) + " svelte-desdkp"}"><div class="left-container svelte-desdkp"><img src="${escape((_e = data.image) == null ? void 0 : _e.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", (_f = data.image) == null ? void 0 : _f.description, 0)} class="svelte-desdkp"></div>
    <div class="right-container svelte-desdkp">${data.tagline ? `<p class="tagline svelte-desdkp">${escape(data.tagline)}</p>` : ``}
      ${data.headline && !data.bodyText ? `<h3 class="big svelte-desdkp">${validate_component(TextWithLineBreaks, "TextWithLineBreaks").$$render($$result, { inputText: data.headline }, {}, {})}</h3>` : `${data.headline ? `<h3 class="svelte-desdkp">${validate_component(TextWithLineBreaks, "TextWithLineBreaks").$$render($$result, { inputText: data.headline }, {}, {})}</h3>` : ``}`}
      ${data.bodyText ? `<p class="svelte-desdkp"><!-- HTML_TAG_START -->${data.bodyText}<!-- HTML_TAG_END --></p>` : ``}
      ${data.newsletterInput ? `${validate_component(NewsletterInput, "NewsletterInput").$$render($$result, {}, {}, {})}` : ``}
      ${data.ctaText != null ? `${validate_component(ButtonLink, "ButtonLink").$$render(
        $$result,
        {
          text: data.ctaText || "Learn More",
          path: data.targetPage ? `${data.targetPage}` : "/contact",
          color: "#FFF",
          background_color: "#D93561",
          ariaText: data.ctaText,
          ariaLink: data.targetPage
        },
        {},
        {}
      )}` : ``}</div></div>` : ``}`}`}`;
    });
  }
});

// .svelte-kit/output/server/chunks/SEOMetaData.js
var SEOMetaData;
var init_SEOMetaData = __esm({
  ".svelte-kit/output/server/chunks/SEOMetaData.js"() {
    init_index3();
    SEOMetaData = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return ``;
    });
  }
});

// .svelte-kit/output/server/entries/pages/about/_page.svelte.js
var page_svelte_exports2 = {};
__export(page_svelte_exports2, {
  default: () => Page2
});
function getComponentData(item) {
  switch (item.type) {
    case "ComponentHeroBanner":
      return { data: item.data.heroBanners[0] };
    case "BioCards":
      return { data: item.data.bioCards[0] };
    case "ComponentDuplex":
      return { data: item.data.duplexes[0] };
    case "ComponentDynamicDuplex":
      return { data: item.data.dynamicDuplexes[0] };
    case "ComponentCarousel":
      return { data: item.data.quotes[0] };
    case "ComponentInfoBlock":
      return { data: item.data.infoBlocks[0] };
    case "ComponentLogoRack":
      return { data: item.data.logoRacks[0] };
    case "ComponentFaq":
      return { data: item.data.faqs };
    default:
      return {};
  }
}
var css$15, BioCardsItem, css9, BioCards, Page2;
var init_page_svelte2 = __esm({
  ".svelte-kit/output/server/entries/pages/about/_page.svelte.js"() {
    init_index3();
    init_Hero();
    init_Faq();
    init_DynamicDuplex();
    init_Duplex();
    init_SEOMetaData();
    css$15 = {
      code: "figure.svelte-1kkd1wl.svelte-1kkd1wl{padding:2rem 1.5rem;border-radius:0.6rem;text-align:center;border-radius:0.6rem;max-width:22rem;height:100%}figure.svelte-1kkd1wl .avatar.svelte-1kkd1wl{height:5.825rem;width:5.825rem;margin:0 auto;border-radius:100%;background-position:center;background-repeat:no-repeat;background-size:contain;position:relative;z-index:2}figure.svelte-1kkd1wl .circle.svelte-1kkd1wl{height:2.5rem;width:5rem;border-radius:10rem 10rem 0 0;z-index:1}figcaption.svelte-1kkd1wl.svelte-1kkd1wl{margin-top:-2.5rem}h4.svelte-1kkd1wl.svelte-1kkd1wl{margin:1rem auto}h6.svelte-1kkd1wl.svelte-1kkd1wl{font-family:'PolySans Median';font-size:.95rem;color:#adebef;margin:-0.8rem auto 0 auto}figure.employee.svelte-1kkd1wl.svelte-1kkd1wl{max-width:20rem}.employee.svelte-1kkd1wl h6.svelte-1kkd1wl{color:#D93561}.bio-text.svelte-1kkd1wl.svelte-1kkd1wl{margin:0.5rem auto 0 auto}.bio-text.svelte-1kkd1wl p{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-size:0.95rem;line-height:1.125rem}.bio-text.svelte-1kkd1wl b{font-family:'PolySans Median', Arial, Helvetica, sans-serif;color:#FF80A8}.bio-text.svelte-1kkd1wl p:first-of-type{min-height:105px}.bio-cards-section.bioCard-0 .bio-cards-wrapper.leadership{margin-bottom:4rem}.bio-cards-wrapper.leadership figure:nth-child(1){margin-left:auto;margin-right:0}.bio-cards-wrapper.leadership figure:nth-child(2){margin-left:0;margin-right:auto}@media screen and (max-width: 720px){figure.svelte-1kkd1wl.svelte-1kkd1wl{max-width:27rem}}@media screen and (max-width: 768px){.bio-cards-wrapper.leadership figure.leadership{margin:auto}.bio-text.svelte-1kkd1wl p{font-size:0.9rem;margin:0 auto}}",
      map: null
    };
    BioCardsItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      var _a;
      let { entry } = $$props;
      let role;
      let background_color;
      let color;
      if ($$props.entry === void 0 && $$bindings.entry && entry !== void 0)
        $$bindings.entry(entry);
      $$result.css.add(css$15);
      {
        {
          role = entry.cardStyle == true ? "leadership" : "employee";
          background_color = role === "leadership" ? "#29397a" : "#fff";
          color = role === "leadership" ? "#fff" : "#000";
        }
      }
      return `<figure class="${escape(null_to_empty(role), true) + " svelte-1kkd1wl"}" style="${"background-color: " + escape(background_color, true) + "; color: " + escape(color, true)}"><div class="avatar-wrapper"><div class="avatar svelte-1kkd1wl" style="${"background-image: url(" + escape((_a = entry.avatar) == null ? void 0 : _a.url, true) + "?fm=webp&q=80)"}"></div>
    <div class="circle svelte-1kkd1wl"></div></div>
  <figcaption class="svelte-1kkd1wl"><h4 class="svelte-1kkd1wl"><strong>${escape(entry.name || "Paulonaut")}</strong></h4>
    ${entry.jobTitle ? `<h6 class="svelte-1kkd1wl">${escape(entry.jobTitle)}</h6>` : ``}
    <p class="bio-text svelte-1kkd1wl"><!-- HTML_TAG_START -->${entry.bio}<!-- HTML_TAG_END --></p></figcaption>
</figure>`;
    });
    css9 = {
      code: `.divider.svelte-1m5gwyp.svelte-1m5gwyp::before{content:'';display:block;height:1px;background-color:#e8e8e8;width:80%;margin:6rem auto}.bio-cards-section.svelte-1m5gwyp .header-image.svelte-1m5gwyp{height:6rem;width:6rem;margin:1.5rem auto;background-position:center;background-repeat:no-repeat;background-size:contain}.header-container.svelte-1m5gwyp.svelte-1m5gwyp{text-align:center;max-width:30rem;margin:6rem auto 4rem}.header-container.svelte-1m5gwyp h2.svelte-1m5gwyp{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-size:4.5rem;font-weight:400}.header-container.svelte-1m5gwyp .subline.svelte-1m5gwyp{font-size:2.25rem}.leadership.svelte-1m5gwyp.svelte-1m5gwyp{width:clamp(80%,100%,800px);margin:0 auto}.leadership.svelte-1m5gwyp.svelte-1m5gwyp,.employees.svelte-1m5gwyp.svelte-1m5gwyp{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:center;grid-gap:2rem}.employees.svelte-1m5gwyp.svelte-1m5gwyp{grid-gap:0;margin:3rem auto 6rem;max-width:1300px}.leadership.svelte-1m5gwyp .leadership{display:flex;height:auto;flex-direction:column;align-items:center;justify-content:flex-start}.headlineCopy.svelte-1m5gwyp.svelte-1m5gwyp{font-size:1.125rem}.bio-cards-section[style*="--columns: 3;"] .bio-cards-wrapper.leadership figure:nth-child(1){margin:auto}.bio-cards-section[style*="--columns: 3;"] .bio-cards-wrapper.leadership figure:nth-child(2){margin:auto}.bio-cards-section.more-than-three .bio-cards-wrapper.leadership figure:nth-child(1),.bio-cards-section.more-than-three .bio-cards-wrapper.leadership figure:nth-child(2){margin:auto}@media(max-width: 768px){.divider.svelte-1m5gwyp.svelte-1m5gwyp::after,.divider.svelte-1m5gwyp.svelte-1m5gwyp::before{margin:2rem auto}}@media(max-width: 650px){.divider.svelte-1m5gwyp.svelte-1m5gwyp::after{margin:1rem auto}}`,
      map: null
    };
    BioCards = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      var _a, _b;
      let { data } = $$props;
      let { index: index13 = 0 } = $$props;
      let leadership = [];
      let employees = [];
      let numOfBlocks = 0;
      let headerImage = (_a = data.headerImage) == null ? void 0 : _a.url;
      let headerImageAlt = (_b = data.headerImage) == null ? void 0 : _b.description;
      let headline = data.headline || "";
      let headlineCopy = data.headlineCopy || "";
      let subline = data.subline || "";
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      if ($$props.index === void 0 && $$bindings.index && index13 !== void 0)
        $$bindings.index(index13);
      $$result.css.add(css9);
      {
        {
          let bio_cards_data = data.bioCardsDataCollection.items;
          leadership = bio_cards_data.filter((person) => person.cardStyle == true);
          employees = bio_cards_data.filter((person) => person.cardStyle == false);
          numOfBlocks = leadership.length;
        }
      }
      return `<div class="${"bio-cards-section bioCard-" + escape(index13, true) + " divider " + escape(numOfBlocks >= 3 ? "more-than-three" : "", true) + " svelte-1m5gwyp"}" style="${"--columns: " + escape(numOfBlocks, true)}">${slots.default ? slots.default({}) : ``}

  <div class="header-container svelte-1m5gwyp">${headerImage ? `<img class="header-image svelte-1m5gwyp" src="${escape(headerImage, true) + "?fm=webp&q=80"}"${add_attribute("alt", headerImageAlt, 0)}>` : ``}
    ${headline ? `<h2 class="headline svelte-1m5gwyp">${escape(headline)}</h2>` : ``}
    ${headlineCopy ? `<p class="headlineCopy svelte-1m5gwyp">${escape(headlineCopy)}</p>` : ``}
    ${subline ? `<h5 class="subline svelte-1m5gwyp">${escape(subline)}</h5>` : ``}</div>

  ${leadership ? `<div class="leadership svelte-1m5gwyp">${each(leadership, (person, index22) => {
        return `${validate_component(BioCardsItem, "BioCardsItem").$$render($$result, { entry: person, index: index22 }, {}, {})}`;
      })}</div>` : ``}

  <div class="employees svelte-1m5gwyp">${each(employees, (person, index22) => {
        return `${validate_component(BioCardsItem, "BioCardsItem").$$render($$result, { entry: person, index: index22 }, {}, {})}`;
      })}</div>

</div>`;
    });
    Page2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { data } = $$props;
      const components = {
        ComponentHeroBanner: Hero,
        BioCards,
        ComponentDuplex: Duplex,
        ComponentDynamicDuplex: DynamicDuplex,
        ComponentInfoBlock: InfoBlock,
        ComponentLogoRack: LogoRack,
        ComponentFaq: Faq
      };
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      return `${each(data.pageContent, (item, index13) => {
        return `${validate_component(components[item.type] || missing_component, "svelte:component").$$render($$result, Object.assign({}, getComponentData(item)), {}, {})}`;
      })}

${validate_component(SEOMetaData, "SEOMetaData").$$render($$result, { data }, {}, {})}`;
    });
  }
});

// .svelte-kit/output/server/nodes/3.js
var __exports4 = {};
__export(__exports4, {
  component: () => component4,
  fonts: () => fonts4,
  imports: () => imports4,
  index: () => index4,
  server: () => page_server_exports,
  server_id: () => server_id2,
  stylesheets: () => stylesheets4
});
var index4, component_cache4, component4, server_id2, imports4, stylesheets4, fonts4;
var init__4 = __esm({
  ".svelte-kit/output/server/nodes/3.js"() {
    init_page_server();
    index4 = 3;
    component4 = async () => component_cache4 ??= (await Promise.resolve().then(() => (init_page_svelte2(), page_svelte_exports2))).default;
    server_id2 = "src/routes/about/+page.server.js";
    imports4 = ["_app/immutable/nodes/3.2e16091d.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/Hero.1fb25a1f.js", "_app/immutable/chunks/ButtonLink.2b86eb1a.js", "_app/immutable/chunks/TextWithLineBreaks.a14c0ba8.js", "_app/immutable/chunks/Faq.d36da7da.js", "_app/immutable/chunks/stores.483a6c70.js", "_app/immutable/chunks/singletons.0e91b02d.js", "_app/immutable/chunks/paths.85fe2585.js", "_app/immutable/chunks/Row.7099f54b.js", "_app/immutable/chunks/DynamicDuplex.2b6ef304.js", "_app/immutable/chunks/Duplex.a6bac538.js", "_app/immutable/chunks/SEOMetaData.b746ec36.js"];
    stylesheets4 = ["_app/immutable/assets/3.16a4ee6a.css", "_app/immutable/assets/Hero.4a3cbd69.css", "_app/immutable/assets/ButtonLink.e5fc3fc9.css", "_app/immutable/assets/Faq.7ac5e4bc.css", "_app/immutable/assets/DynamicDuplex.afb562d8.css", "_app/immutable/assets/Duplex.bb61849e.css"];
    fonts4 = [];
  }
});

// .svelte-kit/output/server/entries/pages/contact/_page.server.js
var page_server_exports2 = {};
__export(page_server_exports2, {
  load: () => load4
});
async function load4() {
  const response = await contentfulFetch(query2);
  if (!response.ok) {
    throw error2(404, {
      message: `Mistakes were made: Error ${response.status} - ${response.statusText} 
      ${response.url}`
    });
  }
  const { data } = await response.json();
  const { items: pageContentItems } = data.contactPageCollection.items[0].pageContentCollection;
  const processedItems = pageContentItems.map((item) => {
    const processingFunction = processingFunctions2[item.__typename];
    return processingFunction ? processingFunction(item) : item;
  });
  const heroBanners = processedItems.filter((item) => item.__typename === "ComponentHeroBanner");
  const duplexes = processedItems.filter((item) => item.__typename === "ComponentDuplex");
  const seoData = processSEOTags2(data.contactPageCollection.items[0].seoMetadata);
  return {
    heroBanners,
    duplexes,
    seoData
  };
}
var import_rich_text_html_renderer2, query2, processHeroBanner2, processDuplex2, processSEOTags2, processingFunctions2;
var init_page_server2 = __esm({
  ".svelte-kit/output/server/entries/pages/contact/_page.server.js"() {
    init_chunks();
    import_rich_text_html_renderer2 = __toESM(require_rich_text_html_renderer_es5(), 1);
    init_contentful_fetch();
    query2 = `
{
  contactPageCollection(limit: 1) {
    items {
      pageContentCollection {
        items {
          __typename
          ... on ComponentHeroBanner {
            page
            headline
            subline
            ctaText
            contentStyle
            bodyText {
              json
            }
            image {
              url
              description
            }
            targetPage {
              path
            }
          }
          ... on ComponentDuplex {
            tagline
            headline
            ctaText
            containerLayout
            containerSize
            bodyText {
              json
            }
            image{
              url
              description
            }
            targetPage{
              __typename
              ... on Page {
                slug
              }
              ... on HowItWorks {
                slug
              }
              ... on AboutPage {
                slug
              }
              ... on NewsPage {
                slug
              }
              ... on ContactPage {
                slug
              }
              ... on ServicesPage {
                slug
              }
            }
          }
        }
      }
      seoMetadata {
        __typename
        title
        metaDescription
        ogTitle
        ogDescription	
        ogImage {
          url
        }
      }
    }
  }
}
`;
    processHeroBanner2 = (item) => {
      var _a, _b;
      return {
        ...item,
        bodyText: (0, import_rich_text_html_renderer2.documentToHtmlString)(((_a = item.bodyText) == null ? void 0 : _a.json) ?? ""),
        targetPage: ((_b = item.targetPage) == null ? void 0 : _b.path) ?? ""
      };
    };
    processDuplex2 = (item) => {
      var _a, _b, _c;
      let targetPageSlug = ((_a = item.targetPage) == null ? void 0 : _a.slug) ?? "";
      if (((_b = item.targetPage) == null ? void 0 : _b.__typename) === "ServicesPage") {
        targetPageSlug = "/services/" + targetPageSlug;
      }
      return {
        ...item,
        bodyText: (0, import_rich_text_html_renderer2.documentToHtmlString)(((_c = item.bodyText) == null ? void 0 : _c.json) ?? ""),
        targetPage: targetPageSlug,
        containerSize: item.containerSize ?? ""
      };
    };
    processSEOTags2 = (item) => {
      return { ...item };
    };
    processingFunctions2 = {
      "ComponentHeroBanner": processHeroBanner2,
      "ComponentDuplex": processDuplex2
    };
  }
});

// node_modules/devalue/src/utils.js
function is_primitive(thing) {
  return Object(thing) !== thing;
}
function is_plain_object(thing) {
  const proto = Object.getPrototypeOf(thing);
  return proto === Object.prototype || proto === null || Object.getOwnPropertyNames(proto).sort().join("\0") === object_proto_names;
}
function get_type(thing) {
  return Object.prototype.toString.call(thing).slice(8, -1);
}
function get_escaped_char(char) {
  switch (char) {
    case '"':
      return '\\"';
    case "<":
      return "\\u003C";
    case "\\":
      return "\\\\";
    case "\n":
      return "\\n";
    case "\r":
      return "\\r";
    case "	":
      return "\\t";
    case "\b":
      return "\\b";
    case "\f":
      return "\\f";
    case "\u2028":
      return "\\u2028";
    case "\u2029":
      return "\\u2029";
    default:
      return char < " " ? `\\u${char.charCodeAt(0).toString(16).padStart(4, "0")}` : "";
  }
}
function stringify_string(str) {
  let result = "";
  let last_pos = 0;
  const len = str.length;
  for (let i = 0; i < len; i += 1) {
    const char = str[i];
    const replacement = get_escaped_char(char);
    if (replacement) {
      result += str.slice(last_pos, i) + replacement;
      last_pos = i + 1;
    }
  }
  return `"${last_pos === 0 ? str : result + str.slice(last_pos)}"`;
}
var escaped, DevalueError, object_proto_names;
var init_utils = __esm({
  "node_modules/devalue/src/utils.js"() {
    escaped = {
      "<": "\\u003C",
      "\\": "\\\\",
      "\b": "\\b",
      "\f": "\\f",
      "\n": "\\n",
      "\r": "\\r",
      "	": "\\t",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    };
    DevalueError = class extends Error {
      /**
       * @param {string} message
       * @param {string[]} keys
       */
      constructor(message, keys) {
        super(message);
        this.name = "DevalueError";
        this.path = keys.join("");
      }
    };
    object_proto_names = /* @__PURE__ */ Object.getOwnPropertyNames(
      Object.prototype
    ).sort().join("\0");
  }
});

// node_modules/devalue/src/uneval.js
function uneval(value, replacer) {
  const counts = /* @__PURE__ */ new Map();
  const keys = [];
  const custom = /* @__PURE__ */ new Map();
  function walk(thing) {
    if (typeof thing === "function") {
      throw new DevalueError(`Cannot stringify a function`, keys);
    }
    if (!is_primitive(thing)) {
      if (counts.has(thing)) {
        counts.set(thing, counts.get(thing) + 1);
        return;
      }
      counts.set(thing, 1);
      if (replacer) {
        const str2 = replacer(thing);
        if (typeof str2 === "string") {
          custom.set(thing, str2);
          return;
        }
      }
      const type = get_type(thing);
      switch (type) {
        case "Number":
        case "BigInt":
        case "String":
        case "Boolean":
        case "Date":
        case "RegExp":
          return;
        case "Array":
          thing.forEach((value2, i) => {
            keys.push(`[${i}]`);
            walk(value2);
            keys.pop();
          });
          break;
        case "Set":
          Array.from(thing).forEach(walk);
          break;
        case "Map":
          for (const [key2, value2] of thing) {
            keys.push(
              `.get(${is_primitive(key2) ? stringify_primitive(key2) : "..."})`
            );
            walk(value2);
            keys.pop();
          }
          break;
        default:
          if (!is_plain_object(thing)) {
            throw new DevalueError(
              `Cannot stringify arbitrary non-POJOs`,
              keys
            );
          }
          if (Object.getOwnPropertySymbols(thing).length > 0) {
            throw new DevalueError(
              `Cannot stringify POJOs with symbolic keys`,
              keys
            );
          }
          for (const key2 in thing) {
            keys.push(`.${key2}`);
            walk(thing[key2]);
            keys.pop();
          }
      }
    }
  }
  walk(value);
  const names = /* @__PURE__ */ new Map();
  Array.from(counts).filter((entry) => entry[1] > 1).sort((a, b) => b[1] - a[1]).forEach((entry, i) => {
    names.set(entry[0], get_name(i));
  });
  function stringify2(thing) {
    if (names.has(thing)) {
      return names.get(thing);
    }
    if (is_primitive(thing)) {
      return stringify_primitive(thing);
    }
    if (custom.has(thing)) {
      return custom.get(thing);
    }
    const type = get_type(thing);
    switch (type) {
      case "Number":
      case "String":
      case "Boolean":
        return `Object(${stringify2(thing.valueOf())})`;
      case "RegExp":
        return `new RegExp(${stringify_string(thing.source)}, "${thing.flags}")`;
      case "Date":
        return `new Date(${thing.getTime()})`;
      case "Array":
        const members = (
          /** @type {any[]} */
          thing.map(
            (v, i) => i in thing ? stringify2(v) : ""
          )
        );
        const tail = thing.length === 0 || thing.length - 1 in thing ? "" : ",";
        return `[${members.join(",")}${tail}]`;
      case "Set":
      case "Map":
        return `new ${type}([${Array.from(thing).map(stringify2).join(",")}])`;
      default:
        const obj = `{${Object.keys(thing).map((key2) => `${safe_key(key2)}:${stringify2(thing[key2])}`).join(",")}}`;
        const proto = Object.getPrototypeOf(thing);
        if (proto === null) {
          return Object.keys(thing).length > 0 ? `Object.assign(Object.create(null),${obj})` : `Object.create(null)`;
        }
        return obj;
    }
  }
  const str = stringify2(value);
  if (names.size) {
    const params = [];
    const statements = [];
    const values = [];
    names.forEach((name, thing) => {
      params.push(name);
      if (custom.has(thing)) {
        values.push(
          /** @type {string} */
          custom.get(thing)
        );
        return;
      }
      if (is_primitive(thing)) {
        values.push(stringify_primitive(thing));
        return;
      }
      const type = get_type(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
          values.push(`Object(${stringify2(thing.valueOf())})`);
          break;
        case "RegExp":
          values.push(thing.toString());
          break;
        case "Date":
          values.push(`new Date(${thing.getTime()})`);
          break;
        case "Array":
          values.push(`Array(${thing.length})`);
          thing.forEach((v, i) => {
            statements.push(`${name}[${i}]=${stringify2(v)}`);
          });
          break;
        case "Set":
          values.push(`new Set`);
          statements.push(
            `${name}.${Array.from(thing).map((v) => `add(${stringify2(v)})`).join(".")}`
          );
          break;
        case "Map":
          values.push(`new Map`);
          statements.push(
            `${name}.${Array.from(thing).map(([k, v]) => `set(${stringify2(k)}, ${stringify2(v)})`).join(".")}`
          );
          break;
        default:
          values.push(
            Object.getPrototypeOf(thing) === null ? "Object.create(null)" : "{}"
          );
          Object.keys(thing).forEach((key2) => {
            statements.push(
              `${name}${safe_prop(key2)}=${stringify2(thing[key2])}`
            );
          });
      }
    });
    statements.push(`return ${str}`);
    return `(function(${params.join(",")}){${statements.join(
      ";"
    )}}(${values.join(",")}))`;
  } else {
    return str;
  }
}
function get_name(num) {
  let name = "";
  do {
    name = chars[num % chars.length] + name;
    num = ~~(num / chars.length) - 1;
  } while (num >= 0);
  return reserved.test(name) ? `${name}0` : name;
}
function escape_unsafe_char(c) {
  return escaped[c] || c;
}
function escape_unsafe_chars(str) {
  return str.replace(unsafe_chars, escape_unsafe_char);
}
function safe_key(key2) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key2) ? key2 : escape_unsafe_chars(JSON.stringify(key2));
}
function safe_prop(key2) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key2) ? `.${key2}` : `[${escape_unsafe_chars(JSON.stringify(key2))}]`;
}
function stringify_primitive(thing) {
  if (typeof thing === "string")
    return stringify_string(thing);
  if (thing === void 0)
    return "void 0";
  if (thing === 0 && 1 / thing < 0)
    return "-0";
  const str = String(thing);
  if (typeof thing === "number")
    return str.replace(/^(-)?0\./, "$1.");
  if (typeof thing === "bigint")
    return thing + "n";
  return str;
}
var chars, unsafe_chars, reserved;
var init_uneval = __esm({
  "node_modules/devalue/src/uneval.js"() {
    init_utils();
    chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$";
    unsafe_chars = /[<\b\f\n\r\t\0\u2028\u2029]/g;
    reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
  }
});

// node_modules/devalue/src/constants.js
var UNDEFINED, HOLE, NAN, POSITIVE_INFINITY, NEGATIVE_INFINITY, NEGATIVE_ZERO;
var init_constants = __esm({
  "node_modules/devalue/src/constants.js"() {
    UNDEFINED = -1;
    HOLE = -2;
    NAN = -3;
    POSITIVE_INFINITY = -4;
    NEGATIVE_INFINITY = -5;
    NEGATIVE_ZERO = -6;
  }
});

// node_modules/devalue/src/parse.js
var init_parse = __esm({
  "node_modules/devalue/src/parse.js"() {
    init_constants();
  }
});

// node_modules/devalue/src/stringify.js
function stringify(value, reducers) {
  const stringified = [];
  const indexes = /* @__PURE__ */ new Map();
  const custom = [];
  for (const key2 in reducers) {
    custom.push({ key: key2, fn: reducers[key2] });
  }
  const keys = [];
  let p = 0;
  function flatten(thing) {
    if (typeof thing === "function") {
      throw new DevalueError(`Cannot stringify a function`, keys);
    }
    if (indexes.has(thing))
      return indexes.get(thing);
    if (thing === void 0)
      return UNDEFINED;
    if (Number.isNaN(thing))
      return NAN;
    if (thing === Infinity)
      return POSITIVE_INFINITY;
    if (thing === -Infinity)
      return NEGATIVE_INFINITY;
    if (thing === 0 && 1 / thing < 0)
      return NEGATIVE_ZERO;
    const index14 = p++;
    indexes.set(thing, index14);
    for (const { key: key2, fn } of custom) {
      const value2 = fn(thing);
      if (value2) {
        stringified[index14] = `["${key2}",${flatten(value2)}]`;
        return index14;
      }
    }
    let str = "";
    if (is_primitive(thing)) {
      str = stringify_primitive2(thing);
    } else {
      const type = get_type(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
          str = `["Object",${stringify_primitive2(thing)}]`;
          break;
        case "BigInt":
          str = `["BigInt",${thing}]`;
          break;
        case "Date":
          str = `["Date","${thing.toISOString()}"]`;
          break;
        case "RegExp":
          const { source, flags } = thing;
          str = flags ? `["RegExp",${stringify_string(source)},"${flags}"]` : `["RegExp",${stringify_string(source)}]`;
          break;
        case "Array":
          str = "[";
          for (let i = 0; i < thing.length; i += 1) {
            if (i > 0)
              str += ",";
            if (i in thing) {
              keys.push(`[${i}]`);
              str += flatten(thing[i]);
              keys.pop();
            } else {
              str += HOLE;
            }
          }
          str += "]";
          break;
        case "Set":
          str = '["Set"';
          for (const value2 of thing) {
            str += `,${flatten(value2)}`;
          }
          str += "]";
          break;
        case "Map":
          str = '["Map"';
          for (const [key2, value2] of thing) {
            keys.push(
              `.get(${is_primitive(key2) ? stringify_primitive2(key2) : "..."})`
            );
            str += `,${flatten(key2)},${flatten(value2)}`;
          }
          str += "]";
          break;
        default:
          if (!is_plain_object(thing)) {
            throw new DevalueError(
              `Cannot stringify arbitrary non-POJOs`,
              keys
            );
          }
          if (Object.getOwnPropertySymbols(thing).length > 0) {
            throw new DevalueError(
              `Cannot stringify POJOs with symbolic keys`,
              keys
            );
          }
          if (Object.getPrototypeOf(thing) === null) {
            str = '["null"';
            for (const key2 in thing) {
              keys.push(`.${key2}`);
              str += `,${stringify_string(key2)},${flatten(thing[key2])}`;
              keys.pop();
            }
            str += "]";
          } else {
            str = "{";
            let started = false;
            for (const key2 in thing) {
              if (started)
                str += ",";
              started = true;
              keys.push(`.${key2}`);
              str += `${stringify_string(key2)}:${flatten(thing[key2])}`;
              keys.pop();
            }
            str += "}";
          }
      }
    }
    stringified[index14] = str;
    return index14;
  }
  const index13 = flatten(value);
  if (index13 < 0)
    return `${index13}`;
  return `[${stringified.join(",")}]`;
}
function stringify_primitive2(thing) {
  const type = typeof thing;
  if (type === "string")
    return stringify_string(thing);
  if (thing instanceof String)
    return stringify_string(thing.toString());
  if (thing === void 0)
    return UNDEFINED.toString();
  if (thing === 0 && 1 / thing < 0)
    return NEGATIVE_ZERO.toString();
  if (type === "bigint")
    return `["BigInt","${thing}"]`;
  return String(thing);
}
var init_stringify = __esm({
  "node_modules/devalue/src/stringify.js"() {
    init_utils();
    init_constants();
  }
});

// node_modules/devalue/index.js
var init_devalue = __esm({
  "node_modules/devalue/index.js"() {
    init_uneval();
    init_parse();
    init_stringify();
  }
});

// .svelte-kit/output/server/chunks/Col.js
var Col;
var init_Col = __esm({
  ".svelte-kit/output/server/chunks/Col.js"() {
    init_index3();
    init_Row();
    Col = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class", "xs", "sm", "md", "lg", "xl", "xxl"]);
      let { class: className = "" } = $$props;
      let { xs = void 0 } = $$props;
      let { sm = void 0 } = $$props;
      let { md = void 0 } = $$props;
      let { lg = void 0 } = $$props;
      let { xl = void 0 } = $$props;
      let { xxl = void 0 } = $$props;
      const colClasses = [];
      const lookup = { xs, sm, md, lg, xl, xxl };
      Object.keys(lookup).forEach((colWidth) => {
        const columnProp = lookup[colWidth];
        if (!columnProp && columnProp !== "") {
          return;
        }
        const isXs = colWidth === "xs";
        if (isObject(columnProp)) {
          const colSizeInterfix = isXs ? "-" : `-${colWidth}-`;
          const colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);
          if (columnProp.size || columnProp.size === "") {
            colClasses.push(colClass);
          }
          if (columnProp.push) {
            colClasses.push(`push${colSizeInterfix}${columnProp.push}`);
          }
          if (columnProp.pull) {
            colClasses.push(`pull${colSizeInterfix}${columnProp.pull}`);
          }
          if (columnProp.offset) {
            colClasses.push(`offset${colSizeInterfix}${columnProp.offset}`);
          }
          if (columnProp.order) {
            colClasses.push(`order${colSizeInterfix}${columnProp.order}`);
          }
        } else {
          colClasses.push(getColumnSizeClass(isXs, colWidth, columnProp));
        }
      });
      if (!colClasses.length) {
        colClasses.push("col");
      }
      if (className) {
        colClasses.push(className);
      }
      if ($$props.class === void 0 && $$bindings.class && className !== void 0)
        $$bindings.class(className);
      if ($$props.xs === void 0 && $$bindings.xs && xs !== void 0)
        $$bindings.xs(xs);
      if ($$props.sm === void 0 && $$bindings.sm && sm !== void 0)
        $$bindings.sm(sm);
      if ($$props.md === void 0 && $$bindings.md && md !== void 0)
        $$bindings.md(md);
      if ($$props.lg === void 0 && $$bindings.lg && lg !== void 0)
        $$bindings.lg(lg);
      if ($$props.xl === void 0 && $$bindings.xl && xl !== void 0)
        $$bindings.xl(xl);
      if ($$props.xxl === void 0 && $$bindings.xxl && xxl !== void 0)
        $$bindings.xxl(xxl);
      return `<div${spread(
        [
          escape_object($$restProps),
          {
            class: escape_attribute_value(colClasses.join(" "))
          }
        ],
        {}
      )}>${slots.default ? slots.default({}) : ``}</div>`;
    });
  }
});

// node_modules/lodash.get/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.get/index.js"(exports, module2) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function getValue(object, key2) {
      return object == null ? void 0 : object[key2];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root.Symbol;
    var splice = arrayProto.splice;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index13 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index13 < length) {
        var entry = entries[index13];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key2) {
      return this.has(key2) && delete this.__data__[key2];
    }
    function hashGet(key2) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key2];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
    }
    function hashHas(key2) {
      var data = this.__data__;
      return nativeCreate ? data[key2] !== void 0 : hasOwnProperty.call(data, key2);
    }
    function hashSet(key2, value) {
      var data = this.__data__;
      data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index13 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index13 < length) {
        var entry = entries[index13];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key2) {
      var data = this.__data__, index13 = assocIndexOf(data, key2);
      if (index13 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index13 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index13, 1);
      }
      return true;
    }
    function listCacheGet(key2) {
      var data = this.__data__, index13 = assocIndexOf(data, key2);
      return index13 < 0 ? void 0 : data[index13][1];
    }
    function listCacheHas(key2) {
      return assocIndexOf(this.__data__, key2) > -1;
    }
    function listCacheSet(key2, value) {
      var data = this.__data__, index13 = assocIndexOf(data, key2);
      if (index13 < 0) {
        data.push([key2, value]);
      } else {
        data[index13][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index13 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index13 < length) {
        var entry = entries[index13];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key2) {
      return getMapData(this, key2)["delete"](key2);
    }
    function mapCacheGet(key2) {
      return getMapData(this, key2).get(key2);
    }
    function mapCacheHas(key2) {
      return getMapData(this, key2).has(key2);
    }
    function mapCacheSet(key2, value) {
      getMapData(this, key2).set(key2, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function assocIndexOf(array2, key2) {
      var length = array2.length;
      while (length--) {
        if (eq(array2[length][0], key2)) {
          return length;
        }
      }
      return -1;
    }
    function baseGet(object, path2) {
      path2 = isKey(path2, object) ? [path2] : castPath(path2);
      var index13 = 0, length = path2.length;
      while (object != null && index13 < length) {
        object = object[toKey(path2[index13++])];
      }
      return index13 && index13 == length ? object : void 0;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern2 = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern2.test(toSource(value));
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function getMapData(map, key2) {
      var data = map.__data__;
      return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key2) {
      var value = getValue(object, key2);
      return baseIsNative(value) ? value : void 0;
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var stringToPath = memoize(function(string) {
      string = toString(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key2 = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key2)) {
          return cache.get(key2);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key2, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArray = Array.isArray;
    function isFunction(value) {
      var tag = isObject2(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function get3(object, path2, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path2);
      return result === void 0 ? defaultValue : result;
    }
    module2.exports = get3;
  }
});

// node_modules/lodash.clonedeep/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.clonedeep/index.js"(exports, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reFlags = /\w*$/;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    function addMapEntry(map, pair) {
      map.set(pair[0], pair[1]);
      return map;
    }
    function addSetEntry(set, value) {
      set.add(value);
      return set;
    }
    function arrayEach(array2, iteratee) {
      var index13 = -1, length = array2 ? array2.length : 0;
      while (++index13 < length) {
        if (iteratee(array2[index13], index13, array2) === false) {
          break;
        }
      }
      return array2;
    }
    function arrayPush(array2, values) {
      var index13 = -1, length = values.length, offset = array2.length;
      while (++index13 < length) {
        array2[offset + index13] = values[index13];
      }
      return array2;
    }
    function arrayReduce(array2, iteratee, accumulator, initAccum) {
      var index13 = -1, length = array2 ? array2.length : 0;
      if (initAccum && length) {
        accumulator = array2[++index13];
      }
      while (++index13 < length) {
        accumulator = iteratee(accumulator, array2[index13], index13, array2);
      }
      return accumulator;
    }
    function baseTimes(n, iteratee) {
      var index13 = -1, result = Array(n);
      while (++index13 < n) {
        result[index13] = iteratee(index13);
      }
      return result;
    }
    function getValue(object, key2) {
      return object == null ? void 0 : object[key2];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function mapToArray(map) {
      var index13 = -1, result = Array(map.size);
      map.forEach(function(value, key2) {
        result[++index13] = [key2, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index13 = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index13] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap2 = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index13 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index13 < length) {
        var entry = entries[index13];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key2) {
      return this.has(key2) && delete this.__data__[key2];
    }
    function hashGet(key2) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key2];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
    }
    function hashHas(key2) {
      var data = this.__data__;
      return nativeCreate ? data[key2] !== void 0 : hasOwnProperty.call(data, key2);
    }
    function hashSet(key2, value) {
      var data = this.__data__;
      data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index13 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index13 < length) {
        var entry = entries[index13];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key2) {
      var data = this.__data__, index13 = assocIndexOf(data, key2);
      if (index13 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index13 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index13, 1);
      }
      return true;
    }
    function listCacheGet(key2) {
      var data = this.__data__, index13 = assocIndexOf(data, key2);
      return index13 < 0 ? void 0 : data[index13][1];
    }
    function listCacheHas(key2) {
      return assocIndexOf(this.__data__, key2) > -1;
    }
    function listCacheSet(key2, value) {
      var data = this.__data__, index13 = assocIndexOf(data, key2);
      if (index13 < 0) {
        data.push([key2, value]);
      } else {
        data[index13][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index13 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index13 < length) {
        var entry = entries[index13];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key2) {
      return getMapData(this, key2)["delete"](key2);
    }
    function mapCacheGet(key2) {
      return getMapData(this, key2).get(key2);
    }
    function mapCacheHas(key2) {
      return getMapData(this, key2).has(key2);
    }
    function mapCacheSet(key2, value) {
      getMapData(this, key2).set(key2, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key2) {
      return this.__data__["delete"](key2);
    }
    function stackGet(key2) {
      return this.__data__.get(key2);
    }
    function stackHas(key2) {
      return this.__data__.has(key2);
    }
    function stackSet(key2, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key2, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key2, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key2 in value) {
        if ((inherited || hasOwnProperty.call(value, key2)) && !(skipIndexes && (key2 == "length" || isIndex(key2, length)))) {
          result.push(key2);
        }
      }
      return result;
    }
    function assignValue(object, key2, value) {
      var objValue = object[key2];
      if (!(hasOwnProperty.call(object, key2) && eq(objValue, value)) || value === void 0 && !(key2 in object)) {
        object[key2] = value;
      }
    }
    function assocIndexOf(array2, key2) {
      var length = array2.length;
      while (length--) {
        if (eq(array2[length][0], key2)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    function baseClone(value, isDeep, isFull, customizer, key2, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key2, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject2(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (!isArr) {
        var props = isFull ? getAllKeys(value) : keys(value);
      }
      arrayEach(props || value, function(subValue, key3) {
        if (props) {
          key3 = subValue;
          subValue = value[key3];
        }
        assignValue(result, key3, baseClone(subValue, isDeep, isFull, customizer, key3, value, stack));
      });
      return result;
    }
    function baseCreate(proto) {
      return isObject2(proto) ? objectCreate(proto) : {};
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern2 = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern2.test(toSource(value));
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key2 in Object(object)) {
        if (hasOwnProperty.call(object, key2) && key2 != "constructor") {
          result.push(key2);
        }
      }
      return result;
    }
    function cloneBuffer(buffer2, isDeep) {
      if (isDeep) {
        return buffer2.slice();
      }
      var result = new buffer2.constructor(buffer2.length);
      buffer2.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneDataView(dataView, isDeep) {
      var buffer2 = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer2, dataView.byteOffset, dataView.byteLength);
    }
    function cloneMap(map, isDeep, cloneFunc) {
      var array2 = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
      return arrayReduce(array2, addMapEntry, new map.constructor());
    }
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    function cloneSet(set, isDeep, cloneFunc) {
      var array2 = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
      return arrayReduce(array2, addSetEntry, new set.constructor());
    }
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer2 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array2) {
      var index13 = -1, length = source.length;
      array2 || (array2 = Array(length));
      while (++index13 < length) {
        array2[index13] = source[index13];
      }
      return array2;
    }
    function copyObject(source, props, object, customizer) {
      object || (object = {});
      var index13 = -1, length = props.length;
      while (++index13 < length) {
        var key2 = props[index13];
        var newValue = customizer ? customizer(object[key2], source[key2], key2, object, source) : void 0;
        assignValue(object, key2, newValue === void 0 ? source[key2] : newValue);
      }
      return object;
    }
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    function getMapData(map, key2) {
      var data = map.__data__;
      return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key2) {
      var value = getValue(object, key2);
      return baseIsNative(value) ? value : void 0;
    }
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function initCloneArray(array2) {
      var length = array2.length, result = array2.constructor(length);
      if (length && typeof array2[0] == "string" && hasOwnProperty.call(array2, "index")) {
        result.index = array2.index;
        result.input = array2.input;
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return cloneSet(object, isDeep, cloneFunc);
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function cloneDeep2(value) {
      return baseClone(value, true, true);
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      var tag = isObject2(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module2.exports = cloneDeep2;
  }
});

// node_modules/lodash.isequal/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.isequal/index.js"(exports, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayFilter(array2, predicate) {
      var index13 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
      while (++index13 < length) {
        var value = array2[index13];
        if (predicate(value, index13, array2)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayPush(array2, values) {
      var index13 = -1, length = values.length, offset = array2.length;
      while (++index13 < length) {
        array2[offset + index13] = values[index13];
      }
      return array2;
    }
    function arraySome(array2, predicate) {
      var index13 = -1, length = array2 == null ? 0 : array2.length;
      while (++index13 < length) {
        if (predicate(array2[index13], index13, array2)) {
          return true;
        }
      }
      return false;
    }
    function baseTimes(n, iteratee) {
      var index13 = -1, result = Array(n);
      while (++index13 < n) {
        result[index13] = iteratee(index13);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache, key2) {
      return cache.has(key2);
    }
    function getValue(object, key2) {
      return object == null ? void 0 : object[key2];
    }
    function mapToArray(map) {
      var index13 = -1, result = Array(map.size);
      map.forEach(function(value, key2) {
        result[++index13] = [key2, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index13 = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index13] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap2 = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index13 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index13 < length) {
        var entry = entries[index13];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key2) {
      var result = this.has(key2) && delete this.__data__[key2];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key2) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key2];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
    }
    function hashHas(key2) {
      var data = this.__data__;
      return nativeCreate ? data[key2] !== void 0 : hasOwnProperty.call(data, key2);
    }
    function hashSet(key2, value) {
      var data = this.__data__;
      this.size += this.has(key2) ? 0 : 1;
      data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index13 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index13 < length) {
        var entry = entries[index13];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key2) {
      var data = this.__data__, index13 = assocIndexOf(data, key2);
      if (index13 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index13 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index13, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key2) {
      var data = this.__data__, index13 = assocIndexOf(data, key2);
      return index13 < 0 ? void 0 : data[index13][1];
    }
    function listCacheHas(key2) {
      return assocIndexOf(this.__data__, key2) > -1;
    }
    function listCacheSet(key2, value) {
      var data = this.__data__, index13 = assocIndexOf(data, key2);
      if (index13 < 0) {
        ++this.size;
        data.push([key2, value]);
      } else {
        data[index13][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index13 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index13 < length) {
        var entry = entries[index13];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key2) {
      var result = getMapData(this, key2)["delete"](key2);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key2) {
      return getMapData(this, key2).get(key2);
    }
    function mapCacheHas(key2) {
      return getMapData(this, key2).has(key2);
    }
    function mapCacheSet(key2, value) {
      var data = getMapData(this, key2), size = data.size;
      data.set(key2, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index13 = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index13 < length) {
        this.add(values[index13]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key2) {
      var data = this.__data__, result = data["delete"](key2);
      this.size = data.size;
      return result;
    }
    function stackGet(key2) {
      return this.__data__.get(key2);
    }
    function stackHas(key2) {
      return this.__data__.has(key2);
    }
    function stackSet(key2, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key2, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key2, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key2 in value) {
        if ((inherited || hasOwnProperty.call(value, key2)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key2 == "offset" || key2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || // Skip index properties.
        isIndex(key2, length)))) {
          result.push(key2);
        }
      }
      return result;
    }
    function assocIndexOf(array2, key2) {
      var length = array2.length;
      while (length--) {
        if (eq(array2[length][0], key2)) {
          return length;
        }
      }
      return -1;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern2 = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern2.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key2 in Object(object)) {
        if (hasOwnProperty.call(object, key2) && key2 != "constructor") {
          result.push(key2);
        }
      }
      return result;
    }
    function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array2);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index13 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array2, other);
      stack.set(other, array2);
      while (++index13 < arrLength) {
        var arrValue = array2[index13], othValue = other[index13];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index13, other, array2, stack) : customizer(arrValue, othValue, index13, array2, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array2);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index13 = objLength;
      while (index13--) {
        var key2 = objProps[index13];
        if (!(isPartial ? key2 in other : hasOwnProperty.call(other, key2))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index13 < objLength) {
        key2 = objProps[index13];
        var objValue = object[key2], othValue = other[key2];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key2, other, object, stack) : customizer(objValue, othValue, key2, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key2 == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    function getMapData(map, key2) {
      var data = map.__data__;
      return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key2) {
      var value = getValue(object, key2);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isEqual2(value, other) {
      return baseIsEqual(value, other);
    }
    function isFunction(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module2.exports = isEqual2;
  }
});

// node_modules/easy-reactive/src/utils/object.js
var import_lodash, depsAreEqual, getDepNames, getUpdatedDeps;
var init_object = __esm({
  "node_modules/easy-reactive/src/utils/object.js"() {
    import_lodash = __toESM(require_lodash3(), 1);
    depsAreEqual = (deps1, deps2) => {
      return (0, import_lodash.default)(deps1, deps2);
    };
    getDepNames = (deps) => {
      return Object.keys(deps || {});
    };
    getUpdatedDeps = (depNames, currentData) => {
      const updatedDeps = {};
      depNames.forEach((depName) => {
        updatedDeps[depName] = currentData[depName];
      });
      return updatedDeps;
    };
  }
});

// node_modules/easy-reactive/src/utils/subscription.js
var createSubscription;
var init_subscription = __esm({
  "node_modules/easy-reactive/src/utils/subscription.js"() {
    init_object();
    createSubscription = () => {
      const subscribers = {};
      const memoDependency = (target, dep) => {
        const { watcherName, fn } = target;
        const { prop, value } = dep;
        if (!subscribers[watcherName]) {
          subscribers[watcherName] = {
            deps: {},
            fn
          };
        }
        subscribers[watcherName].deps[prop] = value;
      };
      return {
        subscribers,
        subscribe(target, dep) {
          if (target) {
            memoDependency(target, dep);
          }
        },
        notify(data, prop) {
          Object.entries(subscribers).forEach(([watchName, { deps, fn }]) => {
            const depNames = getDepNames(deps);
            if (depNames.includes(prop)) {
              const updatedDeps = getUpdatedDeps(depNames, data);
              if (!depsAreEqual(deps, updatedDeps)) {
                subscribers[watchName].deps = updatedDeps;
                fn();
              }
            }
          });
        }
      };
    };
  }
});

// node_modules/easy-reactive/src/utils/watcher.js
var createTargetWatcher;
var init_watcher = __esm({
  "node_modules/easy-reactive/src/utils/watcher.js"() {
    createTargetWatcher = () => {
      let target = null;
      return {
        targetWatcher(watcherName, fn) {
          target = {
            watcherName,
            fn
          };
          target.fn();
          target = null;
        },
        getTarget() {
          return target;
        }
      };
    };
  }
});

// node_modules/easy-reactive/src/simply-reactive.js
function simplyReactive(entities, options2) {
  const data = (0, import_lodash2.default)(entities, "data", {});
  const watch = (0, import_lodash2.default)(entities, "watch", {});
  const methods = (0, import_lodash2.default)(entities, "methods", {});
  const onChange = (0, import_lodash2.default)(options2, "onChange", () => {
  });
  const { subscribe: subscribe2, notify, subscribers } = createSubscription();
  const { targetWatcher, getTarget } = createTargetWatcher();
  let _data;
  const _methods = {};
  const getContext2 = () => ({
    data: _data,
    methods: _methods
  });
  let callingMethod = false;
  const methodWithFlags = (fn) => (...args) => {
    callingMethod = true;
    const result = fn(...args);
    callingMethod = false;
    return result;
  };
  Object.entries(methods).forEach(([methodName, methodItem]) => {
    _methods[methodName] = methodWithFlags(
      (...args) => methodItem(getContext2(), ...args)
    );
    Object.defineProperty(_methods[methodName], "name", { value: methodName });
  });
  _data = new Proxy((0, import_lodash3.default)(data), {
    get(target, prop) {
      if (getTarget() && !callingMethod) {
        subscribe2(getTarget(), { prop, value: target[prop] });
      }
      return Reflect.get(...arguments);
    },
    set(target, prop, value) {
      if (target[prop] === value) {
        return true;
      }
      Reflect.set(...arguments);
      if (!getTarget()) {
        onChange && onChange(prop, value);
        notify(_data, prop);
      }
      return true;
    }
  });
  Object.entries(watch).forEach(([watchName, watchItem]) => {
    targetWatcher(watchName, () => {
      watchItem(getContext2());
    });
  });
  const output = [_data, _methods];
  output._internal = {
    _getSubscribers() {
      return subscribers;
    }
  };
  return output;
}
var import_lodash2, import_lodash3;
var init_simply_reactive = __esm({
  "node_modules/easy-reactive/src/simply-reactive.js"() {
    import_lodash2 = __toESM(require_lodash(), 1);
    import_lodash3 = __toESM(require_lodash2(), 1);
    init_subscription();
    init_watcher();
  }
});

// node_modules/easy-reactive/main.js
var init_main = __esm({
  "node_modules/easy-reactive/main.js"() {
    init_simply_reactive();
  }
});

// .svelte-kit/output/server/chunks/Carousel.js
function getValueInRange(min, value, max) {
  return Math.max(min, Math.min(value, max));
}
function _getCurrentPageIndexByCurrentParticleIndexInfinite({
  currentParticleIndex,
  particlesCount,
  clonesCountHead,
  clonesCountTotal,
  particlesToScroll
}) {
  if (currentParticleIndex === particlesCount - clonesCountHead)
    return 0;
  if (currentParticleIndex === 0)
    return _getPagesCountByParticlesCountInfinite({
      particlesCountWithoutClones: particlesCount - clonesCountTotal,
      particlesToScroll
    }) - 1;
  return Math.floor((currentParticleIndex - clonesCountHead) / particlesToScroll);
}
function _getCurrentPageIndexByCurrentParticleIndexLimited({
  currentParticleIndex,
  particlesToScroll
}) {
  return Math.ceil(currentParticleIndex / particlesToScroll);
}
function getCurrentPageIndexByCurrentParticleIndex({
  currentParticleIndex,
  particlesCount,
  clonesCountHead,
  clonesCountTotal,
  infinite,
  particlesToScroll
}) {
  return infinite ? _getCurrentPageIndexByCurrentParticleIndexInfinite({
    currentParticleIndex,
    particlesCount,
    clonesCountHead,
    clonesCountTotal,
    particlesToScroll
  }) : _getCurrentPageIndexByCurrentParticleIndexLimited({
    currentParticleIndex,
    particlesToScroll
  });
}
function _getPagesCountByParticlesCountInfinite({
  particlesCountWithoutClones,
  particlesToScroll
}) {
  return Math.ceil(particlesCountWithoutClones / particlesToScroll);
}
function _getPagesCountByParticlesCountLimited({
  particlesCountWithoutClones,
  particlesToScroll,
  particlesToShow
}) {
  const partialPageSize = getPartialPageSize({
    particlesCountWithoutClones,
    particlesToScroll,
    particlesToShow
  });
  return Math.ceil(particlesCountWithoutClones / particlesToScroll) - partialPageSize;
}
function getPagesCountByParticlesCount({
  infinite,
  particlesCountWithoutClones,
  particlesToScroll,
  particlesToShow
}) {
  return infinite ? _getPagesCountByParticlesCountInfinite({
    particlesCountWithoutClones,
    particlesToScroll
  }) : _getPagesCountByParticlesCountLimited({
    particlesCountWithoutClones,
    particlesToScroll,
    particlesToShow
  });
}
function _getParticleIndexByPageIndexInfinite({
  pageIndex,
  clonesCountHead,
  clonesCountTail,
  particlesToScroll,
  particlesCount
}) {
  return getValueInRange(
    0,
    Math.min(clonesCountHead + pageIndex * particlesToScroll, particlesCount - clonesCountTail),
    particlesCount - 1
  );
}
function _getParticleIndexByPageIndexLimited({
  pageIndex,
  particlesToScroll,
  particlesCount,
  particlesToShow
}) {
  return getValueInRange(
    0,
    Math.min(pageIndex * particlesToScroll, particlesCount - particlesToShow),
    particlesCount - 1
  );
}
function getParticleIndexByPageIndex({
  infinite,
  pageIndex,
  clonesCountHead,
  clonesCountTail,
  particlesToScroll,
  particlesCount,
  particlesToShow
}) {
  return infinite ? _getParticleIndexByPageIndexInfinite({
    pageIndex,
    clonesCountHead,
    clonesCountTail,
    particlesToScroll,
    particlesCount
  }) : _getParticleIndexByPageIndexLimited({
    pageIndex,
    particlesToScroll,
    particlesCount,
    particlesToShow
  });
}
function applyParticleSizes({
  particlesContainerChildren,
  particleWidth
}) {
  for (let particleIndex = 0; particleIndex < particlesContainerChildren.length; particleIndex++) {
    particlesContainerChildren[particleIndex].style.minWidth = `${particleWidth}px`;
    particlesContainerChildren[particleIndex].style.maxWidth = `${particleWidth}px`;
  }
}
function getPartialPageSize({
  particlesToScroll,
  particlesToShow,
  particlesCountWithoutClones
}) {
  const overlap = particlesToScroll - particlesToShow;
  let particlesCount = particlesToShow;
  while (true) {
    const diff = particlesCountWithoutClones - particlesCount - overlap;
    if (diff < particlesToShow) {
      return Math.max(diff, 0);
    }
    particlesCount += particlesToShow + overlap;
  }
}
function createResizeObserver(onResize) {
  return new ResizeObserver((entries) => {
    onResize({
      width: entries[0].contentRect.width
    });
  });
}
function getClonesCount({
  infinite,
  particlesToShow,
  partialPageSize
}) {
  const clonesCount = infinite ? {
    // need to round with ceil as particlesToShow, particlesToShow can be floating (e.g. 1.5, 3.75)
    head: Math.ceil(partialPageSize || particlesToShow),
    tail: Math.ceil(particlesToShow)
  } : {
    head: 0,
    tail: 0
  };
  return {
    ...clonesCount,
    total: clonesCount.head + clonesCount.tail
  };
}
function getIndexesOfParticlesWithoutClonesInPage({
  pageIndex,
  particlesToShow,
  particlesToScroll,
  particlesCount
}) {
  const overlap = pageIndex === 0 ? 0 : particlesToShow - particlesToScroll;
  const from = pageIndex * particlesToShow - pageIndex * overlap;
  const to = from + Math.max(particlesToShow, particlesToScroll) - 1;
  const indexes = [];
  for (let i = from; i <= Math.min(particlesCount - 1, to); i++) {
    indexes.push(i);
  }
  return indexes;
}
function getAdjacentIndexes({
  infinite,
  pageIndex,
  pagesCount,
  particlesCount,
  particlesToShow,
  particlesToScroll
}) {
  const _pageIndex = getValueInRange(0, pageIndex, pagesCount - 1);
  let rangeStart = _pageIndex - 1;
  let rangeEnd = _pageIndex + 1;
  rangeStart = infinite ? rangeStart < 0 ? pagesCount - 1 : rangeStart : Math.max(0, rangeStart);
  rangeEnd = infinite ? rangeEnd > pagesCount - 1 ? 0 : rangeEnd : Math.min(pagesCount - 1, rangeEnd);
  const pageIndexes = [.../* @__PURE__ */ new Set([
    rangeStart,
    _pageIndex,
    rangeEnd,
    // because of these values outputs for infinite/non-infinites are the same
    0,
    // needed to clone first page particles
    pagesCount - 1
    // needed to clone last page particles
  ])].sort((a, b) => a - b);
  const particleIndexes = pageIndexes.flatMap(
    (pageIndex2) => getIndexesOfParticlesWithoutClonesInPage({
      pageIndex: pageIndex2,
      particlesToShow,
      particlesToScroll,
      particlesCount
    })
  );
  return {
    pageIndexes,
    particleIndexes: [...new Set(particleIndexes)].sort((a, b) => a - b)
  };
}
function createCarousel(onChange) {
  const progressManager = new ProgressManager({
    onProgressValueChange: (value) => {
      onChange("progressValue", 1 - value);
    }
  });
  const reactive = simplyReactive(
    {
      data: {
        particlesCountWithoutClones: 0,
        particlesToShow: 1,
        // normalized
        particlesToShowInit: 1,
        // initial value
        particlesToScroll: 1,
        // normalized
        particlesToScrollInit: 1,
        // initial value
        particlesCount: 1,
        currentParticleIndex: 1,
        infinite: false,
        autoplayDuration: 1e3,
        clonesCountHead: 0,
        clonesCountTail: 0,
        clonesCountTotal: 0,
        partialPageSize: 1,
        currentPageIndex: 1,
        pagesCount: 1,
        pauseOnFocus: false,
        focused: false,
        autoplay: false,
        autoplayDirection: "next",
        disabled: false,
        // disable page change while animation is in progress
        durationMsInit: 1e3,
        durationMs: 1e3,
        offset: 0,
        particleWidth: 0,
        loaded: []
      },
      watch: {
        setLoaded({ data: data2 }) {
          data2.loaded = getAdjacentIndexes({
            infinite: data2.infinite,
            pageIndex: data2.currentPageIndex,
            pagesCount: data2.pagesCount,
            particlesCount: data2.particlesCountWithoutClones,
            particlesToShow: data2.particlesToShow,
            particlesToScroll: data2.particlesToScroll
          }).particleIndexes;
        },
        setCurrentPageIndex({ data: data2 }) {
          data2.currentPageIndex = getCurrentPageIndexByCurrentParticleIndex({
            currentParticleIndex: data2.currentParticleIndex,
            particlesCount: data2.particlesCount,
            clonesCountHead: data2.clonesCountHead,
            clonesCountTotal: data2.clonesCountTotal,
            infinite: data2.infinite,
            particlesToScroll: data2.particlesToScroll
          });
        },
        setPartialPageSize({ data: data2 }) {
          data2.partialPageSize = getPartialPageSize({
            particlesToScroll: data2.particlesToScroll,
            particlesToShow: data2.particlesToShow,
            particlesCountWithoutClones: data2.particlesCountWithoutClones
          });
        },
        setClonesCount({ data: data2 }) {
          const { head, tail } = getClonesCount({
            infinite: data2.infinite,
            particlesToShow: data2.particlesToShow,
            partialPageSize: data2.partialPageSize
          });
          data2.clonesCountHead = head;
          data2.clonesCountTail = tail;
          data2.clonesCountTotal = head + tail;
        },
        setProgressManagerAutoplayDuration({ data: data2 }) {
          progressManager.setAutoplayDuration(data2.autoplayDuration);
        },
        toggleProgressManager({ data: { pauseOnFocus, focused } }) {
          if (pauseOnFocus) {
            if (focused) {
              progressManager.pause();
            } else {
              progressManager.resume();
            }
          }
        },
        initDuration({ data: data2 }) {
          data2.durationMs = data2.durationMsInit;
        },
        applyAutoplay({ data: data2, methods: { _applyAutoplayIfNeeded } }) {
          data2.autoplay && _applyAutoplayIfNeeded(data2.autoplay);
        },
        setPagesCount({ data: data2 }) {
          data2.pagesCount = getPagesCountByParticlesCount({
            infinite: data2.infinite,
            particlesCountWithoutClones: data2.particlesCountWithoutClones,
            particlesToScroll: data2.particlesToScroll,
            particlesToShow: data2.particlesToShow
          });
        },
        setParticlesToShow({ data: data2 }) {
          data2.particlesToShow = getValueInRange(
            1,
            data2.particlesToShowInit,
            data2.particlesCountWithoutClones
          );
        },
        setParticlesToScroll({ data: data2 }) {
          data2.particlesToScroll = getValueInRange(
            1,
            data2.particlesToScrollInit,
            data2.particlesCountWithoutClones
          );
        }
      },
      methods: {
        _prev({ data: data2 }) {
          data2.currentParticleIndex = getParticleIndexByPageIndex({
            infinite: data2.infinite,
            pageIndex: data2.currentPageIndex - 1,
            clonesCountHead: data2.clonesCountHead,
            clonesCountTail: data2.clonesCountTail,
            particlesToScroll: data2.particlesToScroll,
            particlesCount: data2.particlesCount,
            particlesToShow: data2.particlesToShow
          });
        },
        _next({ data: data2 }) {
          data2.currentParticleIndex = getParticleIndexByPageIndex({
            infinite: data2.infinite,
            pageIndex: data2.currentPageIndex + 1,
            clonesCountHead: data2.clonesCountHead,
            clonesCountTail: data2.clonesCountTail,
            particlesToScroll: data2.particlesToScroll,
            particlesCount: data2.particlesCount,
            particlesToShow: data2.particlesToShow
          });
        },
        _moveToParticle({ data: data2 }, particleIndex) {
          data2.currentParticleIndex = getValueInRange(
            0,
            particleIndex,
            data2.particlesCount - 1
          );
        },
        toggleFocused({ data: data2 }) {
          data2.focused = !data2.focused;
        },
        async _applyAutoplayIfNeeded({ data: data2, methods: methods2 }) {
          if (!data2.infinite && (data2.autoplayDirection === NEXT && data2.currentParticleIndex === data2.particlesCount - 1 || data2.autoplayDirection === PREV && data2.currentParticleIndex === 0)) {
            progressManager.reset();
            return;
          }
          if (data2.autoplay) {
            const onFinish = () => switcher({
              [NEXT]: async () => methods2.showNextPage(),
              [PREV]: async () => methods2.showPrevPage()
            })(data2.autoplayDirection);
            await progressManager.start(onFinish);
          }
        },
        // makes delayed jump to 1st or last element
        async _jumpIfNeeded({ data: data2, methods: methods2 }) {
          let jumped = false;
          if (data2.infinite) {
            if (data2.currentParticleIndex === 0) {
              await methods2.showParticle(
                data2.particlesCount - data2.clonesCountTotal,
                {
                  animated: false
                }
              );
              jumped = true;
            } else if (data2.currentParticleIndex === data2.particlesCount - data2.clonesCountTail) {
              await methods2.showParticle(data2.clonesCountHead, {
                animated: false
              });
              jumped = true;
            }
          }
          return jumped;
        },
        async changePage({ data: data2, methods: methods2 }, updateStoreFn, options2) {
          progressManager.reset();
          if (data2.disabled)
            return;
          data2.disabled = true;
          updateStoreFn();
          await methods2.offsetPage({ animated: get2(options2, "animated", true) });
          data2.disabled = false;
          const jumped = await methods2._jumpIfNeeded();
          !jumped && methods2._applyAutoplayIfNeeded();
        },
        async showNextPage({ data: data2, methods: methods2 }, options2) {
          if (data2.disabled)
            return;
          await methods2.changePage(methods2._next, options2);
        },
        async showPrevPage({ data: data2, methods: methods2 }, options2) {
          if (data2.disabled)
            return;
          await methods2.changePage(methods2._prev, options2);
        },
        async showParticle({ methods: methods2 }, particleIndex, options2) {
          await methods2.changePage(
            () => methods2._moveToParticle(particleIndex),
            options2
          );
        },
        _getParticleIndexByPageIndex({ data: data2 }, pageIndex) {
          return getParticleIndexByPageIndex({
            infinite: data2.infinite,
            pageIndex,
            clonesCountHead: data2.clonesCountHead,
            clonesCountTail: data2.clonesCountTail,
            particlesToScroll: data2.particlesToScroll,
            particlesCount: data2.particlesCount,
            particlesToShow: data2.particlesToShow
          });
        },
        async showPage({ methods: methods2 }, pageIndex, options2) {
          const particleIndex = methods2._getParticleIndexByPageIndex(pageIndex);
          await methods2.showParticle(particleIndex, options2);
        },
        offsetPage({ data: data2 }, options2) {
          const animated = get2(options2, "animated", true);
          return new Promise((resolve2) => {
            data2.durationMs = animated ? data2.durationMsInit : 0;
            data2.offset = -data2.currentParticleIndex * data2.particleWidth;
            setTimeout(() => {
              resolve2();
            }, data2.durationMs);
          });
        }
      }
    },
    {
      onChange
    }
  );
  const [data, methods] = reactive;
  return [{ data, progressManager }, methods, reactive._internal];
}
var css$43, Dot, css$33, Dots, PREV, NEXT, css$24, Arrow, css$16, MAX_PERCENT, Progress, get2, switcher, setIntervalImmediate, STEP_MS, MAX_VALUE, ProgressManager, css10, Carousel;
var init_Carousel = __esm({
  ".svelte-kit/output/server/chunks/Carousel.js"() {
    init_index3();
    init_main();
    css$43 = {
      code: ":root{--sc-dot-size:6px;--sc-active-dot-size:8px;--sc-dot-size-animation-time:250ms}.sc-carousel-dot__dot.svelte-yu7247{background-color:var(--sc-color-rgb-light);border-radius:50%;display:inline-block;opacity:0.5;transition:opacity 100ms ease,\r\n      height var(--sc-dot-size-animation-time) ease,\r\n      width var(--sc-dot-size-animation-time) ease;cursor:pointer;-webkit-tap-highlight-color:transparent;height:var(--sc-dot-size);width:var(--sc-dot-size)}.sc-carousel-dot__dot.svelte-yu7247:hover{opacity:0.9}.sc-carousel-dot__dot_active.svelte-yu7247{opacity:0.7;height:var(--sc-active-dot-size);width:var(--sc-active-dot-size)}",
      map: null
    };
    Dot = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { active = false } = $$props;
      if ($$props.active === void 0 && $$bindings.active && active !== void 0)
        $$bindings.active(active);
      $$result.css.add(css$43);
      return `<button class="${[
        "sc-carousel-button sc-carousel-dot__dot svelte-yu7247",
        active ? "sc-carousel-dot__dot_active" : ""
      ].join(" ").trim()}"></button>`;
    });
    css$33 = {
      code: ".sc-carousel-dots__container.svelte-1oj5bge{display:flex;align-items:center;justify-content:center;flex-wrap:wrap;padding:0 30px}.sc-carousel-dots__dot-container.svelte-1oj5bge{height:calc(var(--sc-dot-size) + 14px);width:calc(var(--sc-dot-size) + 10px);display:flex;align-items:center;justify-content:center}",
      map: null
    };
    Dots = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      createEventDispatcher();
      let { pagesCount = 1 } = $$props;
      let { currentPageIndex = 0 } = $$props;
      if ($$props.pagesCount === void 0 && $$bindings.pagesCount && pagesCount !== void 0)
        $$bindings.pagesCount(pagesCount);
      if ($$props.currentPageIndex === void 0 && $$bindings.currentPageIndex && currentPageIndex !== void 0)
        $$bindings.currentPageIndex(currentPageIndex);
      $$result.css.add(css$33);
      return `<div class="sc-carousel-dots__container svelte-1oj5bge">${each(Array(pagesCount), (_, pageIndex) => {
        return `<div class="sc-carousel-dots__dot-container svelte-1oj5bge">${validate_component(Dot, "Dot").$$render($$result, { active: currentPageIndex === pageIndex }, {}, {})}
    </div>`;
      })}  
</div>`;
    });
    PREV = "prev";
    NEXT = "next";
    css$24 = {
      code: ":root{--sc-arrow-size:2px}.sc-carousel-arrow__circle.svelte-9ztt4p{width:20px;height:20px;border-radius:50%;background-color:var(--sc-color-rgb-light-50p);display:flex;align-items:center;justify-content:center;transition:opacity 100ms ease;cursor:pointer;-webkit-tap-highlight-color:transparent}.sc-carousel-arrow__circle.svelte-9ztt4p:hover{opacity:0.9}.sc-carousel-arrow__arrow.svelte-9ztt4p{border:solid var(--sc-color-hex-dark);border-width:0 var(--sc-arrow-size) var(--sc-arrow-size) 0;padding:var(--sc-arrow-size);position:relative}.sc-carousel-arrow__arrow-next.svelte-9ztt4p{transform:rotate(-45deg);left:calc(var(--sc-arrow-size) / -2)}.sc-carousel-arrow__arrow-prev.svelte-9ztt4p{transform:rotate(135deg);right:calc(var(--sc-arrow-size) / -2)}.sc-carousel-arrow__circle_disabled.svelte-9ztt4p,.sc-carousel-arrow__circle_disabled.svelte-9ztt4p:hover{opacity:0.5}",
      map: null
    };
    Arrow = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { direction = NEXT } = $$props;
      let { disabled = false } = $$props;
      if ($$props.direction === void 0 && $$bindings.direction && direction !== void 0)
        $$bindings.direction(direction);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
        $$bindings.disabled(disabled);
      $$result.css.add(css$24);
      return `<button class="${[
        "sc-carousel-button sc-carousel-arrow__circle svelte-9ztt4p",
        disabled ? "sc-carousel-arrow__circle_disabled" : ""
      ].join(" ").trim()}"><i class="${[
        "sc-carousel-arrow__arrow svelte-9ztt4p",
        (direction === NEXT ? "sc-carousel-arrow__arrow-next" : "") + " " + (direction === PREV ? "sc-carousel-arrow__arrow-prev" : "")
      ].join(" ").trim()}"></i>
</button>`;
    });
    css$16 = {
      code: ".sc-carousel-progress__indicator.svelte-nuyenl{height:100%;background-color:var(--sc-color-hex-dark-50p)}",
      map: null
    };
    MAX_PERCENT = 100;
    Progress = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let width;
      let { value = 0 } = $$props;
      if ($$props.value === void 0 && $$bindings.value && value !== void 0)
        $$bindings.value(value);
      $$result.css.add(css$16);
      width = Math.min(Math.max(value * MAX_PERCENT, 0), MAX_PERCENT);
      return `<div class="sc-carousel-progress__indicator svelte-nuyenl" style="${"width: " + escape(width, true) + "%;"}"></div>`;
    });
    get2 = (object, fieldName, defaultValue) => {
      if (object && object.hasOwnProperty(fieldName)) {
        return object[fieldName];
      }
      if (defaultValue === void 0) {
        throw new Error(`Required arg "${fieldName}" was not provided`);
      }
      return defaultValue;
    };
    switcher = (description) => (key2) => {
      description[key2] && description[key2]();
    };
    setIntervalImmediate = (fn, ms) => {
      fn();
      return setInterval(fn, ms);
    };
    STEP_MS = 35;
    MAX_VALUE = 1;
    ProgressManager = class {
      constructor({ onProgressValueChange }) {
        this._onProgressValueChange = onProgressValueChange;
        this._autoplayDuration;
        this._onProgressValueChange;
        this._interval;
        this._paused = false;
      }
      setAutoplayDuration(autoplayDuration) {
        this._autoplayDuration = autoplayDuration;
      }
      start(onFinish) {
        return new Promise((resolve2) => {
          this.reset();
          const stepMs = Math.min(STEP_MS, Math.max(this._autoplayDuration, 1));
          let progress = -stepMs;
          this._interval = setIntervalImmediate(async () => {
            if (this._paused) {
              return;
            }
            progress += stepMs;
            const value = progress / this._autoplayDuration;
            this._onProgressValueChange(value);
            if (value > MAX_VALUE) {
              this.reset();
              await onFinish();
              resolve2();
            }
          }, stepMs);
        });
      }
      pause() {
        this._paused = true;
      }
      resume() {
        this._paused = false;
      }
      reset() {
        clearInterval(this._interval);
        this._onProgressValueChange(MAX_VALUE);
      }
    };
    css10 = {
      code: ":root{--sc-color-rgb-light-50p:rgba(93, 93, 93, 0.5);--sc-color-rgb-light:#5d5d5d;--sc-color-hex-dark-50p:rgba(30, 30, 30, 0.5);--sc-color-hex-dark:#1e1e1e}.sc-carousel__carousel-container.svelte-uwo0yk{display:flex;width:100%;flex-direction:column;align-items:center}.sc-carousel__content-container.svelte-uwo0yk{position:relative;display:flex;width:100%}.sc-carousel__pages-window.svelte-uwo0yk{flex:1;display:flex;overflow:hidden;box-sizing:border-box;position:relative}.sc-carousel__pages-container.svelte-uwo0yk{width:100%;display:flex;transition-property:transform}.sc-carousel__arrow-container.svelte-uwo0yk{padding:5px;box-sizing:border-box;display:flex;align-items:center;justify-content:center}.sc-carousel-progress__container.svelte-uwo0yk{width:100%;height:5px;background-color:var(--sc-color-rgb-light-50p);position:absolute;bottom:0}.sc-carousel-button{all:unset;cursor:pointer}.sc-carousel-button:focus{outline:5px auto}",
      map: null
    };
    Carousel = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let loaded = [];
      let currentPageIndex;
      let progressValue;
      let offset = 0;
      let durationMs = 0;
      let pagesCount = 1;
      const [{ data, progressManager }, methods, service] = createCarousel((key2, value) => {
        switcher({
          "currentPageIndex": () => currentPageIndex = value,
          "progressValue": () => progressValue = value,
          "offset": () => offset = value,
          "durationMs": () => durationMs = value,
          "pagesCount": () => pagesCount = value,
          "loaded": () => loaded = value
        })(key2);
      });
      const dispatch = createEventDispatcher();
      let { timingFunction = "ease-in-out" } = $$props;
      let { arrows = true } = $$props;
      let { infinite = true } = $$props;
      let { initialPageIndex = 0 } = $$props;
      let { duration = 500 } = $$props;
      let { autoplay = false } = $$props;
      let { autoplayDuration = 3e3 } = $$props;
      let { autoplayDirection = NEXT } = $$props;
      let { pauseOnFocus = false } = $$props;
      let { autoplayProgressVisible = false } = $$props;
      let { dots = true } = $$props;
      let { swiping = true } = $$props;
      let { particlesToShow = 1 } = $$props;
      let { particlesToScroll = 1 } = $$props;
      async function goTo(pageIndex, options2) {
        const animated = get2(options2, "animated", true);
        if (typeof pageIndex !== "number") {
          throw new Error("pageIndex should be a number");
        }
        await methods.showPage(pageIndex, { animated });
      }
      async function goToPrev(options2) {
        const animated = get2(options2, "animated", true);
        await methods.showPrevPage({ animated });
      }
      async function goToNext(options2) {
        const animated = get2(options2, "animated", true);
        await methods.showNextPage({ animated });
      }
      let pageWindowWidth = 0;
      let pageWindowElement;
      let particlesContainer;
      const pageWindowElementResizeObserver = createResizeObserver(({ width }) => {
        pageWindowWidth = width;
        data.particleWidth = pageWindowWidth / data.particlesToShow;
        applyParticleSizes({
          particlesContainerChildren: particlesContainer.children,
          particleWidth: data.particleWidth
        });
        methods.offsetPage({ animated: false });
      });
      onDestroy(() => {
        pageWindowElementResizeObserver.disconnect();
        progressManager.reset();
      });
      async function handlePageChange(pageIndex) {
        await methods.showPage(pageIndex, { animated: true });
      }
      if ($$props.timingFunction === void 0 && $$bindings.timingFunction && timingFunction !== void 0)
        $$bindings.timingFunction(timingFunction);
      if ($$props.arrows === void 0 && $$bindings.arrows && arrows !== void 0)
        $$bindings.arrows(arrows);
      if ($$props.infinite === void 0 && $$bindings.infinite && infinite !== void 0)
        $$bindings.infinite(infinite);
      if ($$props.initialPageIndex === void 0 && $$bindings.initialPageIndex && initialPageIndex !== void 0)
        $$bindings.initialPageIndex(initialPageIndex);
      if ($$props.duration === void 0 && $$bindings.duration && duration !== void 0)
        $$bindings.duration(duration);
      if ($$props.autoplay === void 0 && $$bindings.autoplay && autoplay !== void 0)
        $$bindings.autoplay(autoplay);
      if ($$props.autoplayDuration === void 0 && $$bindings.autoplayDuration && autoplayDuration !== void 0)
        $$bindings.autoplayDuration(autoplayDuration);
      if ($$props.autoplayDirection === void 0 && $$bindings.autoplayDirection && autoplayDirection !== void 0)
        $$bindings.autoplayDirection(autoplayDirection);
      if ($$props.pauseOnFocus === void 0 && $$bindings.pauseOnFocus && pauseOnFocus !== void 0)
        $$bindings.pauseOnFocus(pauseOnFocus);
      if ($$props.autoplayProgressVisible === void 0 && $$bindings.autoplayProgressVisible && autoplayProgressVisible !== void 0)
        $$bindings.autoplayProgressVisible(autoplayProgressVisible);
      if ($$props.dots === void 0 && $$bindings.dots && dots !== void 0)
        $$bindings.dots(dots);
      if ($$props.swiping === void 0 && $$bindings.swiping && swiping !== void 0)
        $$bindings.swiping(swiping);
      if ($$props.particlesToShow === void 0 && $$bindings.particlesToShow && particlesToShow !== void 0)
        $$bindings.particlesToShow(particlesToShow);
      if ($$props.particlesToScroll === void 0 && $$bindings.particlesToScroll && particlesToScroll !== void 0)
        $$bindings.particlesToScroll(particlesToScroll);
      if ($$props.goTo === void 0 && $$bindings.goTo && goTo !== void 0)
        $$bindings.goTo(goTo);
      if ($$props.goToPrev === void 0 && $$bindings.goToPrev && goToPrev !== void 0)
        $$bindings.goToPrev(goToPrev);
      if ($$props.goToNext === void 0 && $$bindings.goToNext && goToNext !== void 0)
        $$bindings.goToNext(goToNext);
      $$result.css.add(css10);
      {
        {
          dispatch("pageChange", currentPageIndex);
        }
      }
      {
        {
          data.infinite = infinite;
        }
      }
      {
        {
          data.durationMsInit = duration;
        }
      }
      {
        {
          data.autoplay = autoplay;
        }
      }
      {
        {
          data.autoplayDuration = autoplayDuration;
        }
      }
      {
        {
          data.autoplayDirection = autoplayDirection;
        }
      }
      {
        {
          data.pauseOnFocus = pauseOnFocus;
        }
      }
      {
        {
          data.particlesToShowInit = particlesToShow;
        }
      }
      {
        {
          data.particlesToScrollInit = particlesToScroll;
        }
      }
      return `<div class="sc-carousel__carousel-container svelte-uwo0yk"><div class="sc-carousel__content-container svelte-uwo0yk">${arrows ? `${slots.prev ? slots.prev({
        showPrevPage: methods.showPrevPage,
        loaded,
        currentPageIndex
      }) : `
        <div class="sc-carousel__arrow-container svelte-uwo0yk">${validate_component(Arrow, "Arrow").$$render(
        $$result,
        {
          direction: "prev",
          disabled: !infinite && currentPageIndex === 0
        },
        {},
        {}
      )}</div>
      `}` : ``}
    <div class="sc-carousel__pages-window svelte-uwo0yk"${add_attribute("this", pageWindowElement, 0)}><div class="sc-carousel__pages-container svelte-uwo0yk" style="${"transform: translateX(" + escape(offset, true) + "px); transition-duration: " + escape(durationMs, true) + "ms; transition-timing-function: " + escape(timingFunction, true) + ";"}"${add_attribute("this", particlesContainer, 0)}>${slots.default ? slots.default({ loaded, currentPageIndex }) : ``}</div>
      ${autoplayProgressVisible ? `<div class="sc-carousel-progress__container svelte-uwo0yk">${validate_component(Progress, "Progress").$$render($$result, { value: progressValue }, {}, {})}</div>` : ``}</div>
    ${arrows ? `${slots.next ? slots.next({
        showNextPage: methods.showNextPage,
        loaded,
        currentPageIndex
      }) : `
        <div class="sc-carousel__arrow-container svelte-uwo0yk">${validate_component(Arrow, "Arrow").$$render(
        $$result,
        {
          direction: "next",
          disabled: !infinite && currentPageIndex === pagesCount - 1
        },
        {},
        {}
      )}</div>
      `}` : ``}</div>
  ${dots ? `${slots.dots ? slots.dots({
        currentPageIndex,
        pagesCount,
        showPage: handlePageChange,
        loaded
      }) : `
      ${validate_component(Dots, "Dots").$$render($$result, { pagesCount, currentPageIndex }, {}, {})}
    `}` : ``}
</div>`;
    });
  }
});

// .svelte-kit/output/server/entries/pages/contact/_page.svelte.js
var page_svelte_exports3 = {};
__export(page_svelte_exports3, {
  default: () => Page3
});
async function GET() {
  return new Response(null, { status: 200 });
}
var css$25, Button, css$17, CarouselDefault, css11, Page3;
var init_page_svelte3 = __esm({
  ".svelte-kit/output/server/entries/pages/contact/_page.svelte.js"() {
    init_index3();
    init_devalue();
    init_Hero();
    init_Row();
    init_Col();
    init_SEOMetaData();
    init_ButtonLink();
    init_TextWithLineBreaks();
    init_Carousel();
    css$25 = {
      code: 'button.svelte-zc8ai1{position:relative;display:inline-block;width:100%;margin:1rem auto;padding:1rem 3rem;background:var(--background-color);border:none;border-radius:30px;color:var(--link-color);line-height:18px;font-size:18px;text-align:center;text-decoration:none;transition:all 0.25s ease-out;z-index:1}button.svelte-zc8ai1:hover{cursor:pointer;box-shadow:#444444 0.2rem 0.3rem 0.3rem;color:#fff}button.svelte-zc8ai1::before{position:absolute;content:"";top:0;right:0;bottom:0;left:0;background:linear-gradient(90deg,rgba(173,235,239,1) 0%, rgba(41,57,122,1) 30%, rgba(218,47,92,1) 70%, rgba(255,193,38,1) 100%);z-index:-1;transition:opacity 0.5s linear;opacity:0;border-radius:30px}button.svelte-zc8ai1:hover::before{opacity:1}',
      map: null
    };
    Button = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { type } = $$props;
      let { text: text2 } = $$props;
      let { background_color } = $$props;
      let { color = "" } = $$props;
      if (background_color === "") {
        background_color = "#fff";
      }
      if (color === "") {
        color = "#29397a";
      }
      if ($$props.type === void 0 && $$bindings.type && type !== void 0)
        $$bindings.type(type);
      if ($$props.text === void 0 && $$bindings.text && text2 !== void 0)
        $$bindings.text(text2);
      if ($$props.background_color === void 0 && $$bindings.background_color && background_color !== void 0)
        $$bindings.background_color(background_color);
      if ($$props.color === void 0 && $$bindings.color && color !== void 0)
        $$bindings.color(color);
      $$result.css.add(css$25);
      return `<button${add_attribute("type", type, 0)} style="${"--link-color: " + escape(color, true) + "; --background-color: " + escape(background_color, true) + ";"}" class="svelte-zc8ai1">${escape(text2)}
  </button>`;
    });
    css$17 = {
      code: "img.svelte-wayqns{height:100%;object-fit:contain;object-position:center}@media only screen and (max-width: 768px){img.svelte-wayqns{margin:0 auto}}",
      map: null
    };
    CarouselDefault = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let images = [];
      $$result.css.add(css$17);
      return `${validate_component(Carousel, "Carousel").$$render($$result, { autoplay: true }, {}, {
        default: () => {
          return `${each(images, (image) => {
            return `<div><img${add_attribute("src", image.url, 0)}${add_attribute("alt", image.description, 0)} class="svelte-wayqns">
    </div>`;
          })}`;
        }
      })}`;
    });
    css11 = {
      code: "h1.svelte-1r6ek7i.svelte-1r6ek7i{font-weight:400;text-align:left;margin-bottom:0.5rem}p.svelte-1r6ek7i.svelte-1r6ek7i{font-weight:900;color:#29387a}.form-group.svelte-1r6ek7i label.svelte-1r6ek7i{font-weight:800}.form-control.svelte-1r6ek7i.svelte-1r6ek7i{border:none;border-radius:0;border-bottom:1px solid #000;margin-bottom:1rem}.tagline.svelte-1r6ek7i.svelte-1r6ek7i{font-family:'PolySans Median', Arial, Helvetica, sans-serif;color:#d93561;text-transform:uppercase}.duplex-container.svelte-1r6ek7i.svelte-1r6ek7i{display:grid;grid-template-columns:1fr 2fr}.right-container.svelte-1r6ek7i.svelte-1r6ek7i{display:grid;margin:0 auto 0 6rem;padding:4rem 0}.left-container.svelte-1r6ek7i.svelte-1r6ek7i{padding:0}.row-reverse.svelte-1r6ek7i.svelte-1r6ek7i,.row-reverse.svelte-1r6ek7i .right-container.svelte-1r6ek7i{transform:scaleX(-1)}.row-reverse.svelte-1r6ek7i .right-container.svelte-1r6ek7i{grid-template-rows:1fr auto;padding:4rem;align-self:center}.row-reverse.small-image .right-container.svelte-1r6ek7i .svelte-1r6ek7i{text-align:right;align-self:self-end;margin-left:auto}.duplex-container.svelte-1r6ek7i h3.big{font-size:4.5rem;color:#29397a;margin-bottom:2rem}.duplex-container.svelte-1r6ek7i h3{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-weight:500;font-size:4rem;margin-bottom:0.25rem;align-self:self-end}.duplex-container.svelte-1r6ek7i h3.small{font-family:'PolySans Neutral', Arial, Helvetica, sans-serif;font-weight:500;font-size:3rem;margin-bottom:0.25rem;align-self:self-end}.duplex-container.svelte-1r6ek7i p{font-family:'PolySans Slim', Arial, Helvetica, sans-serif;font-size:1.125rem;font-weight:500;line-height:1.5rem;letter-spacing:0.25px;margin:1rem 0;text-align:left;align-self:center}.duplex-container.svelte-1r6ek7i ol:first-of-type > li > p:not(ol li ol li p){font-family:'PolySans Slim', Arial, Helvetica, sans-serif;font-size:4.5rem}.duplex-container.svelte-1r6ek7i p b{font-family:'PolySans Median', Arial, Helvetica, sans-serif}.duplex-container.svelte-1r6ek7i ul li p{margin:0.5rem 0}.duplex-container.svelte-1r6ek7i h5 b{color:#d93561}.normal-image.svelte-1r6ek7i.svelte-1r6ek7i{padding:3rem 0}.normal-image.svelte-1r6ek7i .left-container.svelte-1r6ek7i{max-width:420px;margin:0 auto}.duplex-container.svelte-1r6ek7i ol{list-style:none;counter-reset:numList}.duplex-container.svelte-1r6ek7i ol li{position:relative}.duplex-container.svelte-1r6ek7i ol:first-child > li::before{counter-increment:numList;content:counter(numList);float:left;position:absolute;left:-50px;top:0.5rem;font:bold 1rem sans-serif;text-align:center;color:#fff;line-height:2rem;width:2rem;height:2rem;background:#29397a;-moz-border-radius:100%;border-radius:100%}.duplex.svelte-1r6ek7i .sc-carousel__arrow-container {display:none}.duplex.svelte-1r6ek7i .sc-carousel__pages-container img{width:100%;height:100%}.duplex.svelte-1r6ek7i .sc-carousel-dots__container{display:none !important}@media only screen and (max-width: 768px){.duplex-container.svelte-1r6ek7i p{text-align:center;align-self:normal}.row-reverse.small-image .right-container.svelte-1r6ek7i .svelte-1r6ek7i{text-align:center;align-self:auto;margin:1rem auto}.row-reverse.svelte-1r6ek7i .right-container.svelte-1r6ek7i,.right-container.svelte-1r6ek7i.svelte-1r6ek7i{width:100%;padding:3rem}.right-container.svelte-1r6ek7i.svelte-1r6ek7i{margin:4rem auto;text-align:center}.right-container.svelte-1r6ek7i h3{font-size:3.5rem;margin:1rem auto}.right-container.svelte-1r6ek7i p{max-width:97.5%;margin:0.5rem auto}.right-container.svelte-1r6ek7i a{margin:2rem auto}}@media only screen and (max-width: 991px){.duplex-container.svelte-1r6ek7i.svelte-1r6ek7i{grid-template-columns:1fr}}@media only screen and (max-width: 1250px){.right-container.svelte-1r6ek7i.svelte-1r6ek7i{padding:2rem 1rem}}@media only screen and (max-width: 1680px){.right-container.svelte-1r6ek7i.svelte-1r6ek7i{margin:0 auto;padding:2rem}}",
      map: null
    };
    Page3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let name = "";
      let email = "";
      let company = "";
      let { data } = $$props;
      if ($$props.GET === void 0 && $$bindings.GET && GET !== void 0)
        $$bindings.GET(GET);
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css11);
      return `${validate_component(SEOMetaData, "SEOMetaData").$$render($$result, { data }, {}, {})}

${validate_component(Hero, "Hero").$$render($$result, { data: data.heroBanners[0] }, {}, {})}

${validate_component(Container, "Container").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Row, "Row").$$render(
            $$result,
            {
              class: "justify-content-center align-items-center justify-items-center pt-5 pb-5"
            },
            {},
            {
              default: () => {
                return `${validate_component(Col, "Col").$$render($$result, { csm: 12, md: 6 }, {}, {
                  default: () => {
                    return `<p class="svelte-1r6ek7i">Greetings!</p>
      <h1 class="svelte-1r6ek7i">Feel free to say hi.</h1>`;
                  }
                })}
    ${validate_component(Col, "Col").$$render($$result, { csm: 12, md: 6 }, {}, {
                  default: () => {
                    return `
      <form action="/contact" method="POST" id="contactForm"><div class="form-group svelte-1r6ek7i"><label for="paulInputPassword1" class="svelte-1r6ek7i">Name</label>
          <input type="text" class="form-control svelte-1r6ek7i" id="paulInputPassword1" placeholder="Enter your name..." name="name" required${add_attribute("value", name, 0)}></div>
        <div class="form-group svelte-1r6ek7i"><label for="paulInputEmail1" class="svelte-1r6ek7i">Email address</label>
          <input type="email" class="form-control svelte-1r6ek7i" id="paulInputEmail1" aria-describedby="emailHelp" placeholder="Enter your email address..." name="email" required${add_attribute("value", email, 0)}></div>
        <div class="form-group svelte-1r6ek7i"><label for="paulFormControlSelect1" class="svelte-1r6ek7i">Who are you?</label>
          <select class="form-control svelte-1r6ek7i" id="paulFormControlSelect1" name="who" required><option disabled="" selected="" data-component-field="field" value="">Select...</option><option data-component-field="option" value="Clinician">Clinician</option><option data-component-field="option" value="Patient in need of 
            
            ">Patient in need of help</option><option data-component-field="option" value="Research Stakeholder">Research Stakeholder</option><option data-component-field="option" value="Health Innovator">Health Innovator</option><option data-component-field="option" value="I need Access to Patient App">I need Access to Patient App</option></select></div>
        <div class="form-group svelte-1r6ek7i"><label for="paulInputPassword1" class="svelte-1r6ek7i">Your Company</label>
          <input type="text" class="form-control svelte-1r6ek7i" id="paulInputPassword1" placeholder="Enter your company name..." name="company"${add_attribute("value", company, 0)}></div>
        <div class="form-group svelte-1r6ek7i"><label for="paulFormControlTextarea1" class="svelte-1r6ek7i">How can we help?</label>
          <textarea class="form-control svelte-1r6ek7i" id="paulFormControlTextarea1" rows="3" placeholder="Enter your message..." name="message" required>${escape("")}</textarea></div>
        <div class="form-check"><input type="checkbox" class="form-check-input" id="paulCheck1" required>
          <label class="form-check-label" for="paulCheck1">I ALLOW THIS WEBSITE TO STORE MY SUBMISSION SO THEY CAN RESPOND TO MY INQUIRY.</label>
          <div class="invalid-feedback">You must agree before submitting.</div></div>
        ${validate_component(Button, "Button").$$render(
                      $$result,
                      {
                        type: "submit",
                        text: "Submit",
                        color: "#FFF",
                        background_color: "#29397a"
                      },
                      {},
                      {}
                    )}</form>`;
                  }
                })}`;
              }
            }
          )}`;
        }
      })}

<div class="duplex normal-container container svelte-1r6ek7i"><div class="${"duplex-container normal-image " + escape(data.duplexes[0].containerLayout ? "" : "row-reverse", true) + " svelte-1r6ek7i"}"><div class="left-container svelte-1r6ek7i">${validate_component(CarouselDefault, "CarouselDefault").$$render($$result, {}, {}, {})}</div>
    <div class="right-container svelte-1r6ek7i">${data.duplexes[0].tagline ? `<p class="tagline svelte-1r6ek7i">${escape(data.duplexes[0].tagline)}</p>` : ``}
      ${data.duplexes[0].headline ? `<h3 class="svelte-1r6ek7i">${validate_component(TextWithLineBreaks, "TextWithLineBreaks").$$render($$result, { inputText: data.duplexes[0].headline }, {}, {})}</h3>` : ``}
      ${data.duplexes[0].bodyText ? `<p class="svelte-1r6ek7i"><!-- HTML_TAG_START -->${data.duplexes[0].bodyText}<!-- HTML_TAG_END --></p>` : ``}
      ${data.duplexes[0].ctaText != null ? `${validate_component(ButtonLink, "ButtonLink").$$render(
        $$result,
        {
          text: data.duplexes[0].ctaText || "Learn More",
          path: data.duplexes[0].targetPage ? `${data.duplexes[0].targetPage}` : "/contact",
          color: "#FFF",
          background_color: "#D93561",
          ariaText: data.duplexes[0].ctaText,
          ariaLink: data.duplexes[0].targetPage
        },
        {},
        {}
      )}` : ``}</div></div>
</div>`;
    });
  }
});

// .svelte-kit/output/server/nodes/4.js
var __exports5 = {};
__export(__exports5, {
  component: () => component5,
  fonts: () => fonts5,
  imports: () => imports5,
  index: () => index5,
  server: () => page_server_exports2,
  server_id: () => server_id3,
  stylesheets: () => stylesheets5
});
var index5, component_cache5, component5, server_id3, imports5, stylesheets5, fonts5;
var init__5 = __esm({
  ".svelte-kit/output/server/nodes/4.js"() {
    init_page_server2();
    index5 = 4;
    component5 = async () => component_cache5 ??= (await Promise.resolve().then(() => (init_page_svelte3(), page_svelte_exports3))).default;
    server_id3 = "src/routes/contact/+page.server.js";
    imports5 = ["_app/immutable/nodes/4.8acba0fd.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/paths.85fe2585.js", "_app/immutable/chunks/Hero.1fb25a1f.js", "_app/immutable/chunks/ButtonLink.2b86eb1a.js", "_app/immutable/chunks/TextWithLineBreaks.a14c0ba8.js", "_app/immutable/chunks/Row.7099f54b.js", "_app/immutable/chunks/Col.92dd6345.js", "_app/immutable/chunks/SEOMetaData.b746ec36.js", "_app/immutable/chunks/Carousel.305d93bd.js"];
    stylesheets5 = ["_app/immutable/assets/4.717b8588.css", "_app/immutable/assets/Hero.4a3cbd69.css", "_app/immutable/assets/ButtonLink.e5fc3fc9.css", "_app/immutable/assets/Carousel.f76ac12e.css"];
    fonts5 = [];
  }
});

// .svelte-kit/output/server/entries/pages/home/_page.server.js
var page_server_exports3 = {};
__export(page_server_exports3, {
  load: () => load5
});
async function load5() {
  const response = await contentfulFetch(query3);
  if (!response.ok) {
    throw error2(404, {
      message: `Mistakes were made: Error ${response.status} - ${response.statusText} 
      ${response.url}`
    });
  }
  const { data } = await response.json();
  const { items: pageContentItems } = data.pageCollection.items[0].pageContentCollection;
  const processedItems = pageContentItems.map((item) => {
    if (item) {
      const processingFunction = processingFunctions3[item.__typename];
      return processingFunction ? { ...processingFunction(item), componentType: item.__typename } : item;
    } else {
      return {};
    }
  });
  const pageContent = processedItems.map((item) => {
    return {
      type: item.componentType,
      data: {
        heroBanners: item.componentType === "ComponentHeroBanner" ? [item] : [],
        dynamicDuplexes: item.componentType === "ComponentDynamicDuplex" ? [item] : [],
        duplexes: item.componentType === "ComponentDuplex" ? [item] : [],
        infoBlocks: item.componentType === "ComponentInfoBlock" && item.infoBlockConfig ? [item] : [],
        logoRacks: item.componentType === "ComponentLogoRack" ? [item] : [],
        carousels: item.componentType === "ComponentCarousel" ? [item] : [],
        faqs: item.componentType === "ComponentFaq" ? [item] : []
      }
    };
  });
  const seoData = processSEOTags3(data.pageCollection.items[0].seoMetadata);
  return {
    pageContent,
    seoData
  };
}
var import_rich_text_html_renderer3, query3, processHeroBanner3, processSEOTags3, processCarousel, processDuplex3, processDynamicDuplex, processInfoBlock2, processLogoRack2, processFaq2, processingFunctions3;
var init_page_server3 = __esm({
  ".svelte-kit/output/server/entries/pages/home/_page.server.js"() {
    init_chunks();
    import_rich_text_html_renderer3 = __toESM(require_rich_text_html_renderer_es5(), 1);
    init_contentful_fetch();
    query3 = `
{
  pageCollection(limit: 1) {
    items {
      pageContentCollection {
        items {
          __typename
          ... on ComponentCarousel {
						quote1 {
              json
            }
            quote2 {
              json
            }
            quote3 {
              json
            }
            quoteSource1 {
              name
              avatar {
                url
                description
              }
            }
            quoteSource2 {
              name
              avatar {
                url
                description
              }
            }
            quoteSource3 {
              name
              avatar {
                url
                description
              }
            }
            image1 {
              url
              description
            }
            image2 {
              url
              description
            }
            image3 {
              url
              description
            }
            configuration
            ctaText
            targetPage{
              ... on Page {
                slug
              }
              ... on HowItWorks {
                slug
              }
              ... on AboutPage {
                slug
              }
              ... on NewsPage {
                slug
              }
              ... on ContactPage {
                slug
              }
              ... on ServicesPage {
                slug
              }
            }
          }
          ... on ComponentHeroBanner {
            page
            headline
            subline
            ctaText
            contentStyle
            bodyText {
              json
            }
            image {
              url
              description
            }
            targetPage {
              path
            }
          }
          ... on ComponentFaq {
            question0
            question1
            question2
            question3
            question4
            question5
            question6
            question7
            question8
            question9
            answer0 { json }
            answer1 { json }
            answer2 { json }
            answer3 { json }
            answer4 { json }
            answer5 { json }
            answer6 { json }
            answer7 { json }
            answer8 { json }
            answer9 { json }
          }
          ... on ComponentLogoRack {
            logoHeadline1
            logoHeadline2
            logoHeadline3
            logoHeadline4
            logoHeadline5
            logoHeadline6
            logoText1 { json }
            logoText2 { json }
            logoText3 { json }
            logoText4 { json }
            logoText5 { json }
            logoText6 { json }
            logoImage1 { url, description }
            logoImage2 { url, description }
            logoImage3 { url, description }
            logoImage4 { url, description }
            logoImage5 { url, description }
            logoImage6 { url, description }
            tagline
            header
            divider
            logoSize
            logosPerRow
            paddingOptions
            backgroundColor
          }
          ... on ComponentDynamicDuplex {
            headline
            bodyText {json}
            image{
              url
              description
            }
            headline2
            bodyText2 {json}
            image2{
              url
              description
            }
            headline3
            bodyText3 {json}
            image3{
              url
              description
            }
            ctaText
            targetPage{
              ... on Page {
                slug
              }
              ... on HowItWorks {
                slug
              }
              ... on AboutPage {
                slug
              }
              ... on NewsPage {
                slug
              }
              ... on ContactPage {
                slug
              }
              ... on ServicesPage {
                slug
              }
            }
          }
          ... on ComponentDuplex {
            tagline
            headline
            ctaText
            containerLayout
            containerSize
            bodyText {
              json
            }
            image{
              url
              description
            }
            targetPage{
              __typename
              ... on Page {
                slug
              }
              ... on HowItWorks {
                slug
              }
              ... on AboutPage {
                slug
              }
              ... on NewsPage {
                slug
              }
              ... on ContactPage {
                slug
              }
              ... on ServicesPage {
                slug
              }
            }
          }
          ... on ComponentInfoBlock {
            tagline
            headline
            subline
            ctaText
            infoBlockConfig
            copyAlignment
            copyBackground
            paddingOptions
            divider
            block1Body {
              json
            }
            block2Body {
              json
            }
            block1Image {
              url
              description
            }
            block2Image {
              url
              description
            }
            ctaLink {
              ... on Page {
                slug
              }
              ... on HowItWorks {
                slug
              }
              ... on AboutPage {
                slug
              }
              ... on NewsPage {
                slug
              }
              ... on ContactPage {
                slug
              }
              ... on ServicesPage {
                slug
              }
            }
          }
        }
      }
      seo{
        title
        metaDescription
        ogTitle
        ogDescription	
        ogImage {
          url
        }
      }
    }
  }
}
`;
    processHeroBanner3 = (item) => {
      var _a, _b;
      return {
        ...item,
        bodyText: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_a = item.bodyText) == null ? void 0 : _a.json) ?? ""),
        targetPage: ((_b = item.targetPage) == null ? void 0 : _b.path) ?? ""
      };
    };
    processSEOTags3 = (item) => {
      return { ...item };
    };
    processCarousel = (item) => {
      var _a, _b, _c, _d, _e;
      let targetPageSlug = ((_a = item.targetPage) == null ? void 0 : _a.slug) ?? "";
      if (((_b = item.targetPage) == null ? void 0 : _b.__typename) === "ServicesPage") {
        targetPageSlug = "/services/" + targetPageSlug;
      }
      return {
        ...item,
        quote1: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_c = item.quote1) == null ? void 0 : _c.json) ?? ""),
        quote2: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_d = item.quote2) == null ? void 0 : _d.json) ?? ""),
        quote3: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_e = item.quote3) == null ? void 0 : _e.json) ?? ""),
        targetPage: targetPageSlug
      };
    };
    processDuplex3 = (item) => {
      var _a, _b, _c;
      let targetPageSlug = ((_a = item.targetPage) == null ? void 0 : _a.slug) ?? "";
      if (((_b = item.targetPage) == null ? void 0 : _b.__typename) === "ServicesPage") {
        targetPageSlug = "/services/" + targetPageSlug;
      }
      return {
        ...item,
        bodyText: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_c = item.bodyText) == null ? void 0 : _c.json) ?? ""),
        targetPage: targetPageSlug,
        containerSize: item.containerSize ?? ""
      };
    };
    processDynamicDuplex = (item) => {
      var _a, _b, _c, _d, _e;
      let targetPageSlug = ((_a = item.targetPage) == null ? void 0 : _a.slug) ?? "";
      if (((_b = item.targetPage) == null ? void 0 : _b.__typename) === "ServicesPage") {
        targetPageSlug = "/services/" + targetPageSlug;
      }
      return {
        ...item,
        bodyText: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_c = item.bodyText) == null ? void 0 : _c.json) ?? ""),
        bodyText2: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_d = item.bodyText2) == null ? void 0 : _d.json) ?? ""),
        bodyText3: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_e = item.bodyText3) == null ? void 0 : _e.json) ?? ""),
        targetPage: targetPageSlug,
        containerSize: item.containerSize ?? ""
      };
    };
    processInfoBlock2 = (item) => {
      var _a, _b;
      return {
        ...item,
        content1: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_a = item.block1Body) == null ? void 0 : _a.json) ?? ""),
        content2: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_b = item.block2Body) == null ? void 0 : _b.json) ?? "")
      };
    };
    processLogoRack2 = (item) => {
      var _a, _b, _c, _d, _e, _f;
      return {
        ...item,
        logoText1: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_a = item.logoText1) == null ? void 0 : _a.json) ?? ""),
        logoText2: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_b = item.logoText2) == null ? void 0 : _b.json) ?? ""),
        logoText3: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_c = item.logoText3) == null ? void 0 : _c.json) ?? ""),
        logoText4: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_d = item.logoText4) == null ? void 0 : _d.json) ?? ""),
        logoText5: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_e = item.logoText5) == null ? void 0 : _e.json) ?? ""),
        logoText6: (0, import_rich_text_html_renderer3.documentToHtmlString)(((_f = item.logoText6) == null ? void 0 : _f.json) ?? "")
      };
    };
    processFaq2 = (item) => {
      return { ...item };
    };
    processingFunctions3 = {
      "ComponentHeroBanner": processHeroBanner3,
      "ComponentDuplex": processDuplex3,
      "ComponentDynamicDuplex": processDynamicDuplex,
      "ComponentInfoBlock": processInfoBlock2,
      "ComponentLogoRack": processLogoRack2,
      "ComponentFaq": processFaq2,
      "ComponentCarousel": processCarousel
    };
  }
});

// .svelte-kit/output/server/entries/pages/home/_page.svelte.js
var page_svelte_exports4 = {};
__export(page_svelte_exports4, {
  default: () => Page4
});
function getComponentData2(item) {
  switch (item.type) {
    case "ComponentHeroBanner":
      return { data: item.data.heroBanners[0] };
    case "ComponentDuplex":
      return { data: item.data.duplexes[0] };
    case "ComponentDynamicDuplex":
      return { data: item.data.dynamicDuplexes[0] };
    case "ComponentCarousel":
      return { data: item.data.carousels[0] };
    case "ComponentInfoBlock":
      return { data: item.data.infoBlocks[0] };
    case "ComponentLogoRack":
      return { data: item.data.logoRacks[0] };
    case "ComponentFaq":
      return { data: item.data.faqs };
    default:
      return {};
  }
}
var css$26, CarouselItem, css$18, CustomCarouselItem, FaArrowCircleRight, FaArrowCircleLeft, css12, CarouselWrapper, Page4;
var init_page_svelte4 = __esm({
  ".svelte-kit/output/server/entries/pages/home/_page.svelte.js"() {
    init_index3();
    init_Hero();
    init_Carousel();
    init_IconBase();
    init_ButtonLink();
    init_DynamicDuplex();
    init_Faq();
    init_Duplex();
    init_SEOMetaData();
    css$26 = {
      code: ".carousel.svelte-1atzm64 p.svelte-1atzm64{font-family:'PolySans Neutral';font-size:2rem;line-height:2.5rem;padding:0 5rem}.carousel.svelte-1atzm64 span.svelte-1atzm64{font-family:'PolySans Neutral';font-size:1.125rem}.carousel-avatar.svelte-1atzm64.svelte-1atzm64{display:inline-block;height:2.5rem;width:2.5em;margin:0 0.75rem;border-radius:50%;background-position:center;background-repeat:no-repeat;background-size:contain}",
      map: null
    };
    CarouselItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      var _a, _b, _c, _d;
      let { entry } = $$props;
      if ($$props.entry === void 0 && $$bindings.entry && entry !== void 0)
        $$bindings.entry(entry);
      $$result.css.add(css$26);
      return `<div class="carousel svelte-1atzm64"><p class="svelte-1atzm64">${entry.quote !== null ? `<!-- HTML_TAG_START -->${entry.quote}<!-- HTML_TAG_END -->` : ``}</p>
  <div class="flex-center-center">${entry.image !== null ? `<img class="carousel-avatar svelte-1atzm64" src="${escape((_a = entry.image) == null ? void 0 : _a.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", (_b = entry.image) == null ? void 0 : _b.description, 0)}>` : `<img class="carousel-avatar svelte-1atzm64" src="${escape((_c = entry.quoteSource) == null ? void 0 : _c.avatar.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", (_d = entry.quoteSource) == null ? void 0 : _d.avatar.description, 0)}>`}
    ${entry.quoteSource !== null ? `<span class="svelte-1atzm64">${escape(entry.quoteSource.name)}</span>` : ``}</div>
</div>`;
    });
    css$18 = {
      code: ".carousel.svelte-ff5ueg p.svelte-ff5ueg{font-family:'PolySans Neutral';font-size:2rem;line-height:2.5rem}.carousel.svelte-ff5ueg span.svelte-ff5ueg{font-family:'PolySans Neutral';font-size:1.125rem}.half.svelte-ff5ueg.svelte-ff5ueg{background:#fff;color:#000}.custom.svelte-ff5ueg .quote.svelte-ff5ueg{padding:0 2rem;text-align:left}.carousel-avatar.svelte-ff5ueg.svelte-ff5ueg{display:inline-block;height:2.5rem;width:2.5em;margin:0 0.75rem;border-radius:50%;background-position:center;background-repeat:no-repeat;background-size:contain}.flex-center-center.svelte-ff5ueg.svelte-ff5ueg{display:flex;flex-direction:column;height:100%}.carousel-image.svelte-ff5ueg.svelte-ff5ueg,.quote.svelte-ff5ueg.svelte-ff5ueg{flex:0 0 50%;max-height:200px}.carousel-image.svelte-ff5ueg.svelte-ff5ueg{padding:2.5rem;margin-top:2rem}",
      map: null
    };
    CustomCarouselItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      var _a, _b, _c, _d;
      let { entry } = $$props;
      if ($$props.entry === void 0 && $$bindings.entry && entry !== void 0)
        $$bindings.entry(entry);
      $$result.css.add(css$18);
      return `<div class="custom carousel svelte-ff5ueg">${entry.image !== null ? `<div class="flex-center-center half svelte-ff5ueg"><img class="carousel-image svelte-ff5ueg" src="${escape((_a = entry.image) == null ? void 0 : _a.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", (_b = entry.image) == null ? void 0 : _b.description, 0)}>
      ${entry.quote !== null ? `<p class="quote svelte-ff5ueg"><!-- HTML_TAG_START -->${entry.quote}<!-- HTML_TAG_END --></p>` : ``}</div>` : `<div class="flex quote svelte-ff5ueg">${entry.quote !== null ? `<p class="svelte-ff5ueg"><!-- HTML_TAG_START -->${entry.quote}<!-- HTML_TAG_END --></p>` : ``}
      <img class="carousel-avatar svelte-ff5ueg" src="${escape((_c = entry.quoteSource) == null ? void 0 : _c.avatar.url, true) + "?fm=webp&q=80"}"${add_attribute("alt", (_d = entry.quoteSource) == null ? void 0 : _d.avatar.description, 0)}>
      ${entry.quoteSource !== null ? `<span class="svelte-ff5ueg">${escape(entry.quoteSource.name)}</span>` : ``}</div>`}

</div>`;
    });
    FaArrowCircleRight = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return `${validate_component(IconBase, "IconBase").$$render($$result, Object.assign({}, { viewBox: "0 0 512 512" }, $$props), {}, {
        default: () => {
          return `<path d="M256 8c137 0 248 111 248 248S393 504 256 504 8 393 8 256 119 8 256 8zm-28.9 143.6l75.5 72.4H120c-13.3 0-24 10.7-24 24v16c0 13.3 10.7 24 24 24h182.6l-75.5 72.4c-9.7 9.3-9.9 24.8-.4 34.3l11 10.9c9.4 9.4 24.6 9.4 33.9 0L404.3 273c9.4-9.4 9.4-24.6 0-33.9L271.6 106.3c-9.4-9.4-24.6-9.4-33.9 0l-11 10.9c-9.5 9.6-9.3 25.1.4 34.4z"></path>`;
        }
      })}`;
    });
    FaArrowCircleLeft = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return `${validate_component(IconBase, "IconBase").$$render($$result, Object.assign({}, { viewBox: "0 0 512 512" }, $$props), {}, {
        default: () => {
          return `<path d="M256 504C119 504 8 393 8 256S119 8 256 8s248 111 248 248-111 248-248 248zm28.9-143.6L209.4 288H392c13.3 0 24-10.7 24-24v-16c0-13.3-10.7-24-24-24H209.4l75.5-72.4c9.7-9.3 9.9-24.8.4-34.3l-11-10.9c-9.4-9.4-24.6-9.4-33.9 0L107.7 239c-9.4 9.4-9.4 24.6 0 33.9l132.7 132.7c9.4 9.4 24.6 9.4 33.9 0l11-10.9c9.5-9.5 9.3-25-.4-34.3z"></path>`;
        }
      })}`;
    });
    css12 = {
      code: ".custom.container.svelte-m7b8em.svelte-m7b8em{display:flex;position:relative;background-color:#29397a;color:#fff;padding:6rem 4rem 10rem 4rem;margin:6rem auto}.custom.svelte-m7b8em .top.svelte-m7b8em{display:flex}.custom.svelte-m7b8em .top img.svelte-m7b8em{height:40px;width:40px}.custom.svelte-m7b8em .top p.svelte-m7b8em{max-width:180px;padding:0 20px;margin:0}.custom.svelte-m7b8em .bottom.svelte-m7b8em{display:flex;flex-direction:column;text-align:left;height:calc(100% - 2.5rem);justify-content:center;vertical-align:middle}.custom.svelte-m7b8em .bottom p.svelte-m7b8em{font-size:1.75rem;color:rgba(173, 235, 239, 0.3)}.custom.svelte-m7b8em .bottom .active.svelte-m7b8em{color:#ADEBEF}.custom.svelte-m7b8em .left-container.svelte-m7b8em{flex:1;max-width:300px}.custom.svelte-m7b8em .right-container.svelte-m7b8em{flex:2;width:calc(100% - 300px)}.custom.svelte-m7b8em .right-container .ctaLink.svelte-m7b8em{position:absolute;bottom:3rem;right:4rem}.custom.svelte-m7b8em .right-container .ctaLink.svelte-m7b8em a:hover{color:#fff}.custom.svelte-m7b8em .right-container .ctaLink.svelte-m7b8em a{background:#adebef;color:#000}.custom.svelte-m7b8em .carousel-wrapper.svelte-m7b8em{padding:0}.custom.svelte-m7b8em button.svelte-m7b8em{position:absolute;left:0;bottom:-5rem}.custom.svelte-m7b8em button.svelte-m7b8em:last-child{left:3rem}.custom.svelte-m7b8em svg{color:#adebef}.carousel-wrapper.svelte-m7b8em.svelte-m7b8em{margin:0 auto;padding:6rem 2rem;font-size:1rem;text-align:center}.carousel-wrapper.svelte-m7b8em button.svelte-m7b8em{background:transparent;border:none}.icon.svelte-m7b8em.svelte-m7b8em{height:2rem;width:2rem;color:#29397a}.icon.svelte-m7b8em.svelte-m7b8em:hover{cursor:pointer}.custom.svelte-m7b8em .sc-carousel-dots__container{display:none !important}@media only screen and (max-width: 550px){.custom.container.svelte-m7b8em.svelte-m7b8em{padding:0rem 0rem 10rem 0rem}.custom.svelte-m7b8em button.svelte-m7b8em{left:1rem}.custom.svelte-m7b8em button.svelte-m7b8em:last-child{left:4rem}}@media only screen and (max-width: 768px){.custom.svelte-m7b8em .left-container.svelte-m7b8em{display:none}.custom.svelte-m7b8em .right-container.svelte-m7b8em{max-width:100%}}@media only screen and (max-width: 991px){.custom.container.svelte-m7b8em.svelte-m7b8em{max-width:100%;margin:0}.custom.svelte-m7b8em .carousel p p{font-size:1.25rem;line-height:1.5rem}}@media only screen and (max-width: 1200px){.custom.svelte-m7b8em .carousel p p{font-size:1.25rem;line-height:1.25rem;padding:inherit}}",
      map: null
    };
    CarouselWrapper = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let carousel;
      let { data } = $$props;
      let quotes = [
        {
          quote: data.quote1,
          image: data.image1,
          quoteSource: data.quoteSource1
        },
        {
          quote: data.quote2,
          image: data.image2,
          quoteSource: data.quoteSource2
        },
        {
          quote: data.quote3,
          image: data.image3,
          quoteSource: data.quoteSource3
        }
      ];
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css12);
      let $$settled;
      let $$rendered;
      do {
        $$settled = true;
        $$rendered = `${data.configuration ? `<div class="container"><div class="carousel-wrapper svelte-m7b8em">${validate_component(Carousel, "Carousel").$$render(
          $$result,
          {
            autoplay: "true",
            autoplayDuration: "10000",
            this: carousel
          },
          {
            this: ($$value) => {
              carousel = $$value;
              $$settled = false;
            }
          },
          {
            next: ({ showPrevPage, showNextPage }) => {
              return `<button class="flex-center-center svelte-m7b8em" slot="next"><div class="icon svelte-m7b8em">${validate_component(FaArrowCircleRight, "FaArrowCircleRight").$$render($$result, {}, {}, {})}</div></button>`;
            },
            prev: ({ showPrevPage, showNextPage }) => {
              return `<button class="flex-center-center svelte-m7b8em" slot="prev"><div class="icon svelte-m7b8em">${validate_component(FaArrowCircleLeft, "FaArrowCircleLeft").$$render($$result, {}, {}, {})}</div></button>`;
            },
            default: ({ showPrevPage, showNextPage }) => {
              return `${each(quotes, (entry) => {
                return `${validate_component(CarouselItem, "CarouselItem").$$render($$result, { entry }, {}, {})}`;
              })}`;
            }
          }
        )}</div></div>` : `<div class="container custom svelte-m7b8em"><div class="left-container svelte-m7b8em"><div class="top svelte-m7b8em"><img src="https://images.ctfassets.net/qhzqj9nbcut3/1zjqDdEWirjNiucHFkZtT4/e219d5c3df350b959e2ae43a4f8ee3f8/redLotus.png?h=250" alt="A logo of a red lotus." class="svelte-m7b8em">
        <p class="svelte-m7b8em">Don&#39;t just take our word for it...</p></div>
      <div class="bottom svelte-m7b8em"><p class="${["svelte-m7b8em", "active"].join(" ").trim()}">For Lorem</p>
        <p class="${["svelte-m7b8em", ""].join(" ").trim()}">For Ipsum</p>
        <p class="${["svelte-m7b8em", ""].join(" ").trim()}">For Slipsum</p></div></div>
    <div class="right-container svelte-m7b8em"><div class="carousel-wrapper svelte-m7b8em">${validate_component(Carousel, "Carousel").$$render(
          $$result,
          {
            autoplay: "true",
            autoplayDuration: "10000",
            this: carousel
          },
          {
            this: ($$value) => {
              carousel = $$value;
              $$settled = false;
            }
          },
          {
            next: ({ showPrevPage, showNextPage }) => {
              return `<button class="flex-center-center svelte-m7b8em" slot="next"><div class="icon svelte-m7b8em">${validate_component(FaArrowCircleRight, "FaArrowCircleRight").$$render($$result, {}, {}, {})}</div></button>`;
            },
            prev: ({ showPrevPage, showNextPage }) => {
              return `<button class="flex-center-center svelte-m7b8em" slot="prev"><div class="icon svelte-m7b8em">${validate_component(FaArrowCircleLeft, "FaArrowCircleLeft").$$render($$result, {}, {}, {})}</div></button>`;
            },
            default: ({ showPrevPage, showNextPage }) => {
              return `${each(quotes, (entry) => {
                return `${validate_component(CustomCarouselItem, "CustomCarouselItem").$$render($$result, { entry }, {}, {})}`;
              })}`;
            }
          }
        )}
        <div class="ctaLink svelte-m7b8em">${validate_component(ButtonLink, "ButtonLink").$$render(
          $$result,
          {
            text: data.ctaText || "Learn More",
            path: data.targetPage ? `${data.targetPage}` : "/contact",
            color: "#FFF",
            background_color: "#D93561",
            ariaText: data.ctaText,
            ariaLink: data.targetPage
          },
          {},
          {}
        )}</div></div></div></div>`}`;
      } while (!$$settled);
      return $$rendered;
    });
    Page4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { data } = $$props;
      const components = {
        ComponentHeroBanner: Hero,
        ComponentCarousel: CarouselWrapper,
        ComponentDuplex: Duplex,
        ComponentDynamicDuplex: DynamicDuplex,
        ComponentInfoBlock: InfoBlock,
        ComponentLogoRack: LogoRack,
        ComponentFaq: Faq
      };
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      return `${each(data.pageContent, (item, index13) => {
        return `${validate_component(components[item.type] || missing_component, "svelte:component").$$render($$result, Object.assign({}, getComponentData2(item)), {}, {})}`;
      })}

${validate_component(SEOMetaData, "SEOMetaData").$$render($$result, { data }, {}, {})}`;
    });
  }
});

// .svelte-kit/output/server/nodes/5.js
var __exports6 = {};
__export(__exports6, {
  component: () => component6,
  fonts: () => fonts6,
  imports: () => imports6,
  index: () => index6,
  server: () => page_server_exports3,
  server_id: () => server_id4,
  stylesheets: () => stylesheets6
});
var index6, component_cache6, component6, server_id4, imports6, stylesheets6, fonts6;
var init__6 = __esm({
  ".svelte-kit/output/server/nodes/5.js"() {
    init_page_server3();
    index6 = 5;
    component6 = async () => component_cache6 ??= (await Promise.resolve().then(() => (init_page_svelte4(), page_svelte_exports4))).default;
    server_id4 = "src/routes/home/+page.server.js";
    imports6 = ["_app/immutable/nodes/5.a9bf5c60.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/Hero.1fb25a1f.js", "_app/immutable/chunks/ButtonLink.2b86eb1a.js", "_app/immutable/chunks/TextWithLineBreaks.a14c0ba8.js", "_app/immutable/chunks/Carousel.305d93bd.js", "_app/immutable/chunks/IconBase.b7ed1dc6.js", "_app/immutable/chunks/DynamicDuplex.2b6ef304.js", "_app/immutable/chunks/singletons.0e91b02d.js", "_app/immutable/chunks/paths.85fe2585.js", "_app/immutable/chunks/Faq.d36da7da.js", "_app/immutable/chunks/stores.483a6c70.js", "_app/immutable/chunks/Row.7099f54b.js", "_app/immutable/chunks/Duplex.a6bac538.js", "_app/immutable/chunks/SEOMetaData.b746ec36.js"];
    stylesheets6 = ["_app/immutable/assets/5.1e7a32a0.css", "_app/immutable/assets/Hero.4a3cbd69.css", "_app/immutable/assets/ButtonLink.e5fc3fc9.css", "_app/immutable/assets/Carousel.f76ac12e.css", "_app/immutable/assets/IconBase.6bf551a2.css", "_app/immutable/assets/DynamicDuplex.afb562d8.css", "_app/immutable/assets/Faq.7ac5e4bc.css", "_app/immutable/assets/Duplex.bb61849e.css"];
    fonts6 = [];
  }
});

// .svelte-kit/output/server/entries/pages/how-it-works/_page.server.js
var page_server_exports4 = {};
__export(page_server_exports4, {
  load: () => load6
});
async function load6() {
  const response = await contentfulFetch(query4);
  if (!response.ok) {
    throw error2(404, {
      message: `Mistakes were made: Error ${response.status} - ${response.statusText} 
      ${response.url}`
    });
  }
  const { data } = await response.json();
  const { items: pageContentItems } = data.howItWorksCollection.items[0].pageContentCollection;
  const processedItems = pageContentItems.map((item) => {
    const processingFunction = processingFunctions4[item.__typename];
    return processingFunction ? { ...processingFunction(item), componentType: item.__typename } : item;
  });
  const pageContent = processedItems.map((item) => {
    return {
      type: item.componentType,
      data: {
        heroBanners: item.componentType === "ComponentHeroBanner" ? [item] : [],
        duplexes: item.componentType === "ComponentDuplex" ? [item] : [],
        infoBlocks: item.componentType === "ComponentInfoBlock" && item.infoBlockConfig ? [item] : [],
        logoRacks: item.componentType === "ComponentLogoRack" ? [item] : [],
        youtube: item.componentType === "ComponentYouTube" ? [item] : [],
        faqs: item.componentType === "ComponentFaq" ? [item] : []
      }
    };
  });
  const seoData = processSEOTags4(data.howItWorksCollection.items[0].seoMetadata);
  return {
    pageContent,
    seoData
  };
}
var import_rich_text_html_renderer4, query4, processHeroBanner4, processDuplex4, processInfoBlock3, processSEOTags4, processLogoRack3, processYouTube, processFaq3, processingFunctions4;
var init_page_server4 = __esm({
  ".svelte-kit/output/server/entries/pages/how-it-works/_page.server.js"() {
    init_chunks();
    import_rich_text_html_renderer4 = __toESM(require_rich_text_html_renderer_es5(), 1);
    init_contentful_fetch();
    query4 = `
{
  howItWorksCollection(limit: 1) {
    items {
      pageContentCollection {
        items {
          __typename
          ... on ComponentHeroBanner {
            page
            headline
            subline
            ctaText
            contentStyle
            bodyText {
              json
            }
            image {
              url
              description
            }
            targetPage {
              path
            }
          }
          ... on ComponentFaq {
            question0
            question1
            question2
            question3
            question4
            question5
            question6
            question7
            question8
            question9
            answer0 { json }
            answer1 { json }
            answer2 { json }
            answer3 { json }
            answer4 { json }
            answer5 { json }
            answer6 { json }
            answer7 { json }
            answer8 { json }
            answer9 { json }
          }
          ... on ComponentLogoRack {
            logoHeadline1
            logoHeadline2
            logoHeadline3
            logoHeadline4
            logoHeadline5
            logoHeadline6
            logoText1 { json }
            logoText2 { json }
            logoText3 { json }
            logoText4 { json }
            logoText5 { json }
            logoText6 { json }
            logoImage1 { url, description }
            logoImage2 { url, description }
            logoImage3 { url, description }
            logoImage4 { url, description }
            logoImage5 { url, description }
            logoImage6 { url, description }
            tagline
            header
            divider
            logoSize
            logosPerRow
            paddingOptions
            backgroundColor
          }
          ... on ComponentDuplex {
            tagline
            headline
            ctaText
            containerLayout
            containerSize
            bodyText {
              json
            }
            image{
              url
              description
            }
            targetPage{
              __typename
              ... on Page {
                slug
              }
              ... on HowItWorks {
                slug
              }
              ... on AboutPage {
                slug
              }
              ... on NewsPage {
                slug
              }
              ... on ContactPage {
                slug
              }
              ... on ServicesPage {
                slug
              }
            }
          }
          ... on ComponentInfoBlock {
            headline
            subline
            ctaText
            infoBlockConfig
            copyBackground
            paddingOptions
            divider
            block1Body {
              json
            }
            block2Body {
              json
            }
            block1Image {
              url
              description
            }
            block2Image {
              url
              description
            }
            ctaLink {
              ... on Page {
                slug
              }
              ... on HowItWorks {
                slug
              }
              ... on AboutPage {
                slug
              }
              ... on NewsPage {
                slug
              }
              ... on ContactPage {
                slug
              }
              ... on ServicesPage {
                slug
              }
            }
          }
          ...on ComponentYouTube {
            youTubeId
            youTubeImage {
              url
              description
            }
            contentTitle
            contentSubtitle
          }
        }
      }
      seoMetadata {
        __typename
        title
        metaDescription
        ogTitle
        ogDescription	
        ogImage {
          url
        }
      }
    }
  }
}
`;
    processHeroBanner4 = (item) => {
      var _a, _b;
      return {
        ...item,
        bodyText: (0, import_rich_text_html_renderer4.documentToHtmlString)(((_a = item.bodyText) == null ? void 0 : _a.json) ?? ""),
        targetPage: ((_b = item.targetPage) == null ? void 0 : _b.path) ?? ""
      };
    };
    processDuplex4 = (item) => {
      var _a, _b, _c;
      let targetPageSlug = ((_a = item.targetPage) == null ? void 0 : _a.slug) ?? "";
      if (((_b = item.targetPage) == null ? void 0 : _b.__typename) === "ServicesPage") {
        targetPageSlug = "/services/" + targetPageSlug;
      }
      return {
        ...item,
        bodyText: (0, import_rich_text_html_renderer4.documentToHtmlString)(((_c = item.bodyText) == null ? void 0 : _c.json) ?? ""),
        targetPage: targetPageSlug
      };
    };
    processInfoBlock3 = (item) => {
      var _a, _b;
      return {
        ...item,
        content1: (0, import_rich_text_html_renderer4.documentToHtmlString)(((_a = item.block1Body) == null ? void 0 : _a.json) ?? ""),
        content2: (0, import_rich_text_html_renderer4.documentToHtmlString)(((_b = item.block2Body) == null ? void 0 : _b.json) ?? "")
      };
    };
    processSEOTags4 = (item) => {
      return { ...item };
    };
    processLogoRack3 = (item) => {
      var _a, _b, _c, _d, _e, _f;
      return {
        ...item,
        logoText1: (0, import_rich_text_html_renderer4.documentToHtmlString)(((_a = item.logoText1) == null ? void 0 : _a.json) ?? ""),
        logoText2: (0, import_rich_text_html_renderer4.documentToHtmlString)(((_b = item.logoText2) == null ? void 0 : _b.json) ?? ""),
        logoText3: (0, import_rich_text_html_renderer4.documentToHtmlString)(((_c = item.logoText3) == null ? void 0 : _c.json) ?? ""),
        logoText4: (0, import_rich_text_html_renderer4.documentToHtmlString)(((_d = item.logoText4) == null ? void 0 : _d.json) ?? ""),
        logoText5: (0, import_rich_text_html_renderer4.documentToHtmlString)(((_e = item.logoText5) == null ? void 0 : _e.json) ?? ""),
        logoText6: (0, import_rich_text_html_renderer4.documentToHtmlString)(((_f = item.logoText6) == null ? void 0 : _f.json) ?? "")
      };
    };
    processYouTube = (item) => {
      return { ...item };
    };
    processFaq3 = (item) => {
      return { ...item };
    };
    processingFunctions4 = {
      "ComponentHeroBanner": processHeroBanner4,
      "ComponentDuplex": processDuplex4,
      "ComponentInfoBlock": processInfoBlock3,
      "ComponentLogoRack": processLogoRack3,
      "ComponentFaq": processFaq3,
      "ComponentYouTube": processYouTube
    };
  }
});

// .svelte-kit/output/server/entries/pages/how-it-works/_page.svelte.js
var page_svelte_exports5 = {};
__export(page_svelte_exports5, {
  default: () => Page5
});
function getComponentData3(item) {
  switch (item.type) {
    case "ComponentHeroBanner":
      return { data: item.data.heroBanners[0] };
    case "ComponentDuplex":
      return { data: item.data.duplexes[0] };
    case "ComponentInfoBlock":
      return { data: item.data.infoBlocks[0] };
    case "ComponentLogoRack":
      return { data: item.data.logoRacks[0] };
    case "ComponentYouTube":
      return { data: item.data.youtube[0] };
    case "ComponentFaq":
      return { data: item.data.faqs };
    default:
      return {};
  }
}
var css$34, Button2, css$27, Image, css$19, Youtube, FaPlayCircle, css13, playOverlay, YoutubeWrapper, Page5;
var init_page_svelte5 = __esm({
  ".svelte-kit/output/server/entries/pages/how-it-works/_page.svelte.js"() {
    init_index3();
    init_Hero();
    init_Faq();
    init_Duplex();
    init_SEOMetaData();
    init_IconBase();
    css$34 = {
      code: "button.svelte-qc0w97{all:unset}button.svelte-qc0w97,.play-button.svelte-qc0w97{display:grid;place-items:center;height:80px;width:80px;position:absolute;top:0;right:0;bottom:0;left:0;margin:auto;cursor:pointer}",
      map: null
    };
    Button2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { isCustomPlayButton } = $$props;
      if ($$props.isCustomPlayButton === void 0 && $$bindings.isCustomPlayButton && isCustomPlayButton !== void 0)
        $$bindings.isCustomPlayButton(isCustomPlayButton);
      $$result.css.add(css$34);
      return `${isCustomPlayButton ? `<div class="play-button svelte-qc0w97">${slots.default ? slots.default({}) : ``}</div>` : `<button class="svelte-qc0w97"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" class="iconify iconify--mdi" viewBox="0 0 24 24"><path fill="#ff4e45" d="m10 15 5.19-3L10 9v6m11.56-7.83c.13.47.22 1.1.28 1.9.07.8.1 1.49.1 2.09L22 12c0 2.19-.16 3.8-.44 4.83-.25.9-.83 1.48-1.73 1.73-.47.13-1.33.22-2.65.28-1.3.07-2.49.1-3.59.1L12 19c-4.19 0-6.8-.16-7.83-.44-.9-.25-1.48-.83-1.73-1.73-.13-.47-.22-1.1-.28-1.9-.07-.8-.1-1.49-.1-2.09L2 12c0-2.19.16-3.8.44-4.83.25-.9.83-1.48 1.73-1.73.47-.13 1.33-.22 2.65-.28 1.3-.07 2.49-.1 3.59-.1L12 5c4.19 0 6.8.16 7.83.44.9.25 1.48.83 1.73 1.73Z"></path></svg></button>`}`;
    });
    css$27 = {
      code: "img.svelte-hw9fhp{height:auto;aspect-ratio:var(--aspect-ratio);width:100%}",
      map: null
    };
    Image = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { id = "" } = $$props;
      let { title = "" } = $$props;
      let { altThumb = "" } = $$props;
      let { play = false } = $$props;
      if ($$props.id === void 0 && $$bindings.id && id !== void 0)
        $$bindings.id(id);
      if ($$props.title === void 0 && $$bindings.title && title !== void 0)
        $$bindings.title(title);
      if ($$props.altThumb === void 0 && $$bindings.altThumb && altThumb !== void 0)
        $$bindings.altThumb(altThumb);
      if ($$props.play === void 0 && $$bindings.play && play !== void 0)
        $$bindings.play(play);
      $$result.css.add(css$27);
      return `<img src="${"https://i.ytimg.com/vi/" + escape(id, true) + "/" + escape(altThumb ? "hqdefault" : "maxresdefault", true) + ".jpg"}"${add_attribute("title", title, 0)} alt="${"Youtube video: " + escape(title, true)}" referrerpolicy="no-referrer" class="svelte-hw9fhp">`;
    });
    css$19 = {
      code: '.you__tube.svelte-w0t24e.svelte-w0t24e{position:relative;aspect-ratio:1.76991;overflow:hidden}.v__title.svelte-w0t24e.svelte-w0t24e{position:absolute;top:0;width:100%;background:linear-gradient(to bottom, hsla(0, 0%, 0%, 0.1), transparent);pointer-events:none}.v__title.svelte-w0t24e h3.svelte-w0t24e{font-family:var(\n      --title-font-family,\n      "Segoe UI",\n      Geneva,\n      Verdana,\n      sans-serif\n    );color:var(--title-color, #ffffff);padding:0 2ch;font-weight:400;text-shadow:0px 1px 3px var(--title-shadow-color, rgb(0, 0, 0, 0.2))}.b__overlay.svelte-w0t24e.svelte-w0t24e{position:absolute;top:0;left:0;width:100%;aspect-ratio:var(--aspect-ratio);cursor:pointer;transition:var(--overlay-transition, all 250ms ease-in-out)}.you__tube.svelte-w0t24e:hover .b__overlay.svelte-w0t24e{background:var(--overlay-bg-color, #00000030)}',
      map: null
    };
    Youtube = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$slots = compute_slots(slots);
      let { id = null } = $$props;
      let { altThumb = false } = $$props;
      let { animations = true } = $$props;
      let title = "";
      let play = false;
      const isCustomPlayButton = $$slots.default;
      const isCustomThumbnail = $$slots.thumbnail;
      if ($$props.id === void 0 && $$bindings.id && id !== void 0)
        $$bindings.id(id);
      if ($$props.altThumb === void 0 && $$bindings.altThumb && altThumb !== void 0)
        $$bindings.altThumb(altThumb);
      if ($$props.animations === void 0 && $$bindings.animations && animations !== void 0)
        $$bindings.animations(animations);
      $$result.css.add(css$19);
      return `<div class="you__tube svelte-w0t24e" style="${"--aspect-ratio:" + escape("16/9", true)}"${add_attribute("title", title, 0)}>${`${isCustomThumbnail ? `${slots.thumbnail ? slots.thumbnail({}) : ``}` : `${validate_component(Image, "Image").$$render($$result, { id, title, altThumb, play }, {}, {})}`}
    <div class="b__overlay svelte-w0t24e"></div>
    <div class="v__title svelte-w0t24e"><h3 class="svelte-w0t24e">${escape(title)}</h3></div>`}
  ${`${validate_component(Button2, "Button").$$render($$result, { isCustomPlayButton }, {}, {
        default: () => {
          return `${slots.default ? slots.default({}) : ``}`;
        }
      })}`}
</div>`;
    });
    FaPlayCircle = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return `${validate_component(IconBase, "IconBase").$$render($$result, Object.assign({}, { viewBox: "0 0 512 512" }, $$props), {}, {
        default: () => {
          return `<path d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm115.7 272l-176 101c-15.8 8.8-35.7-2.5-35.7-21V152c0-18.4 19.8-29.8 35.7-21l176 107c16.4 9.2 16.4 32.9 0 42z"></path>`;
        }
      })}`;
    });
    css13 = {
      code: ".youtube-wrapper.svelte-1t4cfuu.svelte-1t4cfuu{align-items:center;display:flex;flex-direction:row;position:relative;z-index:auto;padding:20px}.background.svelte-1t4cfuu.svelte-1t4cfuu{position:absolute;top:0;right:0;bottom:0;left:0;background-position:center;background-size:cover}.container.svelte-1t4cfuu.svelte-1t4cfuu{display:flex;flex:100%;align-items:flex-start;flex-direction:column;justify-content:center;padding:0;position:relative;z-index:200;height:100%}p.svelte-1t4cfuu.svelte-1t4cfuu{font-family:'PolySans Median', Arial, sans-serif;font-size:1.25rem;color:#D93561;margin:1rem 0}h3.svelte-1t4cfuu.svelte-1t4cfuu{font-family:'PolySans Neutral', Arial, sans-serif;font-size:2.5rem;font-weight:500}.content-container.svelte-1t4cfuu.svelte-1t4cfuu{display:flex;flex-direction:row;justify-content:space-between;align-items:center;margin-right:auto;margin-left:0;text-align:left;justify-content:flex-start}.copy.svelte-1t4cfuu.svelte-1t4cfuu{width:100%}.copy.svelte-1t4cfuu>div.svelte-1t4cfuu{max-width:23rem;margin:0 auto}.youtube.svelte-1t4cfuu.svelte-1t4cfuu{position:relative;height:100%;width:100%}.youtube.svelte-1t4cfuu iframe{position:absolute;top:0;left:0;width:100%;height:100%}.youtube-wrapper.svelte-1t4cfuu.svelte-1t4cfuu{width:100%;flex:0 0 50%}.row.svelte-1t4cfuu.svelte-1t4cfuu{align-items:center;margin-left:0;margin-right:0;width:100%;padding:80px 0}.b__overlay, .v__title, .you__tube img{opacity:0}.play-button{height:7em;width:7em}.play_overlay.svelte-1t4cfuu.svelte-1t4cfuu{display:block;position:absolute;background-repeat:no-repeat;background-size:contain;background-position:center;height:100%;width:100%;top:0;right:0;bottom:0;left:0;margin:auto}.play_icon.svelte-1t4cfuu.svelte-1t4cfuu{background-color:transparent;border:none;box-shadow:none;color:rgba(255,255,255,0.8);transition:all .1s ease-in-out;cursor:pointer}.youtube.svelte-1t4cfuu:hover .play_icon.svelte-1t4cfuu{color:#fff}@media(max-width:768px){.content-container.svelte-1t4cfuu.svelte-1t4cfuu{display:block;text-align:center}p.svelte-1t4cfuu.svelte-1t4cfuu{opacity:0}}",
      map: null
    };
    playOverlay = "/playIconBackground.png";
    YoutubeWrapper = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { data } = $$props;
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css13);
      return `<section class="youtube-wrapper .sb-section svelte-1t4cfuu"><div alt="" style="${"background-image: url(" + escape(data.youTubeImage.url, true) + "?fm=webp&q=80);"}" class="background svelte-1t4cfuu"></div>
  <div class="container svelte-1t4cfuu"><div class="row svelte-1t4cfuu"><div class="content-container svelte-1t4cfuu"><div class="copy svelte-1t4cfuu"><div class="svelte-1t4cfuu"><p class="svelte-1t4cfuu">${escape(data.contentTitle)}</p>
            <h3 class="svelte-1t4cfuu">${escape(data.contentSubtitle)}</h3></div></div>
        <div class="youtube svelte-1t4cfuu"><span class="play_overlay svelte-1t4cfuu" style="${"background-image: url(" + escape(playOverlay, true) + ");"}"></span>

          ${validate_component(Youtube, "Youtube").$$render($$result, { id: data.youTubeId }, {}, {
        default: () => {
          return `<button class="play_icon svelte-1t4cfuu" aria-label="A button play a YouTube video.">${validate_component(FaPlayCircle, "FaPlayCircle").$$render($$result, {}, {}, {})}</button>`;
        }
      })}</div></div></div></div>
</section>`;
    });
    Page5 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { data } = $$props;
      const components = {
        ComponentHeroBanner: Hero,
        ComponentDuplex: Duplex,
        ComponentInfoBlock: InfoBlock,
        ComponentLogoRack: LogoRack,
        ComponentYouTube: YoutubeWrapper,
        ComponentFaq: Faq
      };
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      return `${each(data.pageContent, (item, index13) => {
        return `${validate_component(components[item.type] || missing_component, "svelte:component").$$render($$result, Object.assign({}, getComponentData3(item)), {}, {})}`;
      })}

  ${validate_component(SEOMetaData, "SEOMetaData").$$render($$result, { data }, {}, {})}`;
    });
  }
});

// .svelte-kit/output/server/nodes/6.js
var __exports7 = {};
__export(__exports7, {
  component: () => component7,
  fonts: () => fonts7,
  imports: () => imports7,
  index: () => index7,
  server: () => page_server_exports4,
  server_id: () => server_id5,
  stylesheets: () => stylesheets7
});
var index7, component_cache7, component7, server_id5, imports7, stylesheets7, fonts7;
var init__7 = __esm({
  ".svelte-kit/output/server/nodes/6.js"() {
    init_page_server4();
    index7 = 6;
    component7 = async () => component_cache7 ??= (await Promise.resolve().then(() => (init_page_svelte5(), page_svelte_exports5))).default;
    server_id5 = "src/routes/how-it-works/+page.server.js";
    imports7 = ["_app/immutable/nodes/6.91af3e09.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/Hero.1fb25a1f.js", "_app/immutable/chunks/ButtonLink.2b86eb1a.js", "_app/immutable/chunks/TextWithLineBreaks.a14c0ba8.js", "_app/immutable/chunks/Faq.d36da7da.js", "_app/immutable/chunks/stores.483a6c70.js", "_app/immutable/chunks/singletons.0e91b02d.js", "_app/immutable/chunks/paths.85fe2585.js", "_app/immutable/chunks/Row.7099f54b.js", "_app/immutable/chunks/Duplex.a6bac538.js", "_app/immutable/chunks/SEOMetaData.b746ec36.js", "_app/immutable/chunks/IconBase.b7ed1dc6.js"];
    stylesheets7 = ["_app/immutable/assets/6.c8895396.css", "_app/immutable/assets/Hero.4a3cbd69.css", "_app/immutable/assets/ButtonLink.e5fc3fc9.css", "_app/immutable/assets/Faq.7ac5e4bc.css", "_app/immutable/assets/Duplex.bb61849e.css", "_app/immutable/assets/IconBase.6bf551a2.css"];
    fonts7 = [];
  }
});

// .svelte-kit/output/server/entries/pages/legal/_page.server.js
var page_server_exports5 = {};
__export(page_server_exports5, {
  load: () => load7
});
async function load7({ params }) {
  const query5 = `
  {
    legalPageCollection(limit: 1) {
      items {
        pageContentCollection {
          items {
            __typename
            ... on ComponentHeroBanner {
              page
              headline
              subline
              ctaText
              contentStyle
              bodyText {
                json
              }
              image {
                url
                description
              }
              targetPage {
                path
              }
            }
            ... on ComponentLogoRack {
              logoHeadline1
              logoHeadline2
              logoHeadline3
              logoHeadline4
              logoHeadline5
              logoHeadline6
              logoText1 { json }
              logoText2 { json }
              logoText3 { json }
              logoText4 { json }
              logoText5 { json }
              logoText6 { json }
              logoImage1 { url, description }
              logoImage2 { url, description }
              logoImage3 { url, description }
              logoImage4 { url, description }
              logoImage5 { url, description }
              logoImage6 { url, description }
              tagline
              header
              divider
              logoSize
              logosPerRow
              paddingOptions
              backgroundColor
            }
            ... on ComponentInfoBlock {
              headline
              subline
              ctaText
              infoBlockConfig
              copyBackground
              paddingOptions
              divider
              block1Body {
                json
              }
              block2Body {
                json
              }
              block1Image {
                url
                description
              }
              block2Image {
                url
                description
              }
              ctaLink {
                ... on Page {
                  slug
                }
                ... on HowItWorks {
                  slug
                }
                ... on AboutPage {
                  slug
                }
                ... on NewsPage {
                  slug
                }
                ... on ContactPage {
                  slug
                }
                ... on ServicesPage {
                  slug
                }
              }
            }
            ... on ComponentDuplex {
              tagline
              headline
              ctaText
              containerLayout
              containerSize
              bodyText {
                json
              }
              image{
                url
                description
              }
              targetPage{
                __typename
                ... on Page {
                  slug
                }
                ... on HowItWorks {
                  slug
                }
                ... on AboutPage {
                  slug
                }
                ... on NewsPage {
                  slug
                }
                ... on ContactPage {
                  slug
                }
                ... on ServicesPage {
                  slug
                }
              }
            }
          }
        }
      }
    }
  }
`;
  const processHeroBanner5 = (item) => {
    var _a, _b;
    return {
      ...item,
      bodyText: (0, import_rich_text_html_renderer5.documentToHtmlString)(((_a = item.bodyText) == null ? void 0 : _a.json) ?? ""),
      targetPage: ((_b = item.targetPage) == null ? void 0 : _b.path) ?? ""
    };
  };
  const processDuplex5 = (item) => {
    var _a, _b;
    return {
      ...item,
      bodyText: (0, import_rich_text_html_renderer5.documentToHtmlString)(((_a = item.bodyText) == null ? void 0 : _a.json) ?? ""),
      targetPage: ((_b = item.targetPage) == null ? void 0 : _b.slug) ?? "",
      containerSize: item.containerSize ?? ""
    };
  };
  const processInfoBlock4 = (item) => {
    var _a, _b, _c;
    return {
      ...item,
      content1: (0, import_rich_text_html_renderer5.documentToHtmlString)(((_a = item.block1Body) == null ? void 0 : _a.json) ?? ""),
      content2: (0, import_rich_text_html_renderer5.documentToHtmlString)(((_b = item.block2Body) == null ? void 0 : _b.json) ?? ""),
      content3: (0, import_rich_text_html_renderer5.documentToHtmlString)(((_c = item.block3Body) == null ? void 0 : _c.json) ?? "")
    };
  };
  const processLogoRack4 = (item) => {
    var _a, _b, _c, _d, _e, _f;
    return {
      ...item,
      logoText1: (0, import_rich_text_html_renderer5.documentToHtmlString)(((_a = item.logoText1) == null ? void 0 : _a.json) ?? ""),
      logoText2: (0, import_rich_text_html_renderer5.documentToHtmlString)(((_b = item.logoText2) == null ? void 0 : _b.json) ?? ""),
      logoText3: (0, import_rich_text_html_renderer5.documentToHtmlString)(((_c = item.logoText3) == null ? void 0 : _c.json) ?? ""),
      logoText4: (0, import_rich_text_html_renderer5.documentToHtmlString)(((_d = item.logoText4) == null ? void 0 : _d.json) ?? ""),
      logoText5: (0, import_rich_text_html_renderer5.documentToHtmlString)(((_e = item.logoText5) == null ? void 0 : _e.json) ?? ""),
      logoText6: (0, import_rich_text_html_renderer5.documentToHtmlString)(((_f = item.logoText6) == null ? void 0 : _f.json) ?? "")
    };
  };
  const processingFunctions5 = {
    "ComponentHeroBanner": processHeroBanner5,
    "ComponentDuplex": processDuplex5,
    "ComponentInfoBlock": processInfoBlock4,
    "ComponentLogoRack": processLogoRack4
  };
  const response = await contentfulFetch(query5);
  if (!response.ok) {
    throw error2(404, {
      message: `Mistakes were made: Error ${response.status} - ${response.statusText} 
      ${response.url}`
    });
  }
  const { data } = await response.json();
  const { items: pageContentItems } = data.legalPageCollection.items[0].pageContentCollection;
  const processedItems = pageContentItems.map((item) => {
    if (item) {
      const processingFunction = processingFunctions5[item.__typename];
      return processingFunction ? { ...processingFunction(item), componentType: item.__typename } : item;
    } else {
      return {};
    }
  });
  const pageContent = processedItems.map((item) => {
    return {
      type: item.componentType,
      data: {
        heroBanners: item.componentType === "ComponentHeroBanner" ? [item] : [],
        duplexes: item.componentType === "ComponentDuplex" ? [item] : [],
        infoBlocks: item.componentType === "ComponentInfoBlock" && item.infoBlockConfig ? [item] : [],
        logoRacks: item.componentType === "ComponentLogoRack" ? [item] : [],
        faqs: item.componentType === "ComponentFaq" ? [item] : []
      }
    };
  });
  return {
    pageContent
  };
}
var import_rich_text_html_renderer5;
var init_page_server5 = __esm({
  ".svelte-kit/output/server/entries/pages/legal/_page.server.js"() {
    init_chunks();
    import_rich_text_html_renderer5 = __toESM(require_rich_text_html_renderer_es5(), 1);
    init_contentful_fetch();
  }
});

// .svelte-kit/output/server/entries/pages/legal/_page.svelte.js
var page_svelte_exports6 = {};
__export(page_svelte_exports6, {
  default: () => Page6
});
function getComponentData4(item) {
  switch (item.type) {
    case "ComponentHeroBanner":
      return { data: item.data.heroBanners[0] };
    case "ComponentDuplex":
      return { data: item.data.duplexes[0] };
    case "ComponentInfoBlock":
      return { data: item.data.infoBlocks[0] };
    case "ComponentLogoRack":
      return { data: item.data.logoRacks[0] };
    case "ComponentFaq":
      return { data: item.data.faqs };
    default:
      return {};
  }
}
var css14, Page6;
var init_page_svelte6 = __esm({
  ".svelte-kit/output/server/entries/pages/legal/_page.svelte.js"() {
    init_index3();
    init_Hero();
    init_Faq();
    init_Duplex();
    css14 = {
      code: "ol{font-weight:bold;font-family:'PolySans Median'\n  }.infoBlock-wrapper a{color:#adebef}.infoBlock-wrapper a:hover{color:#DA2F5C}.infoBlock-wrapper .copy-container .item{max-width:60rem}.infoBlock-wrapper .copy-container .content.legal{text-align:left}.legal .subline{text-align:center}.legal .content1{width:fit-content;margin:0 auto}.legal .content1 p{margin:inherit}",
      map: null
    };
    Page6 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { data } = $$props;
      const components = {
        ComponentHeroBanner: Hero,
        ComponentDuplex: Duplex,
        ComponentInfoBlock: InfoBlock,
        ComponentLogoRack: LogoRack,
        ComponentFaq: Faq
      };
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css14);
      return `${each(data.pageContent, (item, index13) => {
        return `${validate_component(components[item.type] || missing_component, "svelte:component").$$render($$result, Object.assign({}, getComponentData4(item)), {}, {})}`;
      })}

  `;
    });
  }
});

// .svelte-kit/output/server/nodes/7.js
var __exports8 = {};
__export(__exports8, {
  component: () => component8,
  fonts: () => fonts8,
  imports: () => imports8,
  index: () => index8,
  server: () => page_server_exports5,
  server_id: () => server_id6,
  stylesheets: () => stylesheets8
});
var index8, component_cache8, component8, server_id6, imports8, stylesheets8, fonts8;
var init__8 = __esm({
  ".svelte-kit/output/server/nodes/7.js"() {
    init_page_server5();
    index8 = 7;
    component8 = async () => component_cache8 ??= (await Promise.resolve().then(() => (init_page_svelte6(), page_svelte_exports6))).default;
    server_id6 = "src/routes/legal/+page.server.js";
    imports8 = ["_app/immutable/nodes/7.9b74acc1.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/Hero.1fb25a1f.js", "_app/immutable/chunks/ButtonLink.2b86eb1a.js", "_app/immutable/chunks/TextWithLineBreaks.a14c0ba8.js", "_app/immutable/chunks/Faq.d36da7da.js", "_app/immutable/chunks/stores.483a6c70.js", "_app/immutable/chunks/singletons.0e91b02d.js", "_app/immutable/chunks/paths.85fe2585.js", "_app/immutable/chunks/Row.7099f54b.js", "_app/immutable/chunks/Duplex.a6bac538.js"];
    stylesheets8 = ["_app/immutable/assets/7.84da6503.css", "_app/immutable/assets/Hero.4a3cbd69.css", "_app/immutable/assets/ButtonLink.e5fc3fc9.css", "_app/immutable/assets/Faq.7ac5e4bc.css", "_app/immutable/assets/Duplex.bb61849e.css"];
    fonts8 = [];
  }
});

// .svelte-kit/output/server/entries/pages/news/_page.server.js
var page_server_exports6 = {};
__export(page_server_exports6, {
  load: () => load8
});
async function load8() {
  const query5 = `
    {
      newsPages: newsPageCollection(limit: 7) {
        items {
          slug
          pageContentCollection(limit: 7) {
            items {
              __typename
              ... on NewsArticle {
                headline
                image {
                  url
                }
                previewText {
                  json
                }
                publishDate
              }
            }
          }
        }
      },
      newsFeaturedDuplex: componentDuplexCollection {
        items {
          __typename
          containerLayout
          containerSize
          newsFeatured
          headline
          ctaText
          image {
            url
          }
          targetPage {
            ... on Page {
              slug
            }
            ... on HowItWorks {
              slug
            }
            ... on AboutPage {
              slug
            }
            ... on NewsPage {
              slug
            }
            ... on ContactPage {
              slug
            }
          }
          bodyText {
            json
          }
          sys {
            firstPublishedAt
          }
        }
      }
    }
  `;
  const processNewsArticle = (item) => {
    const previewTextJson = item.previewText.json;
    return {
      ...item,
      previewText: (0, import_rich_text_html_renderer6.documentToHtmlString)(previewTextJson ?? "")
    };
  };
  const processDuplex5 = (item) => {
    var _a, _b;
    return {
      ...item,
      bodyText: (0, import_rich_text_html_renderer6.documentToHtmlString)(((_a = item.bodyText) == null ? void 0 : _a.json) ?? ""),
      targetPage: "/news/" + ((_b = item.targetPage) == null ? void 0 : _b.slug)
    };
  };
  const processingFunctions5 = {
    NewsArticle: processNewsArticle,
    ComponentDuplex: processDuplex5
  };
  const processItem = (item) => {
    if (!item || !item.__typename)
      return item;
    const processingFunction = processingFunctions5[item.__typename];
    return processingFunction ? processingFunction(item) : item;
  };
  const response = await contentfulFetch(query5);
  if (!response.ok) {
    throw error2(404, {
      message: `Mistakes were made: Error ${response.status} - ${response.statusText} 
            ${response.url}`
    });
  }
  const { data } = await response.json();
  const newsFeaturedDuplex = data.newsFeaturedDuplex.items.filter((item) => item.newsFeatured).map(processItem);
  const newsPages = data.newsPages.items.map((page2) => {
    var _a;
    const items = ((_a = page2.pageContentCollection) == null ? void 0 : _a.items) || [];
    const processedPageContent = items.map(processItem);
    return {
      ...page2,
      pageContentCollection: {
        items: processedPageContent
      }
    };
  });
  return {
    newsFeaturedDuplex,
    newsPages
  };
}
var import_rich_text_html_renderer6;
var init_page_server6 = __esm({
  ".svelte-kit/output/server/entries/pages/news/_page.server.js"() {
    init_chunks();
    import_rich_text_html_renderer6 = __toESM(require_rich_text_html_renderer_es5(), 1);
    init_contentful_fetch();
  }
});

// .svelte-kit/output/server/entries/pages/news/_page.svelte.js
var page_svelte_exports7 = {};
__export(page_svelte_exports7, {
  default: () => Page7
});
function formatDate(dateString) {
  let date = new Date(dateString);
  let options2 = {
    year: "numeric",
    month: "long",
    day: "numeric"
  };
  return date.toLocaleDateString("en-US", options2);
}
var css15, Page7;
var init_page_svelte7 = __esm({
  ".svelte-kit/output/server/entries/pages/news/_page.svelte.js"() {
    init_index3();
    init_Row();
    init_Col();
    init_Duplex();
    init_ButtonLink();
    css15 = {
      code: "a.svelte-1f099r1.svelte-1f099r1{display:block;padding:0;margin:0 0 1rem 0;color:#D93561;text-transform:uppercase;text-decoration:none;line-height:1;border-bottom:1px solid #D93561;cursor:pointer;max-width:fit-content;font-family:'PolySans Neutral', Arial, sans-serif}a.svelte-1f099r1.svelte-1f099r1:hover{color:#29397a;border-bottom:2px solid #29397a\n  }p.svelte-1f099r1.svelte-1f099r1{margin:0 0 0.5rem;position:relative;color:rgba(0,0,0,.85);padding:0}.date.svelte-1f099r1.svelte-1f099r1{font-family:'PolySans Neutral', Arial, sans-serif;font-size:0.875rem;color:#636363;margin:1rem 0 0.75rem}h1.svelte-1f099r1.svelte-1f099r1{font-size:4.5rem;text-align:left;font-weight:500;color:#29397a;margin-top:-1rem;max-height:60px;line-height:68px}h2.svelte-1f099r1.svelte-1f099r1{font-weight:400;text-align:left;margin-bottom:0.5rem;color:#29397a;padding:0}h7.svelte-1f099r1.svelte-1f099r1{font-size:1.25rem;line-height:1.75rem;font-family:'PolySans Neutral', Arial, sans-serif;font-weight:500;padding:0}.latestHeader.svelte-1f099r1.svelte-1f099r1{padding-top:1rem}.divider.svelte-1f099r1.svelte-1f099r1{display:block;height:1px;background-color:gray;width:calc(100% - 2rem);margin:1rem 0}.divider-right.svelte-1f099r1.svelte-1f099r1{display:block;height:1px;background-color:gray;width:calc(100% - 2rem);margin:1rem}.divider-full.svelte-1f099r1.svelte-1f099r1{display:block;height:1px;background-color:gray;width:100%;margin:1rem auto 2rem}.divider-full-left.svelte-1f099r1.svelte-1f099r1{display:block;height:1px;background-color:gray;width:100%;margin:1rem auto 2rem -0.75rem}img.svelte-1f099r1.svelte-1f099r1{aspect-ratio:3/2;object-fit:cover}.show.svelte-1f099r1.svelte-1f099r1{display:flex}.custom.container{max-width:1440px}.latest,.more-news{padding:0 1.5rem}.more-news{margin-bottom:6rem}@media(max-width: 768px){.divider.svelte-1f099r1.svelte-1f099r1{margin-left:0.8rem;width:calc(100% - 1.6rem)}.divider-full.svelte-1f099r1.svelte-1f099r1{margin:1rem 0 1rem}img.svelte-1f099r1.svelte-1f099r1{width:100%;max-height:340px;margin:0 auto}.more-news{margin-bottom:0rem}.latestHeader.svelte-1f099r1.svelte-1f099r1{padding-top:2rem}.latest .row{padding:0\n    }.main-content.svelte-1f099r1 h1.svelte-1f099r1{max-height:40px}}@media(max-width: 905px){h1.svelte-1f099r1.svelte-1f099r1{max-height:fit-content}}@media(max-width: 991px){h1.svelte-1f099r1.svelte-1f099r1{font-size:3rem}}",
      map: null
    };
    Page7 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { data } = $$props;
      let bottomNewsItems = data.newsPages.slice(3).map((item) => {
        const { headline, image, previewText, publishDate } = item.pageContentCollection.items[0];
        return {
          headline,
          image,
          previewText,
          publishDate,
          slug: item.slug
        };
      });
      data.newsPages.sort((a, b) => new Date(b.pageContentCollection.items[0].publishDate) - new Date(a.pageContentCollection.items[0].publishDate));
      let newsPages = data.newsPages.map((page2) => {
        const { headline, image, previewText, publishDate } = page2.pageContentCollection.items[0];
        return {
          headline,
          image,
          previewText,
          publishDate,
          slug: page2.slug
        };
      });
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css15);
      return `${$$result.head += `<!-- HEAD_svelte-py6lxj_START -->${$$result.title = `<title>Paul Health: News</title>`, ""}<meta name="description" content="Find out what's on our radar here at Paul Health."><meta property="og:title" content="Paul Health: News"><meta property="og:description" content="Find out what's on our radar here- at Paul Health."><meta property="og:image" content="/pluto_logo.svg"><meta property="og:type" content="website"><!-- HEAD_svelte-py6lxj_END -->`, ""}

${validate_component(Container, "Container").$$render($$result, { class: "custom" }, {}, {
        default: () => {
          return `${validate_component(Row, "Row").$$render($$result, { style: "margin-top: 3rem;" }, {}, {
            default: () => {
              return `${validate_component(Col, "Col").$$render($$result, { sm: 12, md: 6, lg: 8, class: "latest" }, {}, {
                default: () => {
                  return `<div class="main-content svelte-1f099r1"><h1 class="svelte-1f099r1">Paul Health News</h1>
        <span class="divider-full svelte-1f099r1"></span>
        <img${add_attribute("src", newsPages[0].image.url, 0)}${add_attribute("alt", newsPages[0].headline, 0)} class="svelte-1f099r1">
        <p class="date svelte-1f099r1">${escape(data.newsPages[0].pageContentCollection.items[0].publishDate)}</p>
        <h7 class="svelte-1f099r1">${escape(newsPages[0].headline)}</h7>
        <p class=" svelte-1f099r1"><!-- HTML_TAG_START -->${newsPages[0].previewText}<!-- HTML_TAG_END --></p>
        <a href="${"/news/" + escape(newsPages[0].slug, true)}" class="svelte-1f099r1">READ MORE</a></div>`;
                }
              })}
    ${validate_component(Col, "Col").$$render($$result, { sm: 12, md: 6, lg: 4, class: "latest" }, {}, {
                default: () => {
                  return `${validate_component(Row, "Row").$$render($$result, {}, {}, {
                    default: () => {
                      return `<h2 class="latestHeader svelte-1f099r1">Latest Stories</h2>
        <span class="divider svelte-1f099r1" style="margin-top:0;"></span>
        <p class="date svelte-1f099r1">${escape(data.newsPages[1].pageContentCollection.items[0].publishDate)}</p>
        <h7 class="svelte-1f099r1">${escape(newsPages[1].headline)}</h7>
        <p class=" svelte-1f099r1"><!-- HTML_TAG_START -->${newsPages[1].previewText}<!-- HTML_TAG_END --></p>
        <a href="${"/news/" + escape(newsPages[1].slug, true)}" class="svelte-1f099r1">READ MORE</a>`;
                    }
                  })}
      <span class="divider-full-left svelte-1f099r1" style="margin-left: -0.75rem"></span>
      ${validate_component(Row, "Row").$$render($$result, {}, {}, {
                    default: () => {
                      return `<p class="date svelte-1f099r1">${escape(data.newsPages[2].pageContentCollection.items[0].publishDate)}</p>
        <h7 class="svelte-1f099r1">${escape(newsPages[2].headline)}</h7>
        <p class=" svelte-1f099r1"><!-- HTML_TAG_START -->${newsPages[2].previewText}<!-- HTML_TAG_END --></p>
        <a href="${"/news/" + escape(newsPages[2].slug, true)}" class="svelte-1f099r1">READ MORE</a>`;
                    }
                  })}`;
                }
              })}`;
            }
          })}

  <h2 style="padding: 0 .75rem" class="svelte-1f099r1">More News</h2>
  <span class="divider-right svelte-1f099r1"></span>
  ${validate_component(Row, "Row").$$render($$result, { class: "justify-content-center" }, {}, {
            default: () => {
              return `${validate_component(Col, "Col").$$render(
                $$result,
                {
                  sm: 12,
                  md: 12,
                  lg: 12,
                  class: "more-news"
                },
                {},
                {
                  default: () => {
                    return `${validate_component(Row, "Row").$$render($$result, {}, {}, {
                      default: () => {
                        return `${each(bottomNewsItems, ({ headline, image, previewText, publishDate, slug }) => {
                          return `<div class="show col-12 col-md-6 col-lg-3 mb-2 svelte-1f099r1"><div class="content"><img${add_attribute("src", image.url, 0)}${add_attribute("alt", headline, 0)} style="width:100%" class="svelte-1f099r1">
              <p class="date svelte-1f099r1">${escape(formatDate(publishDate))}</p>
              <b><h7 class="svelte-1f099r1">${escape(headline)}</h7></b>
              <p class="truncate-4 svelte-1f099r1"><!-- HTML_TAG_START -->${previewText}<!-- HTML_TAG_END --></p>
              <a href="${"/news/" + escape(slug, true)}" class="svelte-1f099r1">READ MORE</a></div>
          </div>`;
                        })}
        ${validate_component(ButtonLink, "ButtonLink").$$render(
                          $$result,
                          {
                            text: "Read More News",
                            path: "/news/all",
                            color: "#FFF",
                            background_color: "#29397a",
                            ariaText: "A button that links to the News All page, which displays all news articles on one page",
                            ariaLink: "/news/all"
                          },
                          {},
                          {}
                        )}`;
                      }
                    })}`;
                  }
                }
              )}`;
            }
          })}`;
        }
      })}

<section class="news-duplex-wrapper-wide">${validate_component(Duplex, "Duplex").$$render($$result, { data: data.newsFeaturedDuplex[0] }, {}, {})}
</section>`;
    });
  }
});

// .svelte-kit/output/server/nodes/8.js
var __exports9 = {};
__export(__exports9, {
  component: () => component9,
  fonts: () => fonts9,
  imports: () => imports9,
  index: () => index9,
  server: () => page_server_exports6,
  server_id: () => server_id7,
  stylesheets: () => stylesheets9
});
var index9, component_cache9, component9, server_id7, imports9, stylesheets9, fonts9;
var init__9 = __esm({
  ".svelte-kit/output/server/nodes/8.js"() {
    init_page_server6();
    index9 = 8;
    component9 = async () => component_cache9 ??= (await Promise.resolve().then(() => (init_page_svelte7(), page_svelte_exports7))).default;
    server_id7 = "src/routes/news/+page.server.js";
    imports9 = ["_app/immutable/nodes/8.0aacc556.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/Row.7099f54b.js", "_app/immutable/chunks/Col.92dd6345.js", "_app/immutable/chunks/Duplex.a6bac538.js", "_app/immutable/chunks/ButtonLink.2b86eb1a.js", "_app/immutable/chunks/TextWithLineBreaks.a14c0ba8.js"];
    stylesheets9 = ["_app/immutable/assets/8.3ba5b348.css", "_app/immutable/assets/Duplex.bb61849e.css", "_app/immutable/assets/ButtonLink.e5fc3fc9.css"];
    fonts9 = [];
  }
});

// node_modules/@contentful/rich-text-types/dist/blocks.js
var require_blocks = __commonJS({
  "node_modules/@contentful/rich-text-types/dist/blocks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BLOCKS = void 0;
    var BLOCKS2;
    (function(BLOCKS3) {
      BLOCKS3["DOCUMENT"] = "document";
      BLOCKS3["PARAGRAPH"] = "paragraph";
      BLOCKS3["HEADING_1"] = "heading-1";
      BLOCKS3["HEADING_2"] = "heading-2";
      BLOCKS3["HEADING_3"] = "heading-3";
      BLOCKS3["HEADING_4"] = "heading-4";
      BLOCKS3["HEADING_5"] = "heading-5";
      BLOCKS3["HEADING_6"] = "heading-6";
      BLOCKS3["OL_LIST"] = "ordered-list";
      BLOCKS3["UL_LIST"] = "unordered-list";
      BLOCKS3["LIST_ITEM"] = "list-item";
      BLOCKS3["HR"] = "hr";
      BLOCKS3["QUOTE"] = "blockquote";
      BLOCKS3["EMBEDDED_ENTRY"] = "embedded-entry-block";
      BLOCKS3["EMBEDDED_ASSET"] = "embedded-asset-block";
      BLOCKS3["EMBEDDED_RESOURCE"] = "embedded-resource-block";
      BLOCKS3["TABLE"] = "table";
      BLOCKS3["TABLE_ROW"] = "table-row";
      BLOCKS3["TABLE_CELL"] = "table-cell";
      BLOCKS3["TABLE_HEADER_CELL"] = "table-header-cell";
    })(BLOCKS2 || (exports.BLOCKS = BLOCKS2 = {}));
  }
});

// node_modules/@contentful/rich-text-types/dist/inlines.js
var require_inlines = __commonJS({
  "node_modules/@contentful/rich-text-types/dist/inlines.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.INLINES = void 0;
    var INLINES;
    (function(INLINES2) {
      INLINES2["HYPERLINK"] = "hyperlink";
      INLINES2["ENTRY_HYPERLINK"] = "entry-hyperlink";
      INLINES2["ASSET_HYPERLINK"] = "asset-hyperlink";
      INLINES2["RESOURCE_HYPERLINK"] = "resource-hyperlink";
      INLINES2["EMBEDDED_ENTRY"] = "embedded-entry-inline";
      INLINES2["EMBEDDED_RESOURCE"] = "embedded-resource-inline";
    })(INLINES || (exports.INLINES = INLINES = {}));
  }
});

// node_modules/@contentful/rich-text-types/dist/marks.js
var require_marks = __commonJS({
  "node_modules/@contentful/rich-text-types/dist/marks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MARKS = void 0;
    var MARKS;
    (function(MARKS2) {
      MARKS2["BOLD"] = "bold";
      MARKS2["ITALIC"] = "italic";
      MARKS2["UNDERLINE"] = "underline";
      MARKS2["CODE"] = "code";
      MARKS2["SUPERSCRIPT"] = "superscript";
      MARKS2["SUBSCRIPT"] = "subscript";
    })(MARKS || (exports.MARKS = MARKS = {}));
  }
});

// node_modules/@contentful/rich-text-types/dist/schemaConstraints.js
var require_schemaConstraints = __commonJS({
  "node_modules/@contentful/rich-text-types/dist/schemaConstraints.js"(exports) {
    "use strict";
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.V1_MARKS = exports.V1_NODE_TYPES = exports.TEXT_CONTAINERS = exports.HEADINGS = exports.CONTAINERS = exports.VOID_BLOCKS = exports.TABLE_BLOCKS = exports.LIST_ITEM_BLOCKS = exports.TOP_LEVEL_BLOCKS = void 0;
    var blocks_1 = require_blocks();
    var inlines_1 = require_inlines();
    var marks_1 = require_marks();
    exports.TOP_LEVEL_BLOCKS = [
      blocks_1.BLOCKS.PARAGRAPH,
      blocks_1.BLOCKS.HEADING_1,
      blocks_1.BLOCKS.HEADING_2,
      blocks_1.BLOCKS.HEADING_3,
      blocks_1.BLOCKS.HEADING_4,
      blocks_1.BLOCKS.HEADING_5,
      blocks_1.BLOCKS.HEADING_6,
      blocks_1.BLOCKS.OL_LIST,
      blocks_1.BLOCKS.UL_LIST,
      blocks_1.BLOCKS.HR,
      blocks_1.BLOCKS.QUOTE,
      blocks_1.BLOCKS.EMBEDDED_ENTRY,
      blocks_1.BLOCKS.EMBEDDED_ASSET,
      blocks_1.BLOCKS.EMBEDDED_RESOURCE,
      blocks_1.BLOCKS.TABLE
    ];
    exports.LIST_ITEM_BLOCKS = [
      blocks_1.BLOCKS.PARAGRAPH,
      blocks_1.BLOCKS.HEADING_1,
      blocks_1.BLOCKS.HEADING_2,
      blocks_1.BLOCKS.HEADING_3,
      blocks_1.BLOCKS.HEADING_4,
      blocks_1.BLOCKS.HEADING_5,
      blocks_1.BLOCKS.HEADING_6,
      blocks_1.BLOCKS.OL_LIST,
      blocks_1.BLOCKS.UL_LIST,
      blocks_1.BLOCKS.HR,
      blocks_1.BLOCKS.QUOTE,
      blocks_1.BLOCKS.EMBEDDED_ENTRY,
      blocks_1.BLOCKS.EMBEDDED_ASSET,
      blocks_1.BLOCKS.EMBEDDED_RESOURCE
    ];
    exports.TABLE_BLOCKS = [
      blocks_1.BLOCKS.TABLE,
      blocks_1.BLOCKS.TABLE_ROW,
      blocks_1.BLOCKS.TABLE_CELL,
      blocks_1.BLOCKS.TABLE_HEADER_CELL
    ];
    exports.VOID_BLOCKS = [
      blocks_1.BLOCKS.HR,
      blocks_1.BLOCKS.EMBEDDED_ENTRY,
      blocks_1.BLOCKS.EMBEDDED_ASSET,
      blocks_1.BLOCKS.EMBEDDED_RESOURCE
    ];
    exports.CONTAINERS = (_a = {}, _a[blocks_1.BLOCKS.OL_LIST] = [blocks_1.BLOCKS.LIST_ITEM], _a[blocks_1.BLOCKS.UL_LIST] = [blocks_1.BLOCKS.LIST_ITEM], _a[blocks_1.BLOCKS.LIST_ITEM] = exports.LIST_ITEM_BLOCKS, _a[blocks_1.BLOCKS.QUOTE] = [blocks_1.BLOCKS.PARAGRAPH], _a[blocks_1.BLOCKS.TABLE] = [blocks_1.BLOCKS.TABLE_ROW], _a[blocks_1.BLOCKS.TABLE_ROW] = [blocks_1.BLOCKS.TABLE_CELL, blocks_1.BLOCKS.TABLE_HEADER_CELL], _a[blocks_1.BLOCKS.TABLE_CELL] = [blocks_1.BLOCKS.PARAGRAPH], _a[blocks_1.BLOCKS.TABLE_HEADER_CELL] = [blocks_1.BLOCKS.PARAGRAPH], _a);
    exports.HEADINGS = [
      blocks_1.BLOCKS.HEADING_1,
      blocks_1.BLOCKS.HEADING_2,
      blocks_1.BLOCKS.HEADING_3,
      blocks_1.BLOCKS.HEADING_4,
      blocks_1.BLOCKS.HEADING_5,
      blocks_1.BLOCKS.HEADING_6
    ];
    exports.TEXT_CONTAINERS = __spreadArray([blocks_1.BLOCKS.PARAGRAPH], exports.HEADINGS, true);
    exports.V1_NODE_TYPES = [
      blocks_1.BLOCKS.DOCUMENT,
      blocks_1.BLOCKS.PARAGRAPH,
      blocks_1.BLOCKS.HEADING_1,
      blocks_1.BLOCKS.HEADING_2,
      blocks_1.BLOCKS.HEADING_3,
      blocks_1.BLOCKS.HEADING_4,
      blocks_1.BLOCKS.HEADING_5,
      blocks_1.BLOCKS.HEADING_6,
      blocks_1.BLOCKS.OL_LIST,
      blocks_1.BLOCKS.UL_LIST,
      blocks_1.BLOCKS.LIST_ITEM,
      blocks_1.BLOCKS.HR,
      blocks_1.BLOCKS.QUOTE,
      blocks_1.BLOCKS.EMBEDDED_ENTRY,
      blocks_1.BLOCKS.EMBEDDED_ASSET,
      inlines_1.INLINES.HYPERLINK,
      inlines_1.INLINES.ENTRY_HYPERLINK,
      inlines_1.INLINES.ASSET_HYPERLINK,
      inlines_1.INLINES.EMBEDDED_ENTRY,
      "text"
    ];
    exports.V1_MARKS = [marks_1.MARKS.BOLD, marks_1.MARKS.CODE, marks_1.MARKS.ITALIC, marks_1.MARKS.UNDERLINE];
  }
});

// node_modules/@contentful/rich-text-types/dist/types.js
var require_types = __commonJS({
  "node_modules/@contentful/rich-text-types/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@contentful/rich-text-types/dist/nodeTypes.js
var require_nodeTypes = __commonJS({
  "node_modules/@contentful/rich-text-types/dist/nodeTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@contentful/rich-text-types/dist/emptyDocument.js
var require_emptyDocument = __commonJS({
  "node_modules/@contentful/rich-text-types/dist/emptyDocument.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_DOCUMENT = void 0;
    var blocks_1 = require_blocks();
    exports.EMPTY_DOCUMENT = {
      nodeType: blocks_1.BLOCKS.DOCUMENT,
      data: {},
      content: [
        {
          nodeType: blocks_1.BLOCKS.PARAGRAPH,
          data: {},
          content: [
            {
              nodeType: "text",
              value: "",
              marks: [],
              data: {}
            }
          ]
        }
      ]
    };
  }
});

// node_modules/@contentful/rich-text-types/dist/helpers.js
var require_helpers = __commonJS({
  "node_modules/@contentful/rich-text-types/dist/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isText = exports.isBlock = exports.isInline = void 0;
    var blocks_1 = require_blocks();
    var inlines_1 = require_inlines();
    function hasValue(obj, value) {
      for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
        var key2 = _a[_i];
        if (value === obj[key2]) {
          return true;
        }
      }
      return false;
    }
    function isInline(node) {
      return hasValue(inlines_1.INLINES, node.nodeType);
    }
    exports.isInline = isInline;
    function isBlock(node) {
      return hasValue(blocks_1.BLOCKS, node.nodeType);
    }
    exports.isBlock = isBlock;
    function isText(node) {
      return node.nodeType === "text";
    }
    exports.isText = isText;
  }
});

// node_modules/@contentful/rich-text-types/dist/index.js
var require_dist = __commonJS({
  "node_modules/@contentful/rich-text-types/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.helpers = exports.EMPTY_DOCUMENT = exports.MARKS = exports.INLINES = exports.BLOCKS = void 0;
    var blocks_1 = require_blocks();
    Object.defineProperty(exports, "BLOCKS", { enumerable: true, get: function() {
      return blocks_1.BLOCKS;
    } });
    var inlines_1 = require_inlines();
    Object.defineProperty(exports, "INLINES", { enumerable: true, get: function() {
      return inlines_1.INLINES;
    } });
    var marks_1 = require_marks();
    Object.defineProperty(exports, "MARKS", { enumerable: true, get: function() {
      return marks_1.MARKS;
    } });
    __exportStar(require_schemaConstraints(), exports);
    __exportStar(require_types(), exports);
    __exportStar(require_nodeTypes(), exports);
    var emptyDocument_1 = require_emptyDocument();
    Object.defineProperty(exports, "EMPTY_DOCUMENT", { enumerable: true, get: function() {
      return emptyDocument_1.EMPTY_DOCUMENT;
    } });
    var helpers = __importStar(require_helpers());
    exports.helpers = helpers;
  }
});

// .svelte-kit/output/server/entries/pages/news/_slug_/_page.server.js
var page_server_exports7 = {};
__export(page_server_exports7, {
  load: () => load9
});
async function load9({ params }) {
  const query5 = `
  {
    newsPageCollection(where: {slug: "${params.slug}"}, limit: 1) {
      items {
        pageName
        slug
        articleImage {
          description
          url
        }
        pageContentCollection(limit: 3) {
          items {
            __typename
            ... on NewsArticle {
              headline
              image {
                url
              }
              previewText {
                json
              }
              sys {
                publishedAt
              }
              publishDate
              author {
                name
                avatar {
                  url
                  description
                }
              }
              bodyText {
                json
                links {
                  assets {
                    block {
                      sys {
                        id
                      }
                      url
                    }
                  }
                }
              }
            }
            ... on ComponentDuplex {
              tagline
              headline
              ctaText
              containerLayout
              containerSize
              bodyText {
                json
              }
              image{
                url
                description
              }
              targetPage{
                __typename
                ... on Page {
                  slug
                }
                ... on HowItWorks {
                  slug
                }
                ... on AboutPage {
                  slug
                }
                ... on NewsPage {
                  slug
                }
                ... on ContactPage {
                  slug
                }
                ... on ServicesPage {
                  slug
                }
              }
            }
          }
        }
        seoMetadata {
          __typename
          title
          metaDescription
          ogTitle
          ogDescription	
          ogImage {
            url
          }
        }
      }
    },
     newsFeaturedDuplex: componentDuplexCollection {
      items {
        containerLayout
        containerSize
        newsFeatured
        headline
        ctaText
        image{
          url
        }
        targetPage{
          ... on Page {
            slug
          }
          ... on HowItWorks {
            slug
          }
          ... on AboutPage {
            slug
          }
          ... on NewsPage {
            slug
          }
          ... on ContactPage {
            slug
          }
        }
        bodyText {
          json
        }
        sys {
          firstPublishedAt
        }
      }
    }
  }`;
  const processNewsArticle = (item) => {
    var _a, _b, _c;
    const renderOptions = {
      renderNode: {
        [import_rich_text_types.BLOCKS.EMBEDDED_ASSET]: (node) => {
          const matchingAsset = item.bodyText.links.assets.block.find(
            (asset) => asset.sys.id === node.data.target.sys.id
          );
          return `<img src="${matchingAsset.url}" />`;
        }
      }
    };
    return {
      ...item,
      previewText: (0, import_rich_text_html_renderer7.documentToHtmlString)(((_a = item.previewText) == null ? void 0 : _a.json) ?? ""),
      bodyText: (0, import_rich_text_html_renderer7.documentToHtmlString)(((_b = item.bodyText) == null ? void 0 : _b.json) ?? "", renderOptions),
      targetPage: ((_c = item.targetPage) == null ? void 0 : _c.slug) ?? ""
    };
  };
  const processDuplex5 = (item) => {
    var _a, _b;
    return {
      ...item,
      bodyText: (0, import_rich_text_html_renderer7.documentToHtmlString)(((_a = item.bodyText) == null ? void 0 : _a.json) ?? ""),
      targetPage: ((_b = item.targetPage) == null ? void 0 : _b.slug) ?? "",
      containerSize: item.containerSize ?? ""
    };
  };
  const processingFunctions5 = {
    "NewsArticle": processNewsArticle,
    "ComponentDuplex": processDuplex5
  };
  const response = await contentfulFetch(query5);
  const { data } = await response.json();
  const { items: articles } = data.newsPageCollection;
  if (articles.length === 0) {
    throw error2(404, {
      message: "Article not found"
    });
  }
  const processSEOTags5 = (item) => {
    return { ...item };
  };
  const processedItems = articles[0].pageContentCollection.items.map((item) => {
    const processingFunction = processingFunctions5[item.__typename];
    return processingFunction ? processingFunction(item) : item;
  });
  const newsArticles = processedItems.filter((item) => item.__typename === "NewsArticle");
  const duplexes = processedItems.filter((item) => item.__typename === "ComponentDuplex");
  const newsFeaturedDuplex = data.newsFeaturedDuplex.items.filter((item) => item.newsFeatured);
  const defaultFeatured = newsFeaturedDuplex.length ? newsFeaturedDuplex[0] : data.newsFeaturedDuplex.items[0];
  const seoData = processSEOTags5(data.newsPageCollection.items[0].seoMetadata);
  return {
    article: {
      ...articles[0],
      pageContentCollection: {
        items: newsArticles
      }
    },
    duplexes,
    newsFeaturedDuplex,
    defaultFeatured,
    seoData
  };
}
var import_rich_text_types, import_rich_text_html_renderer7;
var init_page_server7 = __esm({
  ".svelte-kit/output/server/entries/pages/news/_slug_/_page.server.js"() {
    init_chunks();
    import_rich_text_types = __toESM(require_dist(), 1);
    import_rich_text_html_renderer7 = __toESM(require_rich_text_html_renderer_es5(), 1);
    init_contentful_fetch();
  }
});

// .svelte-kit/output/server/entries/pages/news/_slug_/_page.svelte.js
var page_svelte_exports8 = {};
__export(page_svelte_exports8, {
  default: () => Page8
});
function formatDate2(dateString) {
  let date = new Date(dateString);
  let options2 = {
    year: "numeric",
    month: "long",
    day: "numeric"
  };
  return date.toLocaleDateString("en-US", options2);
}
var css16, Page8;
var init_page_svelte8 = __esm({
  ".svelte-kit/output/server/entries/pages/news/_slug_/_page.svelte.js"() {
    init_index3();
    init_Duplex();
    init_ButtonLink();
    init_SEOMetaData();
    css16 = {
      code: "header.svelte-3xt869.svelte-3xt869{display:grid;grid-template-columns:1fr 1fr}figcaption.svelte-3xt869.svelte-3xt869{font-size:.875rem;font-family:Franklin, arial, sans-serif;line-height:1.25;padding:0.75rem 2rem;color:#666666;text-align:center}header.svelte-3xt869 .author-container.svelte-3xt869{display:flex;justify-content:center;align-items:center;flex-direction:column;max-height:100%}header.svelte-3xt869 .author-wrapper.svelte-3xt869{display:flex;justify-content:center;align-items:center;flex-direction:column}header.svelte-3xt869 div h1.svelte-3xt869{font-family:'PolySans Slim', Arial, sans-serif;width:clamp(80%, 100%, 800px);margin:1rem auto;padding:0 2rem;line-height:1.1em;font-size:4rem}.author.svelte-3xt869 img.svelte-3xt869{width:56px;height:56px;border-radius:50%;object-fit:cover;margin:0 auto}.article-body.svelte-3xt869.svelte-3xt869{width:clamp(60%, 100%, 940px);margin:2rem auto;padding:2rem}.timestamp.svelte-3xt869.svelte-3xt869{text-align:center;grid-template-columns:1fr 1fr}.timestamp.svelte-3xt869 span.svelte-3xt869{font-size:.875rem;font-family:Franklin,arial,sans-serif;line-height:1.25;padding:0;color:#666666}.article-body p{font-size:1.25rem;line-height:1.6em}img.svelte-3xt869.svelte-3xt869{height:100%;width:100%;object-fit:cover;aspect-ratio:3/2}.article-body img{max-height:600px;margin:0 auto}@media(max-width: 768px){header.svelte-3xt869.svelte-3xt869{grid-template-columns:1fr;grid-template-rows:1fr}figure.svelte-3xt869.svelte-3xt869{margin-bottom:4rem}figcaption.svelte-3xt869.svelte-3xt869{height:auto}.article-body.svelte-3xt869.svelte-3xt869{margin:1rem auto}}@media(max-width: 1024px){header.svelte-3xt869 div h1.svelte-3xt869{font-size:3rem}}",
      map: null
    };
    Page8 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let renderData;
      let { data } = $$props;
      let image = data.article.articleImage.url;
      let caption = data.article.articleImage.description;
      let headline = data.article.pageContentCollection.items[0].headline;
      let author = data.article.pageContentCollection.items[0].author.name;
      let avatar = data.article.pageContentCollection.items[0].author.avatar.url;
      let lastEdited = data.article.pageContentCollection.items[0].sys.publishedAt;
      let published = data.article.pageContentCollection.items[0].publishDate;
      let article = data.article.pageContentCollection.items[0].bodyText;
      let newsFeatured = data.newsFeaturedDuplex && data.newsFeaturedDuplex.length > 0 ? data.newsFeaturedDuplex[0] : data.defaultFeatured[0];
      data.defaultFeatured[0];
      let duplexData = data.duplexes[0];
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css16);
      renderData = newsFeatured && newsFeatured.pageContentCollection && newsFeatured.pageContentCollection.items[0].headline === headline ? newsFeatured : duplexData;
      return `${data.seoData.title ? `${validate_component(SEOMetaData, "SEOMetaData").$$render($$result, { data }, {}, {})}` : ``}

<article><header class="svelte-3xt869"><figure class="svelte-3xt869"><img${add_attribute("src", image, 0)} alt="" class="svelte-3xt869">
      <figcaption class="svelte-3xt869">${escape(caption)}</figcaption></figure>
    <div class="author-container svelte-3xt869"><h1 class="svelte-3xt869">${escape(headline)}</h1>
      <div class="author-wrapper svelte-3xt869"><div class="author svelte-3xt869"><img${add_attribute("src", avatar, 0)} alt="" class="svelte-3xt869">
          <p>by ${escape(author)}</p></div>
        <div class="timestamp svelte-3xt869"><span class="svelte-3xt869">Updated <span class="updated-date svelte-3xt869">${escape(formatDate2(lastEdited))}</span> <span style="color: #d4d4d4" class="svelte-3xt869">|</span> Published</span>
          <span class="svelte-3xt869">${escape(published)}</span></div></div></div></header>
  <div class="article-body svelte-3xt869"><!-- HTML_TAG_START -->${article}<!-- HTML_TAG_END -->
    ${validate_component(ButtonLink, "ButtonLink").$$render(
        $$result,
        {
          text: "More News",
          path: "/news",
          color: "#FFF",
          background_color: "#29397a",
          ariaText: "more news",
          ariaLink: "news"
        },
        {},
        {}
      )}</div></article>

<section class="news-duplex-wrapper-wide news-duplex-wrapper">${validate_component(Duplex, "Duplex").$$render($$result, { data: renderData || newsFeatured }, {}, {})}
</section>`;
    });
  }
});

// .svelte-kit/output/server/nodes/9.js
var __exports10 = {};
__export(__exports10, {
  component: () => component10,
  fonts: () => fonts10,
  imports: () => imports10,
  index: () => index10,
  server: () => page_server_exports7,
  server_id: () => server_id8,
  stylesheets: () => stylesheets10
});
var index10, component_cache10, component10, server_id8, imports10, stylesheets10, fonts10;
var init__10 = __esm({
  ".svelte-kit/output/server/nodes/9.js"() {
    init_page_server7();
    index10 = 9;
    component10 = async () => component_cache10 ??= (await Promise.resolve().then(() => (init_page_svelte8(), page_svelte_exports8))).default;
    server_id8 = "src/routes/news/[slug]/+page.server.js";
    imports10 = ["_app/immutable/nodes/9.d49bed76.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/Duplex.a6bac538.js", "_app/immutable/chunks/ButtonLink.2b86eb1a.js", "_app/immutable/chunks/TextWithLineBreaks.a14c0ba8.js", "_app/immutable/chunks/SEOMetaData.b746ec36.js"];
    stylesheets10 = ["_app/immutable/assets/9.c0575dbc.css", "_app/immutable/assets/Duplex.bb61849e.css", "_app/immutable/assets/ButtonLink.e5fc3fc9.css"];
    fonts10 = [];
  }
});

// .svelte-kit/output/server/entries/pages/news/all/_page.server.js
var page_server_exports8 = {};
__export(page_server_exports8, {
  load: () => load10
});
async function load10() {
  const query5 = `
    {
      newsPages: newsPageCollection {
        items {
          slug
          pageContentCollection(limit: 50) {
            items {
              __typename
              ... on NewsArticle {
                headline
                image {
                  url
                }
                previewText {
                  json
                }
                publishDate
              }
            }
          }
        }
      },
      newsFeaturedDuplex: componentDuplexCollection {
        items {
          __typename
          containerLayout
          containerSize
          newsFeatured
          headline
          ctaText
          image {
            url
          }
          targetPage {
            ... on Page {
              slug
            }
            ... on HowItWorks {
              slug
            }
            ... on AboutPage {
              slug
            }
            ... on NewsPage {
              slug
            }
            ... on ContactPage {
              slug
            }
          }
          bodyText {
            json
          }
          sys {
            firstPublishedAt
          }
        }
      }
    }
  `;
  const processNewsArticle = (item) => {
    const previewTextJson = item.previewText.json;
    return {
      ...item,
      previewText: (0, import_rich_text_html_renderer8.documentToHtmlString)(previewTextJson ?? "")
    };
  };
  const processDuplex5 = (item) => {
    var _a, _b;
    return {
      ...item,
      bodyText: (0, import_rich_text_html_renderer8.documentToHtmlString)(((_a = item.bodyText) == null ? void 0 : _a.json) ?? ""),
      targetPage: "/news/" + ((_b = item.targetPage) == null ? void 0 : _b.slug)
    };
  };
  const processingFunctions5 = {
    NewsArticle: processNewsArticle,
    ComponentDuplex: processDuplex5
  };
  const processItem = (item) => {
    if (!item || !item.__typename)
      return item;
    const processingFunction = processingFunctions5[item.__typename];
    return processingFunction ? processingFunction(item) : item;
  };
  const response = await contentfulFetch(query5);
  if (!response.ok) {
    throw error2(404, {
      message: `Mistakes were made: Error ${response.status} - ${response.statusText} 
            ${response.url}`
    });
  }
  const { data } = await response.json();
  const newsFeaturedDuplex = data.newsFeaturedDuplex.items.filter((item) => item.newsFeatured).map(processItem);
  const newsPages = data.newsPages.items.map((page2) => {
    var _a;
    const items = ((_a = page2.pageContentCollection) == null ? void 0 : _a.items) || [];
    const processedPageContent = items.map(processItem);
    return {
      ...page2,
      pageContentCollection: {
        items: processedPageContent
      }
    };
  });
  return {
    newsFeaturedDuplex,
    newsPages
  };
}
var import_rich_text_html_renderer8;
var init_page_server8 = __esm({
  ".svelte-kit/output/server/entries/pages/news/all/_page.server.js"() {
    init_chunks();
    import_rich_text_html_renderer8 = __toESM(require_rich_text_html_renderer_es5(), 1);
    init_contentful_fetch();
  }
});

// .svelte-kit/output/server/entries/pages/news/all/_page.svelte.js
var page_svelte_exports9 = {};
__export(page_svelte_exports9, {
  default: () => Page9
});
var css17, Page9;
var init_page_svelte9 = __esm({
  ".svelte-kit/output/server/entries/pages/news/all/_page.svelte.js"() {
    init_index3();
    init_Row();
    init_Col();
    init_ButtonLink();
    css17 = {
      code: "a.svelte-1kfxjeu{display:block;margin:0 0 1rem 0;color:#D93561;text-transform:uppercase;cursor:pointer}a.svelte-1kfxjeu:hover{color:#29397a;text-decoration:underline}p.svelte-1kfxjeu{margin:0 0 0.5rem;position:relative;color:rgba(0,0,0,.85)\n  }.date.svelte-1kfxjeu{font-family:'PolySans Neutral', Arial, sans-serif;font-size:0.875rem;color:#636363;margin:1rem 0 0.75rem}h7.svelte-1kfxjeu{font-size:1.25rem;line-height:1.75rem;font-family:'PolySans Neutral', Arial, sans-serif;font-weight:500}img.svelte-1kfxjeu{aspect-ratio:3/2;object-fit:cover}.show.svelte-1kfxjeu{display:flex}.custom.container{max-width:1440px}.latest,.more-news{padding:0 1.5rem}.more-news{margin-bottom:6rem}@media(max-width: 768px){img.svelte-1kfxjeu{width:100%;max-height:340px;margin:0 auto}.more-news{margin-bottom:0rem}}",
      map: null
    };
    Page9 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { data } = $$props;
      data.newsPages.sort((a, b) => new Date(b.pageContentCollection.items[0].publishDate) - new Date(a.pageContentCollection.items[0].publishDate));
      let newsPages = data.newsPages.map((page2) => {
        const { headline, image, previewText, publishDate } = page2.pageContentCollection.items[0];
        return {
          headline,
          image,
          previewText,
          publishDate,
          slug: page2.slug
        };
      });
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      $$result.css.add(css17);
      return `${$$result.head += `<!-- HEAD_svelte-py6lxj_START -->${$$result.title = `<title>Paul Health: News</title>`, ""}<meta name="description" content="Find out what's on our radar here at Paul Health."><meta property="og:title" content="Paul Health: News"><meta property="og:description" content="Find out what's on our radar here- at Paul Health."><meta property="og:image" content="/pluto_logo.svg"><meta property="og:type" content="website"><!-- HEAD_svelte-py6lxj_END -->`, ""}

${validate_component(Container, "Container").$$render($$result, { class: "custom" }, {}, {
        default: () => {
          return `${validate_component(Row, "Row").$$render($$result, { class: "justify-content-center" }, {}, {
            default: () => {
              return `${validate_component(Col, "Col").$$render(
                $$result,
                {
                  sm: 12,
                  md: 12,
                  lg: 12,
                  class: "more-news"
                },
                {},
                {
                  default: () => {
                    return `${validate_component(Row, "Row").$$render($$result, {}, {}, {
                      default: () => {
                        return `${each(newsPages, ({ headline, image, previewText, publishDate, slug }) => {
                          return `<div class="show col-12 col-md-6 col-lg-3 mb-2 svelte-1kfxjeu"><div class="content"><img${add_attribute("src", image.url, 0)}${add_attribute("alt", headline, 0)} style="width:100%" class="svelte-1kfxjeu">
              <p class="date svelte-1kfxjeu">${escape(publishDate)}</p>
              <b><h7 class="svelte-1kfxjeu">${escape(headline)}</h7></b>
              <p class="truncate-4 svelte-1kfxjeu"><!-- HTML_TAG_START -->${previewText}<!-- HTML_TAG_END --></p>
              <a href="${"/news/" + escape(slug, true)}" class="svelte-1kfxjeu">READ MORE</a></div>
          </div>`;
                        })}`;
                      }
                    })}
      ${validate_component(ButtonLink, "ButtonLink").$$render(
                      $$result,
                      {
                        text: "Back",
                        path: "/news",
                        color: "#FFF",
                        background_color: "#29397a",
                        ariaText: "A button that returns the user to the News page",
                        ariaLink: "/news"
                      },
                      {},
                      {}
                    )}`;
                  }
                }
              )}`;
            }
          })}`;
        }
      })}`;
    });
  }
});

// .svelte-kit/output/server/nodes/10.js
var __exports11 = {};
__export(__exports11, {
  component: () => component11,
  fonts: () => fonts11,
  imports: () => imports11,
  index: () => index11,
  server: () => page_server_exports8,
  server_id: () => server_id9,
  stylesheets: () => stylesheets11
});
var index11, component_cache11, component11, server_id9, imports11, stylesheets11, fonts11;
var init__11 = __esm({
  ".svelte-kit/output/server/nodes/10.js"() {
    init_page_server8();
    index11 = 10;
    component11 = async () => component_cache11 ??= (await Promise.resolve().then(() => (init_page_svelte9(), page_svelte_exports9))).default;
    server_id9 = "src/routes/news/all/+page.server.js";
    imports11 = ["_app/immutable/nodes/10.18d9b8c3.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/Row.7099f54b.js", "_app/immutable/chunks/Col.92dd6345.js", "_app/immutable/chunks/ButtonLink.2b86eb1a.js"];
    stylesheets11 = ["_app/immutable/assets/10.3036c11f.css", "_app/immutable/assets/ButtonLink.e5fc3fc9.css"];
    fonts11 = [];
  }
});

// .svelte-kit/output/server/entries/pages/services/_slug_/_page.server.js
var page_server_exports9 = {};
__export(page_server_exports9, {
  load: () => load11
});
async function load11({ params }) {
  const query5 = `
  {
    servicesPageCollection(where: {slug: "${params.slug}"}, limit: 1) {
      items {
        slug
        pageContentCollection {
          items {
            __typename
            ... on ComponentHeroBanner {
              page
              headline
              subline
              ctaText
              contentStyle
              bodyText {
                json
              }
              image {
                url
                description
              }
              targetPage {
                path
              }
            }
            ... on ComponentLogoRack {
              logoHeadline1
              logoHeadline2
              logoHeadline3
              logoHeadline4
              logoHeadline5
              logoHeadline6
              logoText1 { json }
              logoText2 { json }
              logoText3 { json }
              logoText4 { json }
              logoText5 { json }
              logoText6 { json }
              logoImage1 { url, description }
              logoImage2 { url, description }
              logoImage3 { url, description }
              logoImage4 { url, description }
              logoImage5 { url, description }
              logoImage6 { url, description }
              tagline
              header
              divider
              logoSize
              logosPerRow
              paddingOptions
              backgroundColor
            }
            ... on ComponentFaq {
              question0
              question1
              question2
              question3
              question4
              question5
              question6
              question7
              question8
              question9
              answer0 { json }
              answer1 { json }
              answer2 { json }
              answer3 { json }
              answer4 { json }
              answer5 { json }
              answer6 { json }
              answer7 { json }
              answer8 { json }
              answer9 { json }
            }
            ... on ComponentInfoBlock {
              headline
              subline
              ctaText
              infoBlockConfig
              copyBackground
              paddingOptions
              divider
              block1Body {
                json
              }
              block2Body {
                json
              }
              block1Image {
                url
                description
              }
              block2Image {
                url
                description
              }
              ctaLink {
                ... on Page {
                  slug
                }
                ... on HowItWorks {
                  slug
                }
                ... on AboutPage {
                  slug
                }
                ... on NewsPage {
                  slug
                }
                ... on ContactPage {
                  slug
                }
                ... on ServicesPage {
                  slug
                }
              }
            }
            ... on ComponentDuplex {
              tagline
              headline
              ctaText
              containerLayout
              containerSize
              newsletterInput
              bodyText {
                json
              }
              image{
                url
                description
              }
              targetPage{
                __typename
                ... on Page {
                  slug
                }
                ... on HowItWorks {
                  slug
                }
                ... on AboutPage {
                  slug
                }
                ... on NewsPage {
                  slug
                }
                ... on ContactPage {
                  slug
                }
                ... on ServicesPage {
                  slug
                }
              }
            }
          }
        }
        seoMetadata {
          __typename
          title
          metaDescription
          ogTitle
          ogDescription	
          ogImage {
            url
          }
        }
      }
    }
  }
`;
  const processHeroBanner5 = (item) => {
    var _a, _b;
    return {
      ...item,
      bodyText: (0, import_rich_text_html_renderer9.documentToHtmlString)(((_a = item.bodyText) == null ? void 0 : _a.json) ?? ""),
      targetPage: ((_b = item.targetPage) == null ? void 0 : _b.path) ?? ""
    };
  };
  const processDuplex5 = (item) => {
    var _a, _b;
    return {
      ...item,
      bodyText: (0, import_rich_text_html_renderer9.documentToHtmlString)(((_a = item.bodyText) == null ? void 0 : _a.json) ?? ""),
      targetPage: ((_b = item.targetPage) == null ? void 0 : _b.slug) ?? "",
      containerSize: item.containerSize ?? ""
    };
  };
  const processInfoBlock4 = (item) => {
    var _a, _b;
    return {
      ...item,
      content1: (0, import_rich_text_html_renderer9.documentToHtmlString)(((_a = item.block1Body) == null ? void 0 : _a.json) ?? ""),
      content2: (0, import_rich_text_html_renderer9.documentToHtmlString)(((_b = item.block2Body) == null ? void 0 : _b.json) ?? "")
    };
  };
  const processSEOTags5 = (item) => {
    return { ...item };
  };
  const processLogoRack4 = (item) => {
    var _a, _b, _c, _d, _e, _f;
    return {
      ...item,
      logoText1: (0, import_rich_text_html_renderer9.documentToHtmlString)(((_a = item.logoText1) == null ? void 0 : _a.json) ?? ""),
      logoText2: (0, import_rich_text_html_renderer9.documentToHtmlString)(((_b = item.logoText2) == null ? void 0 : _b.json) ?? ""),
      logoText3: (0, import_rich_text_html_renderer9.documentToHtmlString)(((_c = item.logoText3) == null ? void 0 : _c.json) ?? ""),
      logoText4: (0, import_rich_text_html_renderer9.documentToHtmlString)(((_d = item.logoText4) == null ? void 0 : _d.json) ?? ""),
      logoText5: (0, import_rich_text_html_renderer9.documentToHtmlString)(((_e = item.logoText5) == null ? void 0 : _e.json) ?? ""),
      logoText6: (0, import_rich_text_html_renderer9.documentToHtmlString)(((_f = item.logoText6) == null ? void 0 : _f.json) ?? "")
    };
  };
  const processFaq4 = (item) => {
    return { ...item };
  };
  const processingFunctions5 = {
    "ComponentHeroBanner": processHeroBanner5,
    "ComponentDuplex": processDuplex5,
    "ComponentInfoBlock": processInfoBlock4,
    "ComponentLogoRack": processLogoRack4,
    "ComponentFaq": processFaq4
  };
  const response = await contentfulFetch(query5);
  if (!response.ok) {
    throw error2(404, {
      message: `Mistakes were made: Error ${response.status} - ${response.statusText} 
      ${response.url}`
    });
  }
  const { data } = await response.json();
  const { items: pageContentItems } = data.servicesPageCollection.items[0].pageContentCollection;
  const processedItems = pageContentItems.map((item) => {
    if (item) {
      const processingFunction = processingFunctions5[item.__typename];
      return processingFunction ? { ...processingFunction(item), componentType: item.__typename } : item;
    } else {
      return {};
    }
  });
  const pageContent = processedItems.map((item) => {
    return {
      type: item.componentType,
      data: {
        heroBanners: item.componentType === "ComponentHeroBanner" ? [item] : [],
        duplexes: item.componentType === "ComponentDuplex" ? [item] : [],
        infoBlocks: item.componentType === "ComponentInfoBlock" && item.infoBlockConfig ? [item] : [],
        logoRacks: item.componentType === "ComponentLogoRack" ? [item] : [],
        faqs: item.componentType === "ComponentFaq" ? [item] : []
      }
    };
  });
  const seoData = processSEOTags5(data.servicesPageCollection.items[0].seoMetadata);
  return {
    pageContent,
    seoData
  };
}
var import_rich_text_html_renderer9;
var init_page_server9 = __esm({
  ".svelte-kit/output/server/entries/pages/services/_slug_/_page.server.js"() {
    init_chunks();
    import_rich_text_html_renderer9 = __toESM(require_rich_text_html_renderer_es5(), 1);
    init_contentful_fetch();
  }
});

// .svelte-kit/output/server/entries/pages/services/_slug_/_page.svelte.js
var page_svelte_exports10 = {};
__export(page_svelte_exports10, {
  default: () => Page10
});
function getComponentData5(item) {
  switch (item.type) {
    case "ComponentHeroBanner":
      return { data: item.data.heroBanners[0] };
    case "ComponentDuplex":
      return { data: item.data.duplexes[0] };
    case "ComponentInfoBlock":
      return { data: item.data.infoBlocks[0] };
    case "ComponentLogoRack":
      return { data: item.data.logoRacks[0] };
    case "ComponentFaq":
      return { data: item.data.faqs };
    default:
      return {};
  }
}
var Page10;
var init_page_svelte10 = __esm({
  ".svelte-kit/output/server/entries/pages/services/_slug_/_page.svelte.js"() {
    init_index3();
    init_Duplex();
    init_Faq();
    init_Hero();
    init_SEOMetaData();
    Page10 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { data } = $$props;
      const components = {
        ComponentHeroBanner: Hero,
        ComponentDuplex: Duplex,
        ComponentInfoBlock: InfoBlock,
        ComponentLogoRack: LogoRack,
        ComponentFaq: Faq
      };
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      return `${each(data.pageContent, (item, index13) => {
        return `${validate_component(components[item.type] || missing_component, "svelte:component").$$render($$result, Object.assign({}, getComponentData5(item)), {}, {})}`;
      })}

  ${validate_component(SEOMetaData, "SEOMetaData").$$render($$result, { data }, {}, {})}`;
    });
  }
});

// .svelte-kit/output/server/nodes/11.js
var __exports12 = {};
__export(__exports12, {
  component: () => component12,
  fonts: () => fonts12,
  imports: () => imports12,
  index: () => index12,
  server: () => page_server_exports9,
  server_id: () => server_id10,
  stylesheets: () => stylesheets12
});
var index12, component_cache12, component12, server_id10, imports12, stylesheets12, fonts12;
var init__12 = __esm({
  ".svelte-kit/output/server/nodes/11.js"() {
    init_page_server9();
    index12 = 11;
    component12 = async () => component_cache12 ??= (await Promise.resolve().then(() => (init_page_svelte10(), page_svelte_exports10))).default;
    server_id10 = "src/routes/services/[slug]/+page.server.js";
    imports12 = ["_app/immutable/nodes/11.ed2987c2.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/Duplex.a6bac538.js", "_app/immutable/chunks/ButtonLink.2b86eb1a.js", "_app/immutable/chunks/TextWithLineBreaks.a14c0ba8.js", "_app/immutable/chunks/Faq.d36da7da.js", "_app/immutable/chunks/stores.483a6c70.js", "_app/immutable/chunks/singletons.0e91b02d.js", "_app/immutable/chunks/paths.85fe2585.js", "_app/immutable/chunks/Row.7099f54b.js", "_app/immutable/chunks/Hero.1fb25a1f.js", "_app/immutable/chunks/SEOMetaData.b746ec36.js"];
    stylesheets12 = ["_app/immutable/assets/Duplex.bb61849e.css", "_app/immutable/assets/ButtonLink.e5fc3fc9.css", "_app/immutable/assets/Faq.7ac5e4bc.css", "_app/immutable/assets/Hero.4a3cbd69.css"];
    fonts12 = [];
  }
});

// .svelte-kit/output/server/entries/endpoints/api/subscribe/_server.js
var server_exports = {};
__export(server_exports, {
  POST: () => POST
});
async function POST(event) {
  const body = await event.request.json();
  const { email } = body;
  const client2 = createClient2({
    accessToken: CONTENTFUL_MANAGEMENT_TOKEN
  });
  const space = await client2.getSpace(CONTENTFUL_SPACE_ID);
  const environment = await space.getEnvironment(CONTENTFUL_ENVIRONMENT);
  await environment.createEntry("newsletterSubscription", {
    fields: {
      email: { "en-US": email }
    }
  });
  return new Response(JSON.stringify({
    message: "Form submitted successfully"
  }), {
    status: 200,
    headers: {
      "content-type": "application/json"
    }
  });
}
var import_contentful_management2, createClient2;
var init_server = __esm({
  ".svelte-kit/output/server/entries/endpoints/api/subscribe/_server.js"() {
    import_contentful_management2 = __toESM(require_contentful_management_node(), 1);
    init_private();
    ({ createClient: createClient2 } = import_contentful_management2.default);
  }
});

// node_modules/postmark/dist/client/errors/Errors.js
var require_Errors = __commonJS({
  "node_modules/postmark/dist/client/errors/Errors.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidEmailRequestError = exports.InactiveRecipientsError = exports.ApiInputError = exports.UnknownError = exports.RateLimitExceededError = exports.ServiceUnavailablerError = exports.InternalServerError = exports.InvalidAPIKeyError = exports.HttpError = exports.PostmarkError = void 0;
    var PostmarkError = (
      /** @class */
      function(_super) {
        __extends(PostmarkError2, _super);
        function PostmarkError2(message, code, statusCode) {
          if (code === void 0) {
            code = 0;
          }
          if (statusCode === void 0) {
            statusCode = 0;
          }
          var _this = _super.call(this, message) || this;
          _this.statusCode = statusCode;
          _this.code = code;
          Object.setPrototypeOf(_this, PostmarkError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        PostmarkError2.prototype.setUpStackTrace = function() {
          this.name = this.constructor.name;
          Error.captureStackTrace(this, this.constructor);
        };
        return PostmarkError2;
      }(Error)
    );
    exports.PostmarkError = PostmarkError;
    var HttpError3 = (
      /** @class */
      function(_super) {
        __extends(HttpError4, _super);
        function HttpError4(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, HttpError4.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return HttpError4;
      }(PostmarkError)
    );
    exports.HttpError = HttpError3;
    var InvalidAPIKeyError = (
      /** @class */
      function(_super) {
        __extends(InvalidAPIKeyError2, _super);
        function InvalidAPIKeyError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, InvalidAPIKeyError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return InvalidAPIKeyError2;
      }(HttpError3)
    );
    exports.InvalidAPIKeyError = InvalidAPIKeyError;
    var InternalServerError = (
      /** @class */
      function(_super) {
        __extends(InternalServerError2, _super);
        function InternalServerError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, InternalServerError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return InternalServerError2;
      }(HttpError3)
    );
    exports.InternalServerError = InternalServerError;
    var ServiceUnavailablerError = (
      /** @class */
      function(_super) {
        __extends(ServiceUnavailablerError2, _super);
        function ServiceUnavailablerError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, ServiceUnavailablerError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return ServiceUnavailablerError2;
      }(HttpError3)
    );
    exports.ServiceUnavailablerError = ServiceUnavailablerError;
    var RateLimitExceededError = (
      /** @class */
      function(_super) {
        __extends(RateLimitExceededError2, _super);
        function RateLimitExceededError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, RateLimitExceededError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return RateLimitExceededError2;
      }(HttpError3)
    );
    exports.RateLimitExceededError = RateLimitExceededError;
    var UnknownError = (
      /** @class */
      function(_super) {
        __extends(UnknownError2, _super);
        function UnknownError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, UnknownError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return UnknownError2;
      }(HttpError3)
    );
    exports.UnknownError = UnknownError;
    var ApiInputError = (
      /** @class */
      function(_super) {
        __extends(ApiInputError2, _super);
        function ApiInputError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, ApiInputError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        ApiInputError2.buildSpecificError = function(message, code, statusCode) {
          switch (code) {
            case this.ERROR_CODES.inactiveRecipient:
              return new InactiveRecipientsError(message, code, statusCode);
            case this.ERROR_CODES.invalidEmailRequest:
              return new InvalidEmailRequestError(message, code, statusCode);
            default:
              return new ApiInputError2(message, code, statusCode);
          }
        };
        ApiInputError2.ERROR_CODES = {
          inactiveRecipient: 406,
          invalidEmailRequest: 300
        };
        return ApiInputError2;
      }(HttpError3)
    );
    exports.ApiInputError = ApiInputError;
    var InactiveRecipientsError = (
      /** @class */
      function(_super) {
        __extends(InactiveRecipientsError2, _super);
        function InactiveRecipientsError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, InactiveRecipientsError2.prototype);
          _this.setUpStackTrace();
          _this.recipients = InactiveRecipientsError2.parseInactiveRecipients(message);
          return _this;
        }
        InactiveRecipientsError2.parseInactiveRecipients = function(message) {
          var result = [];
          this.inactiveRecipientsPatterns.some(function(pattern2) {
            var regexResult = message.match(pattern2);
            if (regexResult !== null) {
              result = regexResult[1].split(",").map(function(element) {
                return element.trim();
              });
              return result;
            } else {
              result = [];
            }
          });
          return result;
        };
        InactiveRecipientsError2.inactiveRecipientsPatterns = [
          /Found inactive addresses: (.+?)\.? Inactive/,
          /these inactive addresses: (.+?)\.?$/
        ];
        return InactiveRecipientsError2;
      }(ApiInputError)
    );
    exports.InactiveRecipientsError = InactiveRecipientsError;
    var InvalidEmailRequestError = (
      /** @class */
      function(_super) {
        __extends(InvalidEmailRequestError2, _super);
        function InvalidEmailRequestError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, InvalidEmailRequestError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return InvalidEmailRequestError2;
      }(ApiInputError)
    );
    exports.InvalidEmailRequestError = InvalidEmailRequestError;
  }
});

// node_modules/postmark/dist/client/errors/ErrorHandler.js
var require_ErrorHandler = __commonJS({
  "node_modules/postmark/dist/client/errors/ErrorHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrorHandler = void 0;
    var Errors = require_Errors();
    var ErrorHandler = (
      /** @class */
      function() {
        function ErrorHandler2() {
        }
        ErrorHandler2.prototype.buildError = function(errorMessage, code, statusCode) {
          if (code === void 0) {
            code = 0;
          }
          if (statusCode === void 0) {
            statusCode = 0;
          }
          if (statusCode === 0 && code === 0) {
            return new Errors.PostmarkError(errorMessage);
          } else {
            return this.buildErrorByHttpStatusCode(errorMessage, code, statusCode);
          }
        };
        ErrorHandler2.prototype.buildErrorByHttpStatusCode = function(errorMessage, errorCode, errorStatusCode) {
          switch (errorStatusCode) {
            case 401:
              return new Errors.InvalidAPIKeyError(errorMessage, errorCode, errorStatusCode);
            case 404:
              return new Errors.PostmarkError(errorMessage, errorCode, errorStatusCode);
            case 422:
              return Errors.ApiInputError.buildSpecificError(errorMessage, errorCode, errorStatusCode);
            case 429:
              return new Errors.RateLimitExceededError(errorMessage, errorCode, errorStatusCode);
            case 500:
              return new Errors.InternalServerError(errorMessage, errorCode, errorStatusCode);
            case 503:
              return new Errors.ServiceUnavailablerError(errorMessage, errorCode, errorStatusCode);
            default:
              return new Errors.UnknownError(errorMessage, errorCode, errorStatusCode);
          }
        };
        return ErrorHandler2;
      }()
    );
    exports.ErrorHandler = ErrorHandler;
  }
});

// node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS({
  "node_modules/delayed-stream/lib/delayed_stream.js"(exports, module2) {
    var Stream = require("stream").Stream;
    var util = require("util");
    module2.exports = DelayedStream;
    function DelayedStream() {
      this.source = null;
      this.dataSize = 0;
      this.maxDataSize = 1024 * 1024;
      this.pauseStream = true;
      this._maxDataSizeExceeded = false;
      this._released = false;
      this._bufferedEvents = [];
    }
    util.inherits(DelayedStream, Stream);
    DelayedStream.create = function(source, options2) {
      var delayedStream = new this();
      options2 = options2 || {};
      for (var option in options2) {
        delayedStream[option] = options2[option];
      }
      delayedStream.source = source;
      var realEmit = source.emit;
      source.emit = function() {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
      };
      source.on("error", function() {
      });
      if (delayedStream.pauseStream) {
        source.pause();
      }
      return delayedStream;
    };
    Object.defineProperty(DelayedStream.prototype, "readable", {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.source.readable;
      }
    });
    DelayedStream.prototype.setEncoding = function() {
      return this.source.setEncoding.apply(this.source, arguments);
    };
    DelayedStream.prototype.resume = function() {
      if (!this._released) {
        this.release();
      }
      this.source.resume();
    };
    DelayedStream.prototype.pause = function() {
      this.source.pause();
    };
    DelayedStream.prototype.release = function() {
      this._released = true;
      this._bufferedEvents.forEach(function(args) {
        this.emit.apply(this, args);
      }.bind(this));
      this._bufferedEvents = [];
    };
    DelayedStream.prototype.pipe = function() {
      var r = Stream.prototype.pipe.apply(this, arguments);
      this.resume();
      return r;
    };
    DelayedStream.prototype._handleEmit = function(args) {
      if (this._released) {
        this.emit.apply(this, args);
        return;
      }
      if (args[0] === "data") {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
      }
      this._bufferedEvents.push(args);
    };
    DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
      if (this._maxDataSizeExceeded) {
        return;
      }
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      this._maxDataSizeExceeded = true;
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this.emit("error", new Error(message));
    };
  }
});

// node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS({
  "node_modules/combined-stream/lib/combined_stream.js"(exports, module2) {
    var util = require("util");
    var Stream = require("stream").Stream;
    var DelayedStream = require_delayed_stream();
    module2.exports = CombinedStream;
    function CombinedStream() {
      this.writable = false;
      this.readable = true;
      this.dataSize = 0;
      this.maxDataSize = 2 * 1024 * 1024;
      this.pauseStreams = true;
      this._released = false;
      this._streams = [];
      this._currentStream = null;
      this._insideLoop = false;
      this._pendingNext = false;
    }
    util.inherits(CombinedStream, Stream);
    CombinedStream.create = function(options2) {
      var combinedStream = new this();
      options2 = options2 || {};
      for (var option in options2) {
        combinedStream[option] = options2[option];
      }
      return combinedStream;
    };
    CombinedStream.isStreamLike = function(stream) {
      return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
    };
    CombinedStream.prototype.append = function(stream) {
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        if (!(stream instanceof DelayedStream)) {
          var newStream = DelayedStream.create(stream, {
            maxDataSize: Infinity,
            pauseStream: this.pauseStreams
          });
          stream.on("data", this._checkDataSize.bind(this));
          stream = newStream;
        }
        this._handleErrors(stream);
        if (this.pauseStreams) {
          stream.pause();
        }
      }
      this._streams.push(stream);
      return this;
    };
    CombinedStream.prototype.pipe = function(dest, options2) {
      Stream.prototype.pipe.call(this, dest, options2);
      this.resume();
      return dest;
    };
    CombinedStream.prototype._getNext = function() {
      this._currentStream = null;
      if (this._insideLoop) {
        this._pendingNext = true;
        return;
      }
      this._insideLoop = true;
      try {
        do {
          this._pendingNext = false;
          this._realGetNext();
        } while (this._pendingNext);
      } finally {
        this._insideLoop = false;
      }
    };
    CombinedStream.prototype._realGetNext = function() {
      var stream = this._streams.shift();
      if (typeof stream == "undefined") {
        this.end();
        return;
      }
      if (typeof stream !== "function") {
        this._pipeNext(stream);
        return;
      }
      var getStream = stream;
      getStream(function(stream2) {
        var isStreamLike = CombinedStream.isStreamLike(stream2);
        if (isStreamLike) {
          stream2.on("data", this._checkDataSize.bind(this));
          this._handleErrors(stream2);
        }
        this._pipeNext(stream2);
      }.bind(this));
    };
    CombinedStream.prototype._pipeNext = function(stream) {
      this._currentStream = stream;
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        stream.on("end", this._getNext.bind(this));
        stream.pipe(this, { end: false });
        return;
      }
      var value = stream;
      this.write(value);
      this._getNext();
    };
    CombinedStream.prototype._handleErrors = function(stream) {
      var self2 = this;
      stream.on("error", function(err) {
        self2._emitError(err);
      });
    };
    CombinedStream.prototype.write = function(data) {
      this.emit("data", data);
    };
    CombinedStream.prototype.pause = function() {
      if (!this.pauseStreams) {
        return;
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function")
        this._currentStream.pause();
      this.emit("pause");
    };
    CombinedStream.prototype.resume = function() {
      if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function")
        this._currentStream.resume();
      this.emit("resume");
    };
    CombinedStream.prototype.end = function() {
      this._reset();
      this.emit("end");
    };
    CombinedStream.prototype.destroy = function() {
      this._reset();
      this.emit("close");
    };
    CombinedStream.prototype._reset = function() {
      this.writable = false;
      this._streams = [];
      this._currentStream = null;
    };
    CombinedStream.prototype._checkDataSize = function() {
      this._updateDataSize();
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this._emitError(new Error(message));
    };
    CombinedStream.prototype._updateDataSize = function() {
      this.dataSize = 0;
      var self2 = this;
      this._streams.forEach(function(stream) {
        if (!stream.dataSize) {
          return;
        }
        self2.dataSize += stream.dataSize;
      });
      if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
      }
    };
    CombinedStream.prototype._emitError = function(err) {
      this._reset();
      this.emit("error", err);
    };
  }
});

// node_modules/mime-db/db.json
var require_db = __commonJS({
  "node_modules/mime-db/db.json"(exports, module2) {
    module2.exports = {
      "application/1d-interleaved-parityfec": {
        source: "iana"
      },
      "application/3gpdash-qoe-report+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/3gpp-ims+xml": {
        source: "iana",
        compressible: true
      },
      "application/3gpphal+json": {
        source: "iana",
        compressible: true
      },
      "application/3gpphalforms+json": {
        source: "iana",
        compressible: true
      },
      "application/a2l": {
        source: "iana"
      },
      "application/ace+cbor": {
        source: "iana"
      },
      "application/activemessage": {
        source: "iana"
      },
      "application/activity+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-directory+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcost+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcostparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointprop+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointpropparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-error+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamcontrol+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamparams+json": {
        source: "iana",
        compressible: true
      },
      "application/aml": {
        source: "iana"
      },
      "application/andrew-inset": {
        source: "iana",
        extensions: ["ez"]
      },
      "application/applefile": {
        source: "iana"
      },
      "application/applixware": {
        source: "apache",
        extensions: ["aw"]
      },
      "application/at+jwt": {
        source: "iana"
      },
      "application/atf": {
        source: "iana"
      },
      "application/atfx": {
        source: "iana"
      },
      "application/atom+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atom"]
      },
      "application/atomcat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomcat"]
      },
      "application/atomdeleted+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomdeleted"]
      },
      "application/atomicmail": {
        source: "iana"
      },
      "application/atomsvc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomsvc"]
      },
      "application/atsc-dwd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dwd"]
      },
      "application/atsc-dynamic-event-message": {
        source: "iana"
      },
      "application/atsc-held+xml": {
        source: "iana",
        compressible: true,
        extensions: ["held"]
      },
      "application/atsc-rdt+json": {
        source: "iana",
        compressible: true
      },
      "application/atsc-rsat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsat"]
      },
      "application/atxml": {
        source: "iana"
      },
      "application/auth-policy+xml": {
        source: "iana",
        compressible: true
      },
      "application/bacnet-xdd+zip": {
        source: "iana",
        compressible: false
      },
      "application/batch-smtp": {
        source: "iana"
      },
      "application/bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/beep+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/calendar+json": {
        source: "iana",
        compressible: true
      },
      "application/calendar+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xcs"]
      },
      "application/call-completion": {
        source: "iana"
      },
      "application/cals-1840": {
        source: "iana"
      },
      "application/captive+json": {
        source: "iana",
        compressible: true
      },
      "application/cbor": {
        source: "iana"
      },
      "application/cbor-seq": {
        source: "iana"
      },
      "application/cccex": {
        source: "iana"
      },
      "application/ccmp+xml": {
        source: "iana",
        compressible: true
      },
      "application/ccxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ccxml"]
      },
      "application/cdfx+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdfx"]
      },
      "application/cdmi-capability": {
        source: "iana",
        extensions: ["cdmia"]
      },
      "application/cdmi-container": {
        source: "iana",
        extensions: ["cdmic"]
      },
      "application/cdmi-domain": {
        source: "iana",
        extensions: ["cdmid"]
      },
      "application/cdmi-object": {
        source: "iana",
        extensions: ["cdmio"]
      },
      "application/cdmi-queue": {
        source: "iana",
        extensions: ["cdmiq"]
      },
      "application/cdni": {
        source: "iana"
      },
      "application/cea": {
        source: "iana"
      },
      "application/cea-2018+xml": {
        source: "iana",
        compressible: true
      },
      "application/cellml+xml": {
        source: "iana",
        compressible: true
      },
      "application/cfw": {
        source: "iana"
      },
      "application/city+json": {
        source: "iana",
        compressible: true
      },
      "application/clr": {
        source: "iana"
      },
      "application/clue+xml": {
        source: "iana",
        compressible: true
      },
      "application/clue_info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cms": {
        source: "iana"
      },
      "application/cnrp+xml": {
        source: "iana",
        compressible: true
      },
      "application/coap-group+json": {
        source: "iana",
        compressible: true
      },
      "application/coap-payload": {
        source: "iana"
      },
      "application/commonground": {
        source: "iana"
      },
      "application/conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cose": {
        source: "iana"
      },
      "application/cose-key": {
        source: "iana"
      },
      "application/cose-key-set": {
        source: "iana"
      },
      "application/cpl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cpl"]
      },
      "application/csrattrs": {
        source: "iana"
      },
      "application/csta+xml": {
        source: "iana",
        compressible: true
      },
      "application/cstadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/csvm+json": {
        source: "iana",
        compressible: true
      },
      "application/cu-seeme": {
        source: "apache",
        extensions: ["cu"]
      },
      "application/cwt": {
        source: "iana"
      },
      "application/cybercash": {
        source: "iana"
      },
      "application/dart": {
        compressible: true
      },
      "application/dash+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpd"]
      },
      "application/dash-patch+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpp"]
      },
      "application/dashdelta": {
        source: "iana"
      },
      "application/davmount+xml": {
        source: "iana",
        compressible: true,
        extensions: ["davmount"]
      },
      "application/dca-rft": {
        source: "iana"
      },
      "application/dcd": {
        source: "iana"
      },
      "application/dec-dx": {
        source: "iana"
      },
      "application/dialog-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/dicom": {
        source: "iana"
      },
      "application/dicom+json": {
        source: "iana",
        compressible: true
      },
      "application/dicom+xml": {
        source: "iana",
        compressible: true
      },
      "application/dii": {
        source: "iana"
      },
      "application/dit": {
        source: "iana"
      },
      "application/dns": {
        source: "iana"
      },
      "application/dns+json": {
        source: "iana",
        compressible: true
      },
      "application/dns-message": {
        source: "iana"
      },
      "application/docbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dbk"]
      },
      "application/dots+cbor": {
        source: "iana"
      },
      "application/dskpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/dssc+der": {
        source: "iana",
        extensions: ["dssc"]
      },
      "application/dssc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdssc"]
      },
      "application/dvcs": {
        source: "iana"
      },
      "application/ecmascript": {
        source: "iana",
        compressible: true,
        extensions: ["es", "ecma"]
      },
      "application/edi-consent": {
        source: "iana"
      },
      "application/edi-x12": {
        source: "iana",
        compressible: false
      },
      "application/edifact": {
        source: "iana",
        compressible: false
      },
      "application/efi": {
        source: "iana"
      },
      "application/elm+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/elm+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.cap+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/emergencycalldata.comment+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.control+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.deviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.ecall.msd": {
        source: "iana"
      },
      "application/emergencycalldata.providerinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.serviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.subscriberinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.veds+xml": {
        source: "iana",
        compressible: true
      },
      "application/emma+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emma"]
      },
      "application/emotionml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emotionml"]
      },
      "application/encaprtp": {
        source: "iana"
      },
      "application/epp+xml": {
        source: "iana",
        compressible: true
      },
      "application/epub+zip": {
        source: "iana",
        compressible: false,
        extensions: ["epub"]
      },
      "application/eshop": {
        source: "iana"
      },
      "application/exi": {
        source: "iana",
        extensions: ["exi"]
      },
      "application/expect-ct-report+json": {
        source: "iana",
        compressible: true
      },
      "application/express": {
        source: "iana",
        extensions: ["exp"]
      },
      "application/fastinfoset": {
        source: "iana"
      },
      "application/fastsoap": {
        source: "iana"
      },
      "application/fdt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fdt"]
      },
      "application/fhir+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fhir+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fido.trusted-apps+json": {
        compressible: true
      },
      "application/fits": {
        source: "iana"
      },
      "application/flexfec": {
        source: "iana"
      },
      "application/font-sfnt": {
        source: "iana"
      },
      "application/font-tdpfr": {
        source: "iana",
        extensions: ["pfr"]
      },
      "application/font-woff": {
        source: "iana",
        compressible: false
      },
      "application/framework-attributes+xml": {
        source: "iana",
        compressible: true
      },
      "application/geo+json": {
        source: "iana",
        compressible: true,
        extensions: ["geojson"]
      },
      "application/geo+json-seq": {
        source: "iana"
      },
      "application/geopackage+sqlite3": {
        source: "iana"
      },
      "application/geoxacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/gltf-buffer": {
        source: "iana"
      },
      "application/gml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["gml"]
      },
      "application/gpx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["gpx"]
      },
      "application/gxf": {
        source: "apache",
        extensions: ["gxf"]
      },
      "application/gzip": {
        source: "iana",
        compressible: false,
        extensions: ["gz"]
      },
      "application/h224": {
        source: "iana"
      },
      "application/held+xml": {
        source: "iana",
        compressible: true
      },
      "application/hjson": {
        extensions: ["hjson"]
      },
      "application/http": {
        source: "iana"
      },
      "application/hyperstudio": {
        source: "iana",
        extensions: ["stk"]
      },
      "application/ibe-key-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pkg-reply+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pp-data": {
        source: "iana"
      },
      "application/iges": {
        source: "iana"
      },
      "application/im-iscomposing+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/index": {
        source: "iana"
      },
      "application/index.cmd": {
        source: "iana"
      },
      "application/index.obj": {
        source: "iana"
      },
      "application/index.response": {
        source: "iana"
      },
      "application/index.vnd": {
        source: "iana"
      },
      "application/inkml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ink", "inkml"]
      },
      "application/iotp": {
        source: "iana"
      },
      "application/ipfix": {
        source: "iana",
        extensions: ["ipfix"]
      },
      "application/ipp": {
        source: "iana"
      },
      "application/isup": {
        source: "iana"
      },
      "application/its+xml": {
        source: "iana",
        compressible: true,
        extensions: ["its"]
      },
      "application/java-archive": {
        source: "apache",
        compressible: false,
        extensions: ["jar", "war", "ear"]
      },
      "application/java-serialized-object": {
        source: "apache",
        compressible: false,
        extensions: ["ser"]
      },
      "application/java-vm": {
        source: "apache",
        compressible: false,
        extensions: ["class"]
      },
      "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["js", "mjs"]
      },
      "application/jf2feed+json": {
        source: "iana",
        compressible: true
      },
      "application/jose": {
        source: "iana"
      },
      "application/jose+json": {
        source: "iana",
        compressible: true
      },
      "application/jrd+json": {
        source: "iana",
        compressible: true
      },
      "application/jscalendar+json": {
        source: "iana",
        compressible: true
      },
      "application/json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["json", "map"]
      },
      "application/json-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/json-seq": {
        source: "iana"
      },
      "application/json5": {
        extensions: ["json5"]
      },
      "application/jsonml+json": {
        source: "apache",
        compressible: true,
        extensions: ["jsonml"]
      },
      "application/jwk+json": {
        source: "iana",
        compressible: true
      },
      "application/jwk-set+json": {
        source: "iana",
        compressible: true
      },
      "application/jwt": {
        source: "iana"
      },
      "application/kpml-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/kpml-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/ld+json": {
        source: "iana",
        compressible: true,
        extensions: ["jsonld"]
      },
      "application/lgr+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lgr"]
      },
      "application/link-format": {
        source: "iana"
      },
      "application/load-control+xml": {
        source: "iana",
        compressible: true
      },
      "application/lost+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lostxml"]
      },
      "application/lostsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/lpf+zip": {
        source: "iana",
        compressible: false
      },
      "application/lxf": {
        source: "iana"
      },
      "application/mac-binhex40": {
        source: "iana",
        extensions: ["hqx"]
      },
      "application/mac-compactpro": {
        source: "apache",
        extensions: ["cpt"]
      },
      "application/macwriteii": {
        source: "iana"
      },
      "application/mads+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mads"]
      },
      "application/manifest+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["webmanifest"]
      },
      "application/marc": {
        source: "iana",
        extensions: ["mrc"]
      },
      "application/marcxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mrcx"]
      },
      "application/mathematica": {
        source: "iana",
        extensions: ["ma", "nb", "mb"]
      },
      "application/mathml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mathml"]
      },
      "application/mathml-content+xml": {
        source: "iana",
        compressible: true
      },
      "application/mathml-presentation+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-associated-procedure-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-deregister+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-envelope+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-protection-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-reception-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-schedule+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-user-service-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbox": {
        source: "iana",
        extensions: ["mbox"]
      },
      "application/media-policy-dataset+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpf"]
      },
      "application/media_control+xml": {
        source: "iana",
        compressible: true
      },
      "application/mediaservercontrol+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mscml"]
      },
      "application/merge-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/metalink+xml": {
        source: "apache",
        compressible: true,
        extensions: ["metalink"]
      },
      "application/metalink4+xml": {
        source: "iana",
        compressible: true,
        extensions: ["meta4"]
      },
      "application/mets+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mets"]
      },
      "application/mf4": {
        source: "iana"
      },
      "application/mikey": {
        source: "iana"
      },
      "application/mipc": {
        source: "iana"
      },
      "application/missing-blocks+cbor-seq": {
        source: "iana"
      },
      "application/mmt-aei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["maei"]
      },
      "application/mmt-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musd"]
      },
      "application/mods+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mods"]
      },
      "application/moss-keys": {
        source: "iana"
      },
      "application/moss-signature": {
        source: "iana"
      },
      "application/mosskey-data": {
        source: "iana"
      },
      "application/mosskey-request": {
        source: "iana"
      },
      "application/mp21": {
        source: "iana",
        extensions: ["m21", "mp21"]
      },
      "application/mp4": {
        source: "iana",
        extensions: ["mp4s", "m4p"]
      },
      "application/mpeg4-generic": {
        source: "iana"
      },
      "application/mpeg4-iod": {
        source: "iana"
      },
      "application/mpeg4-iod-xmt": {
        source: "iana"
      },
      "application/mrb-consumer+xml": {
        source: "iana",
        compressible: true
      },
      "application/mrb-publish+xml": {
        source: "iana",
        compressible: true
      },
      "application/msc-ivr+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msc-mixer+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msword": {
        source: "iana",
        compressible: false,
        extensions: ["doc", "dot"]
      },
      "application/mud+json": {
        source: "iana",
        compressible: true
      },
      "application/multipart-core": {
        source: "iana"
      },
      "application/mxf": {
        source: "iana",
        extensions: ["mxf"]
      },
      "application/n-quads": {
        source: "iana",
        extensions: ["nq"]
      },
      "application/n-triples": {
        source: "iana",
        extensions: ["nt"]
      },
      "application/nasdata": {
        source: "iana"
      },
      "application/news-checkgroups": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-groupinfo": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-transmission": {
        source: "iana"
      },
      "application/nlsml+xml": {
        source: "iana",
        compressible: true
      },
      "application/node": {
        source: "iana",
        extensions: ["cjs"]
      },
      "application/nss": {
        source: "iana"
      },
      "application/oauth-authz-req+jwt": {
        source: "iana"
      },
      "application/oblivious-dns-message": {
        source: "iana"
      },
      "application/ocsp-request": {
        source: "iana"
      },
      "application/ocsp-response": {
        source: "iana"
      },
      "application/octet-stream": {
        source: "iana",
        compressible: false,
        extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
      },
      "application/oda": {
        source: "iana",
        extensions: ["oda"]
      },
      "application/odm+xml": {
        source: "iana",
        compressible: true
      },
      "application/odx": {
        source: "iana"
      },
      "application/oebps-package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["opf"]
      },
      "application/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogx"]
      },
      "application/omdoc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["omdoc"]
      },
      "application/onenote": {
        source: "apache",
        extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
      },
      "application/opc-nodeset+xml": {
        source: "iana",
        compressible: true
      },
      "application/oscore": {
        source: "iana"
      },
      "application/oxps": {
        source: "iana",
        extensions: ["oxps"]
      },
      "application/p21": {
        source: "iana"
      },
      "application/p21+zip": {
        source: "iana",
        compressible: false
      },
      "application/p2p-overlay+xml": {
        source: "iana",
        compressible: true,
        extensions: ["relo"]
      },
      "application/parityfec": {
        source: "iana"
      },
      "application/passport": {
        source: "iana"
      },
      "application/patch-ops-error+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xer"]
      },
      "application/pdf": {
        source: "iana",
        compressible: false,
        extensions: ["pdf"]
      },
      "application/pdx": {
        source: "iana"
      },
      "application/pem-certificate-chain": {
        source: "iana"
      },
      "application/pgp-encrypted": {
        source: "iana",
        compressible: false,
        extensions: ["pgp"]
      },
      "application/pgp-keys": {
        source: "iana",
        extensions: ["asc"]
      },
      "application/pgp-signature": {
        source: "iana",
        extensions: ["asc", "sig"]
      },
      "application/pics-rules": {
        source: "apache",
        extensions: ["prf"]
      },
      "application/pidf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pidf-diff+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pkcs10": {
        source: "iana",
        extensions: ["p10"]
      },
      "application/pkcs12": {
        source: "iana"
      },
      "application/pkcs7-mime": {
        source: "iana",
        extensions: ["p7m", "p7c"]
      },
      "application/pkcs7-signature": {
        source: "iana",
        extensions: ["p7s"]
      },
      "application/pkcs8": {
        source: "iana",
        extensions: ["p8"]
      },
      "application/pkcs8-encrypted": {
        source: "iana"
      },
      "application/pkix-attr-cert": {
        source: "iana",
        extensions: ["ac"]
      },
      "application/pkix-cert": {
        source: "iana",
        extensions: ["cer"]
      },
      "application/pkix-crl": {
        source: "iana",
        extensions: ["crl"]
      },
      "application/pkix-pkipath": {
        source: "iana",
        extensions: ["pkipath"]
      },
      "application/pkixcmp": {
        source: "iana",
        extensions: ["pki"]
      },
      "application/pls+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pls"]
      },
      "application/poc-settings+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/postscript": {
        source: "iana",
        compressible: true,
        extensions: ["ai", "eps", "ps"]
      },
      "application/ppsp-tracker+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+xml": {
        source: "iana",
        compressible: true
      },
      "application/provenance+xml": {
        source: "iana",
        compressible: true,
        extensions: ["provx"]
      },
      "application/prs.alvestrand.titrax-sheet": {
        source: "iana"
      },
      "application/prs.cww": {
        source: "iana",
        extensions: ["cww"]
      },
      "application/prs.cyn": {
        source: "iana",
        charset: "7-BIT"
      },
      "application/prs.hpub+zip": {
        source: "iana",
        compressible: false
      },
      "application/prs.nprend": {
        source: "iana"
      },
      "application/prs.plucker": {
        source: "iana"
      },
      "application/prs.rdf-xml-crypt": {
        source: "iana"
      },
      "application/prs.xsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/pskc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pskcxml"]
      },
      "application/pvd+json": {
        source: "iana",
        compressible: true
      },
      "application/qsig": {
        source: "iana"
      },
      "application/raml+yaml": {
        compressible: true,
        extensions: ["raml"]
      },
      "application/raptorfec": {
        source: "iana"
      },
      "application/rdap+json": {
        source: "iana",
        compressible: true
      },
      "application/rdf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rdf", "owl"]
      },
      "application/reginfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rif"]
      },
      "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: ["rnc"]
      },
      "application/remote-printing": {
        source: "iana"
      },
      "application/reputon+json": {
        source: "iana",
        compressible: true
      },
      "application/resource-lists+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rl"]
      },
      "application/resource-lists-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rld"]
      },
      "application/rfc+xml": {
        source: "iana",
        compressible: true
      },
      "application/riscos": {
        source: "iana"
      },
      "application/rlmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/rls-services+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rs"]
      },
      "application/route-apd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rapd"]
      },
      "application/route-s-tsid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sls"]
      },
      "application/route-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rusd"]
      },
      "application/rpki-ghostbusters": {
        source: "iana",
        extensions: ["gbr"]
      },
      "application/rpki-manifest": {
        source: "iana",
        extensions: ["mft"]
      },
      "application/rpki-publication": {
        source: "iana"
      },
      "application/rpki-roa": {
        source: "iana",
        extensions: ["roa"]
      },
      "application/rpki-updown": {
        source: "iana"
      },
      "application/rsd+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rsd"]
      },
      "application/rss+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rss"]
      },
      "application/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "application/rtploopback": {
        source: "iana"
      },
      "application/rtx": {
        source: "iana"
      },
      "application/samlassertion+xml": {
        source: "iana",
        compressible: true
      },
      "application/samlmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/sarif+json": {
        source: "iana",
        compressible: true
      },
      "application/sarif-external-properties+json": {
        source: "iana",
        compressible: true
      },
      "application/sbe": {
        source: "iana"
      },
      "application/sbml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sbml"]
      },
      "application/scaip+xml": {
        source: "iana",
        compressible: true
      },
      "application/scim+json": {
        source: "iana",
        compressible: true
      },
      "application/scvp-cv-request": {
        source: "iana",
        extensions: ["scq"]
      },
      "application/scvp-cv-response": {
        source: "iana",
        extensions: ["scs"]
      },
      "application/scvp-vp-request": {
        source: "iana",
        extensions: ["spq"]
      },
      "application/scvp-vp-response": {
        source: "iana",
        extensions: ["spp"]
      },
      "application/sdp": {
        source: "iana",
        extensions: ["sdp"]
      },
      "application/secevent+jwt": {
        source: "iana"
      },
      "application/senml+cbor": {
        source: "iana"
      },
      "application/senml+json": {
        source: "iana",
        compressible: true
      },
      "application/senml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["senmlx"]
      },
      "application/senml-etch+cbor": {
        source: "iana"
      },
      "application/senml-etch+json": {
        source: "iana",
        compressible: true
      },
      "application/senml-exi": {
        source: "iana"
      },
      "application/sensml+cbor": {
        source: "iana"
      },
      "application/sensml+json": {
        source: "iana",
        compressible: true
      },
      "application/sensml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sensmlx"]
      },
      "application/sensml-exi": {
        source: "iana"
      },
      "application/sep+xml": {
        source: "iana",
        compressible: true
      },
      "application/sep-exi": {
        source: "iana"
      },
      "application/session-info": {
        source: "iana"
      },
      "application/set-payment": {
        source: "iana"
      },
      "application/set-payment-initiation": {
        source: "iana",
        extensions: ["setpay"]
      },
      "application/set-registration": {
        source: "iana"
      },
      "application/set-registration-initiation": {
        source: "iana",
        extensions: ["setreg"]
      },
      "application/sgml": {
        source: "iana"
      },
      "application/sgml-open-catalog": {
        source: "iana"
      },
      "application/shf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["shf"]
      },
      "application/sieve": {
        source: "iana",
        extensions: ["siv", "sieve"]
      },
      "application/simple-filter+xml": {
        source: "iana",
        compressible: true
      },
      "application/simple-message-summary": {
        source: "iana"
      },
      "application/simplesymbolcontainer": {
        source: "iana"
      },
      "application/sipc": {
        source: "iana"
      },
      "application/slate": {
        source: "iana"
      },
      "application/smil": {
        source: "iana"
      },
      "application/smil+xml": {
        source: "iana",
        compressible: true,
        extensions: ["smi", "smil"]
      },
      "application/smpte336m": {
        source: "iana"
      },
      "application/soap+fastinfoset": {
        source: "iana"
      },
      "application/soap+xml": {
        source: "iana",
        compressible: true
      },
      "application/sparql-query": {
        source: "iana",
        extensions: ["rq"]
      },
      "application/sparql-results+xml": {
        source: "iana",
        compressible: true,
        extensions: ["srx"]
      },
      "application/spdx+json": {
        source: "iana",
        compressible: true
      },
      "application/spirits-event+xml": {
        source: "iana",
        compressible: true
      },
      "application/sql": {
        source: "iana"
      },
      "application/srgs": {
        source: "iana",
        extensions: ["gram"]
      },
      "application/srgs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["grxml"]
      },
      "application/sru+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sru"]
      },
      "application/ssdl+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ssdl"]
      },
      "application/ssml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ssml"]
      },
      "application/stix+json": {
        source: "iana",
        compressible: true
      },
      "application/swid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["swidtag"]
      },
      "application/tamp-apex-update": {
        source: "iana"
      },
      "application/tamp-apex-update-confirm": {
        source: "iana"
      },
      "application/tamp-community-update": {
        source: "iana"
      },
      "application/tamp-community-update-confirm": {
        source: "iana"
      },
      "application/tamp-error": {
        source: "iana"
      },
      "application/tamp-sequence-adjust": {
        source: "iana"
      },
      "application/tamp-sequence-adjust-confirm": {
        source: "iana"
      },
      "application/tamp-status-query": {
        source: "iana"
      },
      "application/tamp-status-response": {
        source: "iana"
      },
      "application/tamp-update": {
        source: "iana"
      },
      "application/tamp-update-confirm": {
        source: "iana"
      },
      "application/tar": {
        compressible: true
      },
      "application/taxii+json": {
        source: "iana",
        compressible: true
      },
      "application/td+json": {
        source: "iana",
        compressible: true
      },
      "application/tei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tei", "teicorpus"]
      },
      "application/tetra_isi": {
        source: "iana"
      },
      "application/thraud+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tfi"]
      },
      "application/timestamp-query": {
        source: "iana"
      },
      "application/timestamp-reply": {
        source: "iana"
      },
      "application/timestamped-data": {
        source: "iana",
        extensions: ["tsd"]
      },
      "application/tlsrpt+gzip": {
        source: "iana"
      },
      "application/tlsrpt+json": {
        source: "iana",
        compressible: true
      },
      "application/tnauthlist": {
        source: "iana"
      },
      "application/token-introspection+jwt": {
        source: "iana"
      },
      "application/toml": {
        compressible: true,
        extensions: ["toml"]
      },
      "application/trickle-ice-sdpfrag": {
        source: "iana"
      },
      "application/trig": {
        source: "iana",
        extensions: ["trig"]
      },
      "application/ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ttml"]
      },
      "application/tve-trigger": {
        source: "iana"
      },
      "application/tzif": {
        source: "iana"
      },
      "application/tzif-leap": {
        source: "iana"
      },
      "application/ubjson": {
        compressible: false,
        extensions: ["ubj"]
      },
      "application/ulpfec": {
        source: "iana"
      },
      "application/urc-grpsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-ressheet+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsheet"]
      },
      "application/urc-targetdesc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["td"]
      },
      "application/urc-uisocketdesc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vcard+json": {
        source: "iana",
        compressible: true
      },
      "application/vcard+xml": {
        source: "iana",
        compressible: true
      },
      "application/vemmi": {
        source: "iana"
      },
      "application/vividence.scriptfile": {
        source: "apache"
      },
      "application/vnd.1000minds.decision-model+xml": {
        source: "iana",
        compressible: true,
        extensions: ["1km"]
      },
      "application/vnd.3gpp-prose+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-prose-pc3ch+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-v2x-local-service-information": {
        source: "iana"
      },
      "application/vnd.3gpp.5gnas": {
        source: "iana"
      },
      "application/vnd.3gpp.access-transfer-events+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.bsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gmop+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gtpc": {
        source: "iana"
      },
      "application/vnd.3gpp.interworking-data": {
        source: "iana"
      },
      "application/vnd.3gpp.lpp": {
        source: "iana"
      },
      "application/vnd.3gpp.mc-signalling-ear": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-payload": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-signalling": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-floor-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-signed+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-init-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-transmission-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mid-call+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ngap": {
        source: "iana"
      },
      "application/vnd.3gpp.pfcp": {
        source: "iana"
      },
      "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: ["plb"]
      },
      "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: ["psb"]
      },
      "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: ["pvb"]
      },
      "application/vnd.3gpp.s1ap": {
        source: "iana"
      },
      "application/vnd.3gpp.sms": {
        source: "iana"
      },
      "application/vnd.3gpp.sms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-ext+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.state-and-event-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ussd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.bcmcsinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.sms": {
        source: "iana"
      },
      "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: ["tcap"]
      },
      "application/vnd.3lightssoftware.imagescal": {
        source: "iana"
      },
      "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: ["pwn"]
      },
      "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: ["aso"]
      },
      "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: ["imp"]
      },
      "application/vnd.acucobol": {
        source: "iana",
        extensions: ["acu"]
      },
      "application/vnd.acucorp": {
        source: "iana",
        extensions: ["atc", "acutc"]
      },
      "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        compressible: false,
        extensions: ["air"]
      },
      "application/vnd.adobe.flash.movie": {
        source: "iana"
      },
      "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: ["fcdt"]
      },
      "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: ["fxp", "fxpl"]
      },
      "application/vnd.adobe.partial-upload": {
        source: "iana"
      },
      "application/vnd.adobe.xdp+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdp"]
      },
      "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: ["xfdf"]
      },
      "application/vnd.aether.imp": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata-pagedef": {
        source: "iana"
      },
      "application/vnd.afpc.cmoca-cmresource": {
        source: "iana"
      },
      "application/vnd.afpc.foca-charset": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codedfont": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codepage": {
        source: "iana"
      },
      "application/vnd.afpc.modca": {
        source: "iana"
      },
      "application/vnd.afpc.modca-cmtable": {
        source: "iana"
      },
      "application/vnd.afpc.modca-formdef": {
        source: "iana"
      },
      "application/vnd.afpc.modca-mediummap": {
        source: "iana"
      },
      "application/vnd.afpc.modca-objectcontainer": {
        source: "iana"
      },
      "application/vnd.afpc.modca-overlay": {
        source: "iana"
      },
      "application/vnd.afpc.modca-pagesegment": {
        source: "iana"
      },
      "application/vnd.age": {
        source: "iana",
        extensions: ["age"]
      },
      "application/vnd.ah-barcode": {
        source: "iana"
      },
      "application/vnd.ahead.space": {
        source: "iana",
        extensions: ["ahead"]
      },
      "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: ["azf"]
      },
      "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: ["azs"]
      },
      "application/vnd.amadeus+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: ["azw"]
      },
      "application/vnd.amazon.mobi8-ebook": {
        source: "iana"
      },
      "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: ["acc"]
      },
      "application/vnd.amiga.ami": {
        source: "iana",
        extensions: ["ami"]
      },
      "application/vnd.amundsen.maze+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.android.ota": {
        source: "iana"
      },
      "application/vnd.android.package-archive": {
        source: "apache",
        compressible: false,
        extensions: ["apk"]
      },
      "application/vnd.anki": {
        source: "iana"
      },
      "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: ["cii"]
      },
      "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: ["fti"]
      },
      "application/vnd.antix.game-component": {
        source: "iana",
        extensions: ["atx"]
      },
      "application/vnd.apache.arrow.file": {
        source: "iana"
      },
      "application/vnd.apache.arrow.stream": {
        source: "iana"
      },
      "application/vnd.apache.thrift.binary": {
        source: "iana"
      },
      "application/vnd.apache.thrift.compact": {
        source: "iana"
      },
      "application/vnd.apache.thrift.json": {
        source: "iana"
      },
      "application/vnd.api+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.aplextor.warrp+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apothekende.reservation+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apple.installer+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpkg"]
      },
      "application/vnd.apple.keynote": {
        source: "iana",
        extensions: ["key"]
      },
      "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: ["m3u8"]
      },
      "application/vnd.apple.numbers": {
        source: "iana",
        extensions: ["numbers"]
      },
      "application/vnd.apple.pages": {
        source: "iana",
        extensions: ["pages"]
      },
      "application/vnd.apple.pkpass": {
        compressible: false,
        extensions: ["pkpass"]
      },
      "application/vnd.arastra.swi": {
        source: "iana"
      },
      "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: ["swi"]
      },
      "application/vnd.artisan+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.artsquare": {
        source: "iana"
      },
      "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: ["iota"]
      },
      "application/vnd.audiograph": {
        source: "iana",
        extensions: ["aep"]
      },
      "application/vnd.autopackage": {
        source: "iana"
      },
      "application/vnd.avalon+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.avistar+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.balsamiq.bmml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["bmml"]
      },
      "application/vnd.balsamiq.bmpr": {
        source: "iana"
      },
      "application/vnd.banana-accounting": {
        source: "iana"
      },
      "application/vnd.bbf.usp.error": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bekitzur-stech+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bint.med-content": {
        source: "iana"
      },
      "application/vnd.biopax.rdf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.blink-idb-value-wrapper": {
        source: "iana"
      },
      "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: ["mpm"]
      },
      "application/vnd.bluetooth.ep.oob": {
        source: "iana"
      },
      "application/vnd.bluetooth.le.oob": {
        source: "iana"
      },
      "application/vnd.bmi": {
        source: "iana",
        extensions: ["bmi"]
      },
      "application/vnd.bpf": {
        source: "iana"
      },
      "application/vnd.bpf3": {
        source: "iana"
      },
      "application/vnd.businessobjects": {
        source: "iana",
        extensions: ["rep"]
      },
      "application/vnd.byu.uapi+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cab-jscript": {
        source: "iana"
      },
      "application/vnd.canon-cpdl": {
        source: "iana"
      },
      "application/vnd.canon-lips": {
        source: "iana"
      },
      "application/vnd.capasystems-pg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cendio.thinlinc.clientconf": {
        source: "iana"
      },
      "application/vnd.century-systems.tcp_stream": {
        source: "iana"
      },
      "application/vnd.chemdraw+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdxml"]
      },
      "application/vnd.chess-pgn": {
        source: "iana"
      },
      "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: ["mmd"]
      },
      "application/vnd.ciedi": {
        source: "iana"
      },
      "application/vnd.cinderella": {
        source: "iana",
        extensions: ["cdy"]
      },
      "application/vnd.cirpack.isdn-ext": {
        source: "iana"
      },
      "application/vnd.citationstyles.style+xml": {
        source: "iana",
        compressible: true,
        extensions: ["csl"]
      },
      "application/vnd.claymore": {
        source: "iana",
        extensions: ["cla"]
      },
      "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: ["rp9"]
      },
      "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
      },
      "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: ["c11amc"]
      },
      "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: ["c11amz"]
      },
      "application/vnd.coffeescript": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet-template": {
        source: "iana"
      },
      "application/vnd.collection+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.doc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.next+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.comicbook+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.comicbook-rar": {
        source: "iana"
      },
      "application/vnd.commerce-battelle": {
        source: "iana"
      },
      "application/vnd.commonspace": {
        source: "iana",
        extensions: ["csp"]
      },
      "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: ["cdbcmsg"]
      },
      "application/vnd.coreos.ignition+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cosmocaller": {
        source: "iana",
        extensions: ["cmc"]
      },
      "application/vnd.crick.clicker": {
        source: "iana",
        extensions: ["clkx"]
      },
      "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: ["clkk"]
      },
      "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: ["clkp"]
      },
      "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: ["clkt"]
      },
      "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: ["clkw"]
      },
      "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wbs"]
      },
      "application/vnd.cryptii.pipe+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.crypto-shade-file": {
        source: "iana"
      },
      "application/vnd.cryptomator.encrypted": {
        source: "iana"
      },
      "application/vnd.cryptomator.vault": {
        source: "iana"
      },
      "application/vnd.ctc-posml": {
        source: "iana",
        extensions: ["pml"]
      },
      "application/vnd.ctct.ws+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cups-pdf": {
        source: "iana"
      },
      "application/vnd.cups-postscript": {
        source: "iana"
      },
      "application/vnd.cups-ppd": {
        source: "iana",
        extensions: ["ppd"]
      },
      "application/vnd.cups-raster": {
        source: "iana"
      },
      "application/vnd.cups-raw": {
        source: "iana"
      },
      "application/vnd.curl": {
        source: "iana"
      },
      "application/vnd.curl.car": {
        source: "apache",
        extensions: ["car"]
      },
      "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: ["pcurl"]
      },
      "application/vnd.cyan.dean.root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cybank": {
        source: "iana"
      },
      "application/vnd.cyclonedx+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cyclonedx+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.d2l.coursepackage1p0+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.d3m-dataset": {
        source: "iana"
      },
      "application/vnd.d3m-problem": {
        source: "iana"
      },
      "application/vnd.dart": {
        source: "iana",
        compressible: true,
        extensions: ["dart"]
      },
      "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: ["rdz"]
      },
      "application/vnd.datapackage+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dataresource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dbf": {
        source: "iana",
        extensions: ["dbf"]
      },
      "application/vnd.debian.binary-package": {
        source: "iana"
      },
      "application/vnd.dece.data": {
        source: "iana",
        extensions: ["uvf", "uvvf", "uvd", "uvvd"]
      },
      "application/vnd.dece.ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uvt", "uvvt"]
      },
      "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: ["uvx", "uvvx"]
      },
      "application/vnd.dece.zip": {
        source: "iana",
        extensions: ["uvz", "uvvz"]
      },
      "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: ["fe_launch"]
      },
      "application/vnd.desmume.movie": {
        source: "iana"
      },
      "application/vnd.dir-bi.plate-dl-nosuffix": {
        source: "iana"
      },
      "application/vnd.dm.delegation+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dna": {
        source: "iana",
        extensions: ["dna"]
      },
      "application/vnd.document+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: ["mlp"]
      },
      "application/vnd.dolby.mobile.1": {
        source: "iana"
      },
      "application/vnd.dolby.mobile.2": {
        source: "iana"
      },
      "application/vnd.doremir.scorecloud-binary-document": {
        source: "iana"
      },
      "application/vnd.dpgraph": {
        source: "iana",
        extensions: ["dpg"]
      },
      "application/vnd.dreamfactory": {
        source: "iana",
        extensions: ["dfac"]
      },
      "application/vnd.drive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: ["kpxx"]
      },
      "application/vnd.dtg.local": {
        source: "iana"
      },
      "application/vnd.dtg.local.flash": {
        source: "iana"
      },
      "application/vnd.dtg.local.html": {
        source: "iana"
      },
      "application/vnd.dvb.ait": {
        source: "iana",
        extensions: ["ait"]
      },
      "application/vnd.dvb.dvbisl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.dvbj": {
        source: "iana"
      },
      "application/vnd.dvb.esgcontainer": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcdftnotifaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess2": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgpdd": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcroaming": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-base": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-enhancement": {
        source: "iana"
      },
      "application/vnd.dvb.notif-aggregate-root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-container+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-generic+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-msglist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-init+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.pfr": {
        source: "iana"
      },
      "application/vnd.dvb.service": {
        source: "iana",
        extensions: ["svc"]
      },
      "application/vnd.dxr": {
        source: "iana"
      },
      "application/vnd.dynageo": {
        source: "iana",
        extensions: ["geo"]
      },
      "application/vnd.dzr": {
        source: "iana"
      },
      "application/vnd.easykaraoke.cdgdownload": {
        source: "iana"
      },
      "application/vnd.ecdis-update": {
        source: "iana"
      },
      "application/vnd.ecip.rlp": {
        source: "iana"
      },
      "application/vnd.eclipse.ditto+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: ["mag"]
      },
      "application/vnd.ecowin.filerequest": {
        source: "iana"
      },
      "application/vnd.ecowin.fileupdate": {
        source: "iana"
      },
      "application/vnd.ecowin.series": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesrequest": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesupdate": {
        source: "iana"
      },
      "application/vnd.efi.img": {
        source: "iana"
      },
      "application/vnd.efi.iso": {
        source: "iana"
      },
      "application/vnd.emclient.accessrequest+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.enliven": {
        source: "iana",
        extensions: ["nml"]
      },
      "application/vnd.enphase.envoy": {
        source: "iana"
      },
      "application/vnd.eprints.data+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.epson.esf": {
        source: "iana",
        extensions: ["esf"]
      },
      "application/vnd.epson.msf": {
        source: "iana",
        extensions: ["msf"]
      },
      "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: ["qam"]
      },
      "application/vnd.epson.salt": {
        source: "iana",
        extensions: ["slt"]
      },
      "application/vnd.epson.ssf": {
        source: "iana",
        extensions: ["ssf"]
      },
      "application/vnd.ericsson.quickcall": {
        source: "iana"
      },
      "application/vnd.espass-espass+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.eszigno3+xml": {
        source: "iana",
        compressible: true,
        extensions: ["es3", "et3"]
      },
      "application/vnd.etsi.aoc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.asic-e+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.asic-s+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.cug+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvcommand+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-bc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-cod+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-npvr+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvservice+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mcid+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mheg5": {
        source: "iana"
      },
      "application/vnd.etsi.overload-control-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.pstn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.sci+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.simservs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.timestamp-token": {
        source: "iana"
      },
      "application/vnd.etsi.tsl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.tsl.der": {
        source: "iana"
      },
      "application/vnd.eu.kasparian.car+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.eudora.data": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.profile": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.settings": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.theme": {
        source: "iana"
      },
      "application/vnd.exstream-empower+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.exstream-package": {
        source: "iana"
      },
      "application/vnd.ezpix-album": {
        source: "iana",
        extensions: ["ez2"]
      },
      "application/vnd.ezpix-package": {
        source: "iana",
        extensions: ["ez3"]
      },
      "application/vnd.f-secure.mobile": {
        source: "iana"
      },
      "application/vnd.familysearch.gedcom+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.fastcopy-disk-image": {
        source: "iana"
      },
      "application/vnd.fdf": {
        source: "iana",
        extensions: ["fdf"]
      },
      "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: ["mseed"]
      },
      "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: ["seed", "dataless"]
      },
      "application/vnd.ffsns": {
        source: "iana"
      },
      "application/vnd.ficlab.flb+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.filmit.zfc": {
        source: "iana"
      },
      "application/vnd.fints": {
        source: "iana"
      },
      "application/vnd.firemonkeys.cloudcell": {
        source: "iana"
      },
      "application/vnd.flographit": {
        source: "iana",
        extensions: ["gph"]
      },
      "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: ["ftc"]
      },
      "application/vnd.font-fontforge-sfd": {
        source: "iana"
      },
      "application/vnd.framemaker": {
        source: "iana",
        extensions: ["fm", "frame", "maker", "book"]
      },
      "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: ["fnc"]
      },
      "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: ["ltf"]
      },
      "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: ["fsc"]
      },
      "application/vnd.fujifilm.fb.docuworks": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.binder": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.jfi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: ["oas"]
      },
      "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: ["oa2"]
      },
      "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: ["oa3"]
      },
      "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: ["fg5"]
      },
      "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: ["bh2"]
      },
      "application/vnd.fujixerox.art-ex": {
        source: "iana"
      },
      "application/vnd.fujixerox.art4": {
        source: "iana"
      },
      "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: ["ddd"]
      },
      "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: ["xdw"]
      },
      "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: ["xbd"]
      },
      "application/vnd.fujixerox.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujixerox.hbpl": {
        source: "iana"
      },
      "application/vnd.fut-misnet": {
        source: "iana"
      },
      "application/vnd.futoin+cbor": {
        source: "iana"
      },
      "application/vnd.futoin+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: ["fzs"]
      },
      "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: ["txd"]
      },
      "application/vnd.gentics.grd+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geo+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geocube+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geogebra.file": {
        source: "iana",
        extensions: ["ggb"]
      },
      "application/vnd.geogebra.slides": {
        source: "iana"
      },
      "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: ["ggt"]
      },
      "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: ["gex", "gre"]
      },
      "application/vnd.geonext": {
        source: "iana",
        extensions: ["gxt"]
      },
      "application/vnd.geoplan": {
        source: "iana",
        extensions: ["g2w"]
      },
      "application/vnd.geospace": {
        source: "iana",
        extensions: ["g3w"]
      },
      "application/vnd.gerber": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt-response": {
        source: "iana"
      },
      "application/vnd.gmx": {
        source: "iana",
        extensions: ["gmx"]
      },
      "application/vnd.google-apps.document": {
        compressible: false,
        extensions: ["gdoc"]
      },
      "application/vnd.google-apps.presentation": {
        compressible: false,
        extensions: ["gslides"]
      },
      "application/vnd.google-apps.spreadsheet": {
        compressible: false,
        extensions: ["gsheet"]
      },
      "application/vnd.google-earth.kml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["kml"]
      },
      "application/vnd.google-earth.kmz": {
        source: "iana",
        compressible: false,
        extensions: ["kmz"]
      },
      "application/vnd.gov.sk.e-form+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.gov.sk.e-form+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.gov.sk.xmldatacontainer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.grafeq": {
        source: "iana",
        extensions: ["gqf", "gqs"]
      },
      "application/vnd.gridmp": {
        source: "iana"
      },
      "application/vnd.groove-account": {
        source: "iana",
        extensions: ["gac"]
      },
      "application/vnd.groove-help": {
        source: "iana",
        extensions: ["ghf"]
      },
      "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: ["gim"]
      },
      "application/vnd.groove-injector": {
        source: "iana",
        extensions: ["grv"]
      },
      "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: ["gtm"]
      },
      "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: ["tpl"]
      },
      "application/vnd.groove-vcard": {
        source: "iana",
        extensions: ["vcg"]
      },
      "application/vnd.hal+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hal+xml": {
        source: "iana",
        compressible: true,
        extensions: ["hal"]
      },
      "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zmm"]
      },
      "application/vnd.hbci": {
        source: "iana",
        extensions: ["hbci"]
      },
      "application/vnd.hc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hcl-bireports": {
        source: "iana"
      },
      "application/vnd.hdt": {
        source: "iana"
      },
      "application/vnd.heroku+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: ["les"]
      },
      "application/vnd.hl7cda+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hl7v2+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: ["hpgl"]
      },
      "application/vnd.hp-hpid": {
        source: "iana",
        extensions: ["hpid"]
      },
      "application/vnd.hp-hps": {
        source: "iana",
        extensions: ["hps"]
      },
      "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: ["jlt"]
      },
      "application/vnd.hp-pcl": {
        source: "iana",
        extensions: ["pcl"]
      },
      "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: ["pclxl"]
      },
      "application/vnd.httphone": {
        source: "iana"
      },
      "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: ["sfd-hdstx"]
      },
      "application/vnd.hyper+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyper-item+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyperdrive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hzn-3d-crossword": {
        source: "iana"
      },
      "application/vnd.ibm.afplinedata": {
        source: "iana"
      },
      "application/vnd.ibm.electronic-media": {
        source: "iana"
      },
      "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: ["mpy"]
      },
      "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: ["afp", "listafp", "list3820"]
      },
      "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: ["irm"]
      },
      "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: ["sc"]
      },
      "application/vnd.iccprofile": {
        source: "iana",
        extensions: ["icc", "icm"]
      },
      "application/vnd.ieee.1905": {
        source: "iana"
      },
      "application/vnd.igloader": {
        source: "iana",
        extensions: ["igl"]
      },
      "application/vnd.imagemeter.folder+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.imagemeter.image+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: ["ivp"]
      },
      "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: ["ivu"]
      },
      "application/vnd.ims.imsccv1p1": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p2": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p3": {
        source: "iana"
      },
      "application/vnd.ims.lis.v2.result+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy.id+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informedcontrol.rms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informix-visionary": {
        source: "iana"
      },
      "application/vnd.infotech.project": {
        source: "iana"
      },
      "application/vnd.infotech.project+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.innopath.wamp.notification": {
        source: "iana"
      },
      "application/vnd.insors.igm": {
        source: "iana",
        extensions: ["igm"]
      },
      "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: ["xpw", "xpx"]
      },
      "application/vnd.intergeo": {
        source: "iana",
        extensions: ["i2g"]
      },
      "application/vnd.intertrust.digibox": {
        source: "iana"
      },
      "application/vnd.intertrust.nncp": {
        source: "iana"
      },
      "application/vnd.intu.qbo": {
        source: "iana",
        extensions: ["qbo"]
      },
      "application/vnd.intu.qfx": {
        source: "iana",
        extensions: ["qfx"]
      },
      "application/vnd.iptc.g2.catalogitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.conceptitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.knowledgeitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.packageitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.planningitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: ["rcprofile"]
      },
      "application/vnd.irepository.package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["irp"]
      },
      "application/vnd.is-xpr": {
        source: "iana",
        extensions: ["xpr"]
      },
      "application/vnd.isac.fcs": {
        source: "iana",
        extensions: ["fcs"]
      },
      "application/vnd.iso11783-10+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.jam": {
        source: "iana",
        extensions: ["jam"]
      },
      "application/vnd.japannet-directory-service": {
        source: "iana"
      },
      "application/vnd.japannet-jpnstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-payment-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-registration": {
        source: "iana"
      },
      "application/vnd.japannet-registration-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-setstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-verification": {
        source: "iana"
      },
      "application/vnd.japannet-verification-wakeup": {
        source: "iana"
      },
      "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: ["rms"]
      },
      "application/vnd.jisp": {
        source: "iana",
        extensions: ["jisp"]
      },
      "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: ["joda"]
      },
      "application/vnd.jsk.isdn-ngn": {
        source: "iana"
      },
      "application/vnd.kahootz": {
        source: "iana",
        extensions: ["ktz", "ktr"]
      },
      "application/vnd.kde.karbon": {
        source: "iana",
        extensions: ["karbon"]
      },
      "application/vnd.kde.kchart": {
        source: "iana",
        extensions: ["chrt"]
      },
      "application/vnd.kde.kformula": {
        source: "iana",
        extensions: ["kfo"]
      },
      "application/vnd.kde.kivio": {
        source: "iana",
        extensions: ["flw"]
      },
      "application/vnd.kde.kontour": {
        source: "iana",
        extensions: ["kon"]
      },
      "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: ["kpr", "kpt"]
      },
      "application/vnd.kde.kspread": {
        source: "iana",
        extensions: ["ksp"]
      },
      "application/vnd.kde.kword": {
        source: "iana",
        extensions: ["kwd", "kwt"]
      },
      "application/vnd.kenameaapp": {
        source: "iana",
        extensions: ["htke"]
      },
      "application/vnd.kidspiration": {
        source: "iana",
        extensions: ["kia"]
      },
      "application/vnd.kinar": {
        source: "iana",
        extensions: ["kne", "knp"]
      },
      "application/vnd.koan": {
        source: "iana",
        extensions: ["skp", "skd", "skt", "skm"]
      },
      "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: ["sse"]
      },
      "application/vnd.las": {
        source: "iana"
      },
      "application/vnd.las.las+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.las.las+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lasxml"]
      },
      "application/vnd.laszip": {
        source: "iana"
      },
      "application/vnd.leap+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.liberty-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: ["lbd"]
      },
      "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lbe"]
      },
      "application/vnd.logipipe.circuit+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.loom": {
        source: "iana"
      },
      "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: ["123"]
      },
      "application/vnd.lotus-approach": {
        source: "iana",
        extensions: ["apr"]
      },
      "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: ["pre"]
      },
      "application/vnd.lotus-notes": {
        source: "iana",
        extensions: ["nsf"]
      },
      "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: ["org"]
      },
      "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: ["scm"]
      },
      "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: ["lwp"]
      },
      "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: ["portpkg"]
      },
      "application/vnd.mapbox-vector-tile": {
        source: "iana",
        extensions: ["mvt"]
      },
      "application/vnd.marlin.drm.actiontoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.conftoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.license+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.mdcf": {
        source: "iana"
      },
      "application/vnd.mason+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.maxar.archive.3tz+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.maxmind.maxmind-db": {
        source: "iana"
      },
      "application/vnd.mcd": {
        source: "iana",
        extensions: ["mcd"]
      },
      "application/vnd.medcalcdata": {
        source: "iana",
        extensions: ["mc1"]
      },
      "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: ["cdkey"]
      },
      "application/vnd.meridian-slingshot": {
        source: "iana"
      },
      "application/vnd.mfer": {
        source: "iana",
        extensions: ["mwf"]
      },
      "application/vnd.mfmp": {
        source: "iana",
        extensions: ["mfm"]
      },
      "application/vnd.micro+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: ["flo"]
      },
      "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: ["igx"]
      },
      "application/vnd.microsoft.portable-executable": {
        source: "iana"
      },
      "application/vnd.microsoft.windows.thumbnail-cache": {
        source: "iana"
      },
      "application/vnd.miele+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.mif": {
        source: "iana",
        extensions: ["mif"]
      },
      "application/vnd.minisoft-hp3000-save": {
        source: "iana"
      },
      "application/vnd.mitsubishi.misty-guard.trustweb": {
        source: "iana"
      },
      "application/vnd.mobius.daf": {
        source: "iana",
        extensions: ["daf"]
      },
      "application/vnd.mobius.dis": {
        source: "iana",
        extensions: ["dis"]
      },
      "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: ["mbk"]
      },
      "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: ["mqy"]
      },
      "application/vnd.mobius.msl": {
        source: "iana",
        extensions: ["msl"]
      },
      "application/vnd.mobius.plc": {
        source: "iana",
        extensions: ["plc"]
      },
      "application/vnd.mobius.txf": {
        source: "iana",
        extensions: ["txf"]
      },
      "application/vnd.mophun.application": {
        source: "iana",
        extensions: ["mpn"]
      },
      "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: ["mpc"]
      },
      "application/vnd.motorola.flexsuite": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.adsi": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.fis": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.gotap": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.kmr": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.ttc": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.wem": {
        source: "iana"
      },
      "application/vnd.motorola.iprm": {
        source: "iana"
      },
      "application/vnd.mozilla.xul+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xul"]
      },
      "application/vnd.ms-3mfdocument": {
        source: "iana"
      },
      "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: ["cil"]
      },
      "application/vnd.ms-asf": {
        source: "iana"
      },
      "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: ["cab"]
      },
      "application/vnd.ms-color.iccprofile": {
        source: "apache"
      },
      "application/vnd.ms-excel": {
        source: "iana",
        compressible: false,
        extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
      },
      "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: ["xlam"]
      },
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: ["xlsb"]
      },
      "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: ["xlsm"]
      },
      "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: ["xltm"]
      },
      "application/vnd.ms-fontobject": {
        source: "iana",
        compressible: true,
        extensions: ["eot"]
      },
      "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: ["chm"]
      },
      "application/vnd.ms-ims": {
        source: "iana",
        extensions: ["ims"]
      },
      "application/vnd.ms-lrm": {
        source: "iana",
        extensions: ["lrm"]
      },
      "application/vnd.ms-office.activex+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: ["thmx"]
      },
      "application/vnd.ms-opentype": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-outlook": {
        compressible: false,
        extensions: ["msg"]
      },
      "application/vnd.ms-package.obfuscated-opentype": {
        source: "apache"
      },
      "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: ["cat"]
      },
      "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: ["stl"]
      },
      "application/vnd.ms-playready.initiator+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-powerpoint": {
        source: "iana",
        compressible: false,
        extensions: ["ppt", "pps", "pot"]
      },
      "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: ["ppam"]
      },
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: ["pptm"]
      },
      "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: ["sldm"]
      },
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: ["ppsm"]
      },
      "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: ["potm"]
      },
      "application/vnd.ms-printdevicecapabilities+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-printing.printticket+xml": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-printschematicket+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-project": {
        source: "iana",
        extensions: ["mpp", "mpt"]
      },
      "application/vnd.ms-tnef": {
        source: "iana"
      },
      "application/vnd.ms-windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.nwprinting.oob": {
        source: "iana"
      },
      "application/vnd.ms-windows.printerpairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.wsd.oob": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-resp": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-resp": {
        source: "iana"
      },
      "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: ["docm"]
      },
      "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: ["dotm"]
      },
      "application/vnd.ms-works": {
        source: "iana",
        extensions: ["wps", "wks", "wcm", "wdb"]
      },
      "application/vnd.ms-wpl": {
        source: "iana",
        extensions: ["wpl"]
      },
      "application/vnd.ms-xpsdocument": {
        source: "iana",
        compressible: false,
        extensions: ["xps"]
      },
      "application/vnd.msa-disk-image": {
        source: "iana"
      },
      "application/vnd.mseq": {
        source: "iana",
        extensions: ["mseq"]
      },
      "application/vnd.msign": {
        source: "iana"
      },
      "application/vnd.multiad.creator": {
        source: "iana"
      },
      "application/vnd.multiad.creator.cif": {
        source: "iana"
      },
      "application/vnd.music-niff": {
        source: "iana"
      },
      "application/vnd.musician": {
        source: "iana",
        extensions: ["mus"]
      },
      "application/vnd.muvee.style": {
        source: "iana",
        extensions: ["msty"]
      },
      "application/vnd.mynfc": {
        source: "iana",
        extensions: ["taglet"]
      },
      "application/vnd.nacamar.ybrid+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ncd.control": {
        source: "iana"
      },
      "application/vnd.ncd.reference": {
        source: "iana"
      },
      "application/vnd.nearst.inv+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nebumind.line": {
        source: "iana"
      },
      "application/vnd.nervana": {
        source: "iana"
      },
      "application/vnd.netfpx": {
        source: "iana"
      },
      "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: ["nlu"]
      },
      "application/vnd.nimn": {
        source: "iana"
      },
      "application/vnd.nintendo.nitro.rom": {
        source: "iana"
      },
      "application/vnd.nintendo.snes.rom": {
        source: "iana"
      },
      "application/vnd.nitf": {
        source: "iana",
        extensions: ["ntf", "nitf"]
      },
      "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: ["nnd"]
      },
      "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: ["nns"]
      },
      "application/vnd.noblenet-web": {
        source: "iana",
        extensions: ["nnw"]
      },
      "application/vnd.nokia.catalogs": {
        source: "iana"
      },
      "application/vnd.nokia.conml+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.conml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.iptv.config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.isds-radio-presets": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.landmarkcollection+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ac"]
      },
      "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: ["ngdat"]
      },
      "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: ["n-gage"]
      },
      "application/vnd.nokia.ncd": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: ["rpst"]
      },
      "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: ["rpss"]
      },
      "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: ["edm"]
      },
      "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: ["edx"]
      },
      "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: ["ext"]
      },
      "application/vnd.ntt-local.content-share": {
        source: "iana"
      },
      "application/vnd.ntt-local.file-transfer": {
        source: "iana"
      },
      "application/vnd.ntt-local.ogw_remote-access": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_remote": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_tcp_stream": {
        source: "iana"
      },
      "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: ["odc"]
      },
      "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: ["otc"]
      },
      "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: ["odb"]
      },
      "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: ["odf"]
      },
      "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: ["odft"]
      },
      "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        compressible: false,
        extensions: ["odg"]
      },
      "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: ["otg"]
      },
      "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: ["odi"]
      },
      "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: ["oti"]
      },
      "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["odp"]
      },
      "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: ["otp"]
      },
      "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        compressible: false,
        extensions: ["ods"]
      },
      "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: ["ots"]
      },
      "application/vnd.oasis.opendocument.text": {
        source: "iana",
        compressible: false,
        extensions: ["odt"]
      },
      "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: ["odm"]
      },
      "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: ["ott"]
      },
      "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: ["oth"]
      },
      "application/vnd.obn": {
        source: "iana"
      },
      "application/vnd.ocf+cbor": {
        source: "iana"
      },
      "application/vnd.oci.image.manifest.v1+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oftn.l10n+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessdownload+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessstreaming+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.cspg-hexbinary": {
        source: "iana"
      },
      "application/vnd.oipf.dae.svg+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.dae.xhtml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.mippvcontrolmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.pae.gem": {
        source: "iana"
      },
      "application/vnd.oipf.spdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.spdlist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.ueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.userprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: ["xo"]
      },
      "application/vnd.oma-scws-config": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-request": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-response": {
        source: "iana"
      },
      "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.drm-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.imd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.ltkm": {
        source: "iana"
      },
      "application/vnd.oma.bcast.notification+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.provisioningtrigger": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgboot": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sgdu": {
        source: "iana"
      },
      "application/vnd.oma.bcast.simple-symbol-container": {
        source: "iana"
      },
      "application/vnd.oma.bcast.smartcard-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sprov+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.stkm": {
        source: "iana"
      },
      "application/vnd.oma.cab-address-book+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-feature-handler+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-pcc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-subs-invite+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-user-prefs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.dcd": {
        source: "iana"
      },
      "application/vnd.oma.dcdc": {
        source: "iana"
      },
      "application/vnd.oma.dd2+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dd2"]
      },
      "application/vnd.oma.drm.risd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.group-usage-list+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+cbor": {
        source: "iana"
      },
      "application/vnd.oma.lwm2m+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+tlv": {
        source: "iana"
      },
      "application/vnd.oma.pal+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.detailed-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.final-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.groups+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.invocation-descriptor+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.optimized-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.push": {
        source: "iana"
      },
      "application/vnd.oma.scidm.messages+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.xcap-directory+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-email+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-file+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-folder+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omaloc-supl-init": {
        source: "iana"
      },
      "application/vnd.onepager": {
        source: "iana"
      },
      "application/vnd.onepagertamp": {
        source: "iana"
      },
      "application/vnd.onepagertamx": {
        source: "iana"
      },
      "application/vnd.onepagertat": {
        source: "iana"
      },
      "application/vnd.onepagertatp": {
        source: "iana"
      },
      "application/vnd.onepagertatx": {
        source: "iana"
      },
      "application/vnd.openblox.game+xml": {
        source: "iana",
        compressible: true,
        extensions: ["obgx"]
      },
      "application/vnd.openblox.game-binary": {
        source: "iana"
      },
      "application/vnd.openeye.oeb": {
        source: "iana"
      },
      "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: ["oxt"]
      },
      "application/vnd.openstreetmap.data+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osm"]
      },
      "application/vnd.opentimestamps.ots": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawing+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["pptx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: ["sldx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: ["ppsx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "iana",
        extensions: ["potx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        compressible: false,
        extensions: ["xlsx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "iana",
        extensions: ["xltx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.theme+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.vmldrawing": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        compressible: false,
        extensions: ["docx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "iana",
        extensions: ["dotx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.core-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.relationships+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oracle.resource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.orange.indata": {
        source: "iana"
      },
      "application/vnd.osa.netdeploy": {
        source: "iana"
      },
      "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: ["mgp"]
      },
      "application/vnd.osgi.bundle": {
        source: "iana"
      },
      "application/vnd.osgi.dp": {
        source: "iana",
        extensions: ["dp"]
      },
      "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: ["esa"]
      },
      "application/vnd.otps.ct-kip+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oxli.countgraph": {
        source: "iana"
      },
      "application/vnd.pagerduty+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.palm": {
        source: "iana",
        extensions: ["pdb", "pqa", "oprc"]
      },
      "application/vnd.panoply": {
        source: "iana"
      },
      "application/vnd.paos.xml": {
        source: "iana"
      },
      "application/vnd.patentdive": {
        source: "iana"
      },
      "application/vnd.patientecommsdoc": {
        source: "iana"
      },
      "application/vnd.pawaafile": {
        source: "iana",
        extensions: ["paw"]
      },
      "application/vnd.pcos": {
        source: "iana"
      },
      "application/vnd.pg.format": {
        source: "iana",
        extensions: ["str"]
      },
      "application/vnd.pg.osasli": {
        source: "iana",
        extensions: ["ei6"]
      },
      "application/vnd.piaccess.application-licence": {
        source: "iana"
      },
      "application/vnd.picsel": {
        source: "iana",
        extensions: ["efif"]
      },
      "application/vnd.pmi.widget": {
        source: "iana",
        extensions: ["wg"]
      },
      "application/vnd.poc.group-advertisement+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.pocketlearn": {
        source: "iana",
        extensions: ["plf"]
      },
      "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: ["pbd"]
      },
      "application/vnd.powerbuilder6-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder7": {
        source: "iana"
      },
      "application/vnd.powerbuilder7-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder75": {
        source: "iana"
      },
      "application/vnd.powerbuilder75-s": {
        source: "iana"
      },
      "application/vnd.preminet": {
        source: "iana"
      },
      "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: ["box"]
      },
      "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: ["mgz"]
      },
      "application/vnd.psfs": {
        source: "iana"
      },
      "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: ["qps"]
      },
      "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: ["ptid"]
      },
      "application/vnd.pwg-multiplexed": {
        source: "iana"
      },
      "application/vnd.pwg-xhtml-print+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.qualcomm.brew-app-res": {
        source: "iana"
      },
      "application/vnd.quarantainenet": {
        source: "iana"
      },
      "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
      },
      "application/vnd.quobject-quoxdocument": {
        source: "iana"
      },
      "application/vnd.radisys.moml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-stream+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-base+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-group+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-speech+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-transform+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rainstor.data": {
        source: "iana"
      },
      "application/vnd.rapid": {
        source: "iana"
      },
      "application/vnd.rar": {
        source: "iana",
        extensions: ["rar"]
      },
      "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: ["bed"]
      },
      "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: ["mxl"]
      },
      "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musicxml"]
      },
      "application/vnd.renlearn.rlprint": {
        source: "iana"
      },
      "application/vnd.resilient.logic": {
        source: "iana"
      },
      "application/vnd.restful+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: ["cryptonote"]
      },
      "application/vnd.rim.cod": {
        source: "apache",
        extensions: ["cod"]
      },
      "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: ["rm"]
      },
      "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: ["rmvb"]
      },
      "application/vnd.route66.link66+xml": {
        source: "iana",
        compressible: true,
        extensions: ["link66"]
      },
      "application/vnd.rs-274x": {
        source: "iana"
      },
      "application/vnd.ruckus.download": {
        source: "iana"
      },
      "application/vnd.s3sms": {
        source: "iana"
      },
      "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: ["st"]
      },
      "application/vnd.sar": {
        source: "iana"
      },
      "application/vnd.sbm.cid": {
        source: "iana"
      },
      "application/vnd.sbm.mid2": {
        source: "iana"
      },
      "application/vnd.scribus": {
        source: "iana"
      },
      "application/vnd.sealed.3df": {
        source: "iana"
      },
      "application/vnd.sealed.csf": {
        source: "iana"
      },
      "application/vnd.sealed.doc": {
        source: "iana"
      },
      "application/vnd.sealed.eml": {
        source: "iana"
      },
      "application/vnd.sealed.mht": {
        source: "iana"
      },
      "application/vnd.sealed.net": {
        source: "iana"
      },
      "application/vnd.sealed.ppt": {
        source: "iana"
      },
      "application/vnd.sealed.tiff": {
        source: "iana"
      },
      "application/vnd.sealed.xls": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.html": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.pdf": {
        source: "iana"
      },
      "application/vnd.seemail": {
        source: "iana",
        extensions: ["see"]
      },
      "application/vnd.seis+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.sema": {
        source: "iana",
        extensions: ["sema"]
      },
      "application/vnd.semd": {
        source: "iana",
        extensions: ["semd"]
      },
      "application/vnd.semf": {
        source: "iana",
        extensions: ["semf"]
      },
      "application/vnd.shade-save-file": {
        source: "iana"
      },
      "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: ["ifm"]
      },
      "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: ["itp"]
      },
      "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: ["iif"]
      },
      "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: ["ipk"]
      },
      "application/vnd.shootproof+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shopkick+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shp": {
        source: "iana"
      },
      "application/vnd.shx": {
        source: "iana"
      },
      "application/vnd.sigrok.session": {
        source: "iana"
      },
      "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: ["twd", "twds"]
      },
      "application/vnd.siren+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.smaf": {
        source: "iana",
        extensions: ["mmf"]
      },
      "application/vnd.smart.notebook": {
        source: "iana"
      },
      "application/vnd.smart.teacher": {
        source: "iana",
        extensions: ["teacher"]
      },
      "application/vnd.snesdev-page-table": {
        source: "iana"
      },
      "application/vnd.software602.filler.form+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fo"]
      },
      "application/vnd.software602.filler.form-xml-zip": {
        source: "iana"
      },
      "application/vnd.solent.sdkm+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sdkm", "sdkd"]
      },
      "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: ["dxp"]
      },
      "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: ["sfs"]
      },
      "application/vnd.sqlite3": {
        source: "iana"
      },
      "application/vnd.sss-cod": {
        source: "iana"
      },
      "application/vnd.sss-dtf": {
        source: "iana"
      },
      "application/vnd.sss-ntf": {
        source: "iana"
      },
      "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: ["sdc"]
      },
      "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: ["sda"]
      },
      "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: ["sdd"]
      },
      "application/vnd.stardivision.math": {
        source: "apache",
        extensions: ["smf"]
      },
      "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: ["sdw", "vor"]
      },
      "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: ["sgl"]
      },
      "application/vnd.stepmania.package": {
        source: "iana",
        extensions: ["smzip"]
      },
      "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: ["sm"]
      },
      "application/vnd.street-stream": {
        source: "iana"
      },
      "application/vnd.sun.wadl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wadl"]
      },
      "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: ["sxc"]
      },
      "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: ["stc"]
      },
      "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: ["sxd"]
      },
      "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: ["std"]
      },
      "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: ["sxi"]
      },
      "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: ["sti"]
      },
      "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: ["sxm"]
      },
      "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: ["sxw"]
      },
      "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: ["sxg"]
      },
      "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: ["stw"]
      },
      "application/vnd.sus-calendar": {
        source: "iana",
        extensions: ["sus", "susp"]
      },
      "application/vnd.svd": {
        source: "iana",
        extensions: ["svd"]
      },
      "application/vnd.swiftview-ics": {
        source: "iana"
      },
      "application/vnd.sycle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.syft+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.symbian.install": {
        source: "apache",
        extensions: ["sis", "sisx"]
      },
      "application/vnd.syncml+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xsm"]
      },
      "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["bdm"]
      },
      "application/vnd.syncml.dm+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xdm"]
      },
      "application/vnd.syncml.dm.notification": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["ddf"]
      },
      "application/vnd.syncml.dmtnds+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.syncml.ds.notification": {
        source: "iana"
      },
      "application/vnd.tableschema+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: ["tao"]
      },
      "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: ["pcap", "cap", "dmp"]
      },
      "application/vnd.think-cell.ppttc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tmd.mediaflex.api+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tml": {
        source: "iana"
      },
      "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: ["tmo"]
      },
      "application/vnd.tri.onesource": {
        source: "iana"
      },
      "application/vnd.trid.tpt": {
        source: "iana",
        extensions: ["tpt"]
      },
      "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: ["mxs"]
      },
      "application/vnd.trueapp": {
        source: "iana",
        extensions: ["tra"]
      },
      "application/vnd.truedoc": {
        source: "iana"
      },
      "application/vnd.ubisoft.webplayer": {
        source: "iana"
      },
      "application/vnd.ufdl": {
        source: "iana",
        extensions: ["ufd", "ufdl"]
      },
      "application/vnd.uiq.theme": {
        source: "iana",
        extensions: ["utz"]
      },
      "application/vnd.umajin": {
        source: "iana",
        extensions: ["umj"]
      },
      "application/vnd.unity": {
        source: "iana",
        extensions: ["unityweb"]
      },
      "application/vnd.uoml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uoml"]
      },
      "application/vnd.uplanet.alert": {
        source: "iana"
      },
      "application/vnd.uplanet.alert-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.channel": {
        source: "iana"
      },
      "application/vnd.uplanet.channel-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.list": {
        source: "iana"
      },
      "application/vnd.uplanet.list-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.signal": {
        source: "iana"
      },
      "application/vnd.uri-map": {
        source: "iana"
      },
      "application/vnd.valve.source.material": {
        source: "iana"
      },
      "application/vnd.vcx": {
        source: "iana",
        extensions: ["vcx"]
      },
      "application/vnd.vd-study": {
        source: "iana"
      },
      "application/vnd.vectorworks": {
        source: "iana"
      },
      "application/vnd.vel+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.verimatrix.vcas": {
        source: "iana"
      },
      "application/vnd.veritone.aion+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.veryant.thin": {
        source: "iana"
      },
      "application/vnd.ves.encrypted": {
        source: "iana"
      },
      "application/vnd.vidsoft.vidconference": {
        source: "iana"
      },
      "application/vnd.visio": {
        source: "iana",
        extensions: ["vsd", "vst", "vss", "vsw"]
      },
      "application/vnd.visionary": {
        source: "iana",
        extensions: ["vis"]
      },
      "application/vnd.vividence.scriptfile": {
        source: "iana"
      },
      "application/vnd.vsf": {
        source: "iana",
        extensions: ["vsf"]
      },
      "application/vnd.wap.sic": {
        source: "iana"
      },
      "application/vnd.wap.slc": {
        source: "iana"
      },
      "application/vnd.wap.wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["wbxml"]
      },
      "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: ["wmlc"]
      },
      "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: ["wmlsc"]
      },
      "application/vnd.webturbo": {
        source: "iana",
        extensions: ["wtb"]
      },
      "application/vnd.wfa.dpp": {
        source: "iana"
      },
      "application/vnd.wfa.p2p": {
        source: "iana"
      },
      "application/vnd.wfa.wsc": {
        source: "iana"
      },
      "application/vnd.windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.wmc": {
        source: "iana"
      },
      "application/vnd.wmf.bootstrap": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica.package": {
        source: "iana"
      },
      "application/vnd.wolfram.player": {
        source: "iana",
        extensions: ["nbp"]
      },
      "application/vnd.wordperfect": {
        source: "iana",
        extensions: ["wpd"]
      },
      "application/vnd.wqd": {
        source: "iana",
        extensions: ["wqd"]
      },
      "application/vnd.wrq-hp3000-labelled": {
        source: "iana"
      },
      "application/vnd.wt.stf": {
        source: "iana",
        extensions: ["stf"]
      },
      "application/vnd.wv.csp+wbxml": {
        source: "iana"
      },
      "application/vnd.wv.csp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.wv.ssp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xacml+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xara": {
        source: "iana",
        extensions: ["xar"]
      },
      "application/vnd.xfdl": {
        source: "iana",
        extensions: ["xfdl"]
      },
      "application/vnd.xfdl.webform": {
        source: "iana"
      },
      "application/vnd.xmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xmpie.cpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.dpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.plan": {
        source: "iana"
      },
      "application/vnd.xmpie.ppkg": {
        source: "iana"
      },
      "application/vnd.xmpie.xlim": {
        source: "iana"
      },
      "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: ["hvd"]
      },
      "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: ["hvs"]
      },
      "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: ["hvp"]
      },
      "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: ["osf"]
      },
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osfpvg"]
      },
      "application/vnd.yamaha.remote-setup": {
        source: "iana"
      },
      "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: ["saf"]
      },
      "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: ["spf"]
      },
      "application/vnd.yamaha.through-ngn": {
        source: "iana"
      },
      "application/vnd.yamaha.tunnel-udpencap": {
        source: "iana"
      },
      "application/vnd.yaoweme": {
        source: "iana"
      },
      "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: ["cmp"]
      },
      "application/vnd.youtube.yt": {
        source: "iana"
      },
      "application/vnd.zul": {
        source: "iana",
        extensions: ["zir", "zirz"]
      },
      "application/vnd.zzazz.deck+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zaz"]
      },
      "application/voicexml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["vxml"]
      },
      "application/voucher-cms+json": {
        source: "iana",
        compressible: true
      },
      "application/vq-rtcpxr": {
        source: "iana"
      },
      "application/wasm": {
        source: "iana",
        compressible: true,
        extensions: ["wasm"]
      },
      "application/watcherinfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wif"]
      },
      "application/webpush-options+json": {
        source: "iana",
        compressible: true
      },
      "application/whoispp-query": {
        source: "iana"
      },
      "application/whoispp-response": {
        source: "iana"
      },
      "application/widget": {
        source: "iana",
        extensions: ["wgt"]
      },
      "application/winhlp": {
        source: "apache",
        extensions: ["hlp"]
      },
      "application/wita": {
        source: "iana"
      },
      "application/wordperfect5.1": {
        source: "iana"
      },
      "application/wsdl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wsdl"]
      },
      "application/wspolicy+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wspolicy"]
      },
      "application/x-7z-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["7z"]
      },
      "application/x-abiword": {
        source: "apache",
        extensions: ["abw"]
      },
      "application/x-ace-compressed": {
        source: "apache",
        extensions: ["ace"]
      },
      "application/x-amf": {
        source: "apache"
      },
      "application/x-apple-diskimage": {
        source: "apache",
        extensions: ["dmg"]
      },
      "application/x-arj": {
        compressible: false,
        extensions: ["arj"]
      },
      "application/x-authorware-bin": {
        source: "apache",
        extensions: ["aab", "x32", "u32", "vox"]
      },
      "application/x-authorware-map": {
        source: "apache",
        extensions: ["aam"]
      },
      "application/x-authorware-seg": {
        source: "apache",
        extensions: ["aas"]
      },
      "application/x-bcpio": {
        source: "apache",
        extensions: ["bcpio"]
      },
      "application/x-bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/x-bittorrent": {
        source: "apache",
        extensions: ["torrent"]
      },
      "application/x-blorb": {
        source: "apache",
        extensions: ["blb", "blorb"]
      },
      "application/x-bzip": {
        source: "apache",
        compressible: false,
        extensions: ["bz"]
      },
      "application/x-bzip2": {
        source: "apache",
        compressible: false,
        extensions: ["bz2", "boz"]
      },
      "application/x-cbr": {
        source: "apache",
        extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
      },
      "application/x-cdlink": {
        source: "apache",
        extensions: ["vcd"]
      },
      "application/x-cfs-compressed": {
        source: "apache",
        extensions: ["cfs"]
      },
      "application/x-chat": {
        source: "apache",
        extensions: ["chat"]
      },
      "application/x-chess-pgn": {
        source: "apache",
        extensions: ["pgn"]
      },
      "application/x-chrome-extension": {
        extensions: ["crx"]
      },
      "application/x-cocoa": {
        source: "nginx",
        extensions: ["cco"]
      },
      "application/x-compress": {
        source: "apache"
      },
      "application/x-conference": {
        source: "apache",
        extensions: ["nsc"]
      },
      "application/x-cpio": {
        source: "apache",
        extensions: ["cpio"]
      },
      "application/x-csh": {
        source: "apache",
        extensions: ["csh"]
      },
      "application/x-deb": {
        compressible: false
      },
      "application/x-debian-package": {
        source: "apache",
        extensions: ["deb", "udeb"]
      },
      "application/x-dgc-compressed": {
        source: "apache",
        extensions: ["dgc"]
      },
      "application/x-director": {
        source: "apache",
        extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
      },
      "application/x-doom": {
        source: "apache",
        extensions: ["wad"]
      },
      "application/x-dtbncx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ncx"]
      },
      "application/x-dtbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dtb"]
      },
      "application/x-dtbresource+xml": {
        source: "apache",
        compressible: true,
        extensions: ["res"]
      },
      "application/x-dvi": {
        source: "apache",
        compressible: false,
        extensions: ["dvi"]
      },
      "application/x-envoy": {
        source: "apache",
        extensions: ["evy"]
      },
      "application/x-eva": {
        source: "apache",
        extensions: ["eva"]
      },
      "application/x-font-bdf": {
        source: "apache",
        extensions: ["bdf"]
      },
      "application/x-font-dos": {
        source: "apache"
      },
      "application/x-font-framemaker": {
        source: "apache"
      },
      "application/x-font-ghostscript": {
        source: "apache",
        extensions: ["gsf"]
      },
      "application/x-font-libgrx": {
        source: "apache"
      },
      "application/x-font-linux-psf": {
        source: "apache",
        extensions: ["psf"]
      },
      "application/x-font-pcf": {
        source: "apache",
        extensions: ["pcf"]
      },
      "application/x-font-snf": {
        source: "apache",
        extensions: ["snf"]
      },
      "application/x-font-speedo": {
        source: "apache"
      },
      "application/x-font-sunos-news": {
        source: "apache"
      },
      "application/x-font-type1": {
        source: "apache",
        extensions: ["pfa", "pfb", "pfm", "afm"]
      },
      "application/x-font-vfont": {
        source: "apache"
      },
      "application/x-freearc": {
        source: "apache",
        extensions: ["arc"]
      },
      "application/x-futuresplash": {
        source: "apache",
        extensions: ["spl"]
      },
      "application/x-gca-compressed": {
        source: "apache",
        extensions: ["gca"]
      },
      "application/x-glulx": {
        source: "apache",
        extensions: ["ulx"]
      },
      "application/x-gnumeric": {
        source: "apache",
        extensions: ["gnumeric"]
      },
      "application/x-gramps-xml": {
        source: "apache",
        extensions: ["gramps"]
      },
      "application/x-gtar": {
        source: "apache",
        extensions: ["gtar"]
      },
      "application/x-gzip": {
        source: "apache"
      },
      "application/x-hdf": {
        source: "apache",
        extensions: ["hdf"]
      },
      "application/x-httpd-php": {
        compressible: true,
        extensions: ["php"]
      },
      "application/x-install-instructions": {
        source: "apache",
        extensions: ["install"]
      },
      "application/x-iso9660-image": {
        source: "apache",
        extensions: ["iso"]
      },
      "application/x-iwork-keynote-sffkey": {
        extensions: ["key"]
      },
      "application/x-iwork-numbers-sffnumbers": {
        extensions: ["numbers"]
      },
      "application/x-iwork-pages-sffpages": {
        extensions: ["pages"]
      },
      "application/x-java-archive-diff": {
        source: "nginx",
        extensions: ["jardiff"]
      },
      "application/x-java-jnlp-file": {
        source: "apache",
        compressible: false,
        extensions: ["jnlp"]
      },
      "application/x-javascript": {
        compressible: true
      },
      "application/x-keepass2": {
        extensions: ["kdbx"]
      },
      "application/x-latex": {
        source: "apache",
        compressible: false,
        extensions: ["latex"]
      },
      "application/x-lua-bytecode": {
        extensions: ["luac"]
      },
      "application/x-lzh-compressed": {
        source: "apache",
        extensions: ["lzh", "lha"]
      },
      "application/x-makeself": {
        source: "nginx",
        extensions: ["run"]
      },
      "application/x-mie": {
        source: "apache",
        extensions: ["mie"]
      },
      "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: ["prc", "mobi"]
      },
      "application/x-mpegurl": {
        compressible: false
      },
      "application/x-ms-application": {
        source: "apache",
        extensions: ["application"]
      },
      "application/x-ms-shortcut": {
        source: "apache",
        extensions: ["lnk"]
      },
      "application/x-ms-wmd": {
        source: "apache",
        extensions: ["wmd"]
      },
      "application/x-ms-wmz": {
        source: "apache",
        extensions: ["wmz"]
      },
      "application/x-ms-xbap": {
        source: "apache",
        extensions: ["xbap"]
      },
      "application/x-msaccess": {
        source: "apache",
        extensions: ["mdb"]
      },
      "application/x-msbinder": {
        source: "apache",
        extensions: ["obd"]
      },
      "application/x-mscardfile": {
        source: "apache",
        extensions: ["crd"]
      },
      "application/x-msclip": {
        source: "apache",
        extensions: ["clp"]
      },
      "application/x-msdos-program": {
        extensions: ["exe"]
      },
      "application/x-msdownload": {
        source: "apache",
        extensions: ["exe", "dll", "com", "bat", "msi"]
      },
      "application/x-msmediaview": {
        source: "apache",
        extensions: ["mvb", "m13", "m14"]
      },
      "application/x-msmetafile": {
        source: "apache",
        extensions: ["wmf", "wmz", "emf", "emz"]
      },
      "application/x-msmoney": {
        source: "apache",
        extensions: ["mny"]
      },
      "application/x-mspublisher": {
        source: "apache",
        extensions: ["pub"]
      },
      "application/x-msschedule": {
        source: "apache",
        extensions: ["scd"]
      },
      "application/x-msterminal": {
        source: "apache",
        extensions: ["trm"]
      },
      "application/x-mswrite": {
        source: "apache",
        extensions: ["wri"]
      },
      "application/x-netcdf": {
        source: "apache",
        extensions: ["nc", "cdf"]
      },
      "application/x-ns-proxy-autoconfig": {
        compressible: true,
        extensions: ["pac"]
      },
      "application/x-nzb": {
        source: "apache",
        extensions: ["nzb"]
      },
      "application/x-perl": {
        source: "nginx",
        extensions: ["pl", "pm"]
      },
      "application/x-pilot": {
        source: "nginx",
        extensions: ["prc", "pdb"]
      },
      "application/x-pkcs12": {
        source: "apache",
        compressible: false,
        extensions: ["p12", "pfx"]
      },
      "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: ["p7b", "spc"]
      },
      "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: ["p7r"]
      },
      "application/x-pki-message": {
        source: "iana"
      },
      "application/x-rar-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["rar"]
      },
      "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: ["rpm"]
      },
      "application/x-research-info-systems": {
        source: "apache",
        extensions: ["ris"]
      },
      "application/x-sea": {
        source: "nginx",
        extensions: ["sea"]
      },
      "application/x-sh": {
        source: "apache",
        compressible: true,
        extensions: ["sh"]
      },
      "application/x-shar": {
        source: "apache",
        extensions: ["shar"]
      },
      "application/x-shockwave-flash": {
        source: "apache",
        compressible: false,
        extensions: ["swf"]
      },
      "application/x-silverlight-app": {
        source: "apache",
        extensions: ["xap"]
      },
      "application/x-sql": {
        source: "apache",
        extensions: ["sql"]
      },
      "application/x-stuffit": {
        source: "apache",
        compressible: false,
        extensions: ["sit"]
      },
      "application/x-stuffitx": {
        source: "apache",
        extensions: ["sitx"]
      },
      "application/x-subrip": {
        source: "apache",
        extensions: ["srt"]
      },
      "application/x-sv4cpio": {
        source: "apache",
        extensions: ["sv4cpio"]
      },
      "application/x-sv4crc": {
        source: "apache",
        extensions: ["sv4crc"]
      },
      "application/x-t3vm-image": {
        source: "apache",
        extensions: ["t3"]
      },
      "application/x-tads": {
        source: "apache",
        extensions: ["gam"]
      },
      "application/x-tar": {
        source: "apache",
        compressible: true,
        extensions: ["tar"]
      },
      "application/x-tcl": {
        source: "apache",
        extensions: ["tcl", "tk"]
      },
      "application/x-tex": {
        source: "apache",
        extensions: ["tex"]
      },
      "application/x-tex-tfm": {
        source: "apache",
        extensions: ["tfm"]
      },
      "application/x-texinfo": {
        source: "apache",
        extensions: ["texinfo", "texi"]
      },
      "application/x-tgif": {
        source: "apache",
        extensions: ["obj"]
      },
      "application/x-ustar": {
        source: "apache",
        extensions: ["ustar"]
      },
      "application/x-virtualbox-hdd": {
        compressible: true,
        extensions: ["hdd"]
      },
      "application/x-virtualbox-ova": {
        compressible: true,
        extensions: ["ova"]
      },
      "application/x-virtualbox-ovf": {
        compressible: true,
        extensions: ["ovf"]
      },
      "application/x-virtualbox-vbox": {
        compressible: true,
        extensions: ["vbox"]
      },
      "application/x-virtualbox-vbox-extpack": {
        compressible: false,
        extensions: ["vbox-extpack"]
      },
      "application/x-virtualbox-vdi": {
        compressible: true,
        extensions: ["vdi"]
      },
      "application/x-virtualbox-vhd": {
        compressible: true,
        extensions: ["vhd"]
      },
      "application/x-virtualbox-vmdk": {
        compressible: true,
        extensions: ["vmdk"]
      },
      "application/x-wais-source": {
        source: "apache",
        extensions: ["src"]
      },
      "application/x-web-app-manifest+json": {
        compressible: true,
        extensions: ["webapp"]
      },
      "application/x-www-form-urlencoded": {
        source: "iana",
        compressible: true
      },
      "application/x-x509-ca-cert": {
        source: "iana",
        extensions: ["der", "crt", "pem"]
      },
      "application/x-x509-ca-ra-cert": {
        source: "iana"
      },
      "application/x-x509-next-ca-cert": {
        source: "iana"
      },
      "application/x-xfig": {
        source: "apache",
        extensions: ["fig"]
      },
      "application/x-xliff+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/x-xpinstall": {
        source: "apache",
        compressible: false,
        extensions: ["xpi"]
      },
      "application/x-xz": {
        source: "apache",
        extensions: ["xz"]
      },
      "application/x-zmachine": {
        source: "apache",
        extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
      },
      "application/x400-bp": {
        source: "iana"
      },
      "application/xacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/xaml+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xaml"]
      },
      "application/xcap-att+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xav"]
      },
      "application/xcap-caps+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xca"]
      },
      "application/xcap-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdf"]
      },
      "application/xcap-el+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xel"]
      },
      "application/xcap-error+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-ns+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xns"]
      },
      "application/xcon-conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcon-conference-info-diff+xml": {
        source: "iana",
        compressible: true
      },
      "application/xenc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xenc"]
      },
      "application/xhtml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xhtml", "xht"]
      },
      "application/xhtml-voice+xml": {
        source: "apache",
        compressible: true
      },
      "application/xliff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml", "xsl", "xsd", "rng"]
      },
      "application/xml-dtd": {
        source: "iana",
        compressible: true,
        extensions: ["dtd"]
      },
      "application/xml-external-parsed-entity": {
        source: "iana"
      },
      "application/xml-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/xmpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/xop+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xop"]
      },
      "application/xproc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xpl"]
      },
      "application/xslt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xsl", "xslt"]
      },
      "application/xspf+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xspf"]
      },
      "application/xv+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mxml", "xhvml", "xvml", "xvm"]
      },
      "application/yang": {
        source: "iana",
        extensions: ["yang"]
      },
      "application/yang-data+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-data+xml": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/yin+xml": {
        source: "iana",
        compressible: true,
        extensions: ["yin"]
      },
      "application/zip": {
        source: "iana",
        compressible: false,
        extensions: ["zip"]
      },
      "application/zlib": {
        source: "iana"
      },
      "application/zstd": {
        source: "iana"
      },
      "audio/1d-interleaved-parityfec": {
        source: "iana"
      },
      "audio/32kadpcm": {
        source: "iana"
      },
      "audio/3gpp": {
        source: "iana",
        compressible: false,
        extensions: ["3gpp"]
      },
      "audio/3gpp2": {
        source: "iana"
      },
      "audio/aac": {
        source: "iana"
      },
      "audio/ac3": {
        source: "iana"
      },
      "audio/adpcm": {
        source: "apache",
        extensions: ["adp"]
      },
      "audio/amr": {
        source: "iana",
        extensions: ["amr"]
      },
      "audio/amr-wb": {
        source: "iana"
      },
      "audio/amr-wb+": {
        source: "iana"
      },
      "audio/aptx": {
        source: "iana"
      },
      "audio/asc": {
        source: "iana"
      },
      "audio/atrac-advanced-lossless": {
        source: "iana"
      },
      "audio/atrac-x": {
        source: "iana"
      },
      "audio/atrac3": {
        source: "iana"
      },
      "audio/basic": {
        source: "iana",
        compressible: false,
        extensions: ["au", "snd"]
      },
      "audio/bv16": {
        source: "iana"
      },
      "audio/bv32": {
        source: "iana"
      },
      "audio/clearmode": {
        source: "iana"
      },
      "audio/cn": {
        source: "iana"
      },
      "audio/dat12": {
        source: "iana"
      },
      "audio/dls": {
        source: "iana"
      },
      "audio/dsr-es201108": {
        source: "iana"
      },
      "audio/dsr-es202050": {
        source: "iana"
      },
      "audio/dsr-es202211": {
        source: "iana"
      },
      "audio/dsr-es202212": {
        source: "iana"
      },
      "audio/dv": {
        source: "iana"
      },
      "audio/dvi4": {
        source: "iana"
      },
      "audio/eac3": {
        source: "iana"
      },
      "audio/encaprtp": {
        source: "iana"
      },
      "audio/evrc": {
        source: "iana"
      },
      "audio/evrc-qcp": {
        source: "iana"
      },
      "audio/evrc0": {
        source: "iana"
      },
      "audio/evrc1": {
        source: "iana"
      },
      "audio/evrcb": {
        source: "iana"
      },
      "audio/evrcb0": {
        source: "iana"
      },
      "audio/evrcb1": {
        source: "iana"
      },
      "audio/evrcnw": {
        source: "iana"
      },
      "audio/evrcnw0": {
        source: "iana"
      },
      "audio/evrcnw1": {
        source: "iana"
      },
      "audio/evrcwb": {
        source: "iana"
      },
      "audio/evrcwb0": {
        source: "iana"
      },
      "audio/evrcwb1": {
        source: "iana"
      },
      "audio/evs": {
        source: "iana"
      },
      "audio/flexfec": {
        source: "iana"
      },
      "audio/fwdred": {
        source: "iana"
      },
      "audio/g711-0": {
        source: "iana"
      },
      "audio/g719": {
        source: "iana"
      },
      "audio/g722": {
        source: "iana"
      },
      "audio/g7221": {
        source: "iana"
      },
      "audio/g723": {
        source: "iana"
      },
      "audio/g726-16": {
        source: "iana"
      },
      "audio/g726-24": {
        source: "iana"
      },
      "audio/g726-32": {
        source: "iana"
      },
      "audio/g726-40": {
        source: "iana"
      },
      "audio/g728": {
        source: "iana"
      },
      "audio/g729": {
        source: "iana"
      },
      "audio/g7291": {
        source: "iana"
      },
      "audio/g729d": {
        source: "iana"
      },
      "audio/g729e": {
        source: "iana"
      },
      "audio/gsm": {
        source: "iana"
      },
      "audio/gsm-efr": {
        source: "iana"
      },
      "audio/gsm-hr-08": {
        source: "iana"
      },
      "audio/ilbc": {
        source: "iana"
      },
      "audio/ip-mr_v2.5": {
        source: "iana"
      },
      "audio/isac": {
        source: "apache"
      },
      "audio/l16": {
        source: "iana"
      },
      "audio/l20": {
        source: "iana"
      },
      "audio/l24": {
        source: "iana",
        compressible: false
      },
      "audio/l8": {
        source: "iana"
      },
      "audio/lpc": {
        source: "iana"
      },
      "audio/melp": {
        source: "iana"
      },
      "audio/melp1200": {
        source: "iana"
      },
      "audio/melp2400": {
        source: "iana"
      },
      "audio/melp600": {
        source: "iana"
      },
      "audio/mhas": {
        source: "iana"
      },
      "audio/midi": {
        source: "apache",
        extensions: ["mid", "midi", "kar", "rmi"]
      },
      "audio/mobile-xmf": {
        source: "iana",
        extensions: ["mxmf"]
      },
      "audio/mp3": {
        compressible: false,
        extensions: ["mp3"]
      },
      "audio/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["m4a", "mp4a"]
      },
      "audio/mp4a-latm": {
        source: "iana"
      },
      "audio/mpa": {
        source: "iana"
      },
      "audio/mpa-robust": {
        source: "iana"
      },
      "audio/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
      },
      "audio/mpeg4-generic": {
        source: "iana"
      },
      "audio/musepack": {
        source: "apache"
      },
      "audio/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["oga", "ogg", "spx", "opus"]
      },
      "audio/opus": {
        source: "iana"
      },
      "audio/parityfec": {
        source: "iana"
      },
      "audio/pcma": {
        source: "iana"
      },
      "audio/pcma-wb": {
        source: "iana"
      },
      "audio/pcmu": {
        source: "iana"
      },
      "audio/pcmu-wb": {
        source: "iana"
      },
      "audio/prs.sid": {
        source: "iana"
      },
      "audio/qcelp": {
        source: "iana"
      },
      "audio/raptorfec": {
        source: "iana"
      },
      "audio/red": {
        source: "iana"
      },
      "audio/rtp-enc-aescm128": {
        source: "iana"
      },
      "audio/rtp-midi": {
        source: "iana"
      },
      "audio/rtploopback": {
        source: "iana"
      },
      "audio/rtx": {
        source: "iana"
      },
      "audio/s3m": {
        source: "apache",
        extensions: ["s3m"]
      },
      "audio/scip": {
        source: "iana"
      },
      "audio/silk": {
        source: "apache",
        extensions: ["sil"]
      },
      "audio/smv": {
        source: "iana"
      },
      "audio/smv-qcp": {
        source: "iana"
      },
      "audio/smv0": {
        source: "iana"
      },
      "audio/sofa": {
        source: "iana"
      },
      "audio/sp-midi": {
        source: "iana"
      },
      "audio/speex": {
        source: "iana"
      },
      "audio/t140c": {
        source: "iana"
      },
      "audio/t38": {
        source: "iana"
      },
      "audio/telephone-event": {
        source: "iana"
      },
      "audio/tetra_acelp": {
        source: "iana"
      },
      "audio/tetra_acelp_bb": {
        source: "iana"
      },
      "audio/tone": {
        source: "iana"
      },
      "audio/tsvcis": {
        source: "iana"
      },
      "audio/uemclip": {
        source: "iana"
      },
      "audio/ulpfec": {
        source: "iana"
      },
      "audio/usac": {
        source: "iana"
      },
      "audio/vdvi": {
        source: "iana"
      },
      "audio/vmr-wb": {
        source: "iana"
      },
      "audio/vnd.3gpp.iufp": {
        source: "iana"
      },
      "audio/vnd.4sb": {
        source: "iana"
      },
      "audio/vnd.audiokoz": {
        source: "iana"
      },
      "audio/vnd.celp": {
        source: "iana"
      },
      "audio/vnd.cisco.nse": {
        source: "iana"
      },
      "audio/vnd.cmles.radio-events": {
        source: "iana"
      },
      "audio/vnd.cns.anp1": {
        source: "iana"
      },
      "audio/vnd.cns.inf1": {
        source: "iana"
      },
      "audio/vnd.dece.audio": {
        source: "iana",
        extensions: ["uva", "uvva"]
      },
      "audio/vnd.digital-winds": {
        source: "iana",
        extensions: ["eol"]
      },
      "audio/vnd.dlna.adts": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.1": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.2": {
        source: "iana"
      },
      "audio/vnd.dolby.mlp": {
        source: "iana"
      },
      "audio/vnd.dolby.mps": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2x": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2z": {
        source: "iana"
      },
      "audio/vnd.dolby.pulse.1": {
        source: "iana"
      },
      "audio/vnd.dra": {
        source: "iana",
        extensions: ["dra"]
      },
      "audio/vnd.dts": {
        source: "iana",
        extensions: ["dts"]
      },
      "audio/vnd.dts.hd": {
        source: "iana",
        extensions: ["dtshd"]
      },
      "audio/vnd.dts.uhd": {
        source: "iana"
      },
      "audio/vnd.dvb.file": {
        source: "iana"
      },
      "audio/vnd.everad.plj": {
        source: "iana"
      },
      "audio/vnd.hns.audio": {
        source: "iana"
      },
      "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: ["lvp"]
      },
      "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: ["pya"]
      },
      "audio/vnd.nokia.mobile-xmf": {
        source: "iana"
      },
      "audio/vnd.nortel.vbk": {
        source: "iana"
      },
      "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: ["ecelp4800"]
      },
      "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: ["ecelp7470"]
      },
      "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: ["ecelp9600"]
      },
      "audio/vnd.octel.sbc": {
        source: "iana"
      },
      "audio/vnd.presonus.multitrack": {
        source: "iana"
      },
      "audio/vnd.qcelp": {
        source: "iana"
      },
      "audio/vnd.rhetorex.32kadpcm": {
        source: "iana"
      },
      "audio/vnd.rip": {
        source: "iana",
        extensions: ["rip"]
      },
      "audio/vnd.rn-realaudio": {
        compressible: false
      },
      "audio/vnd.sealedmedia.softseal.mpeg": {
        source: "iana"
      },
      "audio/vnd.vmx.cvsd": {
        source: "iana"
      },
      "audio/vnd.wave": {
        compressible: false
      },
      "audio/vorbis": {
        source: "iana",
        compressible: false
      },
      "audio/vorbis-config": {
        source: "iana"
      },
      "audio/wav": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/wave": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/webm": {
        source: "apache",
        compressible: false,
        extensions: ["weba"]
      },
      "audio/x-aac": {
        source: "apache",
        compressible: false,
        extensions: ["aac"]
      },
      "audio/x-aiff": {
        source: "apache",
        extensions: ["aif", "aiff", "aifc"]
      },
      "audio/x-caf": {
        source: "apache",
        compressible: false,
        extensions: ["caf"]
      },
      "audio/x-flac": {
        source: "apache",
        extensions: ["flac"]
      },
      "audio/x-m4a": {
        source: "nginx",
        extensions: ["m4a"]
      },
      "audio/x-matroska": {
        source: "apache",
        extensions: ["mka"]
      },
      "audio/x-mpegurl": {
        source: "apache",
        extensions: ["m3u"]
      },
      "audio/x-ms-wax": {
        source: "apache",
        extensions: ["wax"]
      },
      "audio/x-ms-wma": {
        source: "apache",
        extensions: ["wma"]
      },
      "audio/x-pn-realaudio": {
        source: "apache",
        extensions: ["ram", "ra"]
      },
      "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: ["rmp"]
      },
      "audio/x-realaudio": {
        source: "nginx",
        extensions: ["ra"]
      },
      "audio/x-tta": {
        source: "apache"
      },
      "audio/x-wav": {
        source: "apache",
        extensions: ["wav"]
      },
      "audio/xm": {
        source: "apache",
        extensions: ["xm"]
      },
      "chemical/x-cdx": {
        source: "apache",
        extensions: ["cdx"]
      },
      "chemical/x-cif": {
        source: "apache",
        extensions: ["cif"]
      },
      "chemical/x-cmdf": {
        source: "apache",
        extensions: ["cmdf"]
      },
      "chemical/x-cml": {
        source: "apache",
        extensions: ["cml"]
      },
      "chemical/x-csml": {
        source: "apache",
        extensions: ["csml"]
      },
      "chemical/x-pdb": {
        source: "apache"
      },
      "chemical/x-xyz": {
        source: "apache",
        extensions: ["xyz"]
      },
      "font/collection": {
        source: "iana",
        extensions: ["ttc"]
      },
      "font/otf": {
        source: "iana",
        compressible: true,
        extensions: ["otf"]
      },
      "font/sfnt": {
        source: "iana"
      },
      "font/ttf": {
        source: "iana",
        compressible: true,
        extensions: ["ttf"]
      },
      "font/woff": {
        source: "iana",
        extensions: ["woff"]
      },
      "font/woff2": {
        source: "iana",
        extensions: ["woff2"]
      },
      "image/aces": {
        source: "iana",
        extensions: ["exr"]
      },
      "image/apng": {
        compressible: false,
        extensions: ["apng"]
      },
      "image/avci": {
        source: "iana",
        extensions: ["avci"]
      },
      "image/avcs": {
        source: "iana",
        extensions: ["avcs"]
      },
      "image/avif": {
        source: "iana",
        compressible: false,
        extensions: ["avif"]
      },
      "image/bmp": {
        source: "iana",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/cgm": {
        source: "iana",
        extensions: ["cgm"]
      },
      "image/dicom-rle": {
        source: "iana",
        extensions: ["drle"]
      },
      "image/emf": {
        source: "iana",
        extensions: ["emf"]
      },
      "image/fits": {
        source: "iana",
        extensions: ["fits"]
      },
      "image/g3fax": {
        source: "iana",
        extensions: ["g3"]
      },
      "image/gif": {
        source: "iana",
        compressible: false,
        extensions: ["gif"]
      },
      "image/heic": {
        source: "iana",
        extensions: ["heic"]
      },
      "image/heic-sequence": {
        source: "iana",
        extensions: ["heics"]
      },
      "image/heif": {
        source: "iana",
        extensions: ["heif"]
      },
      "image/heif-sequence": {
        source: "iana",
        extensions: ["heifs"]
      },
      "image/hej2k": {
        source: "iana",
        extensions: ["hej2"]
      },
      "image/hsj2": {
        source: "iana",
        extensions: ["hsj2"]
      },
      "image/ief": {
        source: "iana",
        extensions: ["ief"]
      },
      "image/jls": {
        source: "iana",
        extensions: ["jls"]
      },
      "image/jp2": {
        source: "iana",
        compressible: false,
        extensions: ["jp2", "jpg2"]
      },
      "image/jpeg": {
        source: "iana",
        compressible: false,
        extensions: ["jpeg", "jpg", "jpe"]
      },
      "image/jph": {
        source: "iana",
        extensions: ["jph"]
      },
      "image/jphc": {
        source: "iana",
        extensions: ["jhc"]
      },
      "image/jpm": {
        source: "iana",
        compressible: false,
        extensions: ["jpm"]
      },
      "image/jpx": {
        source: "iana",
        compressible: false,
        extensions: ["jpx", "jpf"]
      },
      "image/jxr": {
        source: "iana",
        extensions: ["jxr"]
      },
      "image/jxra": {
        source: "iana",
        extensions: ["jxra"]
      },
      "image/jxrs": {
        source: "iana",
        extensions: ["jxrs"]
      },
      "image/jxs": {
        source: "iana",
        extensions: ["jxs"]
      },
      "image/jxsc": {
        source: "iana",
        extensions: ["jxsc"]
      },
      "image/jxsi": {
        source: "iana",
        extensions: ["jxsi"]
      },
      "image/jxss": {
        source: "iana",
        extensions: ["jxss"]
      },
      "image/ktx": {
        source: "iana",
        extensions: ["ktx"]
      },
      "image/ktx2": {
        source: "iana",
        extensions: ["ktx2"]
      },
      "image/naplps": {
        source: "iana"
      },
      "image/pjpeg": {
        compressible: false
      },
      "image/png": {
        source: "iana",
        compressible: false,
        extensions: ["png"]
      },
      "image/prs.btif": {
        source: "iana",
        extensions: ["btif"]
      },
      "image/prs.pti": {
        source: "iana",
        extensions: ["pti"]
      },
      "image/pwg-raster": {
        source: "iana"
      },
      "image/sgi": {
        source: "apache",
        extensions: ["sgi"]
      },
      "image/svg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["svg", "svgz"]
      },
      "image/t38": {
        source: "iana",
        extensions: ["t38"]
      },
      "image/tiff": {
        source: "iana",
        compressible: false,
        extensions: ["tif", "tiff"]
      },
      "image/tiff-fx": {
        source: "iana",
        extensions: ["tfx"]
      },
      "image/vnd.adobe.photoshop": {
        source: "iana",
        compressible: true,
        extensions: ["psd"]
      },
      "image/vnd.airzip.accelerator.azv": {
        source: "iana",
        extensions: ["azv"]
      },
      "image/vnd.cns.inf2": {
        source: "iana"
      },
      "image/vnd.dece.graphic": {
        source: "iana",
        extensions: ["uvi", "uvvi", "uvg", "uvvg"]
      },
      "image/vnd.djvu": {
        source: "iana",
        extensions: ["djvu", "djv"]
      },
      "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "image/vnd.dwg": {
        source: "iana",
        extensions: ["dwg"]
      },
      "image/vnd.dxf": {
        source: "iana",
        extensions: ["dxf"]
      },
      "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: ["fbs"]
      },
      "image/vnd.fpx": {
        source: "iana",
        extensions: ["fpx"]
      },
      "image/vnd.fst": {
        source: "iana",
        extensions: ["fst"]
      },
      "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: ["mmr"]
      },
      "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: ["rlc"]
      },
      "image/vnd.globalgraphics.pgb": {
        source: "iana"
      },
      "image/vnd.microsoft.icon": {
        source: "iana",
        compressible: true,
        extensions: ["ico"]
      },
      "image/vnd.mix": {
        source: "iana"
      },
      "image/vnd.mozilla.apng": {
        source: "iana"
      },
      "image/vnd.ms-dds": {
        compressible: true,
        extensions: ["dds"]
      },
      "image/vnd.ms-modi": {
        source: "iana",
        extensions: ["mdi"]
      },
      "image/vnd.ms-photo": {
        source: "apache",
        extensions: ["wdp"]
      },
      "image/vnd.net-fpx": {
        source: "iana",
        extensions: ["npx"]
      },
      "image/vnd.pco.b16": {
        source: "iana",
        extensions: ["b16"]
      },
      "image/vnd.radiance": {
        source: "iana"
      },
      "image/vnd.sealed.png": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.gif": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.jpg": {
        source: "iana"
      },
      "image/vnd.svf": {
        source: "iana"
      },
      "image/vnd.tencent.tap": {
        source: "iana",
        extensions: ["tap"]
      },
      "image/vnd.valve.source.texture": {
        source: "iana",
        extensions: ["vtf"]
      },
      "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: ["wbmp"]
      },
      "image/vnd.xiff": {
        source: "iana",
        extensions: ["xif"]
      },
      "image/vnd.zbrush.pcx": {
        source: "iana",
        extensions: ["pcx"]
      },
      "image/webp": {
        source: "apache",
        extensions: ["webp"]
      },
      "image/wmf": {
        source: "iana",
        extensions: ["wmf"]
      },
      "image/x-3ds": {
        source: "apache",
        extensions: ["3ds"]
      },
      "image/x-cmu-raster": {
        source: "apache",
        extensions: ["ras"]
      },
      "image/x-cmx": {
        source: "apache",
        extensions: ["cmx"]
      },
      "image/x-freehand": {
        source: "apache",
        extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
      },
      "image/x-icon": {
        source: "apache",
        compressible: true,
        extensions: ["ico"]
      },
      "image/x-jng": {
        source: "nginx",
        extensions: ["jng"]
      },
      "image/x-mrsid-image": {
        source: "apache",
        extensions: ["sid"]
      },
      "image/x-ms-bmp": {
        source: "nginx",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/x-pcx": {
        source: "apache",
        extensions: ["pcx"]
      },
      "image/x-pict": {
        source: "apache",
        extensions: ["pic", "pct"]
      },
      "image/x-portable-anymap": {
        source: "apache",
        extensions: ["pnm"]
      },
      "image/x-portable-bitmap": {
        source: "apache",
        extensions: ["pbm"]
      },
      "image/x-portable-graymap": {
        source: "apache",
        extensions: ["pgm"]
      },
      "image/x-portable-pixmap": {
        source: "apache",
        extensions: ["ppm"]
      },
      "image/x-rgb": {
        source: "apache",
        extensions: ["rgb"]
      },
      "image/x-tga": {
        source: "apache",
        extensions: ["tga"]
      },
      "image/x-xbitmap": {
        source: "apache",
        extensions: ["xbm"]
      },
      "image/x-xcf": {
        compressible: false
      },
      "image/x-xpixmap": {
        source: "apache",
        extensions: ["xpm"]
      },
      "image/x-xwindowdump": {
        source: "apache",
        extensions: ["xwd"]
      },
      "message/cpim": {
        source: "iana"
      },
      "message/delivery-status": {
        source: "iana"
      },
      "message/disposition-notification": {
        source: "iana",
        extensions: [
          "disposition-notification"
        ]
      },
      "message/external-body": {
        source: "iana"
      },
      "message/feedback-report": {
        source: "iana"
      },
      "message/global": {
        source: "iana",
        extensions: ["u8msg"]
      },
      "message/global-delivery-status": {
        source: "iana",
        extensions: ["u8dsn"]
      },
      "message/global-disposition-notification": {
        source: "iana",
        extensions: ["u8mdn"]
      },
      "message/global-headers": {
        source: "iana",
        extensions: ["u8hdr"]
      },
      "message/http": {
        source: "iana",
        compressible: false
      },
      "message/imdn+xml": {
        source: "iana",
        compressible: true
      },
      "message/news": {
        source: "iana"
      },
      "message/partial": {
        source: "iana",
        compressible: false
      },
      "message/rfc822": {
        source: "iana",
        compressible: true,
        extensions: ["eml", "mime"]
      },
      "message/s-http": {
        source: "iana"
      },
      "message/sip": {
        source: "iana"
      },
      "message/sipfrag": {
        source: "iana"
      },
      "message/tracking-status": {
        source: "iana"
      },
      "message/vnd.si.simp": {
        source: "iana"
      },
      "message/vnd.wfa.wsc": {
        source: "iana",
        extensions: ["wsc"]
      },
      "model/3mf": {
        source: "iana",
        extensions: ["3mf"]
      },
      "model/e57": {
        source: "iana"
      },
      "model/gltf+json": {
        source: "iana",
        compressible: true,
        extensions: ["gltf"]
      },
      "model/gltf-binary": {
        source: "iana",
        compressible: true,
        extensions: ["glb"]
      },
      "model/iges": {
        source: "iana",
        compressible: false,
        extensions: ["igs", "iges"]
      },
      "model/mesh": {
        source: "iana",
        compressible: false,
        extensions: ["msh", "mesh", "silo"]
      },
      "model/mtl": {
        source: "iana",
        extensions: ["mtl"]
      },
      "model/obj": {
        source: "iana",
        extensions: ["obj"]
      },
      "model/step": {
        source: "iana"
      },
      "model/step+xml": {
        source: "iana",
        compressible: true,
        extensions: ["stpx"]
      },
      "model/step+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpz"]
      },
      "model/step-xml+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpxz"]
      },
      "model/stl": {
        source: "iana",
        extensions: ["stl"]
      },
      "model/vnd.collada+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dae"]
      },
      "model/vnd.dwf": {
        source: "iana",
        extensions: ["dwf"]
      },
      "model/vnd.flatland.3dml": {
        source: "iana"
      },
      "model/vnd.gdl": {
        source: "iana",
        extensions: ["gdl"]
      },
      "model/vnd.gs-gdl": {
        source: "apache"
      },
      "model/vnd.gs.gdl": {
        source: "iana"
      },
      "model/vnd.gtw": {
        source: "iana",
        extensions: ["gtw"]
      },
      "model/vnd.moml+xml": {
        source: "iana",
        compressible: true
      },
      "model/vnd.mts": {
        source: "iana",
        extensions: ["mts"]
      },
      "model/vnd.opengex": {
        source: "iana",
        extensions: ["ogex"]
      },
      "model/vnd.parasolid.transmit.binary": {
        source: "iana",
        extensions: ["x_b"]
      },
      "model/vnd.parasolid.transmit.text": {
        source: "iana",
        extensions: ["x_t"]
      },
      "model/vnd.pytha.pyox": {
        source: "iana"
      },
      "model/vnd.rosette.annotated-data-model": {
        source: "iana"
      },
      "model/vnd.sap.vds": {
        source: "iana",
        extensions: ["vds"]
      },
      "model/vnd.usdz+zip": {
        source: "iana",
        compressible: false,
        extensions: ["usdz"]
      },
      "model/vnd.valve.source.compiled-map": {
        source: "iana",
        extensions: ["bsp"]
      },
      "model/vnd.vtu": {
        source: "iana",
        extensions: ["vtu"]
      },
      "model/vrml": {
        source: "iana",
        compressible: false,
        extensions: ["wrl", "vrml"]
      },
      "model/x3d+binary": {
        source: "apache",
        compressible: false,
        extensions: ["x3db", "x3dbz"]
      },
      "model/x3d+fastinfoset": {
        source: "iana",
        extensions: ["x3db"]
      },
      "model/x3d+vrml": {
        source: "apache",
        compressible: false,
        extensions: ["x3dv", "x3dvz"]
      },
      "model/x3d+xml": {
        source: "iana",
        compressible: true,
        extensions: ["x3d", "x3dz"]
      },
      "model/x3d-vrml": {
        source: "iana",
        extensions: ["x3dv"]
      },
      "multipart/alternative": {
        source: "iana",
        compressible: false
      },
      "multipart/appledouble": {
        source: "iana"
      },
      "multipart/byteranges": {
        source: "iana"
      },
      "multipart/digest": {
        source: "iana"
      },
      "multipart/encrypted": {
        source: "iana",
        compressible: false
      },
      "multipart/form-data": {
        source: "iana",
        compressible: false
      },
      "multipart/header-set": {
        source: "iana"
      },
      "multipart/mixed": {
        source: "iana"
      },
      "multipart/multilingual": {
        source: "iana"
      },
      "multipart/parallel": {
        source: "iana"
      },
      "multipart/related": {
        source: "iana",
        compressible: false
      },
      "multipart/report": {
        source: "iana"
      },
      "multipart/signed": {
        source: "iana",
        compressible: false
      },
      "multipart/vnd.bint.med-plus": {
        source: "iana"
      },
      "multipart/voice-message": {
        source: "iana"
      },
      "multipart/x-mixed-replace": {
        source: "iana"
      },
      "text/1d-interleaved-parityfec": {
        source: "iana"
      },
      "text/cache-manifest": {
        source: "iana",
        compressible: true,
        extensions: ["appcache", "manifest"]
      },
      "text/calendar": {
        source: "iana",
        extensions: ["ics", "ifb"]
      },
      "text/calender": {
        compressible: true
      },
      "text/cmd": {
        compressible: true
      },
      "text/coffeescript": {
        extensions: ["coffee", "litcoffee"]
      },
      "text/cql": {
        source: "iana"
      },
      "text/cql-expression": {
        source: "iana"
      },
      "text/cql-identifier": {
        source: "iana"
      },
      "text/css": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["css"]
      },
      "text/csv": {
        source: "iana",
        compressible: true,
        extensions: ["csv"]
      },
      "text/csv-schema": {
        source: "iana"
      },
      "text/directory": {
        source: "iana"
      },
      "text/dns": {
        source: "iana"
      },
      "text/ecmascript": {
        source: "iana"
      },
      "text/encaprtp": {
        source: "iana"
      },
      "text/enriched": {
        source: "iana"
      },
      "text/fhirpath": {
        source: "iana"
      },
      "text/flexfec": {
        source: "iana"
      },
      "text/fwdred": {
        source: "iana"
      },
      "text/gff3": {
        source: "iana"
      },
      "text/grammar-ref-list": {
        source: "iana"
      },
      "text/html": {
        source: "iana",
        compressible: true,
        extensions: ["html", "htm", "shtml"]
      },
      "text/jade": {
        extensions: ["jade"]
      },
      "text/javascript": {
        source: "iana",
        compressible: true
      },
      "text/jcr-cnd": {
        source: "iana"
      },
      "text/jsx": {
        compressible: true,
        extensions: ["jsx"]
      },
      "text/less": {
        compressible: true,
        extensions: ["less"]
      },
      "text/markdown": {
        source: "iana",
        compressible: true,
        extensions: ["markdown", "md"]
      },
      "text/mathml": {
        source: "nginx",
        extensions: ["mml"]
      },
      "text/mdx": {
        compressible: true,
        extensions: ["mdx"]
      },
      "text/mizar": {
        source: "iana"
      },
      "text/n3": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["n3"]
      },
      "text/parameters": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/parityfec": {
        source: "iana"
      },
      "text/plain": {
        source: "iana",
        compressible: true,
        extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
      },
      "text/provenance-notation": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/prs.fallenstein.rst": {
        source: "iana"
      },
      "text/prs.lines.tag": {
        source: "iana",
        extensions: ["dsc"]
      },
      "text/prs.prop.logic": {
        source: "iana"
      },
      "text/raptorfec": {
        source: "iana"
      },
      "text/red": {
        source: "iana"
      },
      "text/rfc822-headers": {
        source: "iana"
      },
      "text/richtext": {
        source: "iana",
        compressible: true,
        extensions: ["rtx"]
      },
      "text/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "text/rtp-enc-aescm128": {
        source: "iana"
      },
      "text/rtploopback": {
        source: "iana"
      },
      "text/rtx": {
        source: "iana"
      },
      "text/sgml": {
        source: "iana",
        extensions: ["sgml", "sgm"]
      },
      "text/shaclc": {
        source: "iana"
      },
      "text/shex": {
        source: "iana",
        extensions: ["shex"]
      },
      "text/slim": {
        extensions: ["slim", "slm"]
      },
      "text/spdx": {
        source: "iana",
        extensions: ["spdx"]
      },
      "text/strings": {
        source: "iana"
      },
      "text/stylus": {
        extensions: ["stylus", "styl"]
      },
      "text/t140": {
        source: "iana"
      },
      "text/tab-separated-values": {
        source: "iana",
        compressible: true,
        extensions: ["tsv"]
      },
      "text/troff": {
        source: "iana",
        extensions: ["t", "tr", "roff", "man", "me", "ms"]
      },
      "text/turtle": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["ttl"]
      },
      "text/ulpfec": {
        source: "iana"
      },
      "text/uri-list": {
        source: "iana",
        compressible: true,
        extensions: ["uri", "uris", "urls"]
      },
      "text/vcard": {
        source: "iana",
        compressible: true,
        extensions: ["vcard"]
      },
      "text/vnd.a": {
        source: "iana"
      },
      "text/vnd.abc": {
        source: "iana"
      },
      "text/vnd.ascii-art": {
        source: "iana"
      },
      "text/vnd.curl": {
        source: "iana",
        extensions: ["curl"]
      },
      "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: ["dcurl"]
      },
      "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: ["mcurl"]
      },
      "text/vnd.curl.scurl": {
        source: "apache",
        extensions: ["scurl"]
      },
      "text/vnd.debian.copyright": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.dmclientscript": {
        source: "iana"
      },
      "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "text/vnd.esmertec.theme-descriptor": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.familysearch.gedcom": {
        source: "iana",
        extensions: ["ged"]
      },
      "text/vnd.ficlab.flt": {
        source: "iana"
      },
      "text/vnd.fly": {
        source: "iana",
        extensions: ["fly"]
      },
      "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: ["flx"]
      },
      "text/vnd.gml": {
        source: "iana"
      },
      "text/vnd.graphviz": {
        source: "iana",
        extensions: ["gv"]
      },
      "text/vnd.hans": {
        source: "iana"
      },
      "text/vnd.hgl": {
        source: "iana"
      },
      "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: ["3dml"]
      },
      "text/vnd.in3d.spot": {
        source: "iana",
        extensions: ["spot"]
      },
      "text/vnd.iptc.newsml": {
        source: "iana"
      },
      "text/vnd.iptc.nitf": {
        source: "iana"
      },
      "text/vnd.latex-z": {
        source: "iana"
      },
      "text/vnd.motorola.reflex": {
        source: "iana"
      },
      "text/vnd.ms-mediapackage": {
        source: "iana"
      },
      "text/vnd.net2phone.commcenter.command": {
        source: "iana"
      },
      "text/vnd.radisys.msml-basic-layout": {
        source: "iana"
      },
      "text/vnd.senx.warpscript": {
        source: "iana"
      },
      "text/vnd.si.uricatalogue": {
        source: "iana"
      },
      "text/vnd.sosi": {
        source: "iana"
      },
      "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["jad"]
      },
      "text/vnd.trolltech.linguist": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.wap.si": {
        source: "iana"
      },
      "text/vnd.wap.sl": {
        source: "iana"
      },
      "text/vnd.wap.wml": {
        source: "iana",
        extensions: ["wml"]
      },
      "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: ["wmls"]
      },
      "text/vtt": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["vtt"]
      },
      "text/x-asm": {
        source: "apache",
        extensions: ["s", "asm"]
      },
      "text/x-c": {
        source: "apache",
        extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
      },
      "text/x-component": {
        source: "nginx",
        extensions: ["htc"]
      },
      "text/x-fortran": {
        source: "apache",
        extensions: ["f", "for", "f77", "f90"]
      },
      "text/x-gwt-rpc": {
        compressible: true
      },
      "text/x-handlebars-template": {
        extensions: ["hbs"]
      },
      "text/x-java-source": {
        source: "apache",
        extensions: ["java"]
      },
      "text/x-jquery-tmpl": {
        compressible: true
      },
      "text/x-lua": {
        extensions: ["lua"]
      },
      "text/x-markdown": {
        compressible: true,
        extensions: ["mkd"]
      },
      "text/x-nfo": {
        source: "apache",
        extensions: ["nfo"]
      },
      "text/x-opml": {
        source: "apache",
        extensions: ["opml"]
      },
      "text/x-org": {
        compressible: true,
        extensions: ["org"]
      },
      "text/x-pascal": {
        source: "apache",
        extensions: ["p", "pas"]
      },
      "text/x-processing": {
        compressible: true,
        extensions: ["pde"]
      },
      "text/x-sass": {
        extensions: ["sass"]
      },
      "text/x-scss": {
        extensions: ["scss"]
      },
      "text/x-setext": {
        source: "apache",
        extensions: ["etx"]
      },
      "text/x-sfv": {
        source: "apache",
        extensions: ["sfv"]
      },
      "text/x-suse-ymp": {
        compressible: true,
        extensions: ["ymp"]
      },
      "text/x-uuencode": {
        source: "apache",
        extensions: ["uu"]
      },
      "text/x-vcalendar": {
        source: "apache",
        extensions: ["vcs"]
      },
      "text/x-vcard": {
        source: "apache",
        extensions: ["vcf"]
      },
      "text/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml"]
      },
      "text/xml-external-parsed-entity": {
        source: "iana"
      },
      "text/yaml": {
        compressible: true,
        extensions: ["yaml", "yml"]
      },
      "video/1d-interleaved-parityfec": {
        source: "iana"
      },
      "video/3gpp": {
        source: "iana",
        extensions: ["3gp", "3gpp"]
      },
      "video/3gpp-tt": {
        source: "iana"
      },
      "video/3gpp2": {
        source: "iana",
        extensions: ["3g2"]
      },
      "video/av1": {
        source: "iana"
      },
      "video/bmpeg": {
        source: "iana"
      },
      "video/bt656": {
        source: "iana"
      },
      "video/celb": {
        source: "iana"
      },
      "video/dv": {
        source: "iana"
      },
      "video/encaprtp": {
        source: "iana"
      },
      "video/ffv1": {
        source: "iana"
      },
      "video/flexfec": {
        source: "iana"
      },
      "video/h261": {
        source: "iana",
        extensions: ["h261"]
      },
      "video/h263": {
        source: "iana",
        extensions: ["h263"]
      },
      "video/h263-1998": {
        source: "iana"
      },
      "video/h263-2000": {
        source: "iana"
      },
      "video/h264": {
        source: "iana",
        extensions: ["h264"]
      },
      "video/h264-rcdo": {
        source: "iana"
      },
      "video/h264-svc": {
        source: "iana"
      },
      "video/h265": {
        source: "iana"
      },
      "video/iso.segment": {
        source: "iana",
        extensions: ["m4s"]
      },
      "video/jpeg": {
        source: "iana",
        extensions: ["jpgv"]
      },
      "video/jpeg2000": {
        source: "iana"
      },
      "video/jpm": {
        source: "apache",
        extensions: ["jpm", "jpgm"]
      },
      "video/jxsv": {
        source: "iana"
      },
      "video/mj2": {
        source: "iana",
        extensions: ["mj2", "mjp2"]
      },
      "video/mp1s": {
        source: "iana"
      },
      "video/mp2p": {
        source: "iana"
      },
      "video/mp2t": {
        source: "iana",
        extensions: ["ts"]
      },
      "video/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["mp4", "mp4v", "mpg4"]
      },
      "video/mp4v-es": {
        source: "iana"
      },
      "video/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
      },
      "video/mpeg4-generic": {
        source: "iana"
      },
      "video/mpv": {
        source: "iana"
      },
      "video/nv": {
        source: "iana"
      },
      "video/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogv"]
      },
      "video/parityfec": {
        source: "iana"
      },
      "video/pointer": {
        source: "iana"
      },
      "video/quicktime": {
        source: "iana",
        compressible: false,
        extensions: ["qt", "mov"]
      },
      "video/raptorfec": {
        source: "iana"
      },
      "video/raw": {
        source: "iana"
      },
      "video/rtp-enc-aescm128": {
        source: "iana"
      },
      "video/rtploopback": {
        source: "iana"
      },
      "video/rtx": {
        source: "iana"
      },
      "video/scip": {
        source: "iana"
      },
      "video/smpte291": {
        source: "iana"
      },
      "video/smpte292m": {
        source: "iana"
      },
      "video/ulpfec": {
        source: "iana"
      },
      "video/vc1": {
        source: "iana"
      },
      "video/vc2": {
        source: "iana"
      },
      "video/vnd.cctv": {
        source: "iana"
      },
      "video/vnd.dece.hd": {
        source: "iana",
        extensions: ["uvh", "uvvh"]
      },
      "video/vnd.dece.mobile": {
        source: "iana",
        extensions: ["uvm", "uvvm"]
      },
      "video/vnd.dece.mp4": {
        source: "iana"
      },
      "video/vnd.dece.pd": {
        source: "iana",
        extensions: ["uvp", "uvvp"]
      },
      "video/vnd.dece.sd": {
        source: "iana",
        extensions: ["uvs", "uvvs"]
      },
      "video/vnd.dece.video": {
        source: "iana",
        extensions: ["uvv", "uvvv"]
      },
      "video/vnd.directv.mpeg": {
        source: "iana"
      },
      "video/vnd.directv.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dlna.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dvb.file": {
        source: "iana",
        extensions: ["dvb"]
      },
      "video/vnd.fvt": {
        source: "iana",
        extensions: ["fvt"]
      },
      "video/vnd.hns.video": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsavc": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsmpeg2": {
        source: "iana"
      },
      "video/vnd.motorola.video": {
        source: "iana"
      },
      "video/vnd.motorola.videop": {
        source: "iana"
      },
      "video/vnd.mpegurl": {
        source: "iana",
        extensions: ["mxu", "m4u"]
      },
      "video/vnd.ms-playready.media.pyv": {
        source: "iana",
        extensions: ["pyv"]
      },
      "video/vnd.nokia.interleaved-multimedia": {
        source: "iana"
      },
      "video/vnd.nokia.mp4vr": {
        source: "iana"
      },
      "video/vnd.nokia.videovoip": {
        source: "iana"
      },
      "video/vnd.objectvideo": {
        source: "iana"
      },
      "video/vnd.radgamettools.bink": {
        source: "iana"
      },
      "video/vnd.radgamettools.smacker": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg1": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg4": {
        source: "iana"
      },
      "video/vnd.sealed.swf": {
        source: "iana"
      },
      "video/vnd.sealedmedia.softseal.mov": {
        source: "iana"
      },
      "video/vnd.uvvu.mp4": {
        source: "iana",
        extensions: ["uvu", "uvvu"]
      },
      "video/vnd.vivo": {
        source: "iana",
        extensions: ["viv"]
      },
      "video/vnd.youtube.yt": {
        source: "iana"
      },
      "video/vp8": {
        source: "iana"
      },
      "video/vp9": {
        source: "iana"
      },
      "video/webm": {
        source: "apache",
        compressible: false,
        extensions: ["webm"]
      },
      "video/x-f4v": {
        source: "apache",
        extensions: ["f4v"]
      },
      "video/x-fli": {
        source: "apache",
        extensions: ["fli"]
      },
      "video/x-flv": {
        source: "apache",
        compressible: false,
        extensions: ["flv"]
      },
      "video/x-m4v": {
        source: "apache",
        extensions: ["m4v"]
      },
      "video/x-matroska": {
        source: "apache",
        compressible: false,
        extensions: ["mkv", "mk3d", "mks"]
      },
      "video/x-mng": {
        source: "apache",
        extensions: ["mng"]
      },
      "video/x-ms-asf": {
        source: "apache",
        extensions: ["asf", "asx"]
      },
      "video/x-ms-vob": {
        source: "apache",
        extensions: ["vob"]
      },
      "video/x-ms-wm": {
        source: "apache",
        extensions: ["wm"]
      },
      "video/x-ms-wmv": {
        source: "apache",
        compressible: false,
        extensions: ["wmv"]
      },
      "video/x-ms-wmx": {
        source: "apache",
        extensions: ["wmx"]
      },
      "video/x-ms-wvx": {
        source: "apache",
        extensions: ["wvx"]
      },
      "video/x-msvideo": {
        source: "apache",
        extensions: ["avi"]
      },
      "video/x-sgi-movie": {
        source: "apache",
        extensions: ["movie"]
      },
      "video/x-smv": {
        source: "apache",
        extensions: ["smv"]
      },
      "x-conference/x-cooltalk": {
        source: "apache",
        extensions: ["ice"]
      },
      "x-shader/x-fragment": {
        compressible: true
      },
      "x-shader/x-vertex": {
        compressible: true
      }
    };
  }
});

// node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  "node_modules/mime-db/index.js"(exports, module2) {
    module2.exports = require_db();
  }
});

// node_modules/mime-types/index.js
var require_mime_types = __commonJS({
  "node_modules/mime-types/index.js"(exports) {
    "use strict";
    var db = require_mime_db();
    var extname = require("path").extname;
    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;
    exports.charset = charset;
    exports.charsets = { lookup: charset };
    exports.contentType = contentType;
    exports.extension = extension;
    exports.extensions = /* @__PURE__ */ Object.create(null);
    exports.lookup = lookup;
    exports.types = /* @__PURE__ */ Object.create(null);
    populateMaps(exports.extensions, exports.types);
    function charset(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return "UTF-8";
      }
      return false;
    }
    function contentType(str) {
      if (!str || typeof str !== "string") {
        return false;
      }
      var mime = str.indexOf("/") === -1 ? exports.lookup(str) : str;
      if (!mime) {
        return false;
      }
      if (mime.indexOf("charset") === -1) {
        var charset2 = exports.charset(mime);
        if (charset2)
          mime += "; charset=" + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var exts = match && exports.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path2) {
      if (!path2 || typeof path2 !== "string") {
        return false;
      }
      var extension2 = extname("x." + path2).toLowerCase().substr(1);
      if (!extension2) {
        return false;
      }
      return exports.types[extension2] || false;
    }
    function populateMaps(extensions, types) {
      var preference = ["nginx", "apache", void 0, "iana"];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type] = exts;
        for (var i = 0; i < exts.length; i++) {
          var extension2 = exts[i];
          if (types[extension2]) {
            var from = preference.indexOf(db[types[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
              continue;
            }
          }
          types[extension2] = type;
        }
      });
    }
  }
});

// node_modules/asynckit/lib/defer.js
var require_defer = __commonJS({
  "node_modules/asynckit/lib/defer.js"(exports, module2) {
    module2.exports = defer2;
    function defer2(fn) {
      var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
      if (nextTick) {
        nextTick(fn);
      } else {
        setTimeout(fn, 0);
      }
    }
  }
});

// node_modules/asynckit/lib/async.js
var require_async = __commonJS({
  "node_modules/asynckit/lib/async.js"(exports, module2) {
    var defer2 = require_defer();
    module2.exports = async;
    function async(callback) {
      var isAsync = false;
      defer2(function() {
        isAsync = true;
      });
      return function async_callback(err, result) {
        if (isAsync) {
          callback(err, result);
        } else {
          defer2(function nextTick_callback() {
            callback(err, result);
          });
        }
      };
    }
  }
});

// node_modules/asynckit/lib/abort.js
var require_abort = __commonJS({
  "node_modules/asynckit/lib/abort.js"(exports, module2) {
    module2.exports = abort;
    function abort(state) {
      Object.keys(state.jobs).forEach(clean.bind(state));
      state.jobs = {};
    }
    function clean(key2) {
      if (typeof this.jobs[key2] == "function") {
        this.jobs[key2]();
      }
    }
  }
});

// node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS({
  "node_modules/asynckit/lib/iterate.js"(exports, module2) {
    var async = require_async();
    var abort = require_abort();
    module2.exports = iterate;
    function iterate(list, iterator, state, callback) {
      var key2 = state["keyedList"] ? state["keyedList"][state.index] : state.index;
      state.jobs[key2] = runJob(iterator, key2, list[key2], function(error3, output) {
        if (!(key2 in state.jobs)) {
          return;
        }
        delete state.jobs[key2];
        if (error3) {
          abort(state);
        } else {
          state.results[key2] = output;
        }
        callback(error3, state.results);
      });
    }
    function runJob(iterator, key2, item, callback) {
      var aborter;
      if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
      } else {
        aborter = iterator(item, key2, async(callback));
      }
      return aborter;
    }
  }
});

// node_modules/asynckit/lib/state.js
var require_state = __commonJS({
  "node_modules/asynckit/lib/state.js"(exports, module2) {
    module2.exports = state;
    function state(list, sortMethod) {
      var isNamedList = !Array.isArray(list), initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list).length : list.length
      };
      if (sortMethod) {
        initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
          return sortMethod(list[a], list[b]);
        });
      }
      return initState;
    }
  }
});

// node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS({
  "node_modules/asynckit/lib/terminator.js"(exports, module2) {
    var abort = require_abort();
    var async = require_async();
    module2.exports = terminator;
    function terminator(callback) {
      if (!Object.keys(this.jobs).length) {
        return;
      }
      this.index = this.size;
      abort(this);
      async(callback)(null, this.results);
    }
  }
});

// node_modules/asynckit/parallel.js
var require_parallel = __commonJS({
  "node_modules/asynckit/parallel.js"(exports, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = parallel;
    function parallel(list, iterator, callback) {
      var state = initState(list);
      while (state.index < (state["keyedList"] || list).length) {
        iterate(list, iterator, state, function(error3, result) {
          if (error3) {
            callback(error3, result);
            return;
          }
          if (Object.keys(state.jobs).length === 0) {
            callback(null, state.results);
            return;
          }
        });
        state.index++;
      }
      return terminator.bind(state, callback);
    }
  }
});

// node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS({
  "node_modules/asynckit/serialOrdered.js"(exports, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = serialOrdered;
    module2.exports.ascending = ascending;
    module2.exports.descending = descending;
    function serialOrdered(list, iterator, sortMethod, callback) {
      var state = initState(list, sortMethod);
      iterate(list, iterator, state, function iteratorHandler(error3, result) {
        if (error3) {
          callback(error3, result);
          return;
        }
        state.index++;
        if (state.index < (state["keyedList"] || list).length) {
          iterate(list, iterator, state, iteratorHandler);
          return;
        }
        callback(null, state.results);
      });
      return terminator.bind(state, callback);
    }
    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }
    function descending(a, b) {
      return -1 * ascending(a, b);
    }
  }
});

// node_modules/asynckit/serial.js
var require_serial = __commonJS({
  "node_modules/asynckit/serial.js"(exports, module2) {
    var serialOrdered = require_serialOrdered();
    module2.exports = serial;
    function serial(list, iterator, callback) {
      return serialOrdered(list, iterator, null, callback);
    }
  }
});

// node_modules/asynckit/index.js
var require_asynckit = __commonJS({
  "node_modules/asynckit/index.js"(exports, module2) {
    module2.exports = {
      parallel: require_parallel(),
      serial: require_serial(),
      serialOrdered: require_serialOrdered()
    };
  }
});

// node_modules/form-data/lib/populate.js
var require_populate = __commonJS({
  "node_modules/form-data/lib/populate.js"(exports, module2) {
    module2.exports = function(dst, src) {
      Object.keys(src).forEach(function(prop) {
        dst[prop] = dst[prop] || src[prop];
      });
      return dst;
    };
  }
});

// node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS({
  "node_modules/form-data/lib/form_data.js"(exports, module2) {
    var CombinedStream = require_combined_stream();
    var util = require("util");
    var path2 = require("path");
    var http2 = require("http");
    var https = require("https");
    var parseUrl = require("url").parse;
    var fs = require("fs");
    var Stream = require("stream").Stream;
    var mime = require_mime_types();
    var asynckit = require_asynckit();
    var populate = require_populate();
    module2.exports = FormData3;
    util.inherits(FormData3, CombinedStream);
    function FormData3(options2) {
      if (!(this instanceof FormData3)) {
        return new FormData3(options2);
      }
      this._overheadLength = 0;
      this._valueLength = 0;
      this._valuesToMeasure = [];
      CombinedStream.call(this);
      options2 = options2 || {};
      for (var option in options2) {
        this[option] = options2[option];
      }
    }
    FormData3.LINE_BREAK = "\r\n";
    FormData3.DEFAULT_CONTENT_TYPE = "application/octet-stream";
    FormData3.prototype.append = function(field, value, options2) {
      options2 = options2 || {};
      if (typeof options2 == "string") {
        options2 = { filename: options2 };
      }
      var append = CombinedStream.prototype.append.bind(this);
      if (typeof value == "number") {
        value = "" + value;
      }
      if (util.isArray(value)) {
        this._error(new Error("Arrays are not supported."));
        return;
      }
      var header = this._multiPartHeader(field, value, options2);
      var footer = this._multiPartFooter();
      append(header);
      append(value);
      append(footer);
      this._trackLength(header, value, options2);
    };
    FormData3.prototype._trackLength = function(header, value, options2) {
      var valueLength = 0;
      if (options2.knownLength != null) {
        valueLength += +options2.knownLength;
      } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
      } else if (typeof value === "string") {
        valueLength = Buffer.byteLength(value);
      }
      this._valueLength += valueLength;
      this._overheadLength += Buffer.byteLength(header) + FormData3.LINE_BREAK.length;
      if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion")) && !(value instanceof Stream)) {
        return;
      }
      if (!options2.knownLength) {
        this._valuesToMeasure.push(value);
      }
    };
    FormData3.prototype._lengthRetriever = function(value, callback) {
      if (value.hasOwnProperty("fd")) {
        if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
          callback(null, value.end + 1 - (value.start ? value.start : 0));
        } else {
          fs.stat(value.path, function(err, stat) {
            var fileSize;
            if (err) {
              callback(err);
              return;
            }
            fileSize = stat.size - (value.start ? value.start : 0);
            callback(null, fileSize);
          });
        }
      } else if (value.hasOwnProperty("httpVersion")) {
        callback(null, +value.headers["content-length"]);
      } else if (value.hasOwnProperty("httpModule")) {
        value.on("response", function(response) {
          value.pause();
          callback(null, +response.headers["content-length"]);
        });
        value.resume();
      } else {
        callback("Unknown stream");
      }
    };
    FormData3.prototype._multiPartHeader = function(field, value, options2) {
      if (typeof options2.header == "string") {
        return options2.header;
      }
      var contentDisposition = this._getContentDisposition(value, options2);
      var contentType = this._getContentType(value, options2);
      var contents = "";
      var headers = {
        // add custom disposition as third element or keep it two elements if not
        "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
        // if no content type. allow it to be empty array
        "Content-Type": [].concat(contentType || [])
      };
      if (typeof options2.header == "object") {
        populate(headers, options2.header);
      }
      var header;
      for (var prop in headers) {
        if (!headers.hasOwnProperty(prop))
          continue;
        header = headers[prop];
        if (header == null) {
          continue;
        }
        if (!Array.isArray(header)) {
          header = [header];
        }
        if (header.length) {
          contents += prop + ": " + header.join("; ") + FormData3.LINE_BREAK;
        }
      }
      return "--" + this.getBoundary() + FormData3.LINE_BREAK + contents + FormData3.LINE_BREAK;
    };
    FormData3.prototype._getContentDisposition = function(value, options2) {
      var filename, contentDisposition;
      if (typeof options2.filepath === "string") {
        filename = path2.normalize(options2.filepath).replace(/\\/g, "/");
      } else if (options2.filename || value.name || value.path) {
        filename = path2.basename(options2.filename || value.name || value.path);
      } else if (value.readable && value.hasOwnProperty("httpVersion")) {
        filename = path2.basename(value.client._httpMessage.path || "");
      }
      if (filename) {
        contentDisposition = 'filename="' + filename + '"';
      }
      return contentDisposition;
    };
    FormData3.prototype._getContentType = function(value, options2) {
      var contentType = options2.contentType;
      if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
      }
      if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
      }
      if (!contentType && value.readable && value.hasOwnProperty("httpVersion")) {
        contentType = value.headers["content-type"];
      }
      if (!contentType && (options2.filepath || options2.filename)) {
        contentType = mime.lookup(options2.filepath || options2.filename);
      }
      if (!contentType && typeof value == "object") {
        contentType = FormData3.DEFAULT_CONTENT_TYPE;
      }
      return contentType;
    };
    FormData3.prototype._multiPartFooter = function() {
      return function(next) {
        var footer = FormData3.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
          footer += this._lastBoundary();
        }
        next(footer);
      }.bind(this);
    };
    FormData3.prototype._lastBoundary = function() {
      return "--" + this.getBoundary() + "--" + FormData3.LINE_BREAK;
    };
    FormData3.prototype.getHeaders = function(userHeaders) {
      var header;
      var formHeaders = {
        "content-type": "multipart/form-data; boundary=" + this.getBoundary()
      };
      for (header in userHeaders) {
        if (userHeaders.hasOwnProperty(header)) {
          formHeaders[header.toLowerCase()] = userHeaders[header];
        }
      }
      return formHeaders;
    };
    FormData3.prototype.setBoundary = function(boundary) {
      this._boundary = boundary;
    };
    FormData3.prototype.getBoundary = function() {
      if (!this._boundary) {
        this._generateBoundary();
      }
      return this._boundary;
    };
    FormData3.prototype.getBuffer = function() {
      var dataBuffer = new Buffer.alloc(0);
      var boundary = this.getBoundary();
      for (var i = 0, len = this._streams.length; i < len; i++) {
        if (typeof this._streams[i] !== "function") {
          if (Buffer.isBuffer(this._streams[i])) {
            dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
          } else {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
          }
          if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData3.LINE_BREAK)]);
          }
        }
      }
      return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
    };
    FormData3.prototype._generateBoundary = function() {
      var boundary = "--------------------------";
      for (var i = 0; i < 24; i++) {
        boundary += Math.floor(Math.random() * 10).toString(16);
      }
      this._boundary = boundary;
    };
    FormData3.prototype.getLengthSync = function() {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this.hasKnownLength()) {
        this._error(new Error("Cannot calculate proper length in synchronous way."));
      }
      return knownLength;
    };
    FormData3.prototype.hasKnownLength = function() {
      var hasKnownLength = true;
      if (this._valuesToMeasure.length) {
        hasKnownLength = false;
      }
      return hasKnownLength;
    };
    FormData3.prototype.getLength = function(cb) {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
      }
      asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
        if (err) {
          cb(err);
          return;
        }
        values.forEach(function(length) {
          knownLength += length;
        });
        cb(null, knownLength);
      });
    };
    FormData3.prototype.submit = function(params, cb) {
      var request, options2, defaults = { method: "post" };
      if (typeof params == "string") {
        params = parseUrl(params);
        options2 = populate({
          port: params.port,
          path: params.pathname,
          host: params.hostname,
          protocol: params.protocol
        }, defaults);
      } else {
        options2 = populate(params, defaults);
        if (!options2.port) {
          options2.port = options2.protocol == "https:" ? 443 : 80;
        }
      }
      options2.headers = this.getHeaders(params.headers);
      if (options2.protocol == "https:") {
        request = https.request(options2);
      } else {
        request = http2.request(options2);
      }
      this.getLength(function(err, length) {
        if (err && err !== "Unknown stream") {
          this._error(err);
          return;
        }
        if (length) {
          request.setHeader("Content-Length", length);
        }
        this.pipe(request);
        if (cb) {
          var onResponse;
          var callback = function(error3, responce) {
            request.removeListener("error", callback);
            request.removeListener("response", onResponse);
            return cb.call(this, error3, responce);
          };
          onResponse = callback.bind(this, null);
          request.on("error", callback);
          request.on("response", onResponse);
        }
      }.bind(this));
      return request;
    };
    FormData3.prototype._error = function(err) {
      if (!this.error) {
        this.error = err;
        this.pause();
        this.emit("error", err);
      }
    };
    FormData3.prototype.toString = function() {
      return "[object FormData]";
    };
  }
});

// node_modules/proxy-from-env/index.js
var require_proxy_from_env = __commonJS({
  "node_modules/proxy-from-env/index.js"(exports) {
    "use strict";
    var parseUrl = require("url").parse;
    var DEFAULT_PORTS = {
      ftp: 21,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var stringEndsWith = String.prototype.endsWith || function(s2) {
      return s2.length <= this.length && this.indexOf(s2, this.length - s2.length) !== -1;
    };
    function getProxyForUrl(url) {
      var parsedUrl = typeof url === "string" ? parseUrl(url) : url || {};
      var proto = parsedUrl.protocol;
      var hostname = parsedUrl.host;
      var port = parsedUrl.port;
      if (typeof hostname !== "string" || !hostname || typeof proto !== "string") {
        return "";
      }
      proto = proto.split(":", 1)[0];
      hostname = hostname.replace(/:\d*$/, "");
      port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
      if (!shouldProxy(hostname, port)) {
        return "";
      }
      var proxy = getEnv("npm_config_" + proto + "_proxy") || getEnv(proto + "_proxy") || getEnv("npm_config_proxy") || getEnv("all_proxy");
      if (proxy && proxy.indexOf("://") === -1) {
        proxy = proto + "://" + proxy;
      }
      return proxy;
    }
    function shouldProxy(hostname, port) {
      var NO_PROXY = (getEnv("npm_config_no_proxy") || getEnv("no_proxy")).toLowerCase();
      if (!NO_PROXY) {
        return true;
      }
      if (NO_PROXY === "*") {
        return false;
      }
      return NO_PROXY.split(/[,\s]/).every(function(proxy) {
        if (!proxy) {
          return true;
        }
        var parsedProxy = proxy.match(/^(.+):(\d+)$/);
        var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
        var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
        if (parsedProxyPort && parsedProxyPort !== port) {
          return true;
        }
        if (!/^[.*]/.test(parsedProxyHostname)) {
          return hostname !== parsedProxyHostname;
        }
        if (parsedProxyHostname.charAt(0) === "*") {
          parsedProxyHostname = parsedProxyHostname.slice(1);
        }
        return !stringEndsWith.call(hostname, parsedProxyHostname);
      });
    }
    function getEnv(key2) {
      return process.env[key2.toLowerCase()] || process.env[key2.toUpperCase()] || "";
    }
    exports.getProxyForUrl = getProxyForUrl;
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module2) {
    var s2 = 1e3;
    var m = s2 * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options2) {
      options2 = options2 || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse5(val);
      } else if (type === "number" && isFinite(val)) {
        return options2.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse5(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s2;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s2) {
        return Math.round(ms / s2) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s2) {
        return plural(ms, msAbs, s2, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key2) => {
        createDebug[key2] = env[key2];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash2 = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash2 = (hash2 << 5) - hash2 + namespace.charCodeAt(i);
          hash2 |= 0;
        }
        return createDebug.colors[Math.abs(hash2) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index13 = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index13++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index13];
              match = formatter.call(self2, val);
              args.splice(index13, 1);
              index13--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module2) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load12;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index13 = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index13++;
        if (match === "%c") {
          lastC = index13;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error3) {
      }
    }
    function load12() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error3) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error3) {
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error3) {
        return "[UnexpectedJSONParseError]: " + error3.message;
      }
    };
  }
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "node_modules/supports-color/index.js"(exports, module2) {
    "use strict";
    var argv = process.argv;
    var terminator = argv.indexOf("--");
    var hasFlag = function(flag) {
      flag = "--" + flag;
      var pos = argv.indexOf(flag);
      return pos !== -1 && (terminator !== -1 ? pos < terminator : true);
    };
    module2.exports = function() {
      if ("FORCE_COLOR" in process.env) {
        return true;
      }
      if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
        return false;
      }
      if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
        return true;
      }
      if (process.stdout && !process.stdout.isTTY) {
        return false;
      }
      if (process.platform === "win32") {
        return true;
      }
      if ("COLORTERM" in process.env) {
        return true;
      }
      if (process.env.TERM === "dumb") {
        return false;
      }
      if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
        return true;
      }
      return false;
    }();
  }
});

// node_modules/debug/src/node.js
var require_node = __commonJS({
  "node_modules/debug/src/node.js"(exports, module2) {
    var tty = require("tty");
    var util = require("util");
    exports.init = init2;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load12;
    exports.useColors = useColors;
    exports.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error3) {
    }
    exports.inspectOpts = Object.keys(process.env).filter((key2) => {
      return /^debug_/i.test(key2);
    }).reduce((obj, key2) => {
      const prop = key2.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key2];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.format(...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load12() {
      return process.env.DEBUG;
    }
    function init2(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// node_modules/debug/src/index.js
var require_src = __commonJS({
  "node_modules/debug/src/index.js"(exports, module2) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  }
});

// node_modules/follow-redirects/debug.js
var require_debug = __commonJS({
  "node_modules/follow-redirects/debug.js"(exports, module2) {
    var debug;
    module2.exports = function() {
      if (!debug) {
        try {
          debug = require_src()("follow-redirects");
        } catch (error3) {
        }
        if (typeof debug !== "function") {
          debug = function() {
          };
        }
      }
      debug.apply(null, arguments);
    };
  }
});

// node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS({
  "node_modules/follow-redirects/index.js"(exports, module2) {
    var url = require("url");
    var URL2 = url.URL;
    var http2 = require("http");
    var https = require("https");
    var Writable = require("stream").Writable;
    var assert = require("assert");
    var debug = require_debug();
    var useNativeURL = false;
    try {
      assert(new URL2());
    } catch (error3) {
      useNativeURL = error3.code === "ERR_INVALID_URL";
    }
    var preservedUrlFields = [
      "auth",
      "host",
      "hostname",
      "href",
      "path",
      "pathname",
      "port",
      "protocol",
      "query",
      "search",
      "hash"
    ];
    var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
    var eventHandlers = /* @__PURE__ */ Object.create(null);
    events.forEach(function(event) {
      eventHandlers[event] = function(arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    });
    var InvalidUrlError = createErrorType(
      "ERR_INVALID_URL",
      "Invalid URL",
      TypeError
    );
    var RedirectionError = createErrorType(
      "ERR_FR_REDIRECTION_FAILURE",
      "Redirected request failed"
    );
    var TooManyRedirectsError = createErrorType(
      "ERR_FR_TOO_MANY_REDIRECTS",
      "Maximum number of redirects exceeded",
      RedirectionError
    );
    var MaxBodyLengthExceededError = createErrorType(
      "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
      "Request body larger than maxBodyLength limit"
    );
    var WriteAfterEndError = createErrorType(
      "ERR_STREAM_WRITE_AFTER_END",
      "write after end"
    );
    var destroy = Writable.prototype.destroy || noop2;
    function RedirectableRequest(options2, responseCallback) {
      Writable.call(this);
      this._sanitizeOptions(options2);
      this._options = options2;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];
      if (responseCallback) {
        this.on("response", responseCallback);
      }
      var self2 = this;
      this._onNativeResponse = function(response) {
        try {
          self2._processResponse(response);
        } catch (cause) {
          self2.emit("error", cause instanceof RedirectionError ? cause : new RedirectionError({ cause }));
        }
      };
      this._performRequest();
    }
    RedirectableRequest.prototype = Object.create(Writable.prototype);
    RedirectableRequest.prototype.abort = function() {
      destroyRequest(this._currentRequest);
      this._currentRequest.abort();
      this.emit("abort");
    };
    RedirectableRequest.prototype.destroy = function(error3) {
      destroyRequest(this._currentRequest, error3);
      destroy.call(this, error3);
      return this;
    };
    RedirectableRequest.prototype.write = function(data, encoding, callback) {
      if (this._ending) {
        throw new WriteAfterEndError();
      }
      if (!isString(data) && !isBuffer(data)) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
      }
      if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data, encoding });
        this._currentRequest.write(data, encoding, callback);
      } else {
        this.emit("error", new MaxBodyLengthExceededError());
        this.abort();
      }
    };
    RedirectableRequest.prototype.end = function(data, encoding, callback) {
      if (isFunction(data)) {
        callback = data;
        data = encoding = null;
      } else if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
      } else {
        var self2 = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function() {
          self2._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    };
    RedirectableRequest.prototype.setHeader = function(name, value) {
      this._options.headers[name] = value;
      this._currentRequest.setHeader(name, value);
    };
    RedirectableRequest.prototype.removeHeader = function(name) {
      delete this._options.headers[name];
      this._currentRequest.removeHeader(name);
    };
    RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
      var self2 = this;
      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
      }
      function startTimer(socket) {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
        }
        self2._timeout = setTimeout(function() {
          self2.emit("timeout");
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      }
      function clearTimer() {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
          self2._timeout = null;
        }
        self2.removeListener("abort", clearTimer);
        self2.removeListener("error", clearTimer);
        self2.removeListener("response", clearTimer);
        self2.removeListener("close", clearTimer);
        if (callback) {
          self2.removeListener("timeout", callback);
        }
        if (!self2.socket) {
          self2._currentRequest.removeListener("socket", startTimer);
        }
      }
      if (callback) {
        this.on("timeout", callback);
      }
      if (this.socket) {
        startTimer(this.socket);
      } else {
        this._currentRequest.once("socket", startTimer);
      }
      this.on("socket", destroyOnTimeout);
      this.on("abort", clearTimer);
      this.on("error", clearTimer);
      this.on("response", clearTimer);
      this.on("close", clearTimer);
      return this;
    };
    [
      "flushHeaders",
      "getHeader",
      "setNoDelay",
      "setSocketKeepAlive"
    ].forEach(function(method) {
      RedirectableRequest.prototype[method] = function(a, b) {
        return this._currentRequest[method](a, b);
      };
    });
    ["aborted", "connection", "socket"].forEach(function(property) {
      Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function() {
          return this._currentRequest[property];
        }
      });
    });
    RedirectableRequest.prototype._sanitizeOptions = function(options2) {
      if (!options2.headers) {
        options2.headers = {};
      }
      if (options2.host) {
        if (!options2.hostname) {
          options2.hostname = options2.host;
        }
        delete options2.host;
      }
      if (!options2.pathname && options2.path) {
        var searchPos = options2.path.indexOf("?");
        if (searchPos < 0) {
          options2.pathname = options2.path;
        } else {
          options2.pathname = options2.path.substring(0, searchPos);
          options2.search = options2.path.substring(searchPos);
        }
      }
    };
    RedirectableRequest.prototype._performRequest = function() {
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        throw new TypeError("Unsupported protocol " + protocol);
      }
      if (this._options.agents) {
        var scheme = protocol.slice(0, -1);
        this._options.agent = this._options.agents[scheme];
      }
      var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
      request._redirectable = this;
      for (var event of events) {
        request.on(event, eventHandlers[event]);
      }
      this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : (
        // When making a request to a proxy, […]
        // a client MUST send the target URI in absolute-form […].
        this._options.path
      );
      if (this._isRedirect) {
        var i = 0;
        var self2 = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error3) {
          if (request === self2._currentRequest) {
            if (error3) {
              self2.emit("error", error3);
            } else if (i < buffers.length) {
              var buffer2 = buffers[i++];
              if (!request.finished) {
                request.write(buffer2.data, buffer2.encoding, writeNext);
              }
            } else if (self2._ended) {
              request.end();
            }
          }
        })();
      }
    };
    RedirectableRequest.prototype._processResponse = function(response) {
      var statusCode = response.statusCode;
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode
        });
      }
      var location = response.headers.location;
      if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);
        this._requestBodyBuffers = [];
        return;
      }
      destroyRequest(this._currentRequest);
      response.destroy();
      if (++this._redirectCount > this._options.maxRedirects) {
        throw new TooManyRedirectsError();
      }
      var requestHeaders;
      var beforeRedirect = this._options.beforeRedirect;
      if (beforeRedirect) {
        requestHeaders = Object.assign({
          // The Host header was set by nativeProtocol.request
          Host: response.req.getHeader("host")
        }, this._options.headers);
      }
      var method = this._options.method;
      if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
      // the server is redirecting the user agent to a different resource […]
      // A user agent can perform a retrieval request targeting that URI
      // (a GET or HEAD request if using HTTP) […]
      statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
        this._options.method = "GET";
        this._requestBodyBuffers = [];
        removeMatchingHeaders(/^content-/i, this._options.headers);
      }
      var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
      var currentUrlParts = parseUrl(this._currentUrl);
      var currentHost = currentHostHeader || currentUrlParts.host;
      var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, { host: currentHost }));
      var redirectUrl = resolveUrl(location, currentUrl);
      debug("redirecting to", redirectUrl.href);
      this._isRedirect = true;
      spreadUrlObject(redirectUrl, this._options);
      if (redirectUrl.protocol !== currentUrlParts.protocol && redirectUrl.protocol !== "https:" || redirectUrl.host !== currentHost && !isSubdomain(redirectUrl.host, currentHost)) {
        removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);
      }
      if (isFunction(beforeRedirect)) {
        var responseDetails = {
          headers: response.headers,
          statusCode
        };
        var requestDetails = {
          url: currentUrl,
          method,
          headers: requestHeaders
        };
        beforeRedirect(this._options, responseDetails, requestDetails);
        this._sanitizeOptions(this._options);
      }
      this._performRequest();
    };
    function wrap(protocols) {
      var exports2 = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
      };
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports2[scheme] = Object.create(nativeProtocol);
        function request(input, options2, callback) {
          if (isURL(input)) {
            input = spreadUrlObject(input);
          } else if (isString(input)) {
            input = spreadUrlObject(parseUrl(input));
          } else {
            callback = options2;
            options2 = validateUrl(input);
            input = { protocol };
          }
          if (isFunction(options2)) {
            callback = options2;
            options2 = null;
          }
          options2 = Object.assign({
            maxRedirects: exports2.maxRedirects,
            maxBodyLength: exports2.maxBodyLength
          }, input, options2);
          options2.nativeProtocols = nativeProtocols;
          if (!isString(options2.host) && !isString(options2.hostname)) {
            options2.hostname = "::1";
          }
          assert.equal(options2.protocol, protocol, "protocol mismatch");
          debug("options", options2);
          return new RedirectableRequest(options2, callback);
        }
        function get3(input, options2, callback) {
          var wrappedRequest = wrappedProtocol.request(input, options2, callback);
          wrappedRequest.end();
          return wrappedRequest;
        }
        Object.defineProperties(wrappedProtocol, {
          request: { value: request, configurable: true, enumerable: true, writable: true },
          get: { value: get3, configurable: true, enumerable: true, writable: true }
        });
      });
      return exports2;
    }
    function noop2() {
    }
    function parseUrl(input) {
      var parsed;
      if (useNativeURL) {
        parsed = new URL2(input);
      } else {
        parsed = validateUrl(url.parse(input));
        if (!isString(parsed.protocol)) {
          throw new InvalidUrlError({ input });
        }
      }
      return parsed;
    }
    function resolveUrl(relative, base2) {
      return useNativeURL ? new URL2(relative, base2) : parseUrl(url.resolve(base2, relative));
    }
    function validateUrl(input) {
      if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
        throw new InvalidUrlError({ input: input.href || input });
      }
      if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
        throw new InvalidUrlError({ input: input.href || input });
      }
      return input;
    }
    function spreadUrlObject(urlObject, target) {
      var spread2 = target || {};
      for (var key2 of preservedUrlFields) {
        spread2[key2] = urlObject[key2];
      }
      if (spread2.hostname.startsWith("[")) {
        spread2.hostname = spread2.hostname.slice(1, -1);
      }
      if (spread2.port !== "") {
        spread2.port = Number(spread2.port);
      }
      spread2.path = spread2.search ? spread2.pathname + spread2.search : spread2.pathname;
      return spread2;
    }
    function removeMatchingHeaders(regex, headers) {
      var lastValue;
      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header];
          delete headers[header];
        }
      }
      return lastValue === null || typeof lastValue === "undefined" ? void 0 : String(lastValue).trim();
    }
    function createErrorType(code, message, baseClass) {
      function CustomError(properties) {
        Error.captureStackTrace(this, this.constructor);
        Object.assign(this, properties || {});
        this.code = code;
        this.message = this.cause ? message + ": " + this.cause.message : message;
      }
      CustomError.prototype = new (baseClass || Error)();
      Object.defineProperties(CustomError.prototype, {
        constructor: {
          value: CustomError,
          enumerable: false
        },
        name: {
          value: "Error [" + code + "]",
          enumerable: false
        }
      });
      return CustomError;
    }
    function destroyRequest(request, error3) {
      for (var event of events) {
        request.removeListener(event, eventHandlers[event]);
      }
      request.on("error", noop2);
      request.destroy(error3);
    }
    function isSubdomain(subdomain, domain) {
      assert(isString(subdomain) && isString(domain));
      var dot = subdomain.length - domain.length - 1;
      return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
    }
    function isString(value) {
      return typeof value === "string" || value instanceof String;
    }
    function isFunction(value) {
      return typeof value === "function";
    }
    function isBuffer(value) {
      return typeof value === "object" && "length" in value;
    }
    function isURL(value) {
      return URL2 && value instanceof URL2;
    }
    module2.exports = wrap({ http: http2, https });
    module2.exports.wrap = wrap;
  }
});

// node_modules/axios/dist/node/axios.cjs
var require_axios = __commonJS({
  "node_modules/axios/dist/node/axios.cjs"(exports, module2) {
    "use strict";
    var FormData$1 = require_form_data();
    var url = require("url");
    var proxyFromEnv = require_proxy_from_env();
    var http2 = require("http");
    var https = require("https");
    var util = require("util");
    var followRedirects = require_follow_redirects();
    var zlib = require("zlib");
    var stream = require("stream");
    var events = require("events");
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var FormData__default = /* @__PURE__ */ _interopDefaultLegacy(FormData$1);
    var url__default = /* @__PURE__ */ _interopDefaultLegacy(url);
    var http__default = /* @__PURE__ */ _interopDefaultLegacy(http2);
    var https__default = /* @__PURE__ */ _interopDefaultLegacy(https);
    var util__default = /* @__PURE__ */ _interopDefaultLegacy(util);
    var followRedirects__default = /* @__PURE__ */ _interopDefaultLegacy(followRedirects);
    var zlib__default = /* @__PURE__ */ _interopDefaultLegacy(zlib);
    var stream__default = /* @__PURE__ */ _interopDefaultLegacy(stream);
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var kindOf = ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    var typeOfTest = (type) => (thing) => typeof thing === type;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject2 = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject2(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key2;
        for (i = 0; i < len; i++) {
          key2 = keys[i];
          fn.call(null, obj[key2], key2, obj);
        }
      }
    }
    function findKey(obj, key2) {
      key2 = key2.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key2 === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined")
        return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key2) => {
        const targetKey = caseless && findKey(result, key2) || key2;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }
    var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key2) => {
        if (thisArg && isFunction(val)) {
          a[key2] = bind(val, thisArg);
        } else {
          a[key2] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    var stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing)
        return null;
      if (isArray(thing))
        return thing;
      let i = thing.length;
      if (!isNumber(i))
        return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value))
          return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop2 = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      value = +value;
      return Number.isFinite(value) ? value : defaultValue;
    };
    var ALPHA = "abcdefghijklmnopqrstuvwxyz";
    var DIGIT = "0123456789";
    var ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject2(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key2) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key2] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject2(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var utils$1 = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject: isObject2,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop: noop2,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error3, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error3, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error3.message, code, config, request, response);
      axiosError.cause = error3;
      axiosError.name = error3.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key2) {
      return utils$1.endsWith(key2, "[]") ? key2.slice(0, -2) : key2;
    }
    function renderKey(path2, key2, dots) {
      if (!path2)
        return key2;
      return path2.concat(key2).map(function each2(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options2) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new (FormData__default["default"] || FormData)();
      options2 = utils$1.toFlatObject(options2, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options2.metaTokens;
      const visitor = options2.visitor || defaultVisitor;
      const dots = options2.dots;
      const indexes = options2.indexes;
      const _Blob = options2.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key2, path2) {
        let arr = value;
        if (value && !path2 && typeof value === "object") {
          if (utils$1.endsWith(key2, "{}")) {
            key2 = metaTokens ? key2 : key2.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key2, "[]")) && (arr = utils$1.toArray(value))) {
            key2 = removeBrackets(key2);
            arr.forEach(function each2(el, index13) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key2], index13, dots) : indexes === null ? key2 : key2 + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path2, key2, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path2) {
        if (utils$1.isUndefined(value))
          return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path2.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each2(el, key2) {
          const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key2) ? key2.trim() : key2,
            path2,
            exposedHelpers
          );
          if (result === true) {
            build(el, path2 ? path2.concat(key2) : [key2]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options2) {
      this._pairs = [];
      params && toFormData(params, this, options2);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder4) {
      const _encode = encoder4 ? function(value) {
        return encoder4.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each2(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode2(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url2, params, options2) {
      if (!params) {
        return url2;
      }
      const _encode = options2 && options2.encode || encode2;
      const serializeFn = options2 && options2.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options2);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options2).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url2.indexOf("#");
        if (hashmarkIndex !== -1) {
          url2 = url2.slice(0, hashmarkIndex);
        }
        url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url2;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options2) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options2 ? options2.synchronous : false,
          runWhen: options2 ? options2.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams2 = url__default["default"].URLSearchParams;
    var platform$1 = {
      isNode: true,
      classes: {
        URLSearchParams: URLSearchParams2,
        FormData: FormData__default["default"],
        Blob: typeof Blob !== "undefined" && Blob || null
      },
      protocols: ["http", "https", "file", "data"]
    };
    var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    var hasStandardBrowserEnv = ((product) => {
      return hasBrowserEnv && ["ReactNative", "NativeScript", "NS"].indexOf(product) < 0;
    })(typeof navigator !== "undefined" && navigator.product);
    var hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var utils = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      hasStandardBrowserEnv
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options2) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key2, path2, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key2, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options2));
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key2;
      for (i = 0; i < len; i++) {
        key2 = keys[i];
        obj[key2] = arr[key2];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path2, value, target, index13) {
        let name = path2[index13++];
        if (name === "__proto__")
          return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index13 >= path2.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path2, value, target[name], index13);
        if (result && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder4) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder4 || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key2;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key2 = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key2 || parsed[key2] && ignoreDuplicateOf[key2]) {
          return;
        }
        if (key2 === "set-cookie") {
          if (parsed[key2]) {
            parsed[key2].push(val);
          } else {
            parsed[key2] = [val];
          }
        } else {
          parsed[key2] = parsed[key2] ? parsed[key2] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
      if (utils$1.isFunction(filter)) {
        return filter.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value))
        return;
      if (utils$1.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }
      if (utils$1.isRegExp(filter)) {
        return filter.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key2 = utils$1.findKey(self2, lHeader);
          if (!key2 || self2[key2] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key2] !== false) {
            self2[key2 || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key2 = utils$1.findKey(this, header);
          if (key2) {
            const value = this[key2];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key2);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key2 = utils$1.findKey(this, header);
          return !!(key2 && this[key2] !== void 0 && (!matcher || matchHeaderValue(this, this[key2], key2, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key2 = utils$1.findKey(self2, _header);
            if (key2 && (!matcher || matchHeaderValue(self2, self2[key2], key2, matcher))) {
              delete self2[key2];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key2 = keys[i];
          if (!matcher || matchHeaderValue(this, this[key2], key2, matcher, true)) {
            delete this[key2];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key2 = utils$1.findKey(headers, header);
          if (key2) {
            self2[key2] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key2) => {
      let mapped = key2[0].toUpperCase() + key2.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve2, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve2(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function isAbsoluteURL(url2) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var VERSION2 = "1.6.8";
    function parseProtocol(url2) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
      return match && match[1] || "";
    }
    var DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;
    function fromDataURI(uri, asBlob, options2) {
      const _Blob = options2 && options2.Blob || platform.classes.Blob;
      const protocol = parseProtocol(uri);
      if (asBlob === void 0 && _Blob) {
        asBlob = true;
      }
      if (protocol === "data") {
        uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
        const match = DATA_URL_PATTERN.exec(uri);
        if (!match) {
          throw new AxiosError("Invalid URL", AxiosError.ERR_INVALID_URL);
        }
        const mime = match[1];
        const isBase64 = match[2];
        const body = match[3];
        const buffer2 = Buffer.from(decodeURIComponent(body), isBase64 ? "base64" : "utf8");
        if (asBlob) {
          if (!_Blob) {
            throw new AxiosError("Blob is not supported", AxiosError.ERR_NOT_SUPPORT);
          }
          return new _Blob([buffer2], { type: mime });
        }
        return buffer2;
      }
      throw new AxiosError("Unsupported protocol " + protocol, AxiosError.ERR_NOT_SUPPORT);
    }
    function throttle(fn, freq) {
      let timestamp = 0;
      const threshold = 1e3 / freq;
      let timer = null;
      return function throttled(force, args) {
        const now = Date.now();
        if (force || now - timestamp > threshold) {
          if (timer) {
            clearTimeout(timer);
            timer = null;
          }
          timestamp = now;
          return fn.apply(null, args);
        }
        if (!timer) {
          timer = setTimeout(() => {
            timer = null;
            timestamp = Date.now();
            return fn.apply(null, args);
          }, threshold - (now - timestamp));
        }
      };
    }
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    var kInternals = Symbol("internals");
    var AxiosTransformStream = class extends stream__default["default"].Transform {
      constructor(options2) {
        options2 = utils$1.toFlatObject(options2, {
          maxRate: 0,
          chunkSize: 64 * 1024,
          minChunkSize: 100,
          timeWindow: 500,
          ticksRate: 2,
          samplesCount: 15
        }, null, (prop, source) => {
          return !utils$1.isUndefined(source[prop]);
        });
        super({
          readableHighWaterMark: options2.chunkSize
        });
        const self2 = this;
        const internals = this[kInternals] = {
          length: options2.length,
          timeWindow: options2.timeWindow,
          ticksRate: options2.ticksRate,
          chunkSize: options2.chunkSize,
          maxRate: options2.maxRate,
          minChunkSize: options2.minChunkSize,
          bytesSeen: 0,
          isCaptured: false,
          notifiedBytesLoaded: 0,
          ts: Date.now(),
          bytes: 0,
          onReadCallback: null
        };
        const _speedometer = speedometer(internals.ticksRate * options2.samplesCount, internals.timeWindow);
        this.on("newListener", (event) => {
          if (event === "progress") {
            if (!internals.isCaptured) {
              internals.isCaptured = true;
            }
          }
        });
        let bytesNotified = 0;
        internals.updateProgress = throttle(function throttledHandler() {
          const totalBytes = internals.length;
          const bytesTransferred = internals.bytesSeen;
          const progressBytes = bytesTransferred - bytesNotified;
          if (!progressBytes || self2.destroyed)
            return;
          const rate = _speedometer(progressBytes);
          bytesNotified = bytesTransferred;
          process.nextTick(() => {
            self2.emit("progress", {
              "loaded": bytesTransferred,
              "total": totalBytes,
              "progress": totalBytes ? bytesTransferred / totalBytes : void 0,
              "bytes": progressBytes,
              "rate": rate ? rate : void 0,
              "estimated": rate && totalBytes && bytesTransferred <= totalBytes ? (totalBytes - bytesTransferred) / rate : void 0
            });
          });
        }, internals.ticksRate);
        const onFinish = () => {
          internals.updateProgress(true);
        };
        this.once("end", onFinish);
        this.once("error", onFinish);
      }
      _read(size) {
        const internals = this[kInternals];
        if (internals.onReadCallback) {
          internals.onReadCallback();
        }
        return super._read(size);
      }
      _transform(chunk, encoding, callback) {
        const self2 = this;
        const internals = this[kInternals];
        const maxRate = internals.maxRate;
        const readableHighWaterMark = this.readableHighWaterMark;
        const timeWindow = internals.timeWindow;
        const divider = 1e3 / timeWindow;
        const bytesThreshold = maxRate / divider;
        const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
        function pushChunk(_chunk, _callback) {
          const bytes = Buffer.byteLength(_chunk);
          internals.bytesSeen += bytes;
          internals.bytes += bytes;
          if (internals.isCaptured) {
            internals.updateProgress();
          }
          if (self2.push(_chunk)) {
            process.nextTick(_callback);
          } else {
            internals.onReadCallback = () => {
              internals.onReadCallback = null;
              process.nextTick(_callback);
            };
          }
        }
        const transformChunk = (_chunk, _callback) => {
          const chunkSize = Buffer.byteLength(_chunk);
          let chunkRemainder = null;
          let maxChunkSize = readableHighWaterMark;
          let bytesLeft;
          let passed = 0;
          if (maxRate) {
            const now = Date.now();
            if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
              internals.ts = now;
              bytesLeft = bytesThreshold - internals.bytes;
              internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
              passed = 0;
            }
            bytesLeft = bytesThreshold - internals.bytes;
          }
          if (maxRate) {
            if (bytesLeft <= 0) {
              return setTimeout(() => {
                _callback(null, _chunk);
              }, timeWindow - passed);
            }
            if (bytesLeft < maxChunkSize) {
              maxChunkSize = bytesLeft;
            }
          }
          if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
            chunkRemainder = _chunk.subarray(maxChunkSize);
            _chunk = _chunk.subarray(0, maxChunkSize);
          }
          pushChunk(_chunk, chunkRemainder ? () => {
            process.nextTick(_callback, null, chunkRemainder);
          } : _callback);
        };
        transformChunk(chunk, function transformNextChunk(err, _chunk) {
          if (err) {
            return callback(err);
          }
          if (_chunk) {
            transformChunk(_chunk, transformNextChunk);
          } else {
            callback(null);
          }
        });
      }
      setLength(length) {
        this[kInternals].length = +length;
        return this;
      }
    };
    var AxiosTransformStream$1 = AxiosTransformStream;
    var { asyncIterator } = Symbol;
    var readBlob = async function* (blob) {
      if (blob.stream) {
        yield* blob.stream();
      } else if (blob.arrayBuffer) {
        yield await blob.arrayBuffer();
      } else if (blob[asyncIterator]) {
        yield* blob[asyncIterator]();
      } else {
        yield blob;
      }
    };
    var readBlob$1 = readBlob;
    var BOUNDARY_ALPHABET = utils$1.ALPHABET.ALPHA_DIGIT + "-_";
    var textEncoder = new util.TextEncoder();
    var CRLF = "\r\n";
    var CRLF_BYTES = textEncoder.encode(CRLF);
    var CRLF_BYTES_COUNT = 2;
    var FormDataPart = class {
      constructor(name, value) {
        const { escapeName } = this.constructor;
        const isStringValue = utils$1.isString(value);
        let headers = `Content-Disposition: form-data; name="${escapeName(name)}"${!isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ""}${CRLF}`;
        if (isStringValue) {
          value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
        } else {
          headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
        }
        this.headers = textEncoder.encode(headers + CRLF);
        this.contentLength = isStringValue ? value.byteLength : value.size;
        this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
        this.name = name;
        this.value = value;
      }
      async *encode() {
        yield this.headers;
        const { value } = this;
        if (utils$1.isTypedArray(value)) {
          yield value;
        } else {
          yield* readBlob$1(value);
        }
        yield CRLF_BYTES;
      }
      static escapeName(name) {
        return String(name).replace(/[\r\n"]/g, (match) => ({
          "\r": "%0D",
          "\n": "%0A",
          '"': "%22"
        })[match]);
      }
    };
    var formDataToStream = (form, headersHandler, options2) => {
      const {
        tag = "form-data-boundary",
        size = 25,
        boundary = tag + "-" + utils$1.generateString(size, BOUNDARY_ALPHABET)
      } = options2 || {};
      if (!utils$1.isFormData(form)) {
        throw TypeError("FormData instance required");
      }
      if (boundary.length < 1 || boundary.length > 70) {
        throw Error("boundary must be 10-70 characters long");
      }
      const boundaryBytes = textEncoder.encode("--" + boundary + CRLF);
      const footerBytes = textEncoder.encode("--" + boundary + "--" + CRLF + CRLF);
      let contentLength = footerBytes.byteLength;
      const parts = Array.from(form.entries()).map(([name, value]) => {
        const part = new FormDataPart(name, value);
        contentLength += part.size;
        return part;
      });
      contentLength += boundaryBytes.byteLength * parts.length;
      contentLength = utils$1.toFiniteNumber(contentLength);
      const computedHeaders = {
        "Content-Type": `multipart/form-data; boundary=${boundary}`
      };
      if (Number.isFinite(contentLength)) {
        computedHeaders["Content-Length"] = contentLength;
      }
      headersHandler && headersHandler(computedHeaders);
      return stream.Readable.from(async function* () {
        for (const part of parts) {
          yield boundaryBytes;
          yield* part.encode();
        }
        yield footerBytes;
      }());
    };
    var formDataToStream$1 = formDataToStream;
    var ZlibHeaderTransformStream = class extends stream__default["default"].Transform {
      __transform(chunk, encoding, callback) {
        this.push(chunk);
        callback();
      }
      _transform(chunk, encoding, callback) {
        if (chunk.length !== 0) {
          this._transform = this.__transform;
          if (chunk[0] !== 120) {
            const header = Buffer.alloc(2);
            header[0] = 120;
            header[1] = 156;
            this.push(header, encoding);
          }
        }
        this.__transform(chunk, encoding, callback);
      }
    };
    var ZlibHeaderTransformStream$1 = ZlibHeaderTransformStream;
    var callbackify = (fn, reducer) => {
      return utils$1.isAsyncFn(fn) ? function(...args) {
        const cb = args.pop();
        fn.apply(this, args).then((value) => {
          try {
            reducer ? cb(null, ...reducer(value)) : cb(null, value);
          } catch (err) {
            cb(err);
          }
        }, cb);
      } : fn;
    };
    var callbackify$1 = callbackify;
    var zlibOptions = {
      flush: zlib__default["default"].constants.Z_SYNC_FLUSH,
      finishFlush: zlib__default["default"].constants.Z_SYNC_FLUSH
    };
    var brotliOptions = {
      flush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH,
      finishFlush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH
    };
    var isBrotliSupported = utils$1.isFunction(zlib__default["default"].createBrotliDecompress);
    var { http: httpFollow, https: httpsFollow } = followRedirects__default["default"];
    var isHttps = /https:?/;
    var supportedProtocols = platform.protocols.map((protocol) => {
      return protocol + ":";
    });
    function dispatchBeforeRedirect(options2, responseDetails) {
      if (options2.beforeRedirects.proxy) {
        options2.beforeRedirects.proxy(options2);
      }
      if (options2.beforeRedirects.config) {
        options2.beforeRedirects.config(options2, responseDetails);
      }
    }
    function setProxy(options2, configProxy, location) {
      let proxy = configProxy;
      if (!proxy && proxy !== false) {
        const proxyUrl = proxyFromEnv.getProxyForUrl(location);
        if (proxyUrl) {
          proxy = new URL(proxyUrl);
        }
      }
      if (proxy) {
        if (proxy.username) {
          proxy.auth = (proxy.username || "") + ":" + (proxy.password || "");
        }
        if (proxy.auth) {
          if (proxy.auth.username || proxy.auth.password) {
            proxy.auth = (proxy.auth.username || "") + ":" + (proxy.auth.password || "");
          }
          const base642 = Buffer.from(proxy.auth, "utf8").toString("base64");
          options2.headers["Proxy-Authorization"] = "Basic " + base642;
        }
        options2.headers.host = options2.hostname + (options2.port ? ":" + options2.port : "");
        const proxyHost = proxy.hostname || proxy.host;
        options2.hostname = proxyHost;
        options2.host = proxyHost;
        options2.port = proxy.port;
        options2.path = location;
        if (proxy.protocol) {
          options2.protocol = proxy.protocol.includes(":") ? proxy.protocol : `${proxy.protocol}:`;
        }
      }
      options2.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
        setProxy(redirectOptions, configProxy, redirectOptions.href);
      };
    }
    var isHttpAdapterSupported = typeof process !== "undefined" && utils$1.kindOf(process) === "process";
    var wrapAsync = (asyncExecutor) => {
      return new Promise((resolve2, reject) => {
        let onDone;
        let isDone;
        const done = (value, isRejected) => {
          if (isDone)
            return;
          isDone = true;
          onDone && onDone(value, isRejected);
        };
        const _resolve = (value) => {
          done(value);
          resolve2(value);
        };
        const _reject = (reason) => {
          done(reason, true);
          reject(reason);
        };
        asyncExecutor(_resolve, _reject, (onDoneHandler) => onDone = onDoneHandler).catch(_reject);
      });
    };
    var resolveFamily = ({ address, family }) => {
      if (!utils$1.isString(address)) {
        throw TypeError("address must be a string");
      }
      return {
        address,
        family: family || (address.indexOf(".") < 0 ? 6 : 4)
      };
    };
    var buildAddressEntry = (address, family) => resolveFamily(utils$1.isObject(address) ? address : { address, family });
    var httpAdapter = isHttpAdapterSupported && function httpAdapter2(config) {
      return wrapAsync(async function dispatchHttpRequest(resolve2, reject, onDone) {
        let { data, lookup, family } = config;
        const { responseType, responseEncoding } = config;
        const method = config.method.toUpperCase();
        let isDone;
        let rejected = false;
        let req;
        if (lookup) {
          const _lookup = callbackify$1(lookup, (value) => utils$1.isArray(value) ? value : [value]);
          lookup = (hostname, opt, cb) => {
            _lookup(hostname, opt, (err, arg0, arg1) => {
              if (err) {
                return cb(err);
              }
              const addresses = utils$1.isArray(arg0) ? arg0.map((addr) => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];
              opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);
            });
          };
        }
        const emitter = new events.EventEmitter();
        const onFinished = () => {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(abort);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", abort);
          }
          emitter.removeAllListeners();
        };
        onDone((value, isRejected) => {
          isDone = true;
          if (isRejected) {
            rejected = true;
            onFinished();
          }
        });
        function abort(reason) {
          emitter.emit("abort", !reason || reason.type ? new CanceledError(null, config, req) : reason);
        }
        emitter.once("abort", reject);
        if (config.cancelToken || config.signal) {
          config.cancelToken && config.cancelToken.subscribe(abort);
          if (config.signal) {
            config.signal.aborted ? abort() : config.signal.addEventListener("abort", abort);
          }
        }
        const fullPath = buildFullPath(config.baseURL, config.url);
        const parsed = new URL(fullPath, "http://localhost");
        const protocol = parsed.protocol || supportedProtocols[0];
        if (protocol === "data:") {
          let convertedData;
          if (method !== "GET") {
            return settle(resolve2, reject, {
              status: 405,
              statusText: "method not allowed",
              headers: {},
              config
            });
          }
          try {
            convertedData = fromDataURI(config.url, responseType === "blob", {
              Blob: config.env && config.env.Blob
            });
          } catch (err) {
            throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);
          }
          if (responseType === "text") {
            convertedData = convertedData.toString(responseEncoding);
            if (!responseEncoding || responseEncoding === "utf8") {
              convertedData = utils$1.stripBOM(convertedData);
            }
          } else if (responseType === "stream") {
            convertedData = stream__default["default"].Readable.from(convertedData);
          }
          return settle(resolve2, reject, {
            data: convertedData,
            status: 200,
            statusText: "OK",
            headers: new AxiosHeaders$1(),
            config
          });
        }
        if (supportedProtocols.indexOf(protocol) === -1) {
          return reject(new AxiosError(
            "Unsupported protocol " + protocol,
            AxiosError.ERR_BAD_REQUEST,
            config
          ));
        }
        const headers = AxiosHeaders$1.from(config.headers).normalize();
        headers.set("User-Agent", "axios/" + VERSION2, false);
        const onDownloadProgress = config.onDownloadProgress;
        const onUploadProgress = config.onUploadProgress;
        const maxRate = config.maxRate;
        let maxUploadRate = void 0;
        let maxDownloadRate = void 0;
        if (utils$1.isSpecCompliantForm(data)) {
          const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);
          data = formDataToStream$1(data, (formHeaders) => {
            headers.set(formHeaders);
          }, {
            tag: `axios-${VERSION2}-boundary`,
            boundary: userBoundary && userBoundary[1] || void 0
          });
        } else if (utils$1.isFormData(data) && utils$1.isFunction(data.getHeaders)) {
          headers.set(data.getHeaders());
          if (!headers.hasContentLength()) {
            try {
              const knownLength = await util__default["default"].promisify(data.getLength).call(data);
              Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
            } catch (e) {
            }
          }
        } else if (utils$1.isBlob(data)) {
          data.size && headers.setContentType(data.type || "application/octet-stream");
          headers.setContentLength(data.size || 0);
          data = stream__default["default"].Readable.from(readBlob$1(data));
        } else if (data && !utils$1.isStream(data)) {
          if (Buffer.isBuffer(data))
            ;
          else if (utils$1.isArrayBuffer(data)) {
            data = Buffer.from(new Uint8Array(data));
          } else if (utils$1.isString(data)) {
            data = Buffer.from(data, "utf-8");
          } else {
            return reject(new AxiosError(
              "Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",
              AxiosError.ERR_BAD_REQUEST,
              config
            ));
          }
          headers.setContentLength(data.length, false);
          if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
            return reject(new AxiosError(
              "Request body larger than maxBodyLength limit",
              AxiosError.ERR_BAD_REQUEST,
              config
            ));
          }
        }
        const contentLength = utils$1.toFiniteNumber(headers.getContentLength());
        if (utils$1.isArray(maxRate)) {
          maxUploadRate = maxRate[0];
          maxDownloadRate = maxRate[1];
        } else {
          maxUploadRate = maxDownloadRate = maxRate;
        }
        if (data && (onUploadProgress || maxUploadRate)) {
          if (!utils$1.isStream(data)) {
            data = stream__default["default"].Readable.from(data, { objectMode: false });
          }
          data = stream__default["default"].pipeline([data, new AxiosTransformStream$1({
            length: contentLength,
            maxRate: utils$1.toFiniteNumber(maxUploadRate)
          })], utils$1.noop);
          onUploadProgress && data.on("progress", (progress) => {
            onUploadProgress(Object.assign(progress, {
              upload: true
            }));
          });
        }
        let auth = void 0;
        if (config.auth) {
          const username = config.auth.username || "";
          const password = config.auth.password || "";
          auth = username + ":" + password;
        }
        if (!auth && parsed.username) {
          const urlUsername = parsed.username;
          const urlPassword = parsed.password;
          auth = urlUsername + ":" + urlPassword;
        }
        auth && headers.delete("authorization");
        let path2;
        try {
          path2 = buildURL(
            parsed.pathname + parsed.search,
            config.params,
            config.paramsSerializer
          ).replace(/^\?/, "");
        } catch (err) {
          const customErr = new Error(err.message);
          customErr.config = config;
          customErr.url = config.url;
          customErr.exists = true;
          return reject(customErr);
        }
        headers.set(
          "Accept-Encoding",
          "gzip, compress, deflate" + (isBrotliSupported ? ", br" : ""),
          false
        );
        const options2 = {
          path: path2,
          method,
          headers: headers.toJSON(),
          agents: { http: config.httpAgent, https: config.httpsAgent },
          auth,
          protocol,
          family,
          beforeRedirect: dispatchBeforeRedirect,
          beforeRedirects: {}
        };
        !utils$1.isUndefined(lookup) && (options2.lookup = lookup);
        if (config.socketPath) {
          options2.socketPath = config.socketPath;
        } else {
          options2.hostname = parsed.hostname;
          options2.port = parsed.port;
          setProxy(options2, config.proxy, protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options2.path);
        }
        let transport;
        const isHttpsRequest = isHttps.test(options2.protocol);
        options2.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
        if (config.transport) {
          transport = config.transport;
        } else if (config.maxRedirects === 0) {
          transport = isHttpsRequest ? https__default["default"] : http__default["default"];
        } else {
          if (config.maxRedirects) {
            options2.maxRedirects = config.maxRedirects;
          }
          if (config.beforeRedirect) {
            options2.beforeRedirects.config = config.beforeRedirect;
          }
          transport = isHttpsRequest ? httpsFollow : httpFollow;
        }
        if (config.maxBodyLength > -1) {
          options2.maxBodyLength = config.maxBodyLength;
        } else {
          options2.maxBodyLength = Infinity;
        }
        if (config.insecureHTTPParser) {
          options2.insecureHTTPParser = config.insecureHTTPParser;
        }
        req = transport.request(options2, function handleResponse(res) {
          if (req.destroyed)
            return;
          const streams = [res];
          const responseLength = +res.headers["content-length"];
          if (onDownloadProgress) {
            const transformStream = new AxiosTransformStream$1({
              length: utils$1.toFiniteNumber(responseLength),
              maxRate: utils$1.toFiniteNumber(maxDownloadRate)
            });
            onDownloadProgress && transformStream.on("progress", (progress) => {
              onDownloadProgress(Object.assign(progress, {
                download: true
              }));
            });
            streams.push(transformStream);
          }
          let responseStream = res;
          const lastRequest = res.req || req;
          if (config.decompress !== false && res.headers["content-encoding"]) {
            if (method === "HEAD" || res.statusCode === 204) {
              delete res.headers["content-encoding"];
            }
            switch ((res.headers["content-encoding"] || "").toLowerCase()) {
              case "gzip":
              case "x-gzip":
              case "compress":
              case "x-compress":
                streams.push(zlib__default["default"].createUnzip(zlibOptions));
                delete res.headers["content-encoding"];
                break;
              case "deflate":
                streams.push(new ZlibHeaderTransformStream$1());
                streams.push(zlib__default["default"].createUnzip(zlibOptions));
                delete res.headers["content-encoding"];
                break;
              case "br":
                if (isBrotliSupported) {
                  streams.push(zlib__default["default"].createBrotliDecompress(brotliOptions));
                  delete res.headers["content-encoding"];
                }
            }
          }
          responseStream = streams.length > 1 ? stream__default["default"].pipeline(streams, utils$1.noop) : streams[0];
          const offListeners = stream__default["default"].finished(responseStream, () => {
            offListeners();
            onFinished();
          });
          const response = {
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: new AxiosHeaders$1(res.headers),
            config,
            request: lastRequest
          };
          if (responseType === "stream") {
            response.data = responseStream;
            settle(resolve2, reject, response);
          } else {
            const responseBuffer = [];
            let totalResponseBytes = 0;
            responseStream.on("data", function handleStreamData(chunk) {
              responseBuffer.push(chunk);
              totalResponseBytes += chunk.length;
              if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
                rejected = true;
                responseStream.destroy();
                reject(new AxiosError(
                  "maxContentLength size of " + config.maxContentLength + " exceeded",
                  AxiosError.ERR_BAD_RESPONSE,
                  config,
                  lastRequest
                ));
              }
            });
            responseStream.on("aborted", function handlerStreamAborted() {
              if (rejected) {
                return;
              }
              const err = new AxiosError(
                "maxContentLength size of " + config.maxContentLength + " exceeded",
                AxiosError.ERR_BAD_RESPONSE,
                config,
                lastRequest
              );
              responseStream.destroy(err);
              reject(err);
            });
            responseStream.on("error", function handleStreamError(err) {
              if (req.destroyed)
                return;
              reject(AxiosError.from(err, null, config, lastRequest));
            });
            responseStream.on("end", function handleStreamEnd() {
              try {
                let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
                if (responseType !== "arraybuffer") {
                  responseData = responseData.toString(responseEncoding);
                  if (!responseEncoding || responseEncoding === "utf8") {
                    responseData = utils$1.stripBOM(responseData);
                  }
                }
                response.data = responseData;
              } catch (err) {
                return reject(AxiosError.from(err, null, config, response.request, response));
              }
              settle(resolve2, reject, response);
            });
          }
          emitter.once("abort", (err) => {
            if (!responseStream.destroyed) {
              responseStream.emit("error", err);
              responseStream.destroy();
            }
          });
        });
        emitter.once("abort", (err) => {
          reject(err);
          req.destroy(err);
        });
        req.on("error", function handleRequestError(err) {
          reject(AxiosError.from(err, null, config, req));
        });
        req.on("socket", function handleRequestSocket(socket) {
          socket.setKeepAlive(true, 1e3 * 60);
        });
        if (config.timeout) {
          const timeout = parseInt(config.timeout, 10);
          if (Number.isNaN(timeout)) {
            reject(new AxiosError(
              "error trying to parse `config.timeout` to int",
              AxiosError.ERR_BAD_OPTION_VALUE,
              config,
              req
            ));
            return;
          }
          req.setTimeout(timeout, function handleRequestTimeout() {
            if (isDone)
              return;
            let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
            const transitional = config.transitional || transitionalDefaults;
            if (config.timeoutErrorMessage) {
              timeoutErrorMessage = config.timeoutErrorMessage;
            }
            reject(new AxiosError(
              timeoutErrorMessage,
              transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
              config,
              req
            ));
            abort();
          });
        }
        if (utils$1.isStream(data)) {
          let ended = false;
          let errored = false;
          data.on("end", () => {
            ended = true;
          });
          data.once("error", (err) => {
            errored = true;
            req.destroy(err);
          });
          data.on("close", () => {
            if (!ended && !errored) {
              abort(new CanceledError("Request stream has been aborted", config, req));
            }
          });
          data.pipe(req);
        } else {
          req.end(data);
        }
      });
    };
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path2, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path2) && cookie.push("path=" + path2);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        const msie = /(msie|trident)/i.test(navigator.userAgent);
        const urlParsingNode = document.createElement("a");
        let originURL;
        function resolveURL(url2) {
          let href = url2;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin2(requestURL) {
          const parsed = utils$1.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin2() {
          return true;
        };
      }()
    );
    function progressEventReducer(listener, isDownloadStream) {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return (e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e
        };
        data[isDownloadStream ? "download" : "upload"] = true;
        listener(data);
      };
    }
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve2, reject) {
        let requestData = config.data;
        const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
        let { responseType, withXSRFToken } = config;
        let onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        let contentType;
        if (utils$1.isFormData(requestData)) {
          if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
            requestHeaders.setContentType(false);
          } else if ((contentType = requestHeaders.getContentType()) !== false) {
            const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
            requestHeaders.setContentType([type || "multipart/form-data", ...tokens].join("; "));
          }
        }
        let request = new XMLHttpRequest();
        if (config.auth) {
          const username = config.auth.username || "";
          const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
        }
        const fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve2(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (platform.hasStandardBrowserEnv) {
          withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));
          if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(fullPath)) {
            const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies.read(config.xsrfCookieName);
            if (xsrfValue) {
              requestHeaders.set(config.xsrfHeaderName, xsrfValue);
            }
          }
        }
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key2) {
            request.setRequestHeader(key2, val);
          });
        }
        if (!utils$1.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
        }
        if (config.cancelToken || config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(fullPath);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason = (reason) => `- ${reason}`;
    var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          let id;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s2 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s2,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b, caseless) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(a, b, caseless);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a, caseless);
        }
      }
      function valueFromConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators$1[type] = function validator3(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator3, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION2 + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator3 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator3 ? validator3(value, opt, opts) : true;
      };
    };
    function assertOptions(options2, schema, allowUnknown) {
      if (typeof options2 !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options2);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator3 = schema[opt];
        if (validator3) {
          const value = options2[opt];
          const result = value === void 0 || validator3(value, opt, options2);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator2 = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator2.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy;
            Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            if (!err.stack) {
              err.stack = stack;
            } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
              err.stack += "\n" + stack;
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator2.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator2.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error3) {
            onRejected.call(this, error3);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error3) {
          return Promise.reject(error3);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url2, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url: url2,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url2, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url: url2,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve2) {
          resolvePromise = resolve2;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve2) => {
            token.subscribe(resolve2);
            _resolve = resolve2;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index13 = this._listeners.indexOf(listener);
        if (index13 !== -1) {
          this._listeners.splice(index13, 1);
        }
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread2(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key2, value]) => {
      HttpStatusCode[value] = key2;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION2;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread2;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module2.exports = axios;
  }
});

// node_modules/postmark/dist/client/models/client/ClientOptions.js
var require_ClientOptions = __commonJS({
  "node_modules/postmark/dist/client/models/client/ClientOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClientOptions = void 0;
    var ClientOptions;
    (function(ClientOptions2) {
      var Configuration = (
        /** @class */
        function() {
          function Configuration2(useHttps, requestHost, timeout) {
            this.useHttps = useHttps;
            this.requestHost = requestHost;
            this.timeout = timeout;
          }
          return Configuration2;
        }()
      );
      ClientOptions2.Configuration = Configuration;
      var HttpMethod;
      (function(HttpMethod2) {
        HttpMethod2["GET"] = "GET";
        HttpMethod2["POST"] = "POST";
        HttpMethod2["DELETE"] = "DELETE";
        HttpMethod2["PUT"] = "PUT";
        HttpMethod2["OPTIONS"] = "OPTIONS";
        HttpMethod2["HEAD"] = "HEAD";
        HttpMethod2["PATCH"] = "PATCH";
      })(HttpMethod = ClientOptions2.HttpMethod || (ClientOptions2.HttpMethod = {}));
      var AuthHeaderNames;
      (function(AuthHeaderNames2) {
        AuthHeaderNames2["SERVER_TOKEN"] = "X-Postmark-Server-Token";
        AuthHeaderNames2["ACCOUNT_TOKEN"] = "X-Postmark-Account-Token";
      })(AuthHeaderNames = ClientOptions2.AuthHeaderNames || (ClientOptions2.AuthHeaderNames = {}));
    })(ClientOptions = exports.ClientOptions || (exports.ClientOptions = {}));
  }
});

// node_modules/postmark/dist/client/models/client/SupportingTypes.js
var require_SupportingTypes = __commonJS({
  "node_modules/postmark/dist/client/models/client/SupportingTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/client/HttpClient.js
var require_HttpClient = __commonJS({
  "node_modules/postmark/dist/client/models/client/HttpClient.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p))
              t[p] = s2[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpClient = void 0;
    var HttpClient = (
      /** @class */
      function() {
        function HttpClient2(configOptions) {
          this.clientOptions = __assign(__assign({}, HttpClient2.DefaultOptions), configOptions);
          this.initHttpClient(this.clientOptions);
        }
        HttpClient2.prototype.getBaseHttpRequestURL = function() {
          var scheme = this.clientOptions.useHttps ? "https" : "http";
          return "".concat(scheme, "://").concat(this.clientOptions.requestHost);
        };
        HttpClient2.DefaultOptions = {
          useHttps: true,
          requestHost: "api.postmarkapp.com",
          timeout: 180
        };
        return HttpClient2;
      }()
    );
    exports.HttpClient = HttpClient;
  }
});

// node_modules/postmark/dist/client/models/client/Callback.js
var require_Callback = __commonJS({
  "node_modules/postmark/dist/client/models/client/Callback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/client/DefaultResponse.js
var require_DefaultResponse = __commonJS({
  "node_modules/postmark/dist/client/models/client/DefaultResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/client/FilteringParameters.js
var require_FilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/client/FilteringParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilteringParameters = void 0;
    var FilteringParameters = (
      /** @class */
      function() {
        function FilteringParameters2(count, offset) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          this.count = count;
          this.offset = offset;
        }
        return FilteringParameters2;
      }()
    );
    exports.FilteringParameters = FilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/bounces/Bounce.js
var require_Bounce = __commonJS({
  "node_modules/postmark/dist/client/models/bounces/Bounce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BounceTypeCode = exports.BounceType = void 0;
    var BounceType;
    (function(BounceType2) {
      BounceType2["HardBounce"] = "HardBounce";
      BounceType2["Transient"] = "Transient";
      BounceType2["Unsubscribe"] = "Unsubscribe";
      BounceType2["Subscribe"] = "Subscribe";
      BounceType2["AutoResponder"] = "AutoResponder";
      BounceType2["AddressChange"] = "AddressChange";
      BounceType2["DnsError"] = "DnsError";
      BounceType2["SpamNotification"] = "SpamNotification";
      BounceType2["OpenRelayTest"] = "OpenRelayTest";
      BounceType2["Unknown"] = "Unknown";
      BounceType2["SoftBounce"] = "SoftBounce";
      BounceType2["VirusNotification"] = "VirusNotification";
      BounceType2["ChallengeVerification"] = "ChallengeVerification";
      BounceType2["BadEmailAddress"] = "BadEmailAddress";
      BounceType2["SpamComplaint"] = "SpamComplaint";
      BounceType2["ManuallyDeactivated"] = "ManuallyDeactivated";
      BounceType2["Unconfirmed"] = "Unconfirmed";
      BounceType2["Blocked"] = "Blocked";
      BounceType2["SMTPApiError"] = "SMTPApiError";
      BounceType2["InboundError"] = "InboundError";
      BounceType2["DMARCPolicy"] = "DMARCPolicy";
      BounceType2["TemplateRenderingFailed"] = "TemplateRenderingFailed";
    })(BounceType = exports.BounceType || (exports.BounceType = {}));
    var BounceTypeCode;
    (function(BounceTypeCode2) {
      BounceTypeCode2[BounceTypeCode2["HardBounce"] = 1] = "HardBounce";
      BounceTypeCode2[BounceTypeCode2["Transient"] = 2] = "Transient";
      BounceTypeCode2[BounceTypeCode2["Unsubscribe"] = 16] = "Unsubscribe";
      BounceTypeCode2[BounceTypeCode2["Subscribe"] = 32] = "Subscribe";
      BounceTypeCode2[BounceTypeCode2["AutoResponder"] = 64] = "AutoResponder";
      BounceTypeCode2[BounceTypeCode2["AddressChange"] = 128] = "AddressChange";
      BounceTypeCode2[BounceTypeCode2["DnsError"] = 256] = "DnsError";
      BounceTypeCode2[BounceTypeCode2["SpamNotification"] = 512] = "SpamNotification";
      BounceTypeCode2[BounceTypeCode2["OpenRelayTest"] = 1024] = "OpenRelayTest";
      BounceTypeCode2[BounceTypeCode2["Unknown"] = 2048] = "Unknown";
      BounceTypeCode2[BounceTypeCode2["SoftBounce"] = 4096] = "SoftBounce";
      BounceTypeCode2[BounceTypeCode2["VirusNotification"] = 8192] = "VirusNotification";
      BounceTypeCode2[BounceTypeCode2["ChallengeVerification"] = 16384] = "ChallengeVerification";
      BounceTypeCode2[BounceTypeCode2["BadEmailAddress"] = 1e5] = "BadEmailAddress";
      BounceTypeCode2[BounceTypeCode2["SpamComplaint"] = 100001] = "SpamComplaint";
      BounceTypeCode2[BounceTypeCode2["ManuallyDeactivated"] = 100002] = "ManuallyDeactivated";
      BounceTypeCode2[BounceTypeCode2["Unconfirmed"] = 100003] = "Unconfirmed";
      BounceTypeCode2[BounceTypeCode2["Blocked"] = 100006] = "Blocked";
      BounceTypeCode2[BounceTypeCode2["SMTPApiError"] = 100007] = "SMTPApiError";
      BounceTypeCode2[BounceTypeCode2["InboundError"] = 100008] = "InboundError";
      BounceTypeCode2[BounceTypeCode2["DMARCPolicy"] = 100009] = "DMARCPolicy";
      BounceTypeCode2[BounceTypeCode2["TemplateRenderingFailed"] = 100010] = "TemplateRenderingFailed";
    })(BounceTypeCode = exports.BounceTypeCode || (exports.BounceTypeCode = {}));
  }
});

// node_modules/postmark/dist/client/models/bounces/BounceFilteringParameters.js
var require_BounceFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/bounces/BounceFilteringParameters.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BounceFilteringParameters = void 0;
    var FilteringParameters_1 = require_FilteringParameters();
    var BounceFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(BounceFilteringParameters2, _super);
        function BounceFilteringParameters2(count, offset, type, inactive, emailFilter, tag, messageID, fromDate, toDate, messageStream) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.type = type;
          _this.inactive = inactive;
          _this.emailFilter = emailFilter;
          _this.tag = tag;
          _this.messageID = messageID;
          _this.fromDate = fromDate;
          _this.toDate = toDate;
          _this.messageStream = messageStream;
          return _this;
        }
        return BounceFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.BounceFilteringParameters = BounceFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/message/Message.js
var require_Message = __commonJS({
  "node_modules/postmark/dist/client/models/message/Message.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Message = void 0;
    var Message = (
      /** @class */
      function() {
        function Message2(From, Subject, HtmlBody, TextBody, To, Cc, Bcc, ReplyTo, Tag, TrackOpens, TrackLinks, Headers3, Attachments, Metadata) {
          this.From = From;
          this.To = To;
          this.Cc = Cc;
          this.Bcc = Bcc;
          this.Subject = Subject;
          this.ReplyTo = ReplyTo;
          this.HtmlBody = HtmlBody;
          this.TextBody = TextBody;
          this.Tag = Tag;
          this.TrackOpens = TrackOpens;
          this.TrackLinks = TrackLinks;
          this.Headers = Headers3;
          this.Attachments = Attachments;
          this.Metadata = Metadata;
        }
        return Message2;
      }()
    );
    exports.Message = Message;
  }
});

// node_modules/postmark/dist/client/models/message/SupportingTypes.js
var require_SupportingTypes2 = __commonJS({
  "node_modules/postmark/dist/client/models/message/SupportingTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Attachment = exports.Header = exports.ServerDeliveryTypes = exports.LinkClickLocation = exports.LinkTrackingOptions = void 0;
    var LinkTrackingOptions;
    (function(LinkTrackingOptions2) {
      LinkTrackingOptions2["TextOnly"] = "TextOnly";
      LinkTrackingOptions2["HtmlOnly"] = "HtmlOnly";
      LinkTrackingOptions2["HtmlAndText"] = "HtmlAndText";
      LinkTrackingOptions2["None"] = "None";
    })(LinkTrackingOptions = exports.LinkTrackingOptions || (exports.LinkTrackingOptions = {}));
    var LinkClickLocation;
    (function(LinkClickLocation2) {
      LinkClickLocation2["HTML"] = "HTML";
      LinkClickLocation2["Text"] = "Text";
    })(LinkClickLocation = exports.LinkClickLocation || (exports.LinkClickLocation = {}));
    var ServerDeliveryTypes;
    (function(ServerDeliveryTypes2) {
      ServerDeliveryTypes2["Live"] = "Live";
      ServerDeliveryTypes2["Sandbox"] = "Sandbox";
    })(ServerDeliveryTypes = exports.ServerDeliveryTypes || (exports.ServerDeliveryTypes = {}));
    var Header = (
      /** @class */
      function() {
        function Header2(Name, Value) {
          this.Name = Name;
          this.Value = Value;
        }
        return Header2;
      }()
    );
    exports.Header = Header;
    var Attachment = (
      /** @class */
      function() {
        function Attachment2(Name, Content, ContentType, ContentID, ContentLength) {
          if (ContentID === void 0) {
            ContentID = null;
          }
          this.Name = Name;
          this.Content = Content;
          this.ContentType = ContentType;
          this.ContentID = ContentID;
          this.ContentLength = ContentLength;
        }
        return Attachment2;
      }()
    );
    exports.Attachment = Attachment;
  }
});

// node_modules/postmark/dist/client/models/messages/OutboundMessage.js
var require_OutboundMessage = __commonJS({
  "node_modules/postmark/dist/client/models/messages/OutboundMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/messages/OutboundMessageOpen.js
var require_OutboundMessageOpen = __commonJS({
  "node_modules/postmark/dist/client/models/messages/OutboundMessageOpen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/messages/OutboundMessageClick.js
var require_OutboundMessageClick = __commonJS({
  "node_modules/postmark/dist/client/models/messages/OutboundMessageClick.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/messages/InboundMessage.js
var require_InboundMessage = __commonJS({
  "node_modules/postmark/dist/client/models/messages/InboundMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/messages/MessageFilteringParameters.js
var require_MessageFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/messages/MessageFilteringParameters.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OutboundMessageClicksFilteringParameters = exports.OutboundMessageOpensFilteringParameters = exports.OutboundMessageTrackingFilteringParameters = exports.InboundMessagesFilteringParameters = exports.OutboundMessagesFilteringParameters = exports.InboundMessageStatus = exports.OutboundMessageStatus = void 0;
    var FilteringParameters_1 = require_FilteringParameters();
    var OutboundMessageStatus;
    (function(OutboundMessageStatus2) {
      OutboundMessageStatus2["Queued"] = "queued";
      OutboundMessageStatus2["Sent"] = "sent";
      OutboundMessageStatus2["Processed"] = "processed";
    })(OutboundMessageStatus = exports.OutboundMessageStatus || (exports.OutboundMessageStatus = {}));
    var InboundMessageStatus;
    (function(InboundMessageStatus2) {
      InboundMessageStatus2["Queued"] = "queued";
      InboundMessageStatus2["Sent"] = "sent";
      InboundMessageStatus2["Processed"] = "processed";
      InboundMessageStatus2["Blocked"] = "blocked";
      InboundMessageStatus2["Failed"] = "failed";
      InboundMessageStatus2["Scheduled"] = "scheduled";
    })(InboundMessageStatus = exports.InboundMessageStatus || (exports.InboundMessageStatus = {}));
    var OutboundMessagesFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(OutboundMessagesFilteringParameters2, _super);
        function OutboundMessagesFilteringParameters2(count, offset, recipient, fromEmail, tag, status, fromDate, toDate, subject, messageStream) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.recipient = recipient;
          _this.fromEmail = fromEmail;
          _this.tag = tag;
          _this.status = status;
          _this.fromDate = fromDate;
          _this.toDate = toDate;
          _this.subject = subject;
          _this.messageStream = messageStream;
          return _this;
        }
        return OutboundMessagesFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.OutboundMessagesFilteringParameters = OutboundMessagesFilteringParameters;
    var InboundMessagesFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(InboundMessagesFilteringParameters2, _super);
        function InboundMessagesFilteringParameters2(count, offset, mailboxHash, recipient, fromEmail, tag, status, fromDate, toDate, subject) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.status = status;
          _this.mailboxHash = mailboxHash;
          _this.recipient = recipient;
          _this.fromEmail = fromEmail;
          _this.tag = tag;
          _this.fromDate = fromDate;
          _this.toDate = toDate;
          _this.subject = subject;
          return _this;
        }
        return InboundMessagesFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.InboundMessagesFilteringParameters = InboundMessagesFilteringParameters;
    var OutboundMessageTrackingFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(OutboundMessageTrackingFilteringParameters2, _super);
        function OutboundMessageTrackingFilteringParameters2(count, offset, recipient, tag, client_name, client_company, client_family, os_name, os_family, os_company, platform, country, region, city, messageStream) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.recipient = recipient;
          _this.tag = tag;
          _this.client_name = client_name;
          _this.client_company = client_company;
          _this.client_family = client_family;
          _this.os_name = os_name;
          _this.os_family = os_family;
          _this.os_company = os_company;
          _this.platform = platform;
          _this.country = country;
          _this.region = region;
          _this.city = city;
          _this.messageStream = messageStream;
          return _this;
        }
        return OutboundMessageTrackingFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.OutboundMessageTrackingFilteringParameters = OutboundMessageTrackingFilteringParameters;
    var OutboundMessageOpensFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(OutboundMessageOpensFilteringParameters2, _super);
        function OutboundMessageOpensFilteringParameters2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return OutboundMessageOpensFilteringParameters2;
      }(OutboundMessageTrackingFilteringParameters)
    );
    exports.OutboundMessageOpensFilteringParameters = OutboundMessageOpensFilteringParameters;
    var OutboundMessageClicksFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(OutboundMessageClicksFilteringParameters2, _super);
        function OutboundMessageClicksFilteringParameters2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return OutboundMessageClicksFilteringParameters2;
      }(OutboundMessageTrackingFilteringParameters)
    );
    exports.OutboundMessageClicksFilteringParameters = OutboundMessageClicksFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/templates/Template.js
var require_Template = __commonJS({
  "node_modules/postmark/dist/client/models/templates/Template.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemplateFilteringParameters = exports.TemplatedMessage = exports.TemplatesPushRequest = exports.TemplateTypes = exports.TemplateValidationOptions = exports.CreateTemplateRequest = exports.UpdateTemplateRequest = void 0;
    var FilteringParameters_1 = require_FilteringParameters();
    var UpdateTemplateRequest = (
      /** @class */
      function() {
        function UpdateTemplateRequest2(Name, Subject, HtmlBody, TextBody, Alias, TemplateType, LayoutTemplate) {
          this.Name = Name;
          this.Subject = Subject;
          this.HtmlBody = HtmlBody;
          this.TextBody = TextBody;
          this.Alias = Alias;
          this.LayoutTemplate = LayoutTemplate;
          this.TemplateType = TemplateType;
        }
        return UpdateTemplateRequest2;
      }()
    );
    exports.UpdateTemplateRequest = UpdateTemplateRequest;
    var CreateTemplateRequest = (
      /** @class */
      function(_super) {
        __extends(CreateTemplateRequest2, _super);
        function CreateTemplateRequest2(Name, Subject, HtmlBody, TextBody, Alias, TemplateType, LayoutTemplate) {
          return _super.call(this, Name, Subject, HtmlBody, TextBody, Alias, TemplateType, LayoutTemplate) || this;
        }
        return CreateTemplateRequest2;
      }(UpdateTemplateRequest)
    );
    exports.CreateTemplateRequest = CreateTemplateRequest;
    var TemplateValidationOptions = (
      /** @class */
      function() {
        function TemplateValidationOptions2(Subject, HtmlBody, TextBody, TestRenderModel, TemplateType, LayoutTemplate, InlineCssForHtmlTestRender) {
          this.Subject = Subject;
          this.HtmlBody = HtmlBody;
          this.TextBody = TextBody;
          this.TestRenderModel = TestRenderModel;
          this.TemplateType = TemplateType;
          this.LayoutTemplate = LayoutTemplate;
          this.InlineCssForHtmlTestRender = InlineCssForHtmlTestRender;
        }
        return TemplateValidationOptions2;
      }()
    );
    exports.TemplateValidationOptions = TemplateValidationOptions;
    var TemplateTypes;
    (function(TemplateTypes2) {
      TemplateTypes2["Standard"] = "Standard";
      TemplateTypes2["Layout"] = "Layout";
    })(TemplateTypes = exports.TemplateTypes || (exports.TemplateTypes = {}));
    var TemplatesPushRequest = (
      /** @class */
      function() {
        function TemplatesPushRequest2(SourceServerID, DestinationServerID, PerformChanges) {
          this.SourceServerID = SourceServerID;
          this.DestinationServerID = DestinationServerID;
          this.PerformChanges = PerformChanges;
        }
        return TemplatesPushRequest2;
      }()
    );
    exports.TemplatesPushRequest = TemplatesPushRequest;
    var TemplatedMessage = (
      /** @class */
      function() {
        function TemplatedMessage2(from, templateIdOrAlias, templateModel, to, cc, bcc, replyTo, tag, trackOpens, trackLinks, headers, attachments) {
          this.From = from;
          this.TemplateModel = templateModel;
          if (typeof templateIdOrAlias === "number") {
            this.TemplateId = templateIdOrAlias;
          } else {
            this.TemplateAlias = templateIdOrAlias;
          }
          this.To = to;
          this.Cc = cc;
          this.Bcc = bcc;
          this.ReplyTo = replyTo;
          this.Tag = tag;
          this.TrackOpens = trackOpens;
          this.TrackLinks = trackLinks;
          this.Headers = headers;
          this.Attachments = attachments;
        }
        return TemplatedMessage2;
      }()
    );
    exports.TemplatedMessage = TemplatedMessage;
    var TemplateFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(TemplateFilteringParameters2, _super);
        function TemplateFilteringParameters2(count, offset, templateType, layoutTemplate) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.templateType = templateType;
          _this.layoutTemplate = layoutTemplate;
          return _this;
        }
        return TemplateFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.TemplateFilteringParameters = TemplateFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/server/Server.js
var require_Server = __commonJS({
  "node_modules/postmark/dist/client/models/server/Server.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateServerRequest = exports.UpdateServerRequest = void 0;
    var UpdateServerRequest = (
      /** @class */
      function() {
        function UpdateServerRequest2(Name, Color, SmtpApiActivated, RawEmailEnabled, InboundHookUrl, BounceHookUrl, OpenHookUrl, DeliveryHookUrl, ClickHookUrl, PostFirstOpenOnly, InboundSpamThreshold, TrackOpens, TrackLinks, IncludeBounceContentInHook, EnableSmtpApiErrorHooks, InboundDomain) {
          this.Name = Name;
          this.Color = Color;
          this.SmtpApiActivated = SmtpApiActivated;
          this.RawEmailEnabled = RawEmailEnabled;
          this.InboundHookUrl = InboundHookUrl;
          this.BounceHookUrl = BounceHookUrl;
          this.OpenHookUrl = OpenHookUrl;
          this.DeliveryHookUrl = DeliveryHookUrl;
          this.ClickHookUrl = ClickHookUrl;
          this.PostFirstOpenOnly = PostFirstOpenOnly;
          this.InboundSpamThreshold = InboundSpamThreshold;
          this.InboundDomain = InboundDomain;
          this.TrackOpens = TrackOpens;
          this.TrackLinks = TrackLinks;
          this.IncludeBounceContentInHook = IncludeBounceContentInHook;
          this.EnableSmtpApiErrorHooks = EnableSmtpApiErrorHooks;
        }
        return UpdateServerRequest2;
      }()
    );
    exports.UpdateServerRequest = UpdateServerRequest;
    var CreateServerRequest = (
      /** @class */
      function(_super) {
        __extends(CreateServerRequest2, _super);
        function CreateServerRequest2(Name, Color, SmtpApiActivated, RawEmailEnabled, InboundHookUrl, BounceHookUrl, OpenHookUrl, DeliveryHookUrl, ClickHookUrl, PostFirstOpenOnly, InboundSpamThreshold, TrackOpens, TrackLinks, IncludeBounceContentInHook, EnableSmtpApiErrorHooks, InboundDomain, DeliveryType) {
          var _this = _super.call(this, Name, Color, SmtpApiActivated, RawEmailEnabled, InboundHookUrl, BounceHookUrl, OpenHookUrl, DeliveryHookUrl, ClickHookUrl, PostFirstOpenOnly, InboundSpamThreshold, TrackOpens, TrackLinks, IncludeBounceContentInHook, EnableSmtpApiErrorHooks, InboundDomain) || this;
          _this.DeliveryType = DeliveryType;
          return _this;
        }
        return CreateServerRequest2;
      }(UpdateServerRequest)
    );
    exports.CreateServerRequest = CreateServerRequest;
  }
});

// node_modules/postmark/dist/client/models/server/Servers.js
var require_Servers = __commonJS({
  "node_modules/postmark/dist/client/models/server/Servers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/server/ServerFilteringParameters.js
var require_ServerFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/server/ServerFilteringParameters.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ServerFilteringParameters = void 0;
    var FilteringParameters_1 = require_FilteringParameters();
    var ServerFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(ServerFilteringParameters2, _super);
        function ServerFilteringParameters2(count, offset, name) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.name = name;
          return _this;
        }
        return ServerFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.ServerFilteringParameters = ServerFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/domains/Domain.js
var require_Domain = __commonJS({
  "node_modules/postmark/dist/client/models/domains/Domain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDomainRequest = exports.CreateDomainRequest = void 0;
    var CreateDomainRequest = (
      /** @class */
      function() {
        function CreateDomainRequest2(Name, ReturnPathDomain) {
          this.Name = Name;
          this.ReturnPathDomain = ReturnPathDomain;
        }
        return CreateDomainRequest2;
      }()
    );
    exports.CreateDomainRequest = CreateDomainRequest;
    var UpdateDomainRequest = (
      /** @class */
      function() {
        function UpdateDomainRequest2(ReturnPathDomain) {
          this.ReturnPathDomain = ReturnPathDomain;
        }
        return UpdateDomainRequest2;
      }()
    );
    exports.UpdateDomainRequest = UpdateDomainRequest;
  }
});

// node_modules/postmark/dist/client/models/senders/Signature.js
var require_Signature = __commonJS({
  "node_modules/postmark/dist/client/models/senders/Signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateSignatureRequest = exports.UpdateSignatureRequest = void 0;
    var UpdateSignatureRequest = (
      /** @class */
      function() {
        function UpdateSignatureRequest2(Name, ReplyToEmail, ReturnPathDomain, ConfirmationPersonalNote) {
          this.Name = Name;
          this.ReplyToEmail = ReplyToEmail;
          this.ReturnPathDomain = ReturnPathDomain;
          this.ConfirmationPersonalNote = ConfirmationPersonalNote;
        }
        return UpdateSignatureRequest2;
      }()
    );
    exports.UpdateSignatureRequest = UpdateSignatureRequest;
    var CreateSignatureRequest = (
      /** @class */
      function() {
        function CreateSignatureRequest2(Name, FromEmail, ReplyToEmail, ReturnPathDomain, ConfirmationPersonalNote) {
          this.Name = Name;
          this.ReplyToEmail = ReplyToEmail;
          this.ReturnPathDomain = ReturnPathDomain;
          this.FromEmail = FromEmail;
          this.ConfirmationPersonalNote = ConfirmationPersonalNote;
        }
        return CreateSignatureRequest2;
      }()
    );
    exports.CreateSignatureRequest = CreateSignatureRequest;
  }
});

// node_modules/postmark/dist/client/models/suppressions/Suppression.js
var require_Suppression = __commonJS({
  "node_modules/postmark/dist/client/models/suppressions/Suppression.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/stats/Stats.js
var require_Stats = __commonJS({
  "node_modules/postmark/dist/client/models/stats/Stats.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/stats/StatsFilteringParameters.js
var require_StatsFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/stats/StatsFilteringParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StatisticsFilteringParameters = void 0;
    var StatisticsFilteringParameters = (
      /** @class */
      function() {
        function StatisticsFilteringParameters2(tag, fromDate, toDate, messageStream) {
          this.tag = tag;
          this.fromDate = fromDate;
          this.toDate = toDate;
          this.messageStream = messageStream;
        }
        return StatisticsFilteringParameters2;
      }()
    );
    exports.StatisticsFilteringParameters = StatisticsFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/triggers/InboundRule.js
var require_InboundRule = __commonJS({
  "node_modules/postmark/dist/client/models/triggers/InboundRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateInboundRuleRequest = void 0;
    var CreateInboundRuleRequest = (
      /** @class */
      function() {
        function CreateInboundRuleRequest2(Rule) {
          this.Rule = Rule;
        }
        return CreateInboundRuleRequest2;
      }()
    );
    exports.CreateInboundRuleRequest = CreateInboundRuleRequest;
  }
});

// node_modules/postmark/dist/client/models/webhooks/Webhooks.js
var require_Webhooks = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/Webhooks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/Webhook.js
var require_Webhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/Webhook.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateWebhookRequest = exports.UpdateWebhookRequest = void 0;
    var UpdateWebhookRequest = (
      /** @class */
      function() {
        function UpdateWebhookRequest2(url, triggers, httpAuth, httpHeaders) {
          this.Url = url;
          this.HttpAuth = httpAuth;
          this.HttpHeaders = httpHeaders;
          this.Triggers = triggers;
        }
        return UpdateWebhookRequest2;
      }()
    );
    exports.UpdateWebhookRequest = UpdateWebhookRequest;
    var CreateWebhookRequest = (
      /** @class */
      function(_super) {
        __extends(CreateWebhookRequest2, _super);
        function CreateWebhookRequest2(url, triggers, httpAuth, httpHeaders, messageStream) {
          var _this = _super.call(this, url, triggers, httpAuth, httpHeaders) || this;
          _this.MessageStream = messageStream;
          return _this;
        }
        return CreateWebhookRequest2;
      }(UpdateWebhookRequest)
    );
    exports.CreateWebhookRequest = CreateWebhookRequest;
  }
});

// node_modules/postmark/dist/client/models/webhooks/WebhookFilteringParameters.js
var require_WebhookFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/WebhookFilteringParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebhookFilteringParameters = void 0;
    var WebhookFilteringParameters = (
      /** @class */
      function() {
        function WebhookFilteringParameters2(messageStream) {
          this.messageStream = messageStream;
        }
        return WebhookFilteringParameters2;
      }()
    );
    exports.WebhookFilteringParameters = WebhookFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/BounceWebhook.js
var require_BounceWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/BounceWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/DeliveryWebhook.js
var require_DeliveryWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/DeliveryWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/SpamComplaintWebhook.js
var require_SpamComplaintWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/SpamComplaintWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/ClickWebhook.js
var require_ClickWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/ClickWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/OpenWebhook.js
var require_OpenWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/OpenWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/SubscriptionChangeWebhook.js
var require_SubscriptionChangeWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/SubscriptionChangeWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/InboundWebhook.js
var require_InboundWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/InboundWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/suppressions/SuppressionFilteringParameters.js
var require_SuppressionFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/suppressions/SuppressionFilteringParameters.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SuppressionFilteringParameters = exports.SuppressionOrigin = exports.SuppressionReason = void 0;
    var FilteringParameters_1 = require_FilteringParameters();
    var SuppressionReason;
    (function(SuppressionReason2) {
      SuppressionReason2["HardBounce"] = "HardBounce";
      SuppressionReason2["SpamComplaint"] = "SpamComplaint";
      SuppressionReason2["ManualSuppression"] = "ManualSuppression";
    })(SuppressionReason = exports.SuppressionReason || (exports.SuppressionReason = {}));
    var SuppressionOrigin;
    (function(SuppressionOrigin2) {
      SuppressionOrigin2["Recipient"] = "Recipient";
      SuppressionOrigin2["Customer"] = "Customer";
      SuppressionOrigin2["Admin"] = "Admin";
    })(SuppressionOrigin = exports.SuppressionOrigin || (exports.SuppressionOrigin = {}));
    var SuppressionFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(SuppressionFilteringParameters2, _super);
        function SuppressionFilteringParameters2(count, offset, suppressionReason, origin, emailAddress, fromDate, toDate) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.suppressionReason = suppressionReason;
          _this.origin = origin;
          _this.emailAddress = emailAddress;
          _this.fromDate = fromDate;
          _this.toDate = toDate;
          return _this;
        }
        return SuppressionFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.SuppressionFilteringParameters = SuppressionFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/streams/MessageStream.js
var require_MessageStream = __commonJS({
  "node_modules/postmark/dist/client/models/streams/MessageStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateMessageStreamRequest = exports.UpdateMessageStreamRequest = exports.UnsubscribeHandlingTypes = void 0;
    var UnsubscribeHandlingTypes;
    (function(UnsubscribeHandlingTypes2) {
      UnsubscribeHandlingTypes2["None"] = "None";
      UnsubscribeHandlingTypes2["Postmark"] = "Postmark";
      UnsubscribeHandlingTypes2["Custom"] = "Custom";
    })(UnsubscribeHandlingTypes = exports.UnsubscribeHandlingTypes || (exports.UnsubscribeHandlingTypes = {}));
    var UpdateMessageStreamRequest = (
      /** @class */
      function() {
        function UpdateMessageStreamRequest2(name, description, subscriptionManagementConfiguration) {
          this.Name = name;
          this.Description = description;
          this.SubscriptionManagementConfiguration = subscriptionManagementConfiguration;
        }
        return UpdateMessageStreamRequest2;
      }()
    );
    exports.UpdateMessageStreamRequest = UpdateMessageStreamRequest;
    var CreateMessageStreamRequest = (
      /** @class */
      function() {
        function CreateMessageStreamRequest2(id, name, messageStreamType, description, subscriptionManagementConfiguration) {
          this.Name = name;
          this.Description = description;
          this.ID = id;
          this.MessageStreamType = messageStreamType;
          this.SubscriptionManagementConfiguration = subscriptionManagementConfiguration;
        }
        return CreateMessageStreamRequest2;
      }()
    );
    exports.CreateMessageStreamRequest = CreateMessageStreamRequest;
  }
});

// node_modules/postmark/dist/client/models/streams/MessageStreamsFilteringParameters.js
var require_MessageStreamsFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/streams/MessageStreamsFilteringParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MessageStreamsFilteringParameters = void 0;
    var MessageStreamsFilteringParameters = (
      /** @class */
      function() {
        function MessageStreamsFilteringParameters2(messageStreamType, includeArchivedStreams) {
          this.messageStreamType = messageStreamType;
          this.includeArchivedStreams = includeArchivedStreams;
        }
        return MessageStreamsFilteringParameters2;
      }()
    );
    exports.MessageStreamsFilteringParameters = MessageStreamsFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/data_removal/DataRemovals.js
var require_DataRemovals = __commonJS({
  "node_modules/postmark/dist/client/models/data_removal/DataRemovals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataRemovalRequest = exports.DataRemovalStatusTypes = void 0;
    var DataRemovalStatusTypes;
    (function(DataRemovalStatusTypes2) {
      DataRemovalStatusTypes2["Pending"] = "Pending";
      DataRemovalStatusTypes2["Done"] = "Done";
    })(DataRemovalStatusTypes = exports.DataRemovalStatusTypes || (exports.DataRemovalStatusTypes = {}));
    var DataRemovalRequest = (
      /** @class */
      function() {
        function DataRemovalRequest2(requestedBy, requestedFor, notifyWhenCompleted) {
          this.RequestedBy = requestedBy;
          this.RequestedFor = requestedFor;
          this.NotifyWhenCompleted = notifyWhenCompleted;
        }
        return DataRemovalRequest2;
      }()
    );
    exports.DataRemovalRequest = DataRemovalRequest;
  }
});

// node_modules/postmark/dist/client/models/index.js
var require_models = __commonJS({
  "node_modules/postmark/dist/client/models/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ClientOptions(), exports);
    __exportStar(require_SupportingTypes(), exports);
    __exportStar(require_HttpClient(), exports);
    __exportStar(require_Callback(), exports);
    __exportStar(require_DefaultResponse(), exports);
    __exportStar(require_FilteringParameters(), exports);
    __exportStar(require_Bounce(), exports);
    __exportStar(require_BounceFilteringParameters(), exports);
    __exportStar(require_Message(), exports);
    __exportStar(require_SupportingTypes2(), exports);
    __exportStar(require_OutboundMessage(), exports);
    __exportStar(require_OutboundMessageOpen(), exports);
    __exportStar(require_OutboundMessageClick(), exports);
    __exportStar(require_InboundMessage(), exports);
    __exportStar(require_MessageFilteringParameters(), exports);
    __exportStar(require_Template(), exports);
    __exportStar(require_Server(), exports);
    __exportStar(require_Servers(), exports);
    __exportStar(require_ServerFilteringParameters(), exports);
    __exportStar(require_Domain(), exports);
    __exportStar(require_Signature(), exports);
    __exportStar(require_Suppression(), exports);
    __exportStar(require_Stats(), exports);
    __exportStar(require_StatsFilteringParameters(), exports);
    __exportStar(require_InboundRule(), exports);
    __exportStar(require_Webhooks(), exports);
    __exportStar(require_Webhook(), exports);
    __exportStar(require_WebhookFilteringParameters(), exports);
    __exportStar(require_BounceWebhook(), exports);
    __exportStar(require_DeliveryWebhook(), exports);
    __exportStar(require_SpamComplaintWebhook(), exports);
    __exportStar(require_ClickWebhook(), exports);
    __exportStar(require_OpenWebhook(), exports);
    __exportStar(require_SubscriptionChangeWebhook(), exports);
    __exportStar(require_InboundWebhook(), exports);
    __exportStar(require_Suppression(), exports);
    __exportStar(require_SuppressionFilteringParameters(), exports);
    __exportStar(require_MessageStream(), exports);
    __exportStar(require_MessageStreamsFilteringParameters(), exports);
    __exportStar(require_DataRemovals(), exports);
  }
});

// node_modules/postmark/dist/client/errors/index.js
var require_errors2 = __commonJS({
  "node_modules/postmark/dist/client/errors/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ErrorHandler(), exports);
    __exportStar(require_Errors(), exports);
  }
});

// node_modules/postmark/dist/client/HttpClient.js
var require_HttpClient2 = __commonJS({
  "node_modules/postmark/dist/client/HttpClient.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p))
              t[p] = s2[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AxiosHttpClient = void 0;
    var axios_1 = require_axios();
    var models_1 = require_models();
    var index_1 = require_errors2();
    var AxiosHttpClient = (
      /** @class */
      function(_super) {
        __extends(AxiosHttpClient2, _super);
        function AxiosHttpClient2(configOptions) {
          var _this = _super.call(this, configOptions) || this;
          _this.errorHandler = new index_1.ErrorHandler();
          return _this;
        }
        AxiosHttpClient2.prototype.initHttpClient = function(configOptions) {
          this.clientOptions = __assign(__assign({}, models_1.HttpClient.DefaultOptions), configOptions);
          var httpClient = axios_1.default.create({
            baseURL: this.getBaseHttpRequestURL(),
            timeout: this.getRequestTimeoutInMilliseconds(),
            responseType: "json",
            maxContentLength: Infinity,
            maxBodyLength: Infinity,
            validateStatus: function(status) {
              return status >= 200 && status < 300;
            }
          });
          httpClient.interceptors.response.use(function(response) {
            return response.data;
          });
          this.client = httpClient;
        };
        AxiosHttpClient2.prototype.httpRequest = function(method, path2, queryParameters, body, requestHeaders) {
          var _this = this;
          return this.client.request({
            method,
            url: path2,
            data: body,
            headers: requestHeaders,
            params: queryParameters
          }).catch(function(errorThrown) {
            return Promise.reject(_this.transformError(errorThrown));
          });
        };
        AxiosHttpClient2.prototype.transformError = function(errorThrown) {
          var response = errorThrown.response;
          if (response !== void 0) {
            var status_1 = this.adjustValue(0, response.status);
            var errorCode = this.adjustValue(0, response.data.ErrorCode);
            var message = this.adjustValue(errorThrown.message, response.data.Message);
            return this.errorHandler.buildError(message, errorCode, status_1);
          } else if (errorThrown.message !== void 0) {
            return this.errorHandler.buildError(errorThrown.message);
          } else {
            return this.errorHandler.buildError(JSON.stringify(errorThrown, Object.getOwnPropertyNames(errorThrown)));
          }
        };
        AxiosHttpClient2.prototype.getRequestTimeoutInMilliseconds = function() {
          return (this.clientOptions.timeout || 60) * 1e3;
        };
        AxiosHttpClient2.prototype.adjustValue = function(defaultValue, data) {
          return data === void 0 ? defaultValue : data;
        };
        return AxiosHttpClient2;
      }(models_1.HttpClient)
    );
    exports.AxiosHttpClient = AxiosHttpClient;
  }
});

// node_modules/postmark/package.json
var require_package = __commonJS({
  "node_modules/postmark/package.json"(exports, module2) {
    module2.exports = {
      name: "postmark",
      description: "Official Node.js client library for the Postmark HTTP API - https://www.postmarkapp.com",
      license: "MIT",
      tags: [
        "email",
        "utility",
        "postmark",
        "sending",
        "transactional"
      ],
      version: "4.0.2",
      author: "Igor Balos",
      contributors: [
        "Igor Balos",
        "Andrew Theken",
        "Aaron Blum",
        "Aleksey Aleksandrov",
        "Alex Shepard",
        "Antony Jones",
        "Ben Burwell",
        "Ben Williamson",
        "Chris Williams",
        "Jakub Borys",
        "Mark Nguyen",
        "Matt",
        "Matthew Blackshaw",
        "Matthew Conlen",
        "Ryan Kirkman",
        "Scott Anderson",
        "Sebastien Chopin",
        "Theophane RUPIN",
        "codesplicer",
        "francescoRubini",
        "Matthew Reff"
      ],
      main: "./dist/index.js",
      types: "./dist/index.d.ts",
      directories: {
        lib: "./dist/index.js"
      },
      scripts: {
        compile: "rm -r -f ./dist && node_modules/.bin/tsc",
        test: "node_modules/.bin/mocha --timeout 30000 --retries 1 -r ts-node/register test/**/*test.ts",
        unittest: "node_modules/.bin/mocha --timeout 30000 --retries 1 -r ts-node/register test/unit/**/*test.ts",
        watchtests: "node_modules/.bin/mocha --timeout 30000 --retries 1 -r ts-node/register -R list -w --recursive -G test/**/*test.ts",
        lint: "npx eslint src --ext ts --ignore-pattern 'src/*test*'; exit 0",
        lintfix: "npx eslint src --ext ts --fix --ignore-pattern 'src/test*.ts'; exit 0",
        "compile-docs": "echo 'Generating docs...' && mkdir -p ./docs && rm -r ./docs && node_modules/.bin/typedoc --options typedoc.json && git add -A ./docs && echo 'Generated docs!'"
      },
      homepage: "http://ActiveCampaign.github.io/postmark.js",
      repository: {
        type: "git",
        url: "https://github.com/ActiveCampaign/postmark.js.git"
      },
      bugs: {
        url: "https://github.com/ActiveCampaign/postmark.js/issues"
      },
      precommit: [
        "compile",
        "lint",
        "test",
        "compile-docs"
      ],
      devDependencies: {
        "@types/chai": "^4.3.11",
        "@types/mocha": "^10.0.6",
        "@types/node": "^12.12.6",
        "@types/sinon": "^17.0.2",
        "@typescript-eslint/eslint-plugin": "^5.40.1",
        "@typescript-eslint/parser": "^5.40.1",
        chai: "^4.3.10",
        dotenv: "^16.3.1",
        eslint: "^8.54.0",
        mocha: "^10.2.0",
        "pre-commit": "^1.2.2",
        sinon: "^17.0.1",
        "ts-node": "^10.9.1",
        typedoc: "^0.25.4",
        typescript: "^4.7.4"
      },
      dependencies: {
        axios: "^1.6.2"
      }
    };
  }
});

// node_modules/postmark/dist/client/BaseClient.js
var require_BaseClient = __commonJS({
  "node_modules/postmark/dist/client/BaseClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ErrorHandler_1 = require_ErrorHandler();
    var HttpClient_1 = require_HttpClient2();
    var packageJson = require_package();
    var CLIENT_VERSION = packageJson.version;
    var BaseClient = (
      /** @class */
      function() {
        function BaseClient2(token, authHeader, configOptions) {
          this.errorHandler = new ErrorHandler_1.ErrorHandler();
          this.verifyToken(token);
          this.token = token.trim();
          this.authHeader = authHeader;
          this.clientVersion = CLIENT_VERSION;
          this.httpClient = new HttpClient_1.AxiosHttpClient(configOptions);
        }
        BaseClient2.prototype.setClientOptions = function(configOptions) {
          this.httpClient.initHttpClient(configOptions);
        };
        BaseClient2.prototype.getClientOptions = function() {
          return this.httpClient.clientOptions;
        };
        BaseClient2.prototype.processRequestWithBody = function(method, path2, body, callback) {
          return this.processRequest(method, path2, {}, body, callback);
        };
        BaseClient2.prototype.processRequestWithoutBody = function(method, path2, queryParameters, callback) {
          if (queryParameters === void 0) {
            queryParameters = {};
          }
          return this.processRequest(method, path2, queryParameters, null, callback);
        };
        BaseClient2.prototype.processRequest = function(method, path2, queryParameters, body, callback) {
          var httpRequest = this.processHttpRequest(method, path2, queryParameters, body);
          this.processCallbackRequest(httpRequest, callback);
          return httpRequest;
        };
        BaseClient2.prototype.processHttpRequest = function(method, path2, queryParameters, body) {
          return this.httpClient.httpRequest(method, path2, queryParameters, body, this.getComposedHttpRequestHeaders()).then(function(response) {
            return response;
          }).catch(function(error3) {
            return Promise.reject(error3);
          });
        };
        BaseClient2.prototype.processCallbackRequest = function(httpRequest, callback) {
          if (callback) {
            httpRequest.then(function(response) {
              return callback(null, response);
            }).catch(function(error3) {
              return callback(error3, null);
            });
          }
        };
        BaseClient2.prototype.getComposedHttpRequestHeaders = function() {
          var _a;
          return _a = {}, _a[this.authHeader] = this.token, _a["Accept"] = "application/json", _a["Content-Type"] = "application/json", _a["User-Agent"] = "Postmark.JS - ".concat(this.clientVersion), _a;
        };
        BaseClient2.prototype.verifyToken = function(token) {
          if (!token || token.trim() === "") {
            throw this.errorHandler.buildError("A valid API token must be provided.");
          }
        };
        BaseClient2.prototype.setDefaultPaginationValues = function(filter) {
          filter.count = filter.count || 100;
          filter.offset = filter.offset || 0;
        };
        return BaseClient2;
      }()
    );
    exports.default = BaseClient;
  }
});

// node_modules/postmark/dist/client/AccountClient.js
var require_AccountClient = __commonJS({
  "node_modules/postmark/dist/client/AccountClient.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var BaseClient_1 = require_BaseClient();
    var models_1 = require_models();
    var models_2 = require_models();
    var AccountClient = (
      /** @class */
      function(_super) {
        __extends(AccountClient2, _super);
        function AccountClient2(accountToken, configOptions) {
          return _super.call(this, accountToken, models_1.ClientOptions.AuthHeaderNames.ACCOUNT_TOKEN, configOptions) || this;
        }
        AccountClient2.prototype.getServers = function(filter, callback) {
          if (filter === void 0) {
            filter = new models_2.ServerFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/servers", filter, callback);
        };
        AccountClient2.prototype.getServer = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/servers/".concat(id), {}, callback);
        };
        AccountClient2.prototype.createServer = function(options2, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.POST, "/servers", options2, callback);
        };
        AccountClient2.prototype.editServer = function(id, options2, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.PUT, "/servers/".concat(id), options2, callback);
        };
        AccountClient2.prototype.deleteServer = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.DELETE, "/servers/".concat(id), {}, callback);
        };
        AccountClient2.prototype.getDomains = function(filter, callback) {
          if (filter === void 0) {
            filter = new models_1.FilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/domains", filter, callback);
        };
        AccountClient2.prototype.getDomain = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/domains/".concat(id), {}, callback);
        };
        AccountClient2.prototype.createDomain = function(options2, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.POST, "/domains/", options2, callback);
        };
        AccountClient2.prototype.editDomain = function(id, options2, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.PUT, "/domains/".concat(id), options2, callback);
        };
        AccountClient2.prototype.deleteDomain = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.DELETE, "/domains/".concat(id), {}, callback);
        };
        AccountClient2.prototype.verifyDomainDKIM = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.PUT, "/domains/".concat(id, "/verifyDKIM"), {}, callback);
        };
        AccountClient2.prototype.verifyDomainReturnPath = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.PUT, "/domains/".concat(id, "/verifyReturnPath"), {}, callback);
        };
        AccountClient2.prototype.verifyDomainSPF = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.POST, "/domains/".concat(id, "/verifySPF"), {}, callback);
        };
        AccountClient2.prototype.rotateDomainDKIM = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.POST, "/domains/".concat(id, "/rotateDKIM"), {}, callback);
        };
        AccountClient2.prototype.getSenderSignature = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/senders/".concat(id), {}, callback);
        };
        AccountClient2.prototype.getSenderSignatures = function(filter, callback) {
          if (filter === void 0) {
            filter = new models_1.FilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/senders", filter, callback);
        };
        AccountClient2.prototype.createSenderSignature = function(options2, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.POST, "/senders/", options2, callback);
        };
        AccountClient2.prototype.editSenderSignature = function(id, options2, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.PUT, "/senders/".concat(id), options2, callback);
        };
        AccountClient2.prototype.deleteSenderSignature = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.DELETE, "/senders/".concat(id), {}, callback);
        };
        AccountClient2.prototype.resendSenderSignatureConfirmation = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.POST, "/senders/".concat(id, "/resend"), {}, callback);
        };
        AccountClient2.prototype.verifySenderSignatureSPF = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.POST, "/senders/".concat(id, "/verifySpf"), {}, callback);
        };
        AccountClient2.prototype.requestNewDKIMForSenderSignature = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.POST, "/senders/".concat(id, "/requestNewDkim"), {}, callback);
        };
        AccountClient2.prototype.pushTemplates = function(options2, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.PUT, "/templates/push", options2, callback);
        };
        AccountClient2.prototype.requestDataRemoval = function(options2, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.POST, "/data-removals", options2, callback);
        };
        AccountClient2.prototype.getDataRemovalStatus = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/data-removals/".concat(id), {}, callback);
        };
        return AccountClient2;
      }(BaseClient_1.default)
    );
    exports.default = AccountClient;
  }
});

// node_modules/postmark/dist/client/ServerClient.js
var require_ServerClient = __commonJS({
  "node_modules/postmark/dist/client/ServerClient.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var BaseClient_1 = require_BaseClient();
    var index_1 = require_models();
    var index_2 = require_models();
    var ServerClient2 = (
      /** @class */
      function(_super) {
        __extends(ServerClient3, _super);
        function ServerClient3(serverToken, configOptions) {
          return _super.call(this, serverToken, index_1.ClientOptions.AuthHeaderNames.SERVER_TOKEN, configOptions) || this;
        }
        ServerClient3.prototype.sendEmail = function(email, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/email", email, callback);
        };
        ServerClient3.prototype.sendEmailBatch = function(emails, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/email/batch", emails, callback);
        };
        ServerClient3.prototype.sendEmailWithTemplate = function(template, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/email/withTemplate", template, callback);
        };
        ServerClient3.prototype.sendEmailBatchWithTemplates = function(templates, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/email/batchWithTemplates", { Messages: templates }, callback);
        };
        ServerClient3.prototype.getDeliveryStatistics = function(callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/deliveryStats", {}, callback);
        };
        ServerClient3.prototype.getBounces = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.BounceFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/bounces", filter, callback);
        };
        ServerClient3.prototype.getBounce = function(id, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/bounces/".concat(id), {}, callback);
        };
        ServerClient3.prototype.getBounceDump = function(id, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/bounces/".concat(id, "/dump"), {}, callback);
        };
        ServerClient3.prototype.activateBounce = function(id, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.PUT, "/bounces/".concat(id, "/activate"), {}, callback);
        };
        ServerClient3.prototype.getTemplates = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.TemplateFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/templates", filter, callback);
        };
        ServerClient3.prototype.getTemplate = function(idOrAlias, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/templates/".concat(idOrAlias), {}, callback);
        };
        ServerClient3.prototype.deleteTemplate = function(idOrAlias, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.DELETE, "/templates/".concat(idOrAlias), {}, callback);
        };
        ServerClient3.prototype.createTemplate = function(options2, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/templates/", options2, callback);
        };
        ServerClient3.prototype.editTemplate = function(idOrAlias, options2, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.PUT, "/templates/".concat(idOrAlias), options2, callback);
        };
        ServerClient3.prototype.validateTemplate = function(options2, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/templates/validate", options2, callback);
        };
        ServerClient3.prototype.getServer = function(callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/server", {}, callback);
        };
        ServerClient3.prototype.editServer = function(options2, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.PUT, "/server", options2, callback);
        };
        ServerClient3.prototype.getOutboundMessages = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.OutboundMessagesFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound", filter, callback);
        };
        ServerClient3.prototype.getOutboundMessageDetails = function(messageId, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound/".concat(messageId), {}, callback);
        };
        ServerClient3.prototype.getOutboundMessageDump = function(messageId, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound/".concat(messageId, "/dump"), {}, callback);
        };
        ServerClient3.prototype.getInboundMessages = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.InboundMessagesFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/inbound", filter, callback);
        };
        ServerClient3.prototype.getInboundMessageDetails = function(messageId, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/inbound/".concat(messageId, "/details"), {}, callback);
        };
        ServerClient3.prototype.bypassBlockedInboundMessage = function(messageId, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.PUT, "/messages/inbound/".concat(messageId, "/bypass"), {}, callback);
        };
        ServerClient3.prototype.retryInboundHookForMessage = function(messageId, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.PUT, "/messages/inbound/".concat(messageId, "/retry"), {}, callback);
        };
        ServerClient3.prototype.getMessageOpens = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.OutboundMessageOpensFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound/opens", filter, callback);
        };
        ServerClient3.prototype.getMessageOpensForSingleMessage = function(messageId, filter, callback) {
          if (filter === void 0) {
            filter = new index_2.OutboundMessageOpensFilteringParameters(50, 0);
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound/opens/".concat(messageId), filter, callback);
        };
        ServerClient3.prototype.getMessageClicks = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.OutboundMessageClicksFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound/clicks", filter, callback);
        };
        ServerClient3.prototype.getMessageClicksForSingleMessage = function(messageId, filter, callback) {
          if (filter === void 0) {
            filter = new index_2.OutboundMessageClicksFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound/clicks/".concat(messageId), filter, callback);
        };
        ServerClient3.prototype.getOutboundOverview = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound", filter, callback);
        };
        ServerClient3.prototype.getSentCounts = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/sends", filter, callback);
        };
        ServerClient3.prototype.getBounceCounts = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/bounces", filter, callback);
        };
        ServerClient3.prototype.getSpamComplaintsCounts = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/spam", filter, callback);
        };
        ServerClient3.prototype.getTrackedEmailCounts = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/tracked", filter, callback);
        };
        ServerClient3.prototype.getEmailOpenCounts = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/opens", filter, callback);
        };
        ServerClient3.prototype.getEmailOpenPlatformUsage = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/opens/platforms", filter, callback);
        };
        ServerClient3.prototype.getEmailOpenClientUsage = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/opens/emailClients", filter, callback);
        };
        ServerClient3.prototype.getEmailOpenReadTimes = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/opens/readTimes", filter, callback);
        };
        ServerClient3.prototype.getClickCounts = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/clicks", filter, callback);
        };
        ServerClient3.prototype.getClickBrowserUsage = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/clicks/browserFamilies", filter, callback);
        };
        ServerClient3.prototype.getClickPlatformUsage = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/clicks/platforms", filter, callback);
        };
        ServerClient3.prototype.getClickLocation = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/clicks/location", filter, callback);
        };
        ServerClient3.prototype.createInboundRuleTrigger = function(options2, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/triggers/inboundRules", options2, callback);
        };
        ServerClient3.prototype.deleteInboundRuleTrigger = function(id, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.DELETE, "/triggers/inboundRules/".concat(id), {}, callback);
        };
        ServerClient3.prototype.getInboundRuleTriggers = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_1.FilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/triggers/inboundRules", filter, callback);
        };
        ServerClient3.prototype.getWebhooks = function(filter, callback) {
          if (filter === void 0) {
            filter = {};
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/webhooks", filter, callback);
        };
        ServerClient3.prototype.getWebhook = function(id, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/webhooks/".concat(id), {}, callback);
        };
        ServerClient3.prototype.createWebhook = function(options2, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/webhooks", options2, callback);
        };
        ServerClient3.prototype.editWebhook = function(id, options2, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.PUT, "/webhooks/".concat(id), options2, callback);
        };
        ServerClient3.prototype.deleteWebhook = function(id, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.DELETE, "/webhooks/".concat(id), {}, callback);
        };
        ServerClient3.prototype.getMessageStreams = function(filter, callback) {
          if (filter === void 0) {
            filter = {};
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/message-streams", filter, callback);
        };
        ServerClient3.prototype.getMessageStream = function(id, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/message-streams/".concat(id), {}, callback);
        };
        ServerClient3.prototype.editMessageStream = function(id, options2, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.PATCH, "/message-streams/".concat(id), options2, callback);
        };
        ServerClient3.prototype.createMessageStream = function(options2, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/message-streams", options2, callback);
        };
        ServerClient3.prototype.archiveMessageStream = function(id, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/message-streams/".concat(id, "/archive"), {}, callback);
        };
        ServerClient3.prototype.unarchiveMessageStream = function(id, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/message-streams/".concat(id, "/unarchive"), {}, callback);
        };
        ServerClient3.prototype.getSuppressions = function(messageStream, filter, callback) {
          if (filter === void 0) {
            filter = new index_2.SuppressionFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/message-streams/".concat(messageStream, "/suppressions/dump"), filter, callback);
        };
        ServerClient3.prototype.createSuppressions = function(messageStream, options2, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/message-streams/".concat(messageStream, "/suppressions"), options2, callback);
        };
        ServerClient3.prototype.deleteSuppressions = function(messageStream, options2, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/message-streams/".concat(messageStream, "/suppressions/delete"), options2, callback);
        };
        return ServerClient3;
      }(BaseClient_1.default)
    );
    exports.default = ServerClient2;
  }
});

// node_modules/postmark/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/postmark/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Header = exports.Attachment = exports.TemplatedMessage = exports.Message = exports.Errors = exports.Models = exports.AdminClient = exports.AccountClient = exports.Client = exports.ServerClient = void 0;
    var AccountClient_1 = require_AccountClient();
    exports.AccountClient = AccountClient_1.default;
    exports.AdminClient = AccountClient_1.default;
    var ServerClient_1 = require_ServerClient();
    exports.ServerClient = ServerClient_1.default;
    exports.Client = ServerClient_1.default;
    var Models = require_models();
    exports.Models = Models;
    var Errors = require_Errors();
    exports.Errors = Errors;
    var models_1 = require_models();
    Object.defineProperty(exports, "Message", { enumerable: true, get: function() {
      return models_1.Message;
    } });
    var models_2 = require_models();
    Object.defineProperty(exports, "TemplatedMessage", { enumerable: true, get: function() {
      return models_2.TemplatedMessage;
    } });
    var models_3 = require_models();
    Object.defineProperty(exports, "Attachment", { enumerable: true, get: function() {
      return models_3.Attachment;
    } });
    var models_4 = require_models();
    Object.defineProperty(exports, "Header", { enumerable: true, get: function() {
      return models_4.Header;
    } });
  }
});

// .svelte-kit/output/server/entries/endpoints/contact/_server.js
var server_exports2 = {};
__export(server_exports2, {
  GET: () => GET2,
  POST: () => POST2
});
async function GET2() {
  return new Response(null, { status: 200 });
}
async function POST2(event) {
  const body = await event.request.json();
  const { name, email, who, company, message } = body;
  const client2 = createClient3({
    accessToken: CONTENTFUL_MANAGEMENT_TOKEN
  });
  const space = await client2.getSpace(CONTENTFUL_SPACE_ID);
  const environment = await space.getEnvironment(CONTENTFUL_ENVIRONMENT);
  try {
    const entry = await environment.createEntry("contactFormEntry", {
      fields: {
        name: { "en-US": name },
        email: { "en-US": email },
        who: { "en-US": who },
        company: { "en-US": company },
        message: {
          "en-US": {
            "nodeType": "document",
            "content": [
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": message,
                    "marks": [],
                    "data": {}
                  }
                ],
                "data": {}
              }
            ],
            "data": {}
          }
        }
      }
    });
  } catch (error3) {
    console.error("Error saving data to Contentful:", error3);
    return new Response(JSON.stringify({ message: "Error saving data to Contentful" }), { status: 500 });
  }
  const postmarkClient = new import_postmark.ServerClient(POSTMARK_ACCESS_TOKEN);
  const emailContent = {
    "From": `"${email}"`,
    "To": "hello@paul.health",
    "Subject": `New contact form submission from ${name}`,
    "TextBody": `Name: ${name}
Email: ${email}
Who: ${who}
Company: ${company}
Message: ${message}`
  };
  try {
    await postmarkClient.sendEmail(emailContent);
    console.log("Email sent");
  } catch (error3) {
    console.error("Error sending email:", error3);
    return new Response(JSON.stringify({ message: "Error sending email" }), { status: 500 });
  }
  return new Response(JSON.stringify({
    message: "Form submitted successfully"
  }), {
    status: 200,
    headers: {
      "content-type": "application/json"
    }
  });
}
var import_postmark, import_contentful_management3, createClient3;
var init_server2 = __esm({
  ".svelte-kit/output/server/entries/endpoints/contact/_server.js"() {
    import_postmark = __toESM(require_dist2(), 1);
    import_contentful_management3 = __toESM(require_contentful_management_node(), 1);
    init_private();
    ({ createClient: createClient3 } = import_contentful_management3.default);
  }
});

// node_modules/regexparam/dist/regexparam.js
var require_regexparam = __commonJS({
  "node_modules/regexparam/dist/regexparam.js"(exports, module2) {
    module2.exports = function(str, loose) {
      if (str instanceof RegExp)
        return { keys: false, pattern: str };
      var c, o, tmp, ext, keys = [], pattern2 = "", arr = str.split("/");
      arr[0] || arr.shift();
      while (tmp = arr.shift()) {
        c = tmp[0];
        if (c === "*") {
          keys.push("wild");
          pattern2 += "/(.*)";
        } else if (c === ":") {
          o = tmp.indexOf("?", 1);
          ext = tmp.indexOf(".", 1);
          keys.push(tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length));
          pattern2 += !!~o && !~ext ? "(?:/([^/]+?))?" : "/([^/]+?)";
          if (!!~ext)
            pattern2 += (!!~o ? "?" : "") + "\\" + tmp.substring(ext);
        } else {
          pattern2 += "/" + tmp;
        }
      }
      return {
        keys,
        pattern: new RegExp("^" + pattern2 + (loose ? "(?=$|/)" : "/?$"), "i")
      };
    };
  }
});

// node_modules/trouter/index.js
var require_trouter = __commonJS({
  "node_modules/trouter/index.js"(exports, module2) {
    var parse5 = require_regexparam();
    var MAP = {
      "": 0,
      GET: 1,
      HEAD: 2,
      PATCH: 3,
      OPTIONS: 4,
      CONNECT: 5,
      DELETE: 6,
      TRACE: 7,
      POST: 8,
      PUT: 9
    };
    module2.exports = class Trouter {
      constructor() {
        this.routes = [];
        this.all = this.add.bind(this, "");
        this.get = this.add.bind(this, "GET");
        this.head = this.add.bind(this, "HEAD");
        this.patch = this.add.bind(this, "PATCH");
        this.options = this.add.bind(this, "OPTIONS");
        this.connect = this.add.bind(this, "CONNECT");
        this.delete = this.add.bind(this, "DELETE");
        this.trace = this.add.bind(this, "TRACE");
        this.post = this.add.bind(this, "POST");
        this.put = this.add.bind(this, "PUT");
      }
      use(route, ...fns) {
        let handlers = [].concat.apply([], fns);
        let { keys, pattern: pattern2 } = parse5(route, true);
        this.routes.push({ keys, pattern: pattern2, method: "", handlers, midx: MAP[""] });
        return this;
      }
      add(method, route, ...fns) {
        let { keys, pattern: pattern2 } = parse5(route);
        let handlers = [].concat.apply([], fns);
        this.routes.push({ keys, pattern: pattern2, method, handlers, midx: MAP[method] });
        return this;
      }
      find(method, url) {
        let midx = MAP[method];
        let isHEAD = midx === 2;
        let i = 0, j = 0, k, tmp, arr = this.routes;
        let matches = [], params = {}, handlers = [];
        for (; i < arr.length; i++) {
          tmp = arr[i];
          if (tmp.midx === midx || tmp.midx === 0 || isHEAD && tmp.midx === 1) {
            if (tmp.keys === false) {
              matches = tmp.pattern.exec(url);
              if (matches === null)
                continue;
              if (matches.groups !== void 0)
                for (k in matches.groups)
                  params[k] = matches.groups[k];
              tmp.handlers.length > 1 ? handlers = handlers.concat(tmp.handlers) : handlers.push(tmp.handlers[0]);
            } else if (tmp.keys.length > 0) {
              matches = tmp.pattern.exec(url);
              if (matches === null)
                continue;
              for (j = 0; j < tmp.keys.length; )
                params[tmp.keys[j]] = matches[++j];
              tmp.handlers.length > 1 ? handlers = handlers.concat(tmp.handlers) : handlers.push(tmp.handlers[0]);
            } else if (tmp.pattern.test(url)) {
              tmp.handlers.length > 1 ? handlers = handlers.concat(tmp.handlers) : handlers.push(tmp.handlers[0]);
            }
          }
        }
        return { params, handlers };
      }
    };
  }
});

// node_modules/totalist/sync/index.js
var require_sync = __commonJS({
  "node_modules/totalist/sync/index.js"(exports) {
    var { join, resolve: resolve2 } = require("path");
    var { readdirSync, statSync } = require("fs");
    function totalist(dir, callback, pre = "") {
      dir = resolve2(".", dir);
      let arr = readdirSync(dir);
      let i = 0, abs, stats;
      for (; i < arr.length; i++) {
        abs = join(dir, arr[i]);
        stats = statSync(abs);
        stats.isDirectory() ? totalist(abs, callback, join(pre, arr[i])) : callback(join(pre, arr[i]), abs, stats);
      }
    }
    exports.totalist = totalist;
  }
});

// node_modules/@polka/url/build.js
var require_build = __commonJS({
  "node_modules/@polka/url/build.js"(exports) {
    var qs2 = require("querystring");
    function parse5(req) {
      let raw = req.url;
      if (raw == null)
        return;
      let prev = req._parsedUrl;
      if (prev && prev.raw === raw)
        return prev;
      let pathname = raw, search = "", query5;
      if (raw.length > 1) {
        let idx = raw.indexOf("?", 1);
        if (idx !== -1) {
          search = raw.substring(idx);
          pathname = raw.substring(0, idx);
          if (search.length > 1) {
            query5 = qs2.parse(search.substring(1));
          }
        }
      }
      return req._parsedUrl = { pathname, search, query: query5, raw };
    }
    exports.parse = parse5;
  }
});

// node_modules/mrmime/index.js
var require_mrmime = __commonJS({
  "node_modules/mrmime/index.js"(exports) {
    var mimes = {
      "ez": "application/andrew-inset",
      "aw": "application/applixware",
      "atom": "application/atom+xml",
      "atomcat": "application/atomcat+xml",
      "atomdeleted": "application/atomdeleted+xml",
      "atomsvc": "application/atomsvc+xml",
      "dwd": "application/atsc-dwd+xml",
      "held": "application/atsc-held+xml",
      "rsat": "application/atsc-rsat+xml",
      "bdoc": "application/bdoc",
      "xcs": "application/calendar+xml",
      "ccxml": "application/ccxml+xml",
      "cdfx": "application/cdfx+xml",
      "cdmia": "application/cdmi-capability",
      "cdmic": "application/cdmi-container",
      "cdmid": "application/cdmi-domain",
      "cdmio": "application/cdmi-object",
      "cdmiq": "application/cdmi-queue",
      "cu": "application/cu-seeme",
      "mpd": "application/dash+xml",
      "davmount": "application/davmount+xml",
      "dbk": "application/docbook+xml",
      "dssc": "application/dssc+der",
      "xdssc": "application/dssc+xml",
      "es": "application/ecmascript",
      "ecma": "application/ecmascript",
      "emma": "application/emma+xml",
      "emotionml": "application/emotionml+xml",
      "epub": "application/epub+zip",
      "exi": "application/exi",
      "fdt": "application/fdt+xml",
      "pfr": "application/font-tdpfr",
      "geojson": "application/geo+json",
      "gml": "application/gml+xml",
      "gpx": "application/gpx+xml",
      "gxf": "application/gxf",
      "gz": "application/gzip",
      "hjson": "application/hjson",
      "stk": "application/hyperstudio",
      "ink": "application/inkml+xml",
      "inkml": "application/inkml+xml",
      "ipfix": "application/ipfix",
      "its": "application/its+xml",
      "jar": "application/java-archive",
      "war": "application/java-archive",
      "ear": "application/java-archive",
      "ser": "application/java-serialized-object",
      "class": "application/java-vm",
      "js": "application/javascript",
      "mjs": "application/javascript",
      "json": "application/json",
      "map": "application/json",
      "json5": "application/json5",
      "jsonml": "application/jsonml+json",
      "jsonld": "application/ld+json",
      "lgr": "application/lgr+xml",
      "lostxml": "application/lost+xml",
      "hqx": "application/mac-binhex40",
      "cpt": "application/mac-compactpro",
      "mads": "application/mads+xml",
      "webmanifest": "application/manifest+json",
      "mrc": "application/marc",
      "mrcx": "application/marcxml+xml",
      "ma": "application/mathematica",
      "nb": "application/mathematica",
      "mb": "application/mathematica",
      "mathml": "application/mathml+xml",
      "mbox": "application/mbox",
      "mscml": "application/mediaservercontrol+xml",
      "metalink": "application/metalink+xml",
      "meta4": "application/metalink4+xml",
      "mets": "application/mets+xml",
      "maei": "application/mmt-aei+xml",
      "musd": "application/mmt-usd+xml",
      "mods": "application/mods+xml",
      "m21": "application/mp21",
      "mp21": "application/mp21",
      "mp4s": "application/mp4",
      "m4p": "application/mp4",
      "doc": "application/msword",
      "dot": "application/msword",
      "mxf": "application/mxf",
      "nq": "application/n-quads",
      "nt": "application/n-triples",
      "cjs": "application/node",
      "bin": "application/octet-stream",
      "dms": "application/octet-stream",
      "lrf": "application/octet-stream",
      "mar": "application/octet-stream",
      "so": "application/octet-stream",
      "dist": "application/octet-stream",
      "distz": "application/octet-stream",
      "pkg": "application/octet-stream",
      "bpk": "application/octet-stream",
      "dump": "application/octet-stream",
      "elc": "application/octet-stream",
      "deploy": "application/octet-stream",
      "exe": "application/octet-stream",
      "dll": "application/octet-stream",
      "deb": "application/octet-stream",
      "dmg": "application/octet-stream",
      "iso": "application/octet-stream",
      "img": "application/octet-stream",
      "msi": "application/octet-stream",
      "msp": "application/octet-stream",
      "msm": "application/octet-stream",
      "buffer": "application/octet-stream",
      "oda": "application/oda",
      "opf": "application/oebps-package+xml",
      "ogx": "application/ogg",
      "omdoc": "application/omdoc+xml",
      "onetoc": "application/onenote",
      "onetoc2": "application/onenote",
      "onetmp": "application/onenote",
      "onepkg": "application/onenote",
      "oxps": "application/oxps",
      "relo": "application/p2p-overlay+xml",
      "xer": "application/patch-ops-error+xml",
      "pdf": "application/pdf",
      "pgp": "application/pgp-encrypted",
      "asc": "application/pgp-signature",
      "sig": "application/pgp-signature",
      "prf": "application/pics-rules",
      "p10": "application/pkcs10",
      "p7m": "application/pkcs7-mime",
      "p7c": "application/pkcs7-mime",
      "p7s": "application/pkcs7-signature",
      "p8": "application/pkcs8",
      "ac": "application/pkix-attr-cert",
      "cer": "application/pkix-cert",
      "crl": "application/pkix-crl",
      "pkipath": "application/pkix-pkipath",
      "pki": "application/pkixcmp",
      "pls": "application/pls+xml",
      "ai": "application/postscript",
      "eps": "application/postscript",
      "ps": "application/postscript",
      "provx": "application/provenance+xml",
      "cww": "application/prs.cww",
      "pskcxml": "application/pskc+xml",
      "raml": "application/raml+yaml",
      "rdf": "application/rdf+xml",
      "owl": "application/rdf+xml",
      "rif": "application/reginfo+xml",
      "rnc": "application/relax-ng-compact-syntax",
      "rl": "application/resource-lists+xml",
      "rld": "application/resource-lists-diff+xml",
      "rs": "application/rls-services+xml",
      "rapd": "application/route-apd+xml",
      "sls": "application/route-s-tsid+xml",
      "rusd": "application/route-usd+xml",
      "gbr": "application/rpki-ghostbusters",
      "mft": "application/rpki-manifest",
      "roa": "application/rpki-roa",
      "rsd": "application/rsd+xml",
      "rss": "application/rss+xml",
      "rtf": "application/rtf",
      "sbml": "application/sbml+xml",
      "scq": "application/scvp-cv-request",
      "scs": "application/scvp-cv-response",
      "spq": "application/scvp-vp-request",
      "spp": "application/scvp-vp-response",
      "sdp": "application/sdp",
      "senmlx": "application/senml+xml",
      "sensmlx": "application/sensml+xml",
      "setpay": "application/set-payment-initiation",
      "setreg": "application/set-registration-initiation",
      "shf": "application/shf+xml",
      "siv": "application/sieve",
      "sieve": "application/sieve",
      "smi": "application/smil+xml",
      "smil": "application/smil+xml",
      "rq": "application/sparql-query",
      "srx": "application/sparql-results+xml",
      "gram": "application/srgs",
      "grxml": "application/srgs+xml",
      "sru": "application/sru+xml",
      "ssdl": "application/ssdl+xml",
      "ssml": "application/ssml+xml",
      "swidtag": "application/swid+xml",
      "tei": "application/tei+xml",
      "teicorpus": "application/tei+xml",
      "tfi": "application/thraud+xml",
      "tsd": "application/timestamped-data",
      "toml": "application/toml",
      "trig": "application/trig",
      "ttml": "application/ttml+xml",
      "ubj": "application/ubjson",
      "rsheet": "application/urc-ressheet+xml",
      "td": "application/urc-targetdesc+xml",
      "vxml": "application/voicexml+xml",
      "wasm": "application/wasm",
      "wgt": "application/widget",
      "hlp": "application/winhlp",
      "wsdl": "application/wsdl+xml",
      "wspolicy": "application/wspolicy+xml",
      "xaml": "application/xaml+xml",
      "xav": "application/xcap-att+xml",
      "xca": "application/xcap-caps+xml",
      "xdf": "application/xcap-diff+xml",
      "xel": "application/xcap-el+xml",
      "xns": "application/xcap-ns+xml",
      "xenc": "application/xenc+xml",
      "xhtml": "application/xhtml+xml",
      "xht": "application/xhtml+xml",
      "xlf": "application/xliff+xml",
      "xml": "application/xml",
      "xsl": "application/xml",
      "xsd": "application/xml",
      "rng": "application/xml",
      "dtd": "application/xml-dtd",
      "xop": "application/xop+xml",
      "xpl": "application/xproc+xml",
      "xslt": "application/xml",
      "xspf": "application/xspf+xml",
      "mxml": "application/xv+xml",
      "xhvml": "application/xv+xml",
      "xvml": "application/xv+xml",
      "xvm": "application/xv+xml",
      "yang": "application/yang",
      "yin": "application/yin+xml",
      "zip": "application/zip",
      "3gpp": "video/3gpp",
      "adp": "audio/adpcm",
      "amr": "audio/amr",
      "au": "audio/basic",
      "snd": "audio/basic",
      "mid": "audio/midi",
      "midi": "audio/midi",
      "kar": "audio/midi",
      "rmi": "audio/midi",
      "mxmf": "audio/mobile-xmf",
      "mp3": "audio/mpeg",
      "m4a": "audio/mp4",
      "mp4a": "audio/mp4",
      "mpga": "audio/mpeg",
      "mp2": "audio/mpeg",
      "mp2a": "audio/mpeg",
      "m2a": "audio/mpeg",
      "m3a": "audio/mpeg",
      "oga": "audio/ogg",
      "ogg": "audio/ogg",
      "spx": "audio/ogg",
      "opus": "audio/ogg",
      "s3m": "audio/s3m",
      "sil": "audio/silk",
      "wav": "audio/wav",
      "weba": "audio/webm",
      "xm": "audio/xm",
      "ttc": "font/collection",
      "otf": "font/otf",
      "ttf": "font/ttf",
      "woff": "font/woff",
      "woff2": "font/woff2",
      "exr": "image/aces",
      "apng": "image/apng",
      "avif": "image/avif",
      "bmp": "image/bmp",
      "cgm": "image/cgm",
      "drle": "image/dicom-rle",
      "emf": "image/emf",
      "fits": "image/fits",
      "g3": "image/g3fax",
      "gif": "image/gif",
      "heic": "image/heic",
      "heics": "image/heic-sequence",
      "heif": "image/heif",
      "heifs": "image/heif-sequence",
      "hej2": "image/hej2k",
      "hsj2": "image/hsj2",
      "ief": "image/ief",
      "jls": "image/jls",
      "jp2": "image/jp2",
      "jpg2": "image/jp2",
      "jpeg": "image/jpeg",
      "jpg": "image/jpeg",
      "jpe": "image/jpeg",
      "jph": "image/jph",
      "jhc": "image/jphc",
      "jpm": "image/jpm",
      "jpx": "image/jpx",
      "jpf": "image/jpx",
      "jxr": "image/jxr",
      "jxra": "image/jxra",
      "jxrs": "image/jxrs",
      "jxs": "image/jxs",
      "jxsc": "image/jxsc",
      "jxsi": "image/jxsi",
      "jxss": "image/jxss",
      "ktx": "image/ktx",
      "ktx2": "image/ktx2",
      "png": "image/png",
      "btif": "image/prs.btif",
      "pti": "image/prs.pti",
      "sgi": "image/sgi",
      "svg": "image/svg+xml",
      "svgz": "image/svg+xml",
      "t38": "image/t38",
      "tif": "image/tiff",
      "tiff": "image/tiff",
      "tfx": "image/tiff-fx",
      "webp": "image/webp",
      "wmf": "image/wmf",
      "disposition-notification": "message/disposition-notification",
      "u8msg": "message/global",
      "u8dsn": "message/global-delivery-status",
      "u8mdn": "message/global-disposition-notification",
      "u8hdr": "message/global-headers",
      "eml": "message/rfc822",
      "mime": "message/rfc822",
      "3mf": "model/3mf",
      "gltf": "model/gltf+json",
      "glb": "model/gltf-binary",
      "igs": "model/iges",
      "iges": "model/iges",
      "msh": "model/mesh",
      "mesh": "model/mesh",
      "silo": "model/mesh",
      "mtl": "model/mtl",
      "obj": "model/obj",
      "stpz": "model/step+zip",
      "stpxz": "model/step-xml+zip",
      "stl": "model/stl",
      "wrl": "model/vrml",
      "vrml": "model/vrml",
      "x3db": "model/x3d+fastinfoset",
      "x3dbz": "model/x3d+binary",
      "x3dv": "model/x3d-vrml",
      "x3dvz": "model/x3d+vrml",
      "x3d": "model/x3d+xml",
      "x3dz": "model/x3d+xml",
      "appcache": "text/cache-manifest",
      "manifest": "text/cache-manifest",
      "ics": "text/calendar",
      "ifb": "text/calendar",
      "coffee": "text/coffeescript",
      "litcoffee": "text/coffeescript",
      "css": "text/css",
      "csv": "text/csv",
      "html": "text/html",
      "htm": "text/html",
      "shtml": "text/html",
      "jade": "text/jade",
      "jsx": "text/jsx",
      "less": "text/less",
      "markdown": "text/markdown",
      "md": "text/markdown",
      "mml": "text/mathml",
      "mdx": "text/mdx",
      "n3": "text/n3",
      "txt": "text/plain",
      "text": "text/plain",
      "conf": "text/plain",
      "def": "text/plain",
      "list": "text/plain",
      "log": "text/plain",
      "in": "text/plain",
      "ini": "text/plain",
      "dsc": "text/prs.lines.tag",
      "rtx": "text/richtext",
      "sgml": "text/sgml",
      "sgm": "text/sgml",
      "shex": "text/shex",
      "slim": "text/slim",
      "slm": "text/slim",
      "spdx": "text/spdx",
      "stylus": "text/stylus",
      "styl": "text/stylus",
      "tsv": "text/tab-separated-values",
      "t": "text/troff",
      "tr": "text/troff",
      "roff": "text/troff",
      "man": "text/troff",
      "me": "text/troff",
      "ms": "text/troff",
      "ttl": "text/turtle",
      "uri": "text/uri-list",
      "uris": "text/uri-list",
      "urls": "text/uri-list",
      "vcard": "text/vcard",
      "vtt": "text/vtt",
      "yaml": "text/yaml",
      "yml": "text/yaml",
      "3gp": "video/3gpp",
      "3g2": "video/3gpp2",
      "h261": "video/h261",
      "h263": "video/h263",
      "h264": "video/h264",
      "m4s": "video/iso.segment",
      "jpgv": "video/jpeg",
      "jpgm": "image/jpm",
      "mj2": "video/mj2",
      "mjp2": "video/mj2",
      "ts": "video/mp2t",
      "mp4": "video/mp4",
      "mp4v": "video/mp4",
      "mpg4": "video/mp4",
      "mpeg": "video/mpeg",
      "mpg": "video/mpeg",
      "mpe": "video/mpeg",
      "m1v": "video/mpeg",
      "m2v": "video/mpeg",
      "ogv": "video/ogg",
      "qt": "video/quicktime",
      "mov": "video/quicktime",
      "webm": "video/webm"
    };
    function lookup(extn) {
      let tmp = ("" + extn).trim().toLowerCase();
      let idx = tmp.lastIndexOf(".");
      return mimes[!~idx ? tmp : tmp.substring(++idx)];
    }
    exports.lookup = lookup;
    exports.mimes = mimes;
  }
});

// node_modules/sirv/build.js
var require_build2 = __commonJS({
  "node_modules/sirv/build.js"(exports, module2) {
    var fs = require("fs");
    var { join, normalize, resolve: resolve2 } = require("path");
    var { totalist } = require_sync();
    var { parse: parse5 } = require_build();
    var { lookup } = require_mrmime();
    var noop2 = () => {
    };
    function isMatch(uri, arr) {
      for (let i = 0; i < arr.length; i++) {
        if (arr[i].test(uri))
          return true;
      }
    }
    function toAssume(uri, extns) {
      let i = 0, x, len = uri.length - 1;
      if (uri.charCodeAt(len) === 47) {
        uri = uri.substring(0, len);
      }
      let arr = [], tmp = `${uri}/index`;
      for (; i < extns.length; i++) {
        x = extns[i] ? `.${extns[i]}` : "";
        if (uri)
          arr.push(uri + x);
        arr.push(tmp + x);
      }
      return arr;
    }
    function viaCache(cache, uri, extns) {
      let i = 0, data, arr = toAssume(uri, extns);
      for (; i < arr.length; i++) {
        if (data = cache[arr[i]])
          return data;
      }
    }
    function viaLocal(dir, isEtag, uri, extns) {
      let i = 0, arr = toAssume(uri, extns);
      let abs, stats, name, headers;
      for (; i < arr.length; i++) {
        abs = normalize(join(dir, name = arr[i]));
        if (abs.startsWith(dir) && fs.existsSync(abs)) {
          stats = fs.statSync(abs);
          if (stats.isDirectory())
            continue;
          headers = toHeaders(name, stats, isEtag);
          headers["Cache-Control"] = isEtag ? "no-cache" : "no-store";
          return { abs, stats, headers };
        }
      }
    }
    function is404(req, res) {
      return res.statusCode = 404, res.end();
    }
    function send(req, res, file, stats, headers) {
      let code = 200, tmp, opts = {};
      headers = { ...headers };
      for (let key2 in headers) {
        tmp = res.getHeader(key2);
        if (tmp)
          headers[key2] = tmp;
      }
      if (tmp = res.getHeader("content-type")) {
        headers["Content-Type"] = tmp;
      }
      if (req.headers.range) {
        code = 206;
        let [x, y] = req.headers.range.replace("bytes=", "").split("-");
        let end = opts.end = parseInt(y, 10) || stats.size - 1;
        let start = opts.start = parseInt(x, 10) || 0;
        if (end >= stats.size) {
          end = stats.size - 1;
        }
        if (start >= stats.size) {
          res.setHeader("Content-Range", `bytes */${stats.size}`);
          res.statusCode = 416;
          return res.end();
        }
        headers["Content-Range"] = `bytes ${start}-${end}/${stats.size}`;
        headers["Content-Length"] = end - start + 1;
        headers["Accept-Ranges"] = "bytes";
      }
      res.writeHead(code, headers);
      fs.createReadStream(file, opts).pipe(res);
    }
    var ENCODING = {
      ".br": "br",
      ".gz": "gzip"
    };
    function toHeaders(name, stats, isEtag) {
      let enc = ENCODING[name.slice(-3)];
      let ctype = lookup(name.slice(0, enc && -3)) || "";
      if (ctype === "text/html")
        ctype += ";charset=utf-8";
      let headers = {
        "Content-Length": stats.size,
        "Content-Type": ctype,
        "Last-Modified": stats.mtime.toUTCString()
      };
      if (enc)
        headers["Content-Encoding"] = enc;
      if (isEtag)
        headers["ETag"] = `W/"${stats.size}-${stats.mtime.getTime()}"`;
      return headers;
    }
    module2.exports = function(dir, opts = {}) {
      dir = resolve2(dir || ".");
      let isNotFound = opts.onNoMatch || is404;
      let setHeaders = opts.setHeaders || noop2;
      let extensions = opts.extensions || ["html", "htm"];
      let gzips = opts.gzip && extensions.map((x) => `${x}.gz`).concat("gz");
      let brots = opts.brotli && extensions.map((x) => `${x}.br`).concat("br");
      const FILES = {};
      let fallback = "/";
      let isEtag = !!opts.etag;
      let isSPA = !!opts.single;
      if (typeof opts.single === "string") {
        let idx = opts.single.lastIndexOf(".");
        fallback += !!~idx ? opts.single.substring(0, idx) : opts.single;
      }
      let ignores = [];
      if (opts.ignores !== false) {
        ignores.push(/[/]([A-Za-z\s\d~$._-]+\.\w+){1,}$/);
        if (opts.dotfiles)
          ignores.push(/\/\.\w/);
        else
          ignores.push(/\/\.well-known/);
        [].concat(opts.ignores || []).forEach((x) => {
          ignores.push(new RegExp(x, "i"));
        });
      }
      let cc = opts.maxAge != null && `public,max-age=${opts.maxAge}`;
      if (cc && opts.immutable)
        cc += ",immutable";
      else if (cc && opts.maxAge === 0)
        cc += ",must-revalidate";
      if (!opts.dev) {
        totalist(dir, (name, abs, stats) => {
          if (/\.well-known[\\+\/]/.test(name)) {
          } else if (!opts.dotfiles && /(^\.|[\\+|\/+]\.)/.test(name))
            return;
          let headers = toHeaders(name, stats, isEtag);
          if (cc)
            headers["Cache-Control"] = cc;
          FILES["/" + name.normalize().replace(/\\+/g, "/")] = { abs, stats, headers };
        });
      }
      let lookup2 = opts.dev ? viaLocal.bind(0, dir, isEtag) : viaCache.bind(0, FILES);
      return function(req, res, next) {
        let extns = [""];
        let pathname = parse5(req).pathname;
        let val = req.headers["accept-encoding"] || "";
        if (gzips && val.includes("gzip"))
          extns.unshift(...gzips);
        if (brots && /(br|brotli)/i.test(val))
          extns.unshift(...brots);
        extns.push(...extensions);
        if (pathname.indexOf("%") !== -1) {
          try {
            pathname = decodeURI(pathname);
          } catch (err) {
          }
        }
        let data = lookup2(pathname, extns) || isSPA && !isMatch(pathname, ignores) && lookup2(fallback, extns);
        if (!data)
          return next ? next() : isNotFound(req, res);
        if (isEtag && req.headers["if-none-match"] === data.headers["ETag"]) {
          res.writeHead(304);
          return res.end();
        }
        if (gzips || brots) {
          res.setHeader("Vary", "Accept-Encoding");
        }
        setHeaders(res, pathname, data.stats);
        send(req, res, data.abs, data.stats, data.headers);
      };
    };
  }
});

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse5;
    exports.serialize = serialize2;
    var __toString = Object.prototype.toString;
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse5(str, options2) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var opt = options2 || {};
      var dec = opt.decode || decode;
      var index13 = 0;
      while (index13 < str.length) {
        var eqIdx = str.indexOf("=", index13);
        if (eqIdx === -1) {
          break;
        }
        var endIdx = str.indexOf(";", index13);
        if (endIdx === -1) {
          endIdx = str.length;
        } else if (endIdx < eqIdx) {
          index13 = str.lastIndexOf(";", eqIdx - 1) + 1;
          continue;
        }
        var key2 = str.slice(index13, eqIdx).trim();
        if (void 0 === obj[key2]) {
          var val = str.slice(eqIdx + 1, endIdx).trim();
          if (val.charCodeAt(0) === 34) {
            val = val.slice(1, -1);
          }
          obj[key2] = tryDecode(val, dec);
        }
        index13 = endIdx + 1;
      }
      return obj;
    }
    function serialize2(name, val, options2) {
      var opt = options2 || {};
      var enc = opt.encode || encode2;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!fieldContentRegExp.test(name)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name + "=" + value;
      if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        var expires = opt.expires;
        if (!isDate(expires) || isNaN(expires.valueOf())) {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.priority) {
        var priority = typeof opt.priority === "string" ? opt.priority.toLowerCase() : opt.priority;
        switch (priority) {
          case "low":
            str += "; Priority=Low";
            break;
          case "medium":
            str += "; Priority=Medium";
            break;
          case "high":
            str += "; Priority=High";
            break;
          default:
            throw new TypeError("option priority is invalid");
        }
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function decode(str) {
      return str.indexOf("%") !== -1 ? decodeURIComponent(str) : str;
    }
    function encode2(val) {
      return encodeURIComponent(val);
    }
    function isDate(val) {
      return __toString.call(val) === "[object Date]" || val instanceof Date;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e) {
        return str;
      }
    }
  }
});

// .svelte-kit/svelte-adapter-appengine/entry.js
var import_node_path = __toESM(require("node:path"), 1);
var import_node_process = __toESM(require("node:process"), 1);

// node_modules/@sveltejs/kit/src/exports/node/polyfills.js
var import_web = require("node:stream/web");
var import_node_buffer = __toESM(require("node:buffer"), 1);
var import_node_crypto = require("node:crypto");
var import_undici = __toESM(require_undici(), 1);
var File = (
  /** @type {import('node:buffer') & { File?: File}} */
  import_node_buffer.default.File ?? import_undici.File
);
var globals_post_node_18_11 = {
  crypto: import_node_crypto.webcrypto,
  File
};
var globals_pre_node_18_11 = {
  crypto: import_node_crypto.webcrypto,
  fetch: import_undici.fetch,
  Response: import_undici.Response,
  Request: import_undici.Request,
  Headers: import_undici.Headers,
  ReadableStream: import_web.ReadableStream,
  TransformStream: import_web.TransformStream,
  WritableStream: import_web.WritableStream,
  FormData: import_undici.FormData,
  File
};
function installPolyfills() {
  let globals = globals_pre_node_18_11;
  try {
    const version = process.versions.node.split(".").map((n) => parseInt(n, 10));
    if (version[0] === 18 && version[1] >= 11 || version[0] > 18) {
      globals = globals_post_node_18_11;
    }
  } catch (e) {
  }
  for (const name in globals) {
    Object.defineProperty(globalThis, name, {
      enumerable: true,
      configurable: true,
      writable: true,
      value: globals[name]
    });
  }
}

// node_modules/@sveltejs/kit/src/exports/node/index.js
var set_cookie_parser = __toESM(require_set_cookie(), 1);

// node_modules/@sveltejs/kit/src/runtime/control.js
var HttpError = class {
  /**
   * @param {number} status
   * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body
   */
  constructor(status, body) {
    this.status = status;
    if (typeof body === "string") {
      this.body = { message: body };
    } else if (body) {
      this.body = body;
    } else {
      this.body = { message: `Error: ${status}` };
    }
  }
  toString() {
    return JSON.stringify(this.body);
  }
};

// node_modules/esm-env/prod-ssr.js
var BROWSER = false;
var DEV = false;

// node_modules/@sveltejs/kit/src/exports/index.js
function error(status, body) {
  if ((!BROWSER || DEV) && (isNaN(status) || status < 400 || status > 599)) {
    throw new Error(`HTTP error status codes must be between 400 and 599 \u2014 ${status} is invalid`);
  }
  return new HttpError(status, body);
}
var encoder = new TextEncoder();

// node_modules/@sveltejs/kit/src/exports/node/index.js
function get_raw_body(req, body_size_limit) {
  const h = req.headers;
  if (!h["content-type"]) {
    return null;
  }
  const content_length = Number(h["content-length"]);
  if (req.httpVersionMajor === 1 && isNaN(content_length) && h["transfer-encoding"] == null || content_length === 0) {
    return null;
  }
  let length = content_length;
  if (body_size_limit) {
    if (!length) {
      length = body_size_limit;
    } else if (length > body_size_limit) {
      throw error(
        413,
        `Received content-length of ${length}, but only accept up to ${body_size_limit} bytes.`
      );
    }
  }
  if (req.destroyed) {
    const readable2 = new ReadableStream();
    readable2.cancel();
    return readable2;
  }
  let size = 0;
  let cancelled = false;
  return new ReadableStream({
    start(controller) {
      req.on("error", (error3) => {
        cancelled = true;
        controller.error(error3);
      });
      req.on("end", () => {
        if (cancelled)
          return;
        controller.close();
      });
      req.on("data", (chunk) => {
        if (cancelled)
          return;
        size += chunk.length;
        if (size > length) {
          cancelled = true;
          controller.error(
            error(
              413,
              `request body size exceeded ${content_length ? "'content-length'" : "BODY_SIZE_LIMIT"} of ${length}`
            )
          );
          return;
        }
        controller.enqueue(chunk);
        if (controller.desiredSize === null || controller.desiredSize <= 0) {
          req.pause();
        }
      });
    },
    pull() {
      req.resume();
    },
    cancel(reason) {
      cancelled = true;
      req.destroy(reason);
    }
  });
}
async function getRequest({ request, base: base2, bodySizeLimit }) {
  return new Request(base2 + request.url, {
    // @ts-expect-error
    duplex: "half",
    method: request.method,
    headers: (
      /** @type {Record<string, string>} */
      request.headers
    ),
    body: get_raw_body(request, bodySizeLimit)
  });
}
async function setResponse(res, response) {
  for (const [key2, value] of response.headers) {
    try {
      res.setHeader(
        key2,
        key2 === "set-cookie" ? set_cookie_parser.splitCookiesString(
          // This is absurd but necessary, TODO: investigate why
          /** @type {string}*/
          response.headers.get(key2)
        ) : value
      );
    } catch (error3) {
      res.getHeaderNames().forEach((name) => res.removeHeader(name));
      res.writeHead(500).end(String(error3));
      return;
    }
  }
  res.writeHead(response.status);
  if (!response.body) {
    res.end();
    return;
  }
  if (response.body.locked) {
    res.end(
      "Fatal error: Response body is locked. This can happen when the response was already read (for example through 'response.json()' or 'response.text()')."
    );
    return;
  }
  const reader = response.body.getReader();
  if (res.destroyed) {
    reader.cancel();
    return;
  }
  const cancel = (error3) => {
    res.off("close", cancel);
    res.off("error", cancel);
    reader.cancel(error3).catch(() => {
    });
    if (error3)
      res.destroy(error3);
  };
  res.on("close", cancel);
  res.on("error", cancel);
  next();
  async function next() {
    try {
      for (; ; ) {
        const { done, value } = await reader.read();
        if (done)
          break;
        if (!res.write(value)) {
          res.once("drain", next);
          return;
        }
      }
      res.end();
    } catch (error3) {
      cancel(error3 instanceof Error ? error3 : new Error(String(error3)));
    }
  }
}

// .svelte-kit/svelte-adapter-appengine/manifest.js
var manifest = (() => {
  function __memo(fn) {
    let value;
    return () => value ??= value = fn();
  }
  return {
    appDir: "_app",
    appPath: "_app",
    assets: /* @__PURE__ */ new Set(["astronaut.svg", "earth.svg", "favicon.png", "moon.svg", "overlay_stars.svg", "playIconBackground.png", "pluto_logo.svg", "pluto_logoDark.svg", "rocket.svg"]),
    mimeTypes: { ".svg": "image/svg+xml", ".png": "image/png" },
    _: {
      client: { "start": "_app/immutable/entry/start.4ba39ed7.js", "app": "_app/immutable/entry/app.5dc19dbb.js", "imports": ["_app/immutable/entry/start.4ba39ed7.js", "_app/immutable/chunks/index.5190b064.js", "_app/immutable/chunks/singletons.0e91b02d.js", "_app/immutable/chunks/paths.85fe2585.js", "_app/immutable/entry/app.5dc19dbb.js", "_app/immutable/chunks/index.5190b064.js"], "stylesheets": [], "fonts": [] },
      nodes: [
        __memo(() => Promise.resolve().then(() => (init__(), __exports))),
        __memo(() => Promise.resolve().then(() => (init__2(), __exports2))),
        __memo(() => Promise.resolve().then(() => (init__3(), __exports3))),
        __memo(() => Promise.resolve().then(() => (init__4(), __exports4))),
        __memo(() => Promise.resolve().then(() => (init__5(), __exports5))),
        __memo(() => Promise.resolve().then(() => (init__6(), __exports6))),
        __memo(() => Promise.resolve().then(() => (init__7(), __exports7))),
        __memo(() => Promise.resolve().then(() => (init__8(), __exports8))),
        __memo(() => Promise.resolve().then(() => (init__9(), __exports9))),
        __memo(() => Promise.resolve().then(() => (init__10(), __exports10))),
        __memo(() => Promise.resolve().then(() => (init__11(), __exports11))),
        __memo(() => Promise.resolve().then(() => (init__12(), __exports12)))
      ],
      routes: [
        {
          id: "/",
          pattern: /^\/$/,
          params: [],
          page: { layouts: [0], errors: [1], leaf: 2 },
          endpoint: null
        },
        {
          id: "/about",
          pattern: /^\/about\/?$/,
          params: [],
          page: { layouts: [0], errors: [1], leaf: 3 },
          endpoint: null
        },
        {
          id: "/api/subscribe",
          pattern: /^\/api\/subscribe\/?$/,
          params: [],
          page: null,
          endpoint: __memo(() => Promise.resolve().then(() => (init_server(), server_exports)))
        },
        {
          id: "/contact",
          pattern: /^\/contact\/?$/,
          params: [],
          page: { layouts: [0], errors: [1], leaf: 4 },
          endpoint: __memo(() => Promise.resolve().then(() => (init_server2(), server_exports2)))
        },
        {
          id: "/home",
          pattern: /^\/home\/?$/,
          params: [],
          page: { layouts: [0], errors: [1], leaf: 5 },
          endpoint: null
        },
        {
          id: "/how-it-works",
          pattern: /^\/how-it-works\/?$/,
          params: [],
          page: { layouts: [0], errors: [1], leaf: 6 },
          endpoint: null
        },
        {
          id: "/legal",
          pattern: /^\/legal\/?$/,
          params: [],
          page: { layouts: [0], errors: [1], leaf: 7 },
          endpoint: null
        },
        {
          id: "/news",
          pattern: /^\/news\/?$/,
          params: [],
          page: { layouts: [0], errors: [1], leaf: 8 },
          endpoint: null
        },
        {
          id: "/news/all",
          pattern: /^\/news\/all\/?$/,
          params: [],
          page: { layouts: [0], errors: [1], leaf: 10 },
          endpoint: null
        },
        {
          id: "/news/[slug]",
          pattern: /^\/news\/([^/]+?)\/?$/,
          params: [{ "name": "slug", "optional": false, "rest": false, "chained": false }],
          page: { layouts: [0], errors: [1], leaf: 9 },
          endpoint: null
        },
        {
          id: "/services/[slug]",
          pattern: /^\/services\/([^/]+?)\/?$/,
          params: [{ "name": "slug", "optional": false, "rest": false, "chained": false }],
          page: { layouts: [0], errors: [1], leaf: 11 },
          endpoint: null
        }
      ],
      matchers: async () => {
        return {};
      }
    }
  };
})();

// node_modules/polka/build.mjs
var import_http = __toESM(require("http"), 1);
var import_trouter = __toESM(require_trouter(), 1);

// node_modules/@polka/url/build.mjs
var qs = __toESM(require("querystring"), 1);
function parse3(req) {
  let raw = req.url;
  if (raw == null)
    return;
  let prev = req._parsedUrl;
  if (prev && prev.raw === raw)
    return prev;
  let pathname = raw, search = "", query5;
  if (raw.length > 1) {
    let idx = raw.indexOf("?", 1);
    if (idx !== -1) {
      search = raw.substring(idx);
      pathname = raw.substring(0, idx);
      if (search.length > 1) {
        query5 = qs.parse(search.substring(1));
      }
    }
  }
  return req._parsedUrl = { pathname, search, query: query5, raw };
}

// node_modules/polka/build.mjs
function onError(err, req, res) {
  let code = typeof err.status === "number" && err.status;
  code = res.statusCode = code && code >= 100 ? code : 500;
  if (typeof err === "string" || Buffer.isBuffer(err))
    res.end(err);
  else
    res.end(err.message || import_http.default.STATUS_CODES[code]);
}
var mount = (fn) => fn instanceof Polka ? fn.attach : fn;
var Polka = class extends import_trouter.default {
  constructor(opts = {}) {
    super();
    this.parse = parse3;
    this.server = opts.server;
    this.handler = this.handler.bind(this);
    this.onError = opts.onError || onError;
    this.onNoMatch = opts.onNoMatch || this.onError.bind(null, { status: 404 });
    this.attach = (req, res) => setImmediate(this.handler, req, res);
  }
  use(base2, ...fns) {
    if (base2 === "/") {
      super.use(base2, fns.map(mount));
    } else if (typeof base2 === "function" || base2 instanceof Polka) {
      super.use("/", [base2, ...fns].map(mount));
    } else {
      super.use(
        base2,
        (req, _, next) => {
          if (typeof base2 === "string") {
            let len = base2.length;
            base2.startsWith("/") || len++;
            req.url = req.url.substring(len) || "/";
            req.path = req.path.substring(len) || "/";
          } else {
            req.url = req.url.replace(base2, "") || "/";
            req.path = req.path.replace(base2, "") || "/";
          }
          if (req.url.charAt(0) !== "/") {
            req.url = "/" + req.url;
          }
          next();
        },
        fns.map(mount),
        (req, _, next) => {
          req.path = req._parsedUrl.pathname;
          req.url = req.path + req._parsedUrl.search;
          next();
        }
      );
    }
    return this;
  }
  listen() {
    (this.server = this.server || import_http.default.createServer()).on("request", this.attach);
    this.server.listen.apply(this.server, arguments);
    return this;
  }
  handler(req, res, next) {
    let info = this.parse(req), path2 = info.pathname;
    let obj = this.find(req.method, req.path = path2);
    req.url = path2 + info.search;
    req.originalUrl = req.originalUrl || req.url;
    req.query = info.query || {};
    req.search = info.search;
    req.params = obj.params;
    if (path2.length > 1 && path2.indexOf("%", 1) !== -1) {
      for (let k in req.params) {
        try {
          req.params[k] = decodeURIComponent(req.params[k]);
        } catch (e) {
        }
      }
    }
    let i = 0, arr = obj.handlers.concat(this.onNoMatch), len = arr.length;
    let loop = async () => res.finished || i < len && arr[i++](req, res, next);
    (next = next || ((err) => err ? this.onError(err, req, res, next) : loop().catch(next)))();
  }
};
function build_default(opts) {
  return new Polka(opts);
}

// .svelte-kit/svelte-adapter-appengine/entry.js
var import_sirv = __toESM(require_build2(), 1);

// .svelte-kit/output/server/chunks/internal.js
init_index3();
var base = "";
var assets = base;
var initial = { base, assets };
function reset() {
  base = initial.base;
  assets = initial.assets;
}
var public_env = {};
function set_private_env(environment) {
}
function set_public_env(environment) {
  public_env = environment;
}
function afterUpdate() {
}
var Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { stores } = $$props;
  let { page: page2 } = $$props;
  let { constructors } = $$props;
  let { components = [] } = $$props;
  let { form } = $$props;
  let { data_0 = null } = $$props;
  let { data_1 = null } = $$props;
  {
    setContext("__svelte__", stores);
  }
  afterUpdate(stores.page.notify);
  if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
    $$bindings.stores(stores);
  if ($$props.page === void 0 && $$bindings.page && page2 !== void 0)
    $$bindings.page(page2);
  if ($$props.constructors === void 0 && $$bindings.constructors && constructors !== void 0)
    $$bindings.constructors(constructors);
  if ($$props.components === void 0 && $$bindings.components && components !== void 0)
    $$bindings.components(components);
  if ($$props.form === void 0 && $$bindings.form && form !== void 0)
    $$bindings.form(form);
  if ($$props.data_0 === void 0 && $$bindings.data_0 && data_0 !== void 0)
    $$bindings.data_0(data_0);
  if ($$props.data_1 === void 0 && $$bindings.data_1 && data_1 !== void 0)
    $$bindings.data_1(data_1);
  let $$settled;
  let $$rendered;
  do {
    $$settled = true;
    {
      stores.page.set(page2);
    }
    $$rendered = `



${constructors[1] ? `${validate_component(constructors[0] || missing_component, "svelte:component").$$render(
      $$result,
      { data: data_0, this: components[0] },
      {
        this: ($$value) => {
          components[0] = $$value;
          $$settled = false;
        }
      },
      {
        default: () => {
          return `${validate_component(constructors[1] || missing_component, "svelte:component").$$render(
            $$result,
            { data: data_1, form, this: components[1] },
            {
              this: ($$value) => {
                components[1] = $$value;
                $$settled = false;
              }
            },
            {}
          )}`;
        }
      }
    )}` : `${validate_component(constructors[0] || missing_component, "svelte:component").$$render(
      $$result,
      { data: data_0, form, this: components[0] },
      {
        this: ($$value) => {
          components[0] = $$value;
          $$settled = false;
        }
      },
      {}
    )}`}

${``}`;
  } while (!$$settled);
  return $$rendered;
});
var options = {
  app_template_contains_nonce: false,
  csp: { "mode": "auto", "directives": { "upgrade-insecure-requests": false, "block-all-mixed-content": false }, "reportOnly": { "upgrade-insecure-requests": false, "block-all-mixed-content": false } },
  csrf_check_origin: true,
  track_server_fetches: false,
  embedded: false,
  env_public_prefix: "PUBLIC_",
  env_private_prefix: "",
  hooks: null,
  // added lazily, via `get_hooks`
  preload_strategy: "modulepreload",
  root: Root,
  service_worker: false,
  templates: {
    app: ({ head, body, assets: assets2, nonce, env }) => '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="icon" href="https://cdn.assets.pluto-service.com/img/favicon-16x16-3.png" />\n    <link href="https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css" rel="stylesheet" />\n    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    ' + head + "\n  </head>\n  <body>\n    <div>" + body + "</div>\n  </body>\n</html>\n",
    error: ({ status, message }) => '<!doctype html>\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<title>' + message + `</title>

		<style>
			body {
				--bg: white;
				--fg: #222;
				--divider: #ccc;
				background: var(--bg);
				color: var(--fg);
				font-family:
					system-ui,
					-apple-system,
					BlinkMacSystemFont,
					'Segoe UI',
					Roboto,
					Oxygen,
					Ubuntu,
					Cantarell,
					'Open Sans',
					'Helvetica Neue',
					sans-serif;
				display: flex;
				align-items: center;
				justify-content: center;
				height: 100vh;
				margin: 0;
			}

			.error {
				display: flex;
				align-items: center;
				max-width: 32rem;
				margin: 0 1rem;
			}

			.status {
				font-weight: 200;
				font-size: 3rem;
				line-height: 1;
				position: relative;
				top: -0.05rem;
			}

			.message {
				border-left: 1px solid var(--divider);
				padding: 0 0 0 1rem;
				margin: 0 0 0 1rem;
				min-height: 2.5rem;
				display: flex;
				align-items: center;
			}

			.message h1 {
				font-weight: 400;
				font-size: 1em;
				margin: 0;
			}

			@media (prefers-color-scheme: dark) {
				body {
					--bg: #222;
					--fg: #ddd;
					--divider: #666;
				}
			}
		</style>
	</head>
	<body>
		<div class="error">
			<span class="status">` + status + '</span>\n			<div class="message">\n				<h1>' + message + "</h1>\n			</div>\n		</div>\n	</body>\n</html>\n"
  },
  version_hash: "cc7lqp"
};
function get_hooks() {
  return {};
}

// .svelte-kit/output/server/index.js
init_chunks();
init_devalue();
init_index2();
var import_cookie = __toESM(require_cookie(), 1);
var set_cookie_parser2 = __toESM(require_set_cookie(), 1);
var DEV2 = false;
var SVELTE_KIT_ASSETS = "/_svelte_kit_assets";
var ENDPOINT_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "HEAD"];
var PAGE_METHODS = ["GET", "POST", "HEAD"];
function negotiate(accept, types) {
  const parts = [];
  accept.split(",").forEach((str, i) => {
    const match = /([^/]+)\/([^;]+)(?:;q=([0-9.]+))?/.exec(str);
    if (match) {
      const [, type, subtype, q = "1"] = match;
      parts.push({ type, subtype, q: +q, i });
    }
  });
  parts.sort((a, b) => {
    if (a.q !== b.q) {
      return b.q - a.q;
    }
    if (a.subtype === "*" !== (b.subtype === "*")) {
      return a.subtype === "*" ? 1 : -1;
    }
    if (a.type === "*" !== (b.type === "*")) {
      return a.type === "*" ? 1 : -1;
    }
    return a.i - b.i;
  });
  let accepted;
  let min_priority = Infinity;
  for (const mimetype of types) {
    const [type, subtype] = mimetype.split("/");
    const priority = parts.findIndex(
      (part) => (part.type === type || part.type === "*") && (part.subtype === subtype || part.subtype === "*")
    );
    if (priority !== -1 && priority < min_priority) {
      accepted = mimetype;
      min_priority = priority;
    }
  }
  return accepted;
}
function is_content_type(request, ...types) {
  var _a;
  const type = ((_a = request.headers.get("content-type")) == null ? void 0 : _a.split(";", 1)[0].trim()) ?? "";
  return types.includes(type.toLowerCase());
}
function is_form_content_type(request) {
  return is_content_type(
    request,
    "application/x-www-form-urlencoded",
    "multipart/form-data",
    "text/plain"
  );
}
function exec(match, params, matchers) {
  const result = {};
  const values = match.slice(1);
  const values_needing_match = values.filter((value) => value !== void 0);
  let buffered = 0;
  for (let i = 0; i < params.length; i += 1) {
    const param = params[i];
    let value = values[i - buffered];
    if (param.chained && param.rest && buffered) {
      value = values.slice(i - buffered, i + 1).filter((s2) => s2).join("/");
      buffered = 0;
    }
    if (value === void 0) {
      if (param.rest)
        result[param.name] = "";
      continue;
    }
    if (!param.matcher || matchers[param.matcher](value)) {
      result[param.name] = value;
      const next_param = params[i + 1];
      const next_value = values[i + 1];
      if (next_param && !next_param.rest && next_param.optional && next_value && param.chained) {
        buffered = 0;
      }
      if (!next_param && !next_value && Object.keys(result).length === values_needing_match.length) {
        buffered = 0;
      }
      continue;
    }
    if (param.optional && param.chained) {
      buffered++;
      continue;
    }
    return;
  }
  if (buffered)
    return;
  return result;
}
function coalesce_to_error(err) {
  return err instanceof Error || err && /** @type {any} */
  err.name && /** @type {any} */
  err.message ? (
    /** @type {Error} */
    err
  ) : new Error(JSON.stringify(err));
}
function normalize_error(error22) {
  return (
    /** @type {import('../runtime/control.js').Redirect | import('../runtime/control.js').HttpError | Error} */
    error22
  );
}
function method_not_allowed(mod, method) {
  return text(`${method} method not allowed`, {
    status: 405,
    headers: {
      // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405
      // "The server must generate an Allow header field in a 405 status code response"
      allow: allowed_methods(mod).join(", ")
    }
  });
}
function allowed_methods(mod) {
  const allowed = ENDPOINT_METHODS.filter((method) => method in mod);
  if ("GET" in mod || "HEAD" in mod)
    allowed.push("HEAD");
  return allowed;
}
function static_error_page(options2, status, message) {
  let page2 = options2.templates.error({ status, message });
  return text(page2, {
    headers: { "content-type": "text/html; charset=utf-8" },
    status
  });
}
async function handle_fatal_error(event, options2, error22) {
  error22 = error22 instanceof HttpError2 ? error22 : coalesce_to_error(error22);
  const status = error22 instanceof HttpError2 ? error22.status : 500;
  const body = await handle_error_and_jsonify(event, options2, error22);
  const type = negotiate(event.request.headers.get("accept") || "text/html", [
    "application/json",
    "text/html"
  ]);
  if (event.isDataRequest || type === "application/json") {
    return json(body, {
      status
    });
  }
  return static_error_page(options2, status, body.message);
}
async function handle_error_and_jsonify(event, options2, error22) {
  if (error22 instanceof HttpError2) {
    return error22.body;
  }
  return await options2.hooks.handleError({ error: error22, event }) ?? {
    message: event.route.id === null && error22 instanceof NotFound ? "Not Found" : "Internal Error"
  };
}
function redirect_response(status, location) {
  const response = new Response(void 0, {
    status,
    headers: { location }
  });
  return response;
}
function clarify_devalue_error(event, error22) {
  if (error22.path) {
    return `Data returned from \`load\` while rendering ${event.route.id} is not serializable: ${error22.message} (data${error22.path})`;
  }
  if (error22.path === "") {
    return `Data returned from \`load\` while rendering ${event.route.id} is not a plain object`;
  }
  return error22.message;
}
function stringify_uses(node) {
  var _a, _b, _c;
  const uses = [];
  if (node.uses && node.uses.dependencies.size > 0) {
    uses.push(`"dependencies":${JSON.stringify(Array.from(node.uses.dependencies))}`);
  }
  if (node.uses && node.uses.params.size > 0) {
    uses.push(`"params":${JSON.stringify(Array.from(node.uses.params))}`);
  }
  if ((_a = node.uses) == null ? void 0 : _a.parent)
    uses.push('"parent":1');
  if ((_b = node.uses) == null ? void 0 : _b.route)
    uses.push('"route":1');
  if ((_c = node.uses) == null ? void 0 : _c.url)
    uses.push('"url":1');
  return `"uses":{${uses.join(",")}}`;
}
function warn_with_callsite(message, offset = 0) {
  console.warn(message);
}
async function render_endpoint(event, mod, state) {
  const method = (
    /** @type {import('types').HttpMethod} */
    event.request.method
  );
  let handler = mod[method] || mod.fallback;
  if (method === "HEAD" && mod.GET && !mod.HEAD) {
    handler = mod.GET;
  }
  if (!handler) {
    return method_not_allowed(mod, method);
  }
  const prerender = mod.prerender ?? state.prerender_default;
  if (prerender && (mod.POST || mod.PATCH || mod.PUT || mod.DELETE)) {
    throw new Error("Cannot prerender endpoints that have mutative methods");
  }
  if (state.prerendering && !prerender) {
    if (state.depth > 0) {
      throw new Error(`${event.route.id} is not prerenderable`);
    } else {
      return new Response(void 0, { status: 204 });
    }
  }
  try {
    let response = await handler(
      /** @type {import('@sveltejs/kit').RequestEvent<Record<string, any>>} */
      event
    );
    if (!(response instanceof Response)) {
      throw new Error(
        `Invalid response from route ${event.url.pathname}: handler should return a Response object`
      );
    }
    if (state.prerendering) {
      response = new Response(response.body, {
        status: response.status,
        statusText: response.statusText,
        headers: new Headers(response.headers)
      });
      response.headers.set("x-sveltekit-prerender", String(prerender));
    }
    return response;
  } catch (e) {
    if (e instanceof Redirect2) {
      return new Response(void 0, {
        status: e.status,
        headers: { location: e.location }
      });
    }
    throw e;
  }
}
function is_endpoint_request(event) {
  const { method, headers } = event.request;
  if (ENDPOINT_METHODS.includes(method) && !PAGE_METHODS.includes(method)) {
    return true;
  }
  if (method === "POST" && headers.get("x-sveltekit-action") === "true")
    return false;
  const accept = event.request.headers.get("accept") ?? "*/*";
  return negotiate(accept, ["*", "text/html"]) !== "text/html";
}
function compact(arr) {
  return arr.filter(
    /** @returns {val is NonNullable<T>} */
    (val) => val != null
  );
}
var SCHEME = /^[a-z][a-z\d+\-.]+:/i;
var absolute = /^([a-z]+:)?\/?\//;
function resolve(base2, path2) {
  if (SCHEME.test(path2))
    return path2;
  if (path2[0] === "#")
    return base2 + path2;
  const base_match = absolute.exec(base2);
  const path_match = absolute.exec(path2);
  if (!base_match) {
    throw new Error(`bad base path: "${base2}"`);
  }
  const baseparts = path_match ? [] : base2.slice(base_match[0].length).split("/");
  const pathparts = path_match ? path2.slice(path_match[0].length).split("/") : path2.split("/");
  baseparts.pop();
  for (let i = 0; i < pathparts.length; i += 1) {
    const part = pathparts[i];
    if (part === ".")
      continue;
    else if (part === "..")
      baseparts.pop();
    else
      baseparts.push(part);
  }
  const prefix = path_match && path_match[0] || base_match && base_match[0] || "";
  return `${prefix}${baseparts.join("/")}`;
}
function normalize_path(path2, trailing_slash) {
  if (path2 === "/" || trailing_slash === "ignore")
    return path2;
  if (trailing_slash === "never") {
    return path2.endsWith("/") ? path2.slice(0, -1) : path2;
  } else if (trailing_slash === "always" && !path2.endsWith("/")) {
    return path2 + "/";
  }
  return path2;
}
function decode_pathname(pathname) {
  return pathname.split("%25").map(decodeURI).join("%25");
}
function decode_params(params) {
  for (const key2 in params) {
    params[key2] = decodeURIComponent(params[key2]);
  }
  return params;
}
var tracked_url_properties = (
  /** @type {const} */
  [
    "href",
    "pathname",
    "search",
    "searchParams",
    "toString",
    "toJSON"
  ]
);
function make_trackable(url, callback) {
  const tracked = new URL(url);
  for (const property of tracked_url_properties) {
    Object.defineProperty(tracked, property, {
      get() {
        callback();
        return url[property];
      },
      enumerable: true,
      configurable: true
    });
  }
  {
    tracked[Symbol.for("nodejs.util.inspect.custom")] = (depth, opts, inspect) => {
      return inspect(url, opts);
    };
  }
  disable_hash(tracked);
  return tracked;
}
function disable_hash(url) {
  allow_nodejs_console_log(url);
  Object.defineProperty(url, "hash", {
    get() {
      throw new Error(
        "Cannot access event.url.hash. Consider using `$page.url.hash` inside a component instead"
      );
    }
  });
}
function disable_search(url) {
  allow_nodejs_console_log(url);
  for (const property of ["search", "searchParams"]) {
    Object.defineProperty(url, property, {
      get() {
        throw new Error(`Cannot access url.${property} on a page with prerendering enabled`);
      }
    });
  }
}
function allow_nodejs_console_log(url) {
  {
    url[Symbol.for("nodejs.util.inspect.custom")] = (depth, opts, inspect) => {
      return inspect(new URL(url), opts);
    };
  }
}
var DATA_SUFFIX = "/__data.json";
function has_data_suffix(pathname) {
  return pathname.endsWith(DATA_SUFFIX);
}
function add_data_suffix(pathname) {
  return pathname.replace(/\/$/, "") + DATA_SUFFIX;
}
function strip_data_suffix(pathname) {
  return pathname.slice(0, -DATA_SUFFIX.length);
}
function is_action_json_request(event) {
  const accept = negotiate(event.request.headers.get("accept") ?? "*/*", [
    "application/json",
    "text/html"
  ]);
  return accept === "application/json" && event.request.method === "POST";
}
async function handle_action_json_request(event, options2, server2) {
  const actions = server2 == null ? void 0 : server2.actions;
  if (!actions) {
    const no_actions_error = error2(405, "POST method not allowed. No actions exist for this page");
    return action_json(
      {
        type: "error",
        error: await handle_error_and_jsonify(event, options2, no_actions_error)
      },
      {
        status: no_actions_error.status,
        headers: {
          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405
          // "The server must generate an Allow header field in a 405 status code response"
          allow: "GET"
        }
      }
    );
  }
  check_named_default_separate(actions);
  try {
    const data = await call_action(event, actions);
    if (false)
      ;
    if (data instanceof ActionFailure2) {
      return action_json({
        type: "failure",
        status: data.status,
        // @ts-expect-error we assign a string to what is supposed to be an object. That's ok
        // because we don't use the object outside, and this way we have better code navigation
        // through knowing where the related interface is used.
        data: stringify_action_response(
          data.data,
          /** @type {string} */
          event.route.id
        )
      });
    } else {
      return action_json({
        type: "success",
        status: data ? 200 : 204,
        // @ts-expect-error see comment above
        data: stringify_action_response(
          data,
          /** @type {string} */
          event.route.id
        )
      });
    }
  } catch (e) {
    const err = normalize_error(e);
    if (err instanceof Redirect2) {
      return action_json_redirect(err);
    }
    return action_json(
      {
        type: "error",
        error: await handle_error_and_jsonify(event, options2, check_incorrect_fail_use(err))
      },
      {
        status: err instanceof HttpError2 ? err.status : 500
      }
    );
  }
}
function check_incorrect_fail_use(error22) {
  return error22 instanceof ActionFailure2 ? new Error('Cannot "throw fail()". Use "return fail()"') : error22;
}
function action_json_redirect(redirect) {
  return action_json({
    type: "redirect",
    status: redirect.status,
    location: redirect.location
  });
}
function action_json(data, init2) {
  return json(data, init2);
}
function is_action_request(event) {
  return event.request.method === "POST";
}
async function handle_action_request(event, server2) {
  const actions = server2 == null ? void 0 : server2.actions;
  if (!actions) {
    event.setHeaders({
      // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405
      // "The server must generate an Allow header field in a 405 status code response"
      allow: "GET"
    });
    return {
      type: "error",
      error: error2(405, "POST method not allowed. No actions exist for this page")
    };
  }
  check_named_default_separate(actions);
  try {
    const data = await call_action(event, actions);
    if (false)
      ;
    if (data instanceof ActionFailure2) {
      return {
        type: "failure",
        status: data.status,
        data: data.data
      };
    } else {
      return {
        type: "success",
        status: 200,
        // @ts-expect-error this will be removed upon serialization, so `undefined` is the same as omission
        data
      };
    }
  } catch (e) {
    const err = normalize_error(e);
    if (err instanceof Redirect2) {
      return {
        type: "redirect",
        status: err.status,
        location: err.location
      };
    }
    return {
      type: "error",
      error: check_incorrect_fail_use(err)
    };
  }
}
function check_named_default_separate(actions) {
  if (actions.default && Object.keys(actions).length > 1) {
    throw new Error(
      "When using named actions, the default action cannot be used. See the docs for more info: https://kit.svelte.dev/docs/form-actions#named-actions"
    );
  }
}
async function call_action(event, actions) {
  const url = new URL(event.request.url);
  let name = "default";
  for (const param of url.searchParams) {
    if (param[0].startsWith("/")) {
      name = param[0].slice(1);
      if (name === "default") {
        throw new Error('Cannot use reserved action name "default"');
      }
      break;
    }
  }
  const action = actions[name];
  if (!action) {
    throw new Error(`No action with name '${name}' found`);
  }
  if (!is_form_content_type(event.request)) {
    throw new Error(
      `Actions expect form-encoded data (received ${event.request.headers.get("content-type")})`
    );
  }
  return action(event);
}
function uneval_action_response(data, route_id) {
  return try_deserialize(data, uneval, route_id);
}
function stringify_action_response(data, route_id) {
  return try_deserialize(data, stringify, route_id);
}
function try_deserialize(data, fn, route_id) {
  try {
    return fn(data);
  } catch (e) {
    const error22 = (
      /** @type {any} */
      e
    );
    if ("path" in error22) {
      let message = `Data returned from action inside ${route_id} is not serializable: ${error22.message}`;
      if (error22.path !== "")
        message += ` (data.${error22.path})`;
      throw new Error(message);
    }
    throw error22;
  }
}
async function unwrap_promises(object, id) {
  var _a;
  for (const key2 in object) {
    if (typeof ((_a = object[key2]) == null ? void 0 : _a.then) === "function") {
      return Object.fromEntries(
        await Promise.all(Object.entries(object).map(async ([key3, value]) => [key3, await value]))
      );
    }
  }
  return object;
}
var INVALIDATED_PARAM = "x-sveltekit-invalidated";
var TRAILING_SLASH_PARAM = "x-sveltekit-trailing-slash";
async function load_server_data({
  event,
  state,
  node,
  parent,
  // TODO 2.0: Remove this
  track_server_fetches
}) {
  var _a;
  if (!(node == null ? void 0 : node.server))
    return null;
  const uses = {
    dependencies: /* @__PURE__ */ new Set(),
    params: /* @__PURE__ */ new Set(),
    parent: false,
    route: false,
    url: false
  };
  const url = make_trackable(event.url, () => {
    uses.url = true;
  });
  if (state.prerendering) {
    disable_search(url);
  }
  const result = await ((_a = node.server.load) == null ? void 0 : _a.call(null, {
    ...event,
    fetch: (info, init2) => {
      const url2 = new URL(info instanceof Request ? info.url : info, event.url);
      if (track_server_fetches) {
        uses.dependencies.add(url2.href);
      }
      return event.fetch(info, init2);
    },
    /** @param {string[]} deps */
    depends: (...deps) => {
      for (const dep of deps) {
        const { href } = new URL(dep, event.url);
        uses.dependencies.add(href);
      }
    },
    params: new Proxy(event.params, {
      get: (target, key2) => {
        uses.params.add(key2);
        return target[
          /** @type {string} */
          key2
        ];
      }
    }),
    parent: async () => {
      uses.parent = true;
      return parent();
    },
    route: new Proxy(event.route, {
      get: (target, key2) => {
        uses.route = true;
        return target[
          /** @type {'id'} */
          key2
        ];
      }
    }),
    url
  }));
  const data = result ? await unwrap_promises(result, node.server_id) : null;
  return {
    type: "data",
    data,
    uses,
    slash: node.server.trailingSlash
  };
}
async function load_data({
  event,
  fetched,
  node,
  parent,
  server_data_promise,
  state,
  resolve_opts,
  csr
}) {
  var _a;
  const server_data_node = await server_data_promise;
  if (!((_a = node == null ? void 0 : node.universal) == null ? void 0 : _a.load)) {
    return (server_data_node == null ? void 0 : server_data_node.data) ?? null;
  }
  const result = await node.universal.load.call(null, {
    url: event.url,
    params: event.params,
    data: (server_data_node == null ? void 0 : server_data_node.data) ?? null,
    route: event.route,
    fetch: create_universal_fetch(event, state, fetched, csr, resolve_opts),
    setHeaders: event.setHeaders,
    depends: () => {
    },
    parent
  });
  const data = result ? await unwrap_promises(result, node.universal_id) : null;
  return data;
}
function b64_encode(buffer2) {
  if (globalThis.Buffer) {
    return Buffer.from(buffer2).toString("base64");
  }
  const little_endian = new Uint8Array(new Uint16Array([1]).buffer)[0] > 0;
  return btoa(
    new TextDecoder(little_endian ? "utf-16le" : "utf-16be").decode(
      new Uint16Array(new Uint8Array(buffer2))
    )
  );
}
function create_universal_fetch(event, state, fetched, csr, resolve_opts) {
  const universal_fetch = async (input, init2) => {
    const cloned_body = input instanceof Request && input.body ? input.clone().body : null;
    const cloned_headers = input instanceof Request && [...input.headers].length ? new Headers(input.headers) : init2 == null ? void 0 : init2.headers;
    let response = await event.fetch(input, init2);
    const url = new URL(input instanceof Request ? input.url : input, event.url);
    const same_origin = url.origin === event.url.origin;
    let dependency;
    if (same_origin) {
      if (state.prerendering) {
        dependency = { response, body: null };
        state.prerendering.dependencies.set(url.pathname, dependency);
      }
    } else {
      const mode = input instanceof Request ? input.mode : (init2 == null ? void 0 : init2.mode) ?? "cors";
      if (mode === "no-cors") {
        response = new Response("", {
          status: response.status,
          statusText: response.statusText,
          headers: response.headers
        });
      } else {
        const acao = response.headers.get("access-control-allow-origin");
        if (!acao || acao !== event.url.origin && acao !== "*") {
          throw new Error(
            `CORS error: ${acao ? "Incorrect" : "No"} 'Access-Control-Allow-Origin' header is present on the requested resource`
          );
        }
      }
    }
    const proxy = new Proxy(response, {
      get(response2, key2, _receiver) {
        async function push_fetched(body, is_b64) {
          const status_number = Number(response2.status);
          if (isNaN(status_number)) {
            throw new Error(
              `response.status is not a number. value: "${response2.status}" type: ${typeof response2.status}`
            );
          }
          fetched.push({
            url: same_origin ? url.href.slice(event.url.origin.length) : url.href,
            method: event.request.method,
            request_body: (
              /** @type {string | ArrayBufferView | undefined} */
              input instanceof Request && cloned_body ? await stream_to_string(cloned_body) : init2 == null ? void 0 : init2.body
            ),
            request_headers: cloned_headers,
            response_body: body,
            response: response2,
            is_b64
          });
        }
        if (key2 === "arrayBuffer") {
          return async () => {
            const buffer2 = await response2.arrayBuffer();
            if (dependency) {
              dependency.body = new Uint8Array(buffer2);
            }
            if (buffer2 instanceof ArrayBuffer) {
              await push_fetched(b64_encode(buffer2), true);
            }
            return buffer2;
          };
        }
        async function text2() {
          const body = await response2.text();
          if (!body || typeof body === "string") {
            await push_fetched(body, false);
          }
          if (dependency) {
            dependency.body = body;
          }
          return body;
        }
        if (key2 === "text") {
          return text2;
        }
        if (key2 === "json") {
          return async () => {
            return JSON.parse(await text2());
          };
        }
        return Reflect.get(response2, key2, response2);
      }
    });
    if (csr) {
      const get3 = response.headers.get;
      response.headers.get = (key2) => {
        const lower = key2.toLowerCase();
        const value = get3.call(response.headers, lower);
        if (value && !lower.startsWith("x-sveltekit-")) {
          const included = resolve_opts.filterSerializedResponseHeaders(lower, value);
          if (!included) {
            throw new Error(
              `Failed to get response header "${lower}" \u2014 it must be included by the \`filterSerializedResponseHeaders\` option: https://kit.svelte.dev/docs/hooks#server-hooks-handle (at ${event.route.id})`
            );
          }
        }
        return value;
      };
    }
    return proxy;
  };
  return (input, init2) => {
    const response = universal_fetch(input, init2);
    response.catch(() => {
    });
    return response;
  };
}
async function stream_to_string(stream) {
  let result = "";
  const reader = stream.getReader();
  const decoder = new TextDecoder();
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      break;
    }
    result += decoder.decode(value);
  }
  return result;
}
function hash(...values) {
  let hash2 = 5381;
  for (const value of values) {
    if (typeof value === "string") {
      let i = value.length;
      while (i)
        hash2 = hash2 * 33 ^ value.charCodeAt(--i);
    } else if (ArrayBuffer.isView(value)) {
      const buffer2 = new Uint8Array(value.buffer, value.byteOffset, value.byteLength);
      let i = buffer2.length;
      while (i)
        hash2 = hash2 * 33 ^ buffer2[--i];
    } else {
      throw new TypeError("value must be a string or TypedArray");
    }
  }
  return (hash2 >>> 0).toString(36);
}
var escape_html_attr_dict = {
  "&": "&amp;",
  '"': "&quot;"
};
var escape_html_attr_regex = new RegExp(
  // special characters
  `[${Object.keys(escape_html_attr_dict).join("")}]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\udc00-\\udfff]`,
  "g"
);
function escape_html_attr(str) {
  const escaped_str = str.replace(escape_html_attr_regex, (match) => {
    if (match.length === 2) {
      return match;
    }
    return escape_html_attr_dict[match] ?? `&#${match.charCodeAt(0)};`;
  });
  return `"${escaped_str}"`;
}
var replacements = {
  "<": "\\u003C",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
var pattern = new RegExp(`[${Object.keys(replacements).join("")}]`, "g");
function serialize_data(fetched, filter, prerendering = false) {
  const headers = {};
  let cache_control = null;
  let age = null;
  let varyAny = false;
  for (const [key2, value] of fetched.response.headers) {
    if (filter(key2, value)) {
      headers[key2] = value;
    }
    if (key2 === "cache-control")
      cache_control = value;
    else if (key2 === "age")
      age = value;
    else if (key2 === "vary" && value.trim() === "*")
      varyAny = true;
  }
  const payload = {
    status: fetched.response.status,
    statusText: fetched.response.statusText,
    headers,
    body: fetched.response_body
  };
  const safe_payload = JSON.stringify(payload).replace(pattern, (match) => replacements[match]);
  const attrs = [
    'type="application/json"',
    "data-sveltekit-fetched",
    `data-url=${escape_html_attr(fetched.url)}`
  ];
  if (fetched.is_b64) {
    attrs.push("data-b64");
  }
  if (fetched.request_headers || fetched.request_body) {
    const values = [];
    if (fetched.request_headers) {
      values.push([...new Headers(fetched.request_headers)].join(","));
    }
    if (fetched.request_body) {
      values.push(fetched.request_body);
    }
    attrs.push(`data-hash="${hash(...values)}"`);
  }
  if (!prerendering && fetched.method === "GET" && cache_control && !varyAny) {
    const match = /s-maxage=(\d+)/g.exec(cache_control) ?? /max-age=(\d+)/g.exec(cache_control);
    if (match) {
      const ttl = +match[1] - +(age ?? "0");
      attrs.push(`data-ttl="${ttl}"`);
    }
  }
  return `<script ${attrs.join(" ")}>${safe_payload}</script>`;
}
var s = JSON.stringify;
var encoder$2 = new TextEncoder();
function sha256(data) {
  if (!key[0])
    precompute();
  const out = init.slice(0);
  const array2 = encode(data);
  for (let i = 0; i < array2.length; i += 16) {
    const w = array2.subarray(i, i + 16);
    let tmp;
    let a;
    let b;
    let out0 = out[0];
    let out1 = out[1];
    let out2 = out[2];
    let out3 = out[3];
    let out4 = out[4];
    let out5 = out[5];
    let out6 = out[6];
    let out7 = out[7];
    for (let i2 = 0; i2 < 64; i2++) {
      if (i2 < 16) {
        tmp = w[i2];
      } else {
        a = w[i2 + 1 & 15];
        b = w[i2 + 14 & 15];
        tmp = w[i2 & 15] = (a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i2 & 15] + w[i2 + 9 & 15] | 0;
      }
      tmp = tmp + out7 + (out4 >>> 6 ^ out4 >>> 11 ^ out4 >>> 25 ^ out4 << 26 ^ out4 << 21 ^ out4 << 7) + (out6 ^ out4 & (out5 ^ out6)) + key[i2];
      out7 = out6;
      out6 = out5;
      out5 = out4;
      out4 = out3 + tmp | 0;
      out3 = out2;
      out2 = out1;
      out1 = out0;
      out0 = tmp + (out1 & out2 ^ out3 & (out1 ^ out2)) + (out1 >>> 2 ^ out1 >>> 13 ^ out1 >>> 22 ^ out1 << 30 ^ out1 << 19 ^ out1 << 10) | 0;
    }
    out[0] = out[0] + out0 | 0;
    out[1] = out[1] + out1 | 0;
    out[2] = out[2] + out2 | 0;
    out[3] = out[3] + out3 | 0;
    out[4] = out[4] + out4 | 0;
    out[5] = out[5] + out5 | 0;
    out[6] = out[6] + out6 | 0;
    out[7] = out[7] + out7 | 0;
  }
  const bytes = new Uint8Array(out.buffer);
  reverse_endianness(bytes);
  return base64(bytes);
}
var init = new Uint32Array(8);
var key = new Uint32Array(64);
function precompute() {
  function frac(x) {
    return (x - Math.floor(x)) * 4294967296;
  }
  let prime = 2;
  for (let i = 0; i < 64; prime++) {
    let is_prime = true;
    for (let factor = 2; factor * factor <= prime; factor++) {
      if (prime % factor === 0) {
        is_prime = false;
        break;
      }
    }
    if (is_prime) {
      if (i < 8) {
        init[i] = frac(prime ** (1 / 2));
      }
      key[i] = frac(prime ** (1 / 3));
      i++;
    }
  }
}
function reverse_endianness(bytes) {
  for (let i = 0; i < bytes.length; i += 4) {
    const a = bytes[i + 0];
    const b = bytes[i + 1];
    const c = bytes[i + 2];
    const d = bytes[i + 3];
    bytes[i + 0] = d;
    bytes[i + 1] = c;
    bytes[i + 2] = b;
    bytes[i + 3] = a;
  }
}
function encode(str) {
  const encoded = encoder$2.encode(str);
  const length = encoded.length * 8;
  const size = 512 * Math.ceil((length + 65) / 512);
  const bytes = new Uint8Array(size / 8);
  bytes.set(encoded);
  bytes[encoded.length] = 128;
  reverse_endianness(bytes);
  const words = new Uint32Array(bytes.buffer);
  words[words.length - 2] = Math.floor(length / 4294967296);
  words[words.length - 1] = length;
  return words;
}
var chars2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
function base64(bytes) {
  const l = bytes.length;
  let result = "";
  let i;
  for (i = 2; i < l; i += 3) {
    result += chars2[bytes[i - 2] >> 2];
    result += chars2[(bytes[i - 2] & 3) << 4 | bytes[i - 1] >> 4];
    result += chars2[(bytes[i - 1] & 15) << 2 | bytes[i] >> 6];
    result += chars2[bytes[i] & 63];
  }
  if (i === l + 1) {
    result += chars2[bytes[i - 2] >> 2];
    result += chars2[(bytes[i - 2] & 3) << 4];
    result += "==";
  }
  if (i === l) {
    result += chars2[bytes[i - 2] >> 2];
    result += chars2[(bytes[i - 2] & 3) << 4 | bytes[i - 1] >> 4];
    result += chars2[(bytes[i - 1] & 15) << 2];
    result += "=";
  }
  return result;
}
var array = new Uint8Array(16);
function generate_nonce() {
  crypto.getRandomValues(array);
  return base64(array);
}
var quoted = /* @__PURE__ */ new Set([
  "self",
  "unsafe-eval",
  "unsafe-hashes",
  "unsafe-inline",
  "none",
  "strict-dynamic",
  "report-sample",
  "wasm-unsafe-eval",
  "script"
]);
var crypto_pattern = /^(nonce|sha\d\d\d)-/;
var BaseProvider = class {
  /** @type {boolean} */
  #use_hashes;
  /** @type {boolean} */
  #script_needs_csp;
  /** @type {boolean} */
  #style_needs_csp;
  /** @type {import('types').CspDirectives} */
  #directives;
  /** @type {import('types').Csp.Source[]} */
  #script_src;
  /** @type {import('types').Csp.Source[]} */
  #style_src;
  /** @type {string} */
  #nonce;
  /**
   * @param {boolean} use_hashes
   * @param {import('types').CspDirectives} directives
   * @param {string} nonce
   */
  constructor(use_hashes, directives, nonce) {
    this.#use_hashes = use_hashes;
    this.#directives = directives;
    const d = this.#directives;
    this.#script_src = [];
    this.#style_src = [];
    const effective_script_src = d["script-src"] || d["default-src"];
    const effective_style_src = d["style-src"] || d["default-src"];
    this.#script_needs_csp = !!effective_script_src && effective_script_src.filter((value) => value !== "unsafe-inline").length > 0;
    this.#style_needs_csp = !!effective_style_src && effective_style_src.filter((value) => value !== "unsafe-inline").length > 0;
    this.script_needs_nonce = this.#script_needs_csp && !this.#use_hashes;
    this.style_needs_nonce = this.#style_needs_csp && !this.#use_hashes;
    this.#nonce = nonce;
  }
  /** @param {string} content */
  add_script(content) {
    if (this.#script_needs_csp) {
      if (this.#use_hashes) {
        this.#script_src.push(`sha256-${sha256(content)}`);
      } else if (this.#script_src.length === 0) {
        this.#script_src.push(`nonce-${this.#nonce}`);
      }
    }
  }
  /** @param {string} content */
  add_style(content) {
    if (this.#style_needs_csp) {
      if (this.#use_hashes) {
        this.#style_src.push(`sha256-${sha256(content)}`);
      } else if (this.#style_src.length === 0) {
        this.#style_src.push(`nonce-${this.#nonce}`);
      }
    }
  }
  /**
   * @param {boolean} [is_meta]
   */
  get_header(is_meta = false) {
    const header = [];
    const directives = { ...this.#directives };
    if (this.#style_src.length > 0) {
      directives["style-src"] = [
        ...directives["style-src"] || directives["default-src"] || [],
        ...this.#style_src
      ];
    }
    if (this.#script_src.length > 0) {
      directives["script-src"] = [
        ...directives["script-src"] || directives["default-src"] || [],
        ...this.#script_src
      ];
    }
    for (const key2 in directives) {
      if (is_meta && (key2 === "frame-ancestors" || key2 === "report-uri" || key2 === "sandbox")) {
        continue;
      }
      const value = (
        /** @type {string[] | true} */
        directives[key2]
      );
      if (!value)
        continue;
      const directive = [key2];
      if (Array.isArray(value)) {
        value.forEach((value2) => {
          if (quoted.has(value2) || crypto_pattern.test(value2)) {
            directive.push(`'${value2}'`);
          } else {
            directive.push(value2);
          }
        });
      }
      header.push(directive.join(" "));
    }
    return header.join("; ");
  }
};
var CspProvider = class extends BaseProvider {
  get_meta() {
    const content = this.get_header(true);
    if (!content) {
      return;
    }
    return `<meta http-equiv="content-security-policy" content=${escape_html_attr(content)}>`;
  }
};
var CspReportOnlyProvider = class extends BaseProvider {
  /**
   * @param {boolean} use_hashes
   * @param {import('types').CspDirectives} directives
   * @param {string} nonce
   */
  constructor(use_hashes, directives, nonce) {
    var _a, _b;
    super(use_hashes, directives, nonce);
    if (Object.values(directives).filter((v) => !!v).length > 0) {
      const has_report_to = ((_a = directives["report-to"]) == null ? void 0 : _a.length) ?? 0 > 0;
      const has_report_uri = ((_b = directives["report-uri"]) == null ? void 0 : _b.length) ?? 0 > 0;
      if (!has_report_to && !has_report_uri) {
        throw Error(
          "`content-security-policy-report-only` must be specified with either the `report-to` or `report-uri` directives, or both"
        );
      }
    }
  }
};
var Csp = class {
  /** @readonly */
  nonce = generate_nonce();
  /** @type {CspProvider} */
  csp_provider;
  /** @type {CspReportOnlyProvider} */
  report_only_provider;
  /**
   * @param {import('./types.js').CspConfig} config
   * @param {import('./types.js').CspOpts} opts
   */
  constructor({ mode, directives, reportOnly }, { prerender }) {
    const use_hashes = mode === "hash" || mode === "auto" && prerender;
    this.csp_provider = new CspProvider(use_hashes, directives, this.nonce);
    this.report_only_provider = new CspReportOnlyProvider(use_hashes, reportOnly, this.nonce);
  }
  get script_needs_nonce() {
    return this.csp_provider.script_needs_nonce || this.report_only_provider.script_needs_nonce;
  }
  get style_needs_nonce() {
    return this.csp_provider.style_needs_nonce || this.report_only_provider.style_needs_nonce;
  }
  /** @param {string} content */
  add_script(content) {
    this.csp_provider.add_script(content);
    this.report_only_provider.add_script(content);
  }
  /** @param {string} content */
  add_style(content) {
    this.csp_provider.add_style(content);
    this.report_only_provider.add_style(content);
  }
};
function defer() {
  let fulfil;
  let reject;
  const promise = new Promise((f, r) => {
    fulfil = f;
    reject = r;
  });
  return { promise, fulfil, reject };
}
function create_async_iterator() {
  const deferred = [defer()];
  return {
    iterator: {
      [Symbol.asyncIterator]() {
        return {
          next: async () => {
            const next = await deferred[0].promise;
            if (!next.done)
              deferred.shift();
            return next;
          }
        };
      }
    },
    push: (value) => {
      deferred[deferred.length - 1].fulfil({
        value,
        done: false
      });
      deferred.push(defer());
    },
    done: () => {
      deferred[deferred.length - 1].fulfil({ done: true });
    }
  };
}
var updated = {
  ...readable(false),
  check: () => false
};
var encoder$1 = new TextEncoder();
async function render_response({
  branch,
  fetched,
  options: options2,
  manifest: manifest2,
  state,
  page_config,
  status,
  error: error22 = null,
  event,
  resolve_opts,
  action_result
}) {
  var _a;
  if (state.prerendering) {
    if (options2.csp.mode === "nonce") {
      throw new Error('Cannot use prerendering if config.kit.csp.mode === "nonce"');
    }
    if (options2.app_template_contains_nonce) {
      throw new Error("Cannot use prerendering if page template contains %sveltekit.nonce%");
    }
  }
  const { client: client2 } = manifest2._;
  const modulepreloads = new Set(client2.imports);
  const stylesheets13 = new Set(client2.stylesheets);
  const fonts13 = new Set(client2.fonts);
  const link_header_preloads = /* @__PURE__ */ new Set();
  const inline_styles = /* @__PURE__ */ new Map();
  let rendered;
  const form_value = (action_result == null ? void 0 : action_result.type) === "success" || (action_result == null ? void 0 : action_result.type) === "failure" ? action_result.data ?? null : null;
  let base$1 = base;
  let assets$1 = assets;
  let base_expression = s(base);
  if (!((_a = state.prerendering) == null ? void 0 : _a.fallback)) {
    const segments = event.url.pathname.slice(base.length).split("/").slice(2);
    base$1 = segments.map(() => "..").join("/") || ".";
    base_expression = `new URL(${s(base$1)}, location).pathname.slice(0, -1)`;
    if (!assets || assets[0] === "/" && assets !== SVELTE_KIT_ASSETS) {
      assets$1 = base$1;
    }
  }
  if (page_config.ssr) {
    const props = {
      stores: {
        page: writable(null),
        navigating: writable(null),
        updated
      },
      constructors: await Promise.all(branch.map(({ node }) => node.component())),
      form: form_value
    };
    let data2 = {};
    for (let i = 0; i < branch.length; i += 1) {
      data2 = { ...data2, ...branch[i].data };
      props[`data_${i}`] = data2;
    }
    props.page = {
      error: error22,
      params: (
        /** @type {Record<string, any>} */
        event.params
      ),
      route: event.route,
      status,
      url: event.url,
      data: data2,
      form: form_value
    };
    {
      try {
        rendered = options2.root.render(props);
      } finally {
        reset();
      }
    }
    for (const { node } of branch) {
      for (const url of node.imports)
        modulepreloads.add(url);
      for (const url of node.stylesheets)
        stylesheets13.add(url);
      for (const url of node.fonts)
        fonts13.add(url);
      if (node.inline_styles) {
        Object.entries(await node.inline_styles()).forEach(([k, v]) => inline_styles.set(k, v));
      }
    }
  } else {
    rendered = { head: "", html: "", css: { code: "", map: null } };
  }
  let head = "";
  let body = rendered.html;
  const csp = new Csp(options2.csp, {
    prerender: !!state.prerendering
  });
  const prefixed = (path2) => {
    if (path2.startsWith("/")) {
      return base + path2;
    }
    return `${assets$1}/${path2}`;
  };
  if (inline_styles.size > 0) {
    const content = Array.from(inline_styles.values()).join("\n");
    const attributes = [];
    if (csp.style_needs_nonce)
      attributes.push(` nonce="${csp.nonce}"`);
    csp.add_style(content);
    head += `
	<style${attributes.join("")}>${content}</style>`;
  }
  for (const dep of stylesheets13) {
    const path2 = prefixed(dep);
    const attributes = ['rel="stylesheet"'];
    if (inline_styles.has(dep)) {
      attributes.push("disabled", 'media="(max-width: 0)"');
    } else {
      if (resolve_opts.preload({ type: "css", path: path2 })) {
        const preload_atts = ['rel="preload"', 'as="style"'];
        link_header_preloads.add(`<${encodeURI(path2)}>; ${preload_atts.join(";")}; nopush`);
      }
    }
    head += `
		<link href="${path2}" ${attributes.join(" ")}>`;
  }
  for (const dep of fonts13) {
    const path2 = prefixed(dep);
    if (resolve_opts.preload({ type: "font", path: path2 })) {
      const ext = dep.slice(dep.lastIndexOf(".") + 1);
      const attributes = [
        'rel="preload"',
        'as="font"',
        `type="font/${ext}"`,
        `href="${path2}"`,
        "crossorigin"
      ];
      head += `
		<link ${attributes.join(" ")}>`;
    }
  }
  const global2 = `__sveltekit_${options2.version_hash}`;
  const { data, chunks } = get_data(
    event,
    options2,
    branch.map((b) => b.server_data),
    global2
  );
  if (page_config.ssr && page_config.csr) {
    body += `
			${fetched.map(
      (item) => serialize_data(item, resolve_opts.filterSerializedResponseHeaders, !!state.prerendering)
    ).join("\n			")}`;
  }
  if (page_config.csr) {
    const included_modulepreloads = Array.from(modulepreloads, (dep) => prefixed(dep)).filter(
      (path2) => resolve_opts.preload({ type: "js", path: path2 })
    );
    for (const path2 of included_modulepreloads) {
      link_header_preloads.add(`<${encodeURI(path2)}>; rel="modulepreload"; nopush`);
      if (options2.preload_strategy !== "modulepreload") {
        head += `
		<link rel="preload" as="script" crossorigin="anonymous" href="${path2}">`;
      } else if (state.prerendering) {
        head += `
		<link rel="modulepreload" href="${path2}">`;
      }
    }
    const blocks = [];
    const properties = [
      assets && `assets: ${s(assets)}`,
      `base: ${base_expression}`,
      `env: ${s(public_env)}`
    ].filter(Boolean);
    if (chunks) {
      blocks.push("const deferred = new Map();");
      properties.push(`defer: (id) => new Promise((fulfil, reject) => {
							deferred.set(id, { fulfil, reject });
						})`);
      properties.push(`resolve: ({ id, data, error }) => {
							const { fulfil, reject } = deferred.get(id);
							deferred.delete(id);

							if (error) reject(error);
							else fulfil(data);
						}`);
    }
    blocks.push(`${global2} = {
						${properties.join(",\n						")}
					};`);
    const args = ["app", "element"];
    blocks.push("const element = document.currentScript.parentElement;");
    if (page_config.ssr) {
      const serialized = { form: "null", error: "null" };
      blocks.push(`const data = ${data};`);
      if (form_value) {
        serialized.form = uneval_action_response(
          form_value,
          /** @type {string} */
          event.route.id
        );
      }
      if (error22) {
        serialized.error = uneval(error22);
      }
      const hydrate = [
        `node_ids: [${branch.map(({ node }) => node.index).join(", ")}]`,
        "data",
        `form: ${serialized.form}`,
        `error: ${serialized.error}`
      ];
      if (status !== 200) {
        hydrate.push(`status: ${status}`);
      }
      if (options2.embedded) {
        hydrate.push(`params: ${uneval(event.params)}`, `route: ${s(event.route)}`);
      }
      args.push(`{
							${hydrate.join(",\n							")}
						}`);
    }
    blocks.push(`Promise.all([
						import(${s(prefixed(client2.start))}),
						import(${s(prefixed(client2.app))})
					]).then(([kit, app]) => {
						kit.start(${args.join(", ")});
					});`);
    if (options2.service_worker) {
      const opts = "";
      blocks.push(`if ('serviceWorker' in navigator) {
						addEventListener('load', function () {
							navigator.serviceWorker.register('${prefixed("service-worker.js")}'${opts});
						});
					}`);
    }
    const init_app = `
				{
					${blocks.join("\n\n					")}
				}
			`;
    csp.add_script(init_app);
    body += `
			<script${csp.script_needs_nonce ? ` nonce="${csp.nonce}"` : ""}>${init_app}</script>
		`;
  }
  const headers = new Headers({
    "x-sveltekit-page": "true",
    "content-type": "text/html"
  });
  if (state.prerendering) {
    const http_equiv = [];
    const csp_headers = csp.csp_provider.get_meta();
    if (csp_headers) {
      http_equiv.push(csp_headers);
    }
    if (state.prerendering.cache) {
      http_equiv.push(`<meta http-equiv="cache-control" content="${state.prerendering.cache}">`);
    }
    if (http_equiv.length > 0) {
      head = http_equiv.join("\n") + head;
    }
  } else {
    const csp_header = csp.csp_provider.get_header();
    if (csp_header) {
      headers.set("content-security-policy", csp_header);
    }
    const report_only_header = csp.report_only_provider.get_header();
    if (report_only_header) {
      headers.set("content-security-policy-report-only", report_only_header);
    }
    if (link_header_preloads.size) {
      headers.set("link", Array.from(link_header_preloads).join(", "));
    }
  }
  head += rendered.head;
  const html = options2.templates.app({
    head,
    body,
    assets: assets$1,
    nonce: (
      /** @type {string} */
      csp.nonce
    ),
    env: public_env
  });
  const transformed = await resolve_opts.transformPageChunk({
    html,
    done: true
  }) || "";
  if (!chunks) {
    headers.set("etag", `"${hash(transformed)}"`);
  }
  return !chunks ? text(transformed, {
    status,
    headers
  }) : new Response(
    new ReadableStream({
      async start(controller) {
        controller.enqueue(encoder$1.encode(transformed + "\n"));
        for await (const chunk of chunks) {
          controller.enqueue(encoder$1.encode(chunk));
        }
        controller.close();
      },
      type: "bytes"
    }),
    {
      headers: {
        "content-type": "text/html"
      }
    }
  );
}
function get_data(event, options2, nodes, global2) {
  let promise_id = 1;
  let count = 0;
  const { iterator, push, done } = create_async_iterator();
  function replacer(thing) {
    if (typeof (thing == null ? void 0 : thing.then) === "function") {
      const id = promise_id++;
      count += 1;
      thing.then(
        /** @param {any} data */
        (data) => ({ data })
      ).catch(
        /** @param {any} error */
        async (error22) => ({
          error: await handle_error_and_jsonify(event, options2, error22)
        })
      ).then(
        /**
         * @param {{data: any; error: any}} result
         */
        async ({ data, error: error22 }) => {
          count -= 1;
          let str;
          try {
            str = uneval({ id, data, error: error22 }, replacer);
          } catch (e) {
            error22 = await handle_error_and_jsonify(
              event,
              options2,
              new Error(`Failed to serialize promise while rendering ${event.route.id}`)
            );
            data = void 0;
            str = uneval({ id, data, error: error22 }, replacer);
          }
          push(`<script>${global2}.resolve(${str})</script>
`);
          if (count === 0)
            done();
        }
      );
      return `${global2}.defer(${id})`;
    }
  }
  try {
    const strings = nodes.map((node) => {
      if (!node)
        return "null";
      return `{"type":"data","data":${uneval(node.data, replacer)},${stringify_uses(node)}${node.slash ? `,"slash":${JSON.stringify(node.slash)}` : ""}}`;
    });
    return {
      data: `[${strings.join(",")}]`,
      chunks: count > 0 ? iterator : null
    };
  } catch (e) {
    throw new Error(clarify_devalue_error(
      event,
      /** @type {any} */
      e
    ));
  }
}
function get_option(nodes, option) {
  return nodes.reduce(
    (value, node) => {
      var _a, _b;
      return (
        /** @type {Value} TypeScript's too dumb to understand this */
        ((_a = node == null ? void 0 : node.universal) == null ? void 0 : _a[option]) ?? ((_b = node == null ? void 0 : node.server) == null ? void 0 : _b[option]) ?? value
      );
    },
    /** @type {Value | undefined} */
    void 0
  );
}
async function respond_with_error({
  event,
  options: options2,
  manifest: manifest2,
  state,
  status,
  error: error22,
  resolve_opts
}) {
  if (event.request.headers.get("x-sveltekit-error")) {
    return static_error_page(
      options2,
      status,
      /** @type {Error} */
      error22.message
    );
  }
  const fetched = [];
  try {
    const branch = [];
    const default_layout = await manifest2._.nodes[0]();
    const ssr2 = get_option([default_layout], "ssr") ?? true;
    const csr = get_option([default_layout], "csr") ?? true;
    if (ssr2) {
      state.error = true;
      const server_data_promise = load_server_data({
        event,
        state,
        node: default_layout,
        parent: async () => ({}),
        track_server_fetches: options2.track_server_fetches
      });
      const server_data = await server_data_promise;
      const data = await load_data({
        event,
        fetched,
        node: default_layout,
        parent: async () => ({}),
        resolve_opts,
        server_data_promise,
        state,
        csr
      });
      branch.push(
        {
          node: default_layout,
          server_data,
          data
        },
        {
          node: await manifest2._.nodes[1](),
          // 1 is always the root error
          data: null,
          server_data: null
        }
      );
    }
    return await render_response({
      options: options2,
      manifest: manifest2,
      state,
      page_config: {
        ssr: ssr2,
        csr: get_option([default_layout], "csr") ?? true
      },
      status,
      error: await handle_error_and_jsonify(event, options2, error22),
      branch,
      fetched,
      event,
      resolve_opts
    });
  } catch (e) {
    if (e instanceof Redirect2) {
      return redirect_response(e.status, e.location);
    }
    return static_error_page(
      options2,
      e instanceof HttpError2 ? e.status : 500,
      (await handle_error_and_jsonify(event, options2, e)).message
    );
  }
}
function once(fn) {
  let done = false;
  let result;
  return () => {
    if (done)
      return result;
    done = true;
    return result = fn();
  };
}
var encoder3 = new TextEncoder();
async function render_data(event, route, options2, manifest2, state, invalidated_data_nodes, trailing_slash) {
  if (!route.page) {
    return new Response(void 0, {
      status: 404
    });
  }
  try {
    const node_ids = [...route.page.layouts, route.page.leaf];
    const invalidated = invalidated_data_nodes ?? node_ids.map(() => true);
    let aborted = false;
    const url = new URL(event.url);
    url.pathname = normalize_path(url.pathname, trailing_slash);
    const new_event = { ...event, url };
    const functions = node_ids.map((n, i) => {
      return once(async () => {
        try {
          if (aborted) {
            return (
              /** @type {import('types').ServerDataSkippedNode} */
              {
                type: "skip"
              }
            );
          }
          const node = n == void 0 ? n : await manifest2._.nodes[n]();
          return load_server_data({
            event: new_event,
            state,
            node,
            parent: async () => {
              const data2 = {};
              for (let j = 0; j < i; j += 1) {
                const parent = (
                  /** @type {import('types').ServerDataNode | null} */
                  await functions[j]()
                );
                if (parent) {
                  Object.assign(data2, parent.data);
                }
              }
              return data2;
            },
            track_server_fetches: options2.track_server_fetches
          });
        } catch (e) {
          aborted = true;
          throw e;
        }
      });
    });
    const promises = functions.map(async (fn, i) => {
      if (!invalidated[i]) {
        return (
          /** @type {import('types').ServerDataSkippedNode} */
          {
            type: "skip"
          }
        );
      }
      return fn();
    });
    let length = promises.length;
    const nodes = await Promise.all(
      promises.map(
        (p, i) => p.catch(async (error22) => {
          if (error22 instanceof Redirect2) {
            throw error22;
          }
          length = Math.min(length, i + 1);
          return (
            /** @type {import('types').ServerErrorNode} */
            {
              type: "error",
              error: await handle_error_and_jsonify(event, options2, error22),
              status: error22 instanceof HttpError2 ? error22.status : void 0
            }
          );
        })
      )
    );
    const { data, chunks } = get_data_json(event, options2, nodes);
    if (!chunks) {
      return json_response(data);
    }
    return new Response(
      new ReadableStream({
        async start(controller) {
          controller.enqueue(encoder3.encode(data));
          for await (const chunk of chunks) {
            controller.enqueue(encoder3.encode(chunk));
          }
          controller.close();
        },
        type: "bytes"
      }),
      {
        headers: {
          // we use a proprietary content type to prevent buffering.
          // the `text` prefix makes it inspectable
          "content-type": "text/sveltekit-data",
          "cache-control": "private, no-store"
        }
      }
    );
  } catch (e) {
    const error22 = normalize_error(e);
    if (error22 instanceof Redirect2) {
      return redirect_json_response(error22);
    } else {
      return json_response(await handle_error_and_jsonify(event, options2, error22), 500);
    }
  }
}
function json_response(json2, status = 200) {
  return text(typeof json2 === "string" ? json2 : JSON.stringify(json2), {
    status,
    headers: {
      "content-type": "application/json",
      "cache-control": "private, no-store"
    }
  });
}
function redirect_json_response(redirect) {
  return json_response({
    type: "redirect",
    location: redirect.location
  });
}
function get_data_json(event, options2, nodes) {
  let promise_id = 1;
  let count = 0;
  const { iterator, push, done } = create_async_iterator();
  const reducers = {
    /** @param {any} thing */
    Promise: (thing) => {
      if (typeof (thing == null ? void 0 : thing.then) === "function") {
        const id = promise_id++;
        count += 1;
        let key2 = "data";
        thing.catch(
          /** @param {any} e */
          async (e) => {
            key2 = "error";
            return handle_error_and_jsonify(
              event,
              options2,
              /** @type {any} */
              e
            );
          }
        ).then(
          /** @param {any} value */
          async (value) => {
            let str;
            try {
              str = stringify(value, reducers);
            } catch (e) {
              const error22 = await handle_error_and_jsonify(
                event,
                options2,
                new Error(`Failed to serialize promise while rendering ${event.route.id}`)
              );
              key2 = "error";
              str = stringify(error22, reducers);
            }
            count -= 1;
            push(`{"type":"chunk","id":${id},"${key2}":${str}}
`);
            if (count === 0)
              done();
          }
        );
        return id;
      }
    }
  };
  try {
    const strings = nodes.map((node) => {
      if (!node)
        return "null";
      if (node.type === "error" || node.type === "skip") {
        return JSON.stringify(node);
      }
      return `{"type":"data","data":${stringify(node.data, reducers)},${stringify_uses(
        node
      )}${node.slash ? `,"slash":${JSON.stringify(node.slash)}` : ""}}`;
    });
    return {
      data: `{"type":"data","nodes":[${strings.join(",")}]}
`,
      chunks: count > 0 ? iterator : null
    };
  } catch (e) {
    throw new Error(clarify_devalue_error(
      event,
      /** @type {any} */
      e
    ));
  }
}
var MAX_DEPTH = 10;
async function render_page(event, page2, options2, manifest2, state, resolve_opts) {
  if (state.depth > MAX_DEPTH) {
    return text(`Not found: ${event.url.pathname}`, {
      status: 404
      // TODO in some cases this should be 500. not sure how to differentiate
    });
  }
  if (is_action_json_request(event)) {
    const node = await manifest2._.nodes[page2.leaf]();
    return handle_action_json_request(event, options2, node == null ? void 0 : node.server);
  }
  try {
    const nodes = await Promise.all([
      // we use == here rather than === because [undefined] serializes as "[null]"
      ...page2.layouts.map((n) => n == void 0 ? n : manifest2._.nodes[n]()),
      manifest2._.nodes[page2.leaf]()
    ]);
    const leaf_node = (
      /** @type {import('types').SSRNode} */
      nodes.at(-1)
    );
    let status = 200;
    let action_result = void 0;
    if (is_action_request(event)) {
      action_result = await handle_action_request(event, leaf_node.server);
      if ((action_result == null ? void 0 : action_result.type) === "redirect") {
        return redirect_response(action_result.status, action_result.location);
      }
      if ((action_result == null ? void 0 : action_result.type) === "error") {
        const error22 = action_result.error;
        status = error22 instanceof HttpError2 ? error22.status : 500;
      }
      if ((action_result == null ? void 0 : action_result.type) === "failure") {
        status = action_result.status;
      }
    }
    const should_prerender_data = nodes.some((node) => node == null ? void 0 : node.server);
    const data_pathname = add_data_suffix(event.url.pathname);
    const should_prerender = get_option(nodes, "prerender") ?? false;
    if (should_prerender) {
      const mod = leaf_node.server;
      if (mod == null ? void 0 : mod.actions) {
        throw new Error("Cannot prerender pages with actions");
      }
    } else if (state.prerendering) {
      return new Response(void 0, {
        status: 204
      });
    }
    state.prerender_default = should_prerender;
    const fetched = [];
    if (get_option(nodes, "ssr") === false && !state.prerendering) {
      return await render_response({
        branch: [],
        fetched,
        page_config: {
          ssr: false,
          csr: get_option(nodes, "csr") ?? true
        },
        status,
        error: null,
        event,
        options: options2,
        manifest: manifest2,
        state,
        resolve_opts
      });
    }
    const branch = [];
    let load_error = null;
    const server_promises = nodes.map((node, i) => {
      if (load_error) {
        throw load_error;
      }
      return Promise.resolve().then(async () => {
        try {
          if (node === leaf_node && (action_result == null ? void 0 : action_result.type) === "error") {
            throw action_result.error;
          }
          return await load_server_data({
            event,
            state,
            node,
            parent: async () => {
              const data = {};
              for (let j = 0; j < i; j += 1) {
                const parent = await server_promises[j];
                if (parent)
                  Object.assign(data, await parent.data);
              }
              return data;
            },
            track_server_fetches: options2.track_server_fetches
          });
        } catch (e) {
          load_error = /** @type {Error} */
          e;
          throw load_error;
        }
      });
    });
    const csr = get_option(nodes, "csr") ?? true;
    const load_promises = nodes.map((node, i) => {
      if (load_error)
        throw load_error;
      return Promise.resolve().then(async () => {
        try {
          return await load_data({
            event,
            fetched,
            node,
            parent: async () => {
              const data = {};
              for (let j = 0; j < i; j += 1) {
                Object.assign(data, await load_promises[j]);
              }
              return data;
            },
            resolve_opts,
            server_data_promise: server_promises[i],
            state,
            csr
          });
        } catch (e) {
          load_error = /** @type {Error} */
          e;
          throw load_error;
        }
      });
    });
    for (const p of server_promises)
      p.catch(() => {
      });
    for (const p of load_promises)
      p.catch(() => {
      });
    for (let i = 0; i < nodes.length; i += 1) {
      const node = nodes[i];
      if (node) {
        try {
          const server_data = await server_promises[i];
          const data = await load_promises[i];
          branch.push({ node, server_data, data });
        } catch (e) {
          const err = normalize_error(e);
          if (err instanceof Redirect2) {
            if (state.prerendering && should_prerender_data) {
              const body = JSON.stringify({
                type: "redirect",
                location: err.location
              });
              state.prerendering.dependencies.set(data_pathname, {
                response: text(body),
                body
              });
            }
            return redirect_response(err.status, err.location);
          }
          const status2 = err instanceof HttpError2 ? err.status : 500;
          const error22 = await handle_error_and_jsonify(event, options2, err);
          while (i--) {
            if (page2.errors[i]) {
              const index13 = (
                /** @type {number} */
                page2.errors[i]
              );
              const node2 = await manifest2._.nodes[index13]();
              let j = i;
              while (!branch[j])
                j -= 1;
              return await render_response({
                event,
                options: options2,
                manifest: manifest2,
                state,
                resolve_opts,
                page_config: { ssr: true, csr: true },
                status: status2,
                error: error22,
                branch: compact(branch.slice(0, j + 1)).concat({
                  node: node2,
                  data: null,
                  server_data: null
                }),
                fetched
              });
            }
          }
          return static_error_page(options2, status2, error22.message);
        }
      } else {
        branch.push(null);
      }
    }
    if (state.prerendering && should_prerender_data) {
      let { data, chunks } = get_data_json(
        event,
        options2,
        branch.map((node) => node == null ? void 0 : node.server_data)
      );
      if (chunks) {
        for await (const chunk of chunks) {
          data += chunk;
        }
      }
      state.prerendering.dependencies.set(data_pathname, {
        response: text(data),
        body: data
      });
    }
    return await render_response({
      event,
      options: options2,
      manifest: manifest2,
      state,
      resolve_opts,
      page_config: {
        csr: get_option(nodes, "csr") ?? true,
        ssr: get_option(nodes, "ssr") ?? true
      },
      status,
      error: null,
      branch: compact(branch),
      action_result,
      fetched
    });
  } catch (e) {
    return await respond_with_error({
      event,
      options: options2,
      manifest: manifest2,
      state,
      status: 500,
      error: e,
      resolve_opts
    });
  }
}
function deprecate_missing_path(opts, method) {
  if (opts.path === void 0) {
    warn_with_callsite(
      `Calling \`cookies.${method}(...)\` without specifying a \`path\` is deprecated, and will be disallowed in SvelteKit 2.0. Relative paths can be used`,
      1
    );
  }
  if (opts.path === "") {
    warn_with_callsite(
      `Calling \`cookies.${method}(...)\` with \`path: ''\` will behave differently in SvelteKit 2.0. Instead of using the browser default behaviour, it will set the cookie path to the current pathname`,
      1
    );
  }
}
function get_cookies(request, url, trailing_slash) {
  const header = request.headers.get("cookie") ?? "";
  const initial_cookies = (0, import_cookie.parse)(header, { decode: (value) => value });
  const normalized_url = normalize_path(url.pathname, trailing_slash);
  const default_path = normalized_url.split("/").slice(0, -1).join("/") || "/";
  const new_cookies = {};
  const defaults = {
    httpOnly: true,
    sameSite: "lax",
    secure: url.hostname === "localhost" && url.protocol === "http:" ? false : true
  };
  const cookies = {
    // The JSDoc param annotations appearing below for get, set and delete
    // are necessary to expose the `cookie` library types to
    // typescript users. `@type {import('@sveltejs/kit').Cookies}` above is not
    // sufficient to do so.
    /**
     * @param {string} name
     * @param {import('cookie').CookieParseOptions} opts
     */
    get(name, opts) {
      const c = new_cookies[name];
      if (c && domain_matches(url.hostname, c.options.domain) && path_matches(url.pathname, c.options.path)) {
        return c.value;
      }
      const decoder = (opts == null ? void 0 : opts.decode) || decodeURIComponent;
      const req_cookies = (0, import_cookie.parse)(header, { decode: decoder });
      const cookie = req_cookies[name];
      return cookie;
    },
    /**
     * @param {import('cookie').CookieParseOptions} opts
     */
    getAll(opts) {
      const decoder = (opts == null ? void 0 : opts.decode) || decodeURIComponent;
      const cookies2 = (0, import_cookie.parse)(header, { decode: decoder });
      for (const c of Object.values(new_cookies)) {
        if (domain_matches(url.hostname, c.options.domain) && path_matches(url.pathname, c.options.path)) {
          cookies2[c.name] = c.value;
        }
      }
      return Object.entries(cookies2).map(([name, value]) => ({ name, value }));
    },
    /**
     * @param {string} name
     * @param {string} value
     * @param {import('cookie').CookieSerializeOptions} opts
     */
    set(name, value, opts = {}) {
      deprecate_missing_path(opts, "set");
      set_internal(name, value, { ...defaults, ...opts });
    },
    /**
     * @param {string} name
     * @param {import('cookie').CookieSerializeOptions} opts
     */
    delete(name, opts = {}) {
      deprecate_missing_path(opts, "delete");
      cookies.set(name, "", {
        path: default_path,
        // TODO 2.0 remove this
        ...opts,
        maxAge: 0
      });
    },
    /**
     * @param {string} name
     * @param {string} value
     * @param {import('cookie').CookieSerializeOptions} opts
     */
    serialize(name, value, opts = {}) {
      deprecate_missing_path(opts, "serialize");
      return (0, import_cookie.serialize)(name, value, {
        ...defaults,
        ...opts
      });
    }
  };
  function get_cookie_header(destination, header2) {
    const combined_cookies = {
      // cookies sent by the user agent have lowest precedence
      ...initial_cookies
    };
    for (const key2 in new_cookies) {
      const cookie = new_cookies[key2];
      if (!domain_matches(destination.hostname, cookie.options.domain))
        continue;
      if (!path_matches(destination.pathname, cookie.options.path))
        continue;
      const encoder22 = cookie.options.encode || encodeURIComponent;
      combined_cookies[cookie.name] = encoder22(cookie.value);
    }
    if (header2) {
      const parsed = (0, import_cookie.parse)(header2, { decode: (value) => value });
      for (const name in parsed) {
        combined_cookies[name] = parsed[name];
      }
    }
    return Object.entries(combined_cookies).map(([name, value]) => `${name}=${value}`).join("; ");
  }
  function set_internal(name, value, opts) {
    let path2 = opts.path;
    if (!opts.domain || opts.domain === url.hostname) {
      if (path2) {
        if (path2[0] === ".")
          path2 = resolve(url.pathname, path2);
      } else {
        path2 = default_path;
      }
    }
    new_cookies[name] = {
      name,
      value,
      options: {
        ...opts,
        path: path2
      }
    };
  }
  return { cookies, new_cookies, get_cookie_header, set_internal };
}
function domain_matches(hostname, constraint) {
  if (!constraint)
    return true;
  const normalized = constraint[0] === "." ? constraint.slice(1) : constraint;
  if (hostname === normalized)
    return true;
  return hostname.endsWith("." + normalized);
}
function path_matches(path2, constraint) {
  if (!constraint)
    return true;
  const normalized = constraint.endsWith("/") ? constraint.slice(0, -1) : constraint;
  if (path2 === normalized)
    return true;
  return path2.startsWith(normalized + "/");
}
function add_cookies_to_headers(headers, cookies) {
  for (const new_cookie of cookies) {
    const { name, value, options: options2 } = new_cookie;
    headers.append("set-cookie", (0, import_cookie.serialize)(name, value, options2));
  }
}
function create_fetch({ event, options: options2, manifest: manifest2, state, get_cookie_header, set_internal }) {
  const server_fetch = async (info, init2) => {
    const original_request = normalize_fetch_input(info, init2, event.url);
    let mode = (info instanceof Request ? info.mode : init2 == null ? void 0 : init2.mode) ?? "cors";
    let credentials = (info instanceof Request ? info.credentials : init2 == null ? void 0 : init2.credentials) ?? "same-origin";
    return options2.hooks.handleFetch({
      event,
      request: original_request,
      fetch: async (info2, init3) => {
        const request = normalize_fetch_input(info2, init3, event.url);
        const url = new URL(request.url);
        if (!request.headers.has("origin")) {
          request.headers.set("origin", event.url.origin);
        }
        if (info2 !== original_request) {
          mode = (info2 instanceof Request ? info2.mode : init3 == null ? void 0 : init3.mode) ?? "cors";
          credentials = (info2 instanceof Request ? info2.credentials : init3 == null ? void 0 : init3.credentials) ?? "same-origin";
        }
        if ((request.method === "GET" || request.method === "HEAD") && (mode === "no-cors" && url.origin !== event.url.origin || url.origin === event.url.origin)) {
          request.headers.delete("origin");
        }
        if (url.origin !== event.url.origin) {
          if (`.${url.hostname}`.endsWith(`.${event.url.hostname}`) && credentials !== "omit") {
            const cookie = get_cookie_header(url, request.headers.get("cookie"));
            if (cookie)
              request.headers.set("cookie", cookie);
          }
          return fetch(request);
        }
        const prefix = assets || base;
        const decoded = decodeURIComponent(url.pathname);
        const filename = (decoded.startsWith(prefix) ? decoded.slice(prefix.length) : decoded).slice(1);
        const filename_html = `${filename}/index.html`;
        const is_asset = manifest2.assets.has(filename);
        const is_asset_html = manifest2.assets.has(filename_html);
        if (is_asset || is_asset_html) {
          const file = is_asset ? filename : filename_html;
          if (state.read) {
            const type = is_asset ? manifest2.mimeTypes[filename.slice(filename.lastIndexOf("."))] : "text/html";
            return new Response(state.read(file), {
              headers: type ? { "content-type": type } : {}
            });
          }
          return await fetch(request);
        }
        if (credentials !== "omit") {
          const cookie = get_cookie_header(url, request.headers.get("cookie"));
          if (cookie) {
            request.headers.set("cookie", cookie);
          }
          const authorization = event.request.headers.get("authorization");
          if (authorization && !request.headers.has("authorization")) {
            request.headers.set("authorization", authorization);
          }
        }
        if (!request.headers.has("accept")) {
          request.headers.set("accept", "*/*");
        }
        if (!request.headers.has("accept-language")) {
          request.headers.set(
            "accept-language",
            /** @type {string} */
            event.request.headers.get("accept-language")
          );
        }
        const response = await respond(request, options2, manifest2, {
          ...state,
          depth: state.depth + 1
        });
        const set_cookie = response.headers.get("set-cookie");
        if (set_cookie) {
          for (const str of set_cookie_parser2.splitCookiesString(set_cookie)) {
            const { name, value, ...options3 } = set_cookie_parser2.parseString(str);
            set_internal(
              name,
              value,
              /** @type {import('cookie').CookieSerializeOptions} */
              options3
            );
          }
        }
        return response;
      }
    });
  };
  return (input, init2) => {
    const response = server_fetch(input, init2);
    response.catch(() => {
    });
    return response;
  };
}
function normalize_fetch_input(info, init2, url) {
  if (info instanceof Request) {
    return info;
  }
  return new Request(typeof info === "string" ? new URL(info, url) : info, init2);
}
function validator(expected) {
  function validate(module2, file) {
    if (!module2)
      return;
    for (const key2 in module2) {
      if (key2[0] === "_" || expected.has(key2))
        continue;
      const values = [...expected.values()];
      const hint = hint_for_supported_files(key2, file == null ? void 0 : file.slice(file.lastIndexOf("."))) ?? `valid exports are ${values.join(", ")}, or anything with a '_' prefix`;
      throw new Error(`Invalid export '${key2}'${file ? ` in ${file}` : ""} (${hint})`);
    }
  }
  return validate;
}
function hint_for_supported_files(key2, ext = ".js") {
  const supported_files = [];
  if (valid_layout_exports.has(key2)) {
    supported_files.push(`+layout${ext}`);
  }
  if (valid_page_exports.has(key2)) {
    supported_files.push(`+page${ext}`);
  }
  if (valid_layout_server_exports.has(key2)) {
    supported_files.push(`+layout.server${ext}`);
  }
  if (valid_page_server_exports.has(key2)) {
    supported_files.push(`+page.server${ext}`);
  }
  if (valid_server_exports.has(key2)) {
    supported_files.push(`+server${ext}`);
  }
  if (supported_files.length > 0) {
    return `'${key2}' is a valid export in ${supported_files.slice(0, -1).join(", ")}${supported_files.length > 1 ? " or " : ""}${supported_files.at(-1)}`;
  }
}
var valid_layout_exports = /* @__PURE__ */ new Set([
  "load",
  "prerender",
  "csr",
  "ssr",
  "trailingSlash",
  "config"
]);
var valid_page_exports = /* @__PURE__ */ new Set([...valid_layout_exports, "entries"]);
var valid_layout_server_exports = /* @__PURE__ */ new Set([...valid_layout_exports]);
var valid_page_server_exports = /* @__PURE__ */ new Set([...valid_layout_server_exports, "actions", "entries"]);
var valid_server_exports = /* @__PURE__ */ new Set([
  "GET",
  "POST",
  "PATCH",
  "PUT",
  "DELETE",
  "OPTIONS",
  "HEAD",
  "fallback",
  "prerender",
  "trailingSlash",
  "config",
  "entries"
]);
var validate_layout_exports = validator(valid_layout_exports);
var validate_page_exports = validator(valid_page_exports);
var validate_layout_server_exports = validator(valid_layout_server_exports);
var validate_page_server_exports = validator(valid_page_server_exports);
var validate_server_exports = validator(valid_server_exports);
var default_transform = ({ html }) => html;
var default_filter = () => false;
var default_preload = ({ type }) => type === "js" || type === "css";
var page_methods = /* @__PURE__ */ new Set(["GET", "HEAD", "POST"]);
var allowed_page_methods = /* @__PURE__ */ new Set(["GET", "HEAD", "OPTIONS"]);
async function respond(request, options2, manifest2, state) {
  var _a, _b, _c, _d;
  const url = new URL(request.url);
  if (options2.csrf_check_origin) {
    const forbidden = is_form_content_type(request) && (request.method === "POST" || request.method === "PUT" || request.method === "PATCH" || request.method === "DELETE") && request.headers.get("origin") !== url.origin;
    if (forbidden) {
      const csrf_error = error2(403, `Cross-site ${request.method} form submissions are forbidden`);
      if (request.headers.get("accept") === "application/json") {
        return json(csrf_error.body, { status: csrf_error.status });
      }
      return text(csrf_error.body.message, { status: csrf_error.status });
    }
  }
  let decoded;
  try {
    decoded = decode_pathname(url.pathname);
  } catch {
    return text("Malformed URI", { status: 400 });
  }
  let route = null;
  let params = {};
  if (base && !((_a = state.prerendering) == null ? void 0 : _a.fallback)) {
    if (!decoded.startsWith(base)) {
      return text("Not found", { status: 404 });
    }
    decoded = decoded.slice(base.length) || "/";
  }
  const is_data_request = has_data_suffix(decoded);
  let invalidated_data_nodes;
  if (is_data_request) {
    decoded = strip_data_suffix(decoded) || "/";
    url.pathname = strip_data_suffix(url.pathname) + (url.searchParams.get(TRAILING_SLASH_PARAM) === "1" ? "/" : "") || "/";
    url.searchParams.delete(TRAILING_SLASH_PARAM);
    invalidated_data_nodes = (_b = url.searchParams.get(INVALIDATED_PARAM)) == null ? void 0 : _b.split("").map((node) => node === "1");
    url.searchParams.delete(INVALIDATED_PARAM);
  }
  if (!((_c = state.prerendering) == null ? void 0 : _c.fallback)) {
    const matchers = await manifest2._.matchers();
    for (const candidate of manifest2._.routes) {
      const match = candidate.pattern.exec(decoded);
      if (!match)
        continue;
      const matched = exec(match, candidate.params, matchers);
      if (matched) {
        route = candidate;
        params = decode_params(matched);
        break;
      }
    }
  }
  let trailing_slash = void 0;
  const headers = {};
  let cookies_to_add = {};
  const event = {
    // @ts-expect-error `cookies` and `fetch` need to be created after the `event` itself
    cookies: null,
    // @ts-expect-error
    fetch: null,
    getClientAddress: state.getClientAddress || (() => {
      throw new Error(
        `${"svelte-adapter-appengine"} does not specify getClientAddress. Please raise an issue`
      );
    }),
    locals: {},
    params,
    platform: state.platform,
    request,
    route: { id: (route == null ? void 0 : route.id) ?? null },
    setHeaders: (new_headers) => {
      for (const key2 in new_headers) {
        const lower = key2.toLowerCase();
        const value = new_headers[key2];
        if (lower === "set-cookie") {
          throw new Error(
            "Use `event.cookies.set(name, value, options)` instead of `event.setHeaders` to set cookies"
          );
        } else if (lower in headers) {
          throw new Error(`"${key2}" header is already set`);
        } else {
          headers[lower] = value;
          if (state.prerendering && lower === "cache-control") {
            state.prerendering.cache = /** @type {string} */
            value;
          }
        }
      }
    },
    url,
    isDataRequest: is_data_request,
    isSubRequest: state.depth > 0
  };
  let resolve_opts = {
    transformPageChunk: default_transform,
    filterSerializedResponseHeaders: default_filter,
    preload: default_preload
  };
  try {
    if (route) {
      if (url.pathname === base || url.pathname === base + "/") {
        trailing_slash = "always";
      } else if (route.page) {
        const nodes = await Promise.all([
          // we use == here rather than === because [undefined] serializes as "[null]"
          ...route.page.layouts.map((n) => n == void 0 ? n : manifest2._.nodes[n]()),
          manifest2._.nodes[route.page.leaf]()
        ]);
        if (DEV2)
          ;
        trailing_slash = get_option(nodes, "trailingSlash");
      } else if (route.endpoint) {
        const node = await route.endpoint();
        trailing_slash = node.trailingSlash;
        if (DEV2)
          ;
      }
      if (!is_data_request) {
        const normalized = normalize_path(url.pathname, trailing_slash ?? "never");
        if (normalized !== url.pathname && !((_d = state.prerendering) == null ? void 0 : _d.fallback)) {
          return new Response(void 0, {
            status: 308,
            headers: {
              "x-sveltekit-normalize": "1",
              location: (
                // ensure paths starting with '//' are not treated as protocol-relative
                (normalized.startsWith("//") ? url.origin + normalized : normalized) + (url.search === "?" ? "" : url.search)
              )
            }
          });
        }
      }
    }
    const { cookies, new_cookies, get_cookie_header, set_internal } = get_cookies(
      request,
      url,
      trailing_slash ?? "never"
    );
    cookies_to_add = new_cookies;
    event.cookies = cookies;
    event.fetch = create_fetch({
      event,
      options: options2,
      manifest: manifest2,
      state,
      get_cookie_header,
      set_internal
    });
    if (state.prerendering && !state.prerendering.fallback)
      disable_search(url);
    const response = await options2.hooks.handle({
      event,
      resolve: (event2, opts) => resolve2(event2, opts).then((response2) => {
        for (const key2 in headers) {
          const value = headers[key2];
          response2.headers.set(
            key2,
            /** @type {string} */
            value
          );
        }
        add_cookies_to_headers(response2.headers, Object.values(cookies_to_add));
        if (state.prerendering && event2.route.id !== null) {
          response2.headers.set("x-sveltekit-routeid", encodeURI(event2.route.id));
        }
        return response2;
      })
    });
    if (response.status === 200 && response.headers.has("etag")) {
      let if_none_match_value = request.headers.get("if-none-match");
      if (if_none_match_value == null ? void 0 : if_none_match_value.startsWith('W/"')) {
        if_none_match_value = if_none_match_value.substring(2);
      }
      const etag = (
        /** @type {string} */
        response.headers.get("etag")
      );
      if (if_none_match_value === etag) {
        const headers2 = new Headers({ etag });
        for (const key2 of [
          "cache-control",
          "content-location",
          "date",
          "expires",
          "vary",
          "set-cookie"
        ]) {
          const value = response.headers.get(key2);
          if (value)
            headers2.set(key2, value);
        }
        return new Response(void 0, {
          status: 304,
          headers: headers2
        });
      }
    }
    if (is_data_request && response.status >= 300 && response.status <= 308) {
      const location = response.headers.get("location");
      if (location) {
        return redirect_json_response(new Redirect2(
          /** @type {any} */
          response.status,
          location
        ));
      }
    }
    return response;
  } catch (e) {
    if (e instanceof Redirect2) {
      const response = is_data_request ? redirect_json_response(e) : (route == null ? void 0 : route.page) && is_action_json_request(event) ? action_json_redirect(e) : redirect_response(e.status, e.location);
      add_cookies_to_headers(response.headers, Object.values(cookies_to_add));
      return response;
    }
    return await handle_fatal_error(event, options2, e);
  }
  async function resolve2(event2, opts) {
    var _a2, _b2, _c2, _d2;
    try {
      if (opts) {
        if ("ssr" in opts) {
          throw new Error(
            "ssr has been removed, set it in the appropriate +layout.js instead. See the PR for more information: https://github.com/sveltejs/kit/pull/6197"
          );
        }
        resolve_opts = {
          transformPageChunk: opts.transformPageChunk || default_transform,
          filterSerializedResponseHeaders: opts.filterSerializedResponseHeaders || default_filter,
          preload: opts.preload || default_preload
        };
      }
      if ((_a2 = state.prerendering) == null ? void 0 : _a2.fallback) {
        return await render_response({
          event: event2,
          options: options2,
          manifest: manifest2,
          state,
          page_config: { ssr: false, csr: true },
          status: 200,
          error: null,
          branch: [],
          fetched: [],
          resolve_opts
        });
      }
      if (route) {
        const method = (
          /** @type {import('types').HttpMethod} */
          event2.request.method
        );
        let response;
        if (is_data_request) {
          response = await render_data(
            event2,
            route,
            options2,
            manifest2,
            state,
            invalidated_data_nodes,
            trailing_slash ?? "never"
          );
        } else if (route.endpoint && (!route.page || is_endpoint_request(event2))) {
          response = await render_endpoint(event2, await route.endpoint(), state);
        } else if (route.page) {
          if (page_methods.has(method)) {
            response = await render_page(event2, route.page, options2, manifest2, state, resolve_opts);
          } else {
            const allowed_methods2 = new Set(allowed_page_methods);
            const node = await manifest2._.nodes[route.page.leaf]();
            if ((_b2 = node == null ? void 0 : node.server) == null ? void 0 : _b2.actions) {
              allowed_methods2.add("POST");
            }
            if (method === "OPTIONS") {
              response = new Response(null, {
                status: 204,
                headers: {
                  allow: Array.from(allowed_methods2.values()).join(", ")
                }
              });
            } else {
              const mod = [...allowed_methods2].reduce(
                (acc, curr) => {
                  acc[curr] = true;
                  return acc;
                },
                /** @type {Record<string, any>} */
                {}
              );
              response = method_not_allowed(mod, method);
            }
          }
        } else {
          throw new Error("This should never happen");
        }
        if (request.method === "GET" && route.page && route.endpoint) {
          const vary = (_d2 = (_c2 = response.headers.get("vary")) == null ? void 0 : _c2.split(",")) == null ? void 0 : _d2.map((v) => v.trim().toLowerCase());
          if (!((vary == null ? void 0 : vary.includes("accept")) || (vary == null ? void 0 : vary.includes("*")))) {
            response = new Response(response.body, {
              status: response.status,
              statusText: response.statusText,
              headers: new Headers(response.headers)
            });
            response.headers.append("Vary", "Accept");
          }
        }
        return response;
      }
      if (state.error && event2.isSubRequest) {
        return await fetch(request, {
          headers: {
            "x-sveltekit-error": "true"
          }
        });
      }
      if (state.error) {
        return text("Internal Server Error", {
          status: 500
        });
      }
      if (state.depth === 0) {
        return await respond_with_error({
          event: event2,
          options: options2,
          manifest: manifest2,
          state,
          status: 404,
          error: new NotFound(event2.url.pathname),
          resolve_opts
        });
      }
      if (state.prerendering) {
        return text("not found", { status: 404 });
      }
      return await fetch(request);
    } catch (e) {
      return await handle_fatal_error(event2, options2, e);
    } finally {
      event2.cookies.set = () => {
        throw new Error("Cannot use `cookies.set(...)` after the response has been generated");
      };
      event2.setHeaders = () => {
        throw new Error("Cannot use `setHeaders(...)` after the response has been generated");
      };
    }
  }
}
function filter_private_env(env, { public_prefix, private_prefix }) {
  return Object.fromEntries(
    Object.entries(env).filter(
      ([k]) => k.startsWith(private_prefix) && (public_prefix === "" || !k.startsWith(public_prefix))
    )
  );
}
function filter_public_env(env, { public_prefix, private_prefix }) {
  return Object.fromEntries(
    Object.entries(env).filter(
      ([k]) => k.startsWith(public_prefix) && (private_prefix === "" || !k.startsWith(private_prefix))
    )
  );
}
var Server = class {
  /** @type {import('types').SSROptions} */
  #options;
  /** @type {import('@sveltejs/kit').SSRManifest} */
  #manifest;
  /** @param {import('@sveltejs/kit').SSRManifest} manifest */
  constructor(manifest2) {
    this.#options = options;
    this.#manifest = manifest2;
  }
  /**
   * @param {{
   *   env: Record<string, string>
   * }} opts
   */
  async init({ env }) {
    set_private_env(
      filter_private_env(env, {
        public_prefix: this.#options.env_public_prefix,
        private_prefix: this.#options.env_private_prefix
      })
    );
    set_public_env(
      filter_public_env(env, {
        public_prefix: this.#options.env_public_prefix,
        private_prefix: this.#options.env_private_prefix
      })
    );
    if (!this.#options.hooks) {
      try {
        const module2 = await get_hooks();
        this.#options.hooks = {
          handle: module2.handle || (({ event, resolve: resolve2 }) => resolve2(event)),
          handleError: module2.handleError || (({ error: error22 }) => console.error(error22)),
          handleFetch: module2.handleFetch || (({ request, fetch: fetch22 }) => fetch22(request))
        };
      } catch (error22) {
        {
          throw error22;
        }
      }
    }
  }
  /**
   * @param {Request} request
   * @param {import('types').RequestOptions} options
   */
  async respond(request, options2) {
    if (!(request instanceof Request)) {
      throw new Error(
        "The first argument to server.respond must be a Request object. See https://github.com/sveltejs/kit/pull/3384 for details"
      );
    }
    return respond(request, this.#options, this.#manifest, {
      ...options2,
      error: false,
      depth: 0
    });
  }
};

// .svelte-kit/svelte-adapter-appengine/entry.js
var tracerMiddleware = (_, __, next) => next();
installPolyfills();
var server = new Server(manifest);
var staticServe = (0, import_sirv.default)(import_node_path.default.join(__dirname, "storage"), {
  etag: true,
  maxAge: 0,
  immutable: false,
  gzip: true,
  brotli: true
});
var ssr = async (request_, response) => {
  let request;
  try {
    request = await getRequest(
      { base: getBase(request_.headers), request: request_ }
    );
  } catch (error3) {
    response.statusCode = error3.status || 400;
    response.end(error3.reason || "Invalid request body");
    return;
  }
  setResponse(response, await server.respond(request, {
    getClientAddress() {
      return request.headers.get("x-forwarded-for");
    }
  }));
};
function getBase(headers) {
  const host = headers.host;
  const isLocalhost = host.split(":")[0] === "localhost";
  const protocol = headers["x-forwarded-proto"] || (isLocalhost ? "http" : "https");
  return `${protocol}://${host}`;
}
function handleAh(_request, response) {
  response.statusCode = 200;
  response.end("OK");
}
(async () => {
  if (false) {
    await setupCloudLogging();
  }
  if (false) {
    await setupCloudTracing();
  }
  const polkaServer = build_default().get("/_ah/start", handleAh).use(tracerMiddleware).use(staticServe).use(ssr);
  const port = import_node_process.default.env.PORT || 8080;
  const listenOptions = { port };
  server.init({ env: import_node_process.default.env }).then(() => {
    polkaServer.listen(listenOptions, () => {
      console.log(`Listening on ${port}`);
    });
  });
})();
/*! Bundled license information:

undici/lib/fetch/body.js:
  (*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)

undici/lib/websocket/frame.js:
  (*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> *)

contentful-management/dist/contentful-management.node.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!**********************************!*\
    !*** ./contentful-management.ts ***!
    \**********************************)

@contentful/rich-text-html-renderer/dist/rich-text-html-renderer.es5.js:
  (*!
   * escape-html
   * Copyright(c) 2012-2013 TJ Holowaychuk
   * Copyright(c) 2015 Andreas Lubbe
   * Copyright(c) 2015 Tiancheng "Timothy" Gu
   * MIT Licensed
   *)

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
//# sourceMappingURL=index.js.map
